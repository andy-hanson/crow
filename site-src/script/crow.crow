import
	crow/js: ==, as-js, as-t, await, call, call-property, get, js-any, js-global, null
	./lsp-types: diagnostic, new, text-document-item, to, tokens-legend
	./util/DataView-util: DataView, new, read-c-string, view-c-string, wasm32, write-c-string
	./util/js-util: new, to-js-object
	./util/util: fetch-js-object

-math-keys symbol[]()
	"acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2",
	"ceil", "cos", "cosh", "floor", "log", "sin", "sinh", "sqrt", "tan", "tanh"

-imports js-any(crow crow-lsp-server) summon, trusted, js extern
	res js-any mut[symbol] = ()
	res["getTimeNanos"] := (&get-time-nanos)::(nat function()) as-js
	res["perfLogMeasure"] := (&perf-log-measure)::(void function(a crow-lsp-server, name view-c-string, count wasm32, nanos nat, bytes wasm32)).as-js bind crow.as-js
	res["perfLogFinish"] := (&perf-log-finish)::(void function(a crow-lsp-server, name view-c-string, total-nanos nat)).as-js bind crow.as-js
	res["debugLog"] := (&debug-log)::(void function(a crow-lsp-server, text view-c-string)).as-js bind crow.as-js
	for key : math-keys
		value = "Math".js-global get key
		res[key] := value
		res["{key}f"] := value
	res["round"] := (&round)::(float function(x float)) as-js
	res["roundf"] := (&round)::(float32 function(x float32)) as-js
	res["__assert"] := (&__assert)::(void function(a crow-lsp-server, asserted view-c-string, file view-c-string, line float)).as-js bind crow.as-js
	res.move-to to-js-object

-bind js-any(fn js-any, arg js-any) unsafe, js extern
	fn call-property "bind", arg

-get-time-nanos nat() summon, trusted, js extern
	msec float = "performance".js-global call-property "now" as-t
	msec * 1000000 to

-perf-measure record(name string, count nat, msec nat, bytes-allocated nat)
-to json(a perf-measure)

-perf-measures global(perf-measure mut[])
-perf-log-measure void(a crow-lsp-server, name-ptr view-c-string, count wasm32, nanoseconds nat, bytes-allocated wasm32) trusted, summon, js extern
	m perf-measure = (a.view read-c-string name-ptr), count.to, nanoseconds.to-msec, bytes-allocated.to
	perf-measures ~= m
-perf-log-finish void(a crow-lsp-server, name view-c-string, total-nanos nat) trusted, summon, js extern
	info log "performance for {a.view read-c-string name}"
	info log "TOTAL: {total-nanos.to-msec}"
	for measure : perf-measures
		info log measure.to::json.to
	perf-measures := ()

-debug-log void(a crow-lsp-server, text view-c-string) summon, trusted, js extern
	info log (a.view read-c-string text)

-__assert void(a crow-lsp-server, asserted view-c-string, file view-c-string, line float) summon, trusted, js extern
	throw "Assertion {a.view read-c-string asserted} failed on {a.view read-c-string file} line {line}" error

-to-msec nat(nsec nat)
	nsec / 1000000

-wasm-exports record mut
	getParameterBufferPointer view-c-string function()
	getParameterBufferLength float function()
	newServer wasm32 mut(params view-c-string)
	handleLspMessage view-c-string mut(server wasm32, params view-c-string)
	memory js-any
-uninit wasm-exports() unsafe, js extern
	&fake-getParameterBufferPointer, &fake-getParameterBufferPointer,
		(_ => throw not-implemented), (_ => throw not-implemented),
		null
-fake-getParameterBufferPointer view-c-string()
	throw not-implemented

-as-wasm-exports wasm-exports(a js-any) unsafe, js extern
	(a get "getParameterBufferPointer" as-t), \
	(a get "getParameterBufferLength" as-t),
	(a get "newServer" as-t),
	(a get "handleLspMessage" as-fun2),
	a get "memory"
-as-fun2 view-c-string mut(server wasm32, params view-c-string)(a js-any) unsafe, js extern # this is a big gotcha. We need to untuple the args.
	(server, params) =>
		a call server, params as-t

-server-params record
	includeDir string
	cwd string
-to json(a server-params)

-make-lsp-server crow-lsp-server() summon, trusted, js extern
	res crow-lsp-server = (), 0, 0, uninit, 0
	wasm-stream = "fetch".js-global call "../bin/crow.wasm"::string
	options js-any = ("env", res.imports),
	result = "WebAssembly".js-global call-property "instantiateStreaming", wasm-stream, options await
	res.wasm := result get "instance" get "exports" as-wasm-exports
	buffer js-any = res.wasm.memory get "buffer"
	res.view := (buffer,)
	res.parameters-begin := res.wasm getParameterBufferPointer
	res.parameters-length := res.wasm.getParameterBufferLength to
	server-params server-params = include-dir, "file:///"
	res.server := res.wasm.newServer[res.view write-c-string res.parameters-begin, res.parameters-length, server-params.to::json.to]
	res

-crow-lsp-server record mut
	view mut DataView
	parameters-begin mut float
	parameters-length mut nat
	wasm mut wasm-exports
	server mut wasm32

-handle-message response(a crow-lsp-server, message js-any) summon, unsafe, js extern
	message-str string = "JSON".js-global call-property "stringify", message as-t
	message-c-str = a.view write-c-string a.parameters-begin, a.parameters-length, message-str
	response-str = a.view read-c-string a.wasm.handleLspMessage[a.server, message-c-str]
	response = "JSON".js-global call-property "parse", response-str
	messages js-any array = response get "messages" as-t
	exit-code js-any = response get "exitCode"
	messages, unless exit-code == null
		exit-code.as-t::float.to,

-request js-any(a crow-lsp-server, method symbol, params js-any) summon, unsafe, js extern
	res = a handle-message (("id", 1::float.as-js), ("method", method.as-js), ("params", params)).to-js-object
	assert res.exitCode is-empty
	res.messages.size is 1
	message = res.messages[0]
	(message get "id").as-t::float is 1
	message get "result"

-response record
	messages js-any array
	exitCode nat?

-include-dir string()
	"file:///include"

crow-server record mut
	lsp-server crow-lsp-server
	tokens-legend tokens-legend
	diagnostics-per-uri diagnostic[] mut[uri]

make-crow-server crow-server() summon, trusted, js extern
	lsp = make-lsp-server
	tokens-legend tokens-legend = lsp request "initialize", () \
		get "capabilities" get "semanticTokensProvider" get "legend" to
	res crow-server = lsp, tokens-legend, ()
	res init
	res

-init void(a crow-server) trusted, summon, js extern
	include-all = "/include-all.json" fetch-js-object
	for entry : ("Object".js-global call-property "entries", include-all).as-t::(js-any array)
		path string = entry get 0 as-t
		text string = entry get 1 as-t
		_ = a open-file "{include-dir}/{path}", text
	_ = a open-file "file:///crow-config.json", "\{}"
	_ = a open-file "file:///hello.txt", "Hello, world!"
	a mark-unknown-files-not-found

request js-any(a crow-server, method symbol, params js-any) summon, unsafe, js extern
	a.lsp-server request method, params

uri alias
	string

get-diagnostics diagnostic[](a crow-server, uri uri, response response) summon, trusted, js extern
	for message : response.messages
		method string = message get "method" as-t
		if method != "custom/unknownUris"
			method is "textDocument/publishDiagnostics"
			params = message get "params"
			diagnostics js-any array = params get "diagnostics" as-t
			a.diagnostics-per-uri[params get "uri" as-t] := for x : diagnostics; x to
	a.diagnostics-per-uri[uri] ?? ()

open-file diagnostic[](a crow-server, uri uri, text string) summon, trusted, js extern
	params js-any = (("textDocument", (uri, text)::text-document-item.as-js),)
	response = a.lsp-server handle-message ("textDocument/didOpen" make-message params)
	a get-diagnostics uri, response
change-file diagnostic[](a crow-server, uri uri, text string) summon, trusted, js extern
	textDocument js-any = ("uri", uri.as-js),
	contentChanges js-any array = (("text", text.as-js),),
	params js-any = ("textDocument", textDocument), ("contentChanges", contentChanges.as-js)
	response = a.lsp-server handle-message ("textDocument/didChange" make-message params)
	a get-diagnostics uri, response
mark-unknown-files-not-found void(a crow-server) summon, trusted, js extern
	for uri : a get-unloaded-uris
		assert uri ends-with "/crow-config.json"
		params js-any = ("uri", uri.as-js), ("type", "notFound"::string.as-js)
		_ = a.lsp-server handle-message ("custom/readFileResult" make-message params)
	assert a.get-unloaded-uris is-empty

-make-message js-any(method string, params js-any) trusted, js extern
	("method", method.as-js), ("params", params)

-get-unloaded-uris uri array(a crow-server) summon, trusted, js extern
	response = a.lsp-server request "custom/unloadedUris", ()
	response get "unloadedUris" as-t

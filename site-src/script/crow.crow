import
	crow/io/duration: nanosecond, milliseconds
	crow/js: ==, as-js, await, call, call-property, cast, js-any, js-global, null, subscript
	./decode-tokens: decode-tokens
	./lsp-types: diagnostic, line-and-character, run-result, to, to-js, token, tokens-legend
	./util/DataView-util: DataView, new, read-c-string, view-c-string, wasm32, write-c-string
	./util/js-util: json-parse, json-stringify, new, to-js-object
	./util/util: fetch-js-object

crow-server record mut
	-lsp-server crow-lsp-server
	-tokens-legend tokens-legend
	-diagnostics-per-uri diagnostic[] mut[uri]

make-crow-server crow-server() summon, trusted, js extern
	lsp = make-lsp-server
	tokens-legend tokens-legend =
		(lsp request "initialize", ())["capabilities"]["semanticTokensProvider"]["legend"] to
	res crow-server = lsp, tokens-legend, ()
	res init
	res

uri alias
	string

open-file diagnostic[](a crow-server, uri uri, text string) summon, trusted, js extern
	item js-any = ("uri", uri.as-js), ("text", text.as-js)
	params js-any = ("textDocument", item),
	response = a.lsp-server handle-message ("textDocument/didOpen" make-message params)
	a get-diagnostics uri, response

change-file diagnostic[](a crow-server, uri uri, text string) summon, trusted, js extern
	textDocument js-any = ("uri", uri.as-js),
	contentChanges js-any array = (("text", text.as-js),),
	params js-any = ("textDocument", textDocument), ("contentChanges", contentChanges.as-js)
	response = a.lsp-server handle-message ("textDocument/didChange" make-message params)
	a get-diagnostics uri, response

mark-unknown-files-not-found void(a crow-server) summon, trusted, js extern
	for uri : a get-unloaded-uris
		assert uri ends-with "/crow-config.json"
		params js-any = ("uri", uri.as-js), ("type", "notFound"::string.as-js)
		_ = a.lsp-server handle-message ("custom/readFileResult" make-message params)
	assert a.get-unloaded-uris is-empty

get-diagnostics diagnostic[](a crow-server, uri uri, response response) trusted, js extern
	for message : response.messages
		method string = message["method"] cast
		if method != "custom/unknownUris"
			method is "textDocument/publishDiagnostics"
			params = message["params"]
			diagnostics js-any array = params["diagnostics"] cast
			a.diagnostics-per-uri[params["uri"] cast] := for x : diagnostics; x to
	a.diagnostics-per-uri[uri] ?? ()

get-hover string(a crow-server, uri uri, position line-and-character) trusted, js extern
	args js-any = ("textDocument", (("uri", uri.as-js),)), ("position", position.to-js)
	res = a request "textDocument/hover", args
	if res != null
		res["contents"]["value"] cast

get-tokens token array(a crow-server, uri uri) trusted, js extern
	args js-any = ("textDocument", (("uri", uri.as-js),)),
	encoded = (a request "textDocument/semanticTokens/full", args)["data"]
	encoded decode-tokens a.tokens-legend

run run-result(a crow-server, main-uri uri) trusted, js extern
	uris = (main-uri.as-js,)::(js-any array) as-js
	args js-any = ("uri", main-uri.as-js), ("diagnosticsOnlyForUris", uris)
	a request "custom/run", args to

run-js void(_ crow-server, _ uri) trusted, js extern
	throw todo

-request js-any(a crow-server, method symbol, params js-any) unsafe, js extern
	a.lsp-server request method, params

-init void(a crow-server) trusted, summon, js extern
	include-all = "/include-all.json" fetch-js-object
	for entry : ("Object".js-global call-property "entries", include-all).cast::(js-any array)
		path string = entry[0] cast
		text string = entry[1] cast
		_ = a open-file "{include-dir}/{path}", text
	_ = a open-file "file:///crow-config.json", "\{}"
	_ = a open-file "file:///hello.txt", "Hello, world!"
	a mark-unknown-files-not-found

-include-dir string()
	"file:///include"

region LSP server

-math-keys symbol[]()
	"acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2",
	"ceil", "cos", "cosh", "floor", "log", "sin", "sinh", "sqrt", "tan", "tanh"

-imports js-any(crow crow-lsp-server) summon, trusted, js extern
	res js-any mut[symbol] = ()
	res["getTimeNanos"] := (&get-time-nanos)::(nat function()) as-js
	res["perfLogMeasure"] := (&perf-log-measure)::(void function(
		a crow-lsp-server,
		name view-c-string,
		count wasm32,
		nanos nat,
		bytes wasm32,
	)).as-js partial crow.as-js
	res["perfLogFinish"] := (&perf-log-finish)::(void function(
		a crow-lsp-server,
		name view-c-string,
		total-nanos nat,
	)).as-js partial crow.as-js
	res["debugLog"] := (&debug-log)::(void function(
		a crow-lsp-server,
		text view-c-string,
	)).as-js partial crow.as-js
	for key : math-keys
		value = "Math".js-global[key]
		res[key] := value
		res["{key}f"] := value
	res["round"] := (&round)::(float function(x float)) as-js
	res["roundf"] := (&round)::(float32 function(x float32)) as-js
	res["__assert"] := (&__assert)::(void function(
		a crow-lsp-server,
		asserted view-c-string,
		file view-c-string,
		line float,
	)).as-js partial crow.as-js
	res.move-to to-js-object
-partial js-any(fn js-any, arg js-any) unsafe, js extern
	fn call-property "bind", null::js-any, arg

-get-time-nanos nat() summon, trusted, js extern
	msec float = "performance".js-global call-property "now" cast
	msec * 1000000 to

-perf-measure record(name string, count nat, msec float, bytes-allocated nat)
-to json(a perf-measure)

-perf-log-measure void(
	a crow-lsp-server,
	name-ptr view-c-string,
	count wasm32,
	nanoseconds nat,
	bytes-allocated wasm32,
) trusted, summon, js extern
	a.perf-measures ~=
		((a.view read-c-string name-ptr), count.to, nanoseconds.to-msec, bytes-allocated.to)
-perf-log-finish void(
	a crow-lsp-server,
	name view-c-string,
	total-nanos nat,
) trusted, summon, js extern
	info log "performance for {a.view read-c-string name}"
	info log "TOTAL: {total-nanos.to-msec}"
	for measure : a.perf-measures
		info log measure.to::json.to
	a.perf-measures clear
-to-msec float(nsec nat)
	nsec.to.nanosecond.milliseconds

-debug-log void(a crow-lsp-server, text view-c-string) summon, trusted, js extern
	info log (a.view read-c-string text)

-__assert void(
	a crow-lsp-server,
	asserted view-c-string,
	file view-c-string,
	line float,
) summon, trusted, js extern
	message = a.view read-c-string asserted
	throw "Assertion {message} failed on {a.view read-c-string file} line {line}" error

-wasm-exports record mut
	getParameterBufferPointer view-c-string function()
	getParameterBufferLength float function()
	newServer wasm32 mut(params view-c-string)
	# TODO: Can't make this a function for 2 reasons:
	# - Crow functions of 2 arguments actually take a tuple.
	#	JS functions of two arguments take 2 arguments.
	# - Making it a function causes an 'async' call,
	#	but we need to read pointers immediately after calling this, before it's called again.
	handleLspMessage js-any
	memory js-any
-uninit wasm-exports() unsafe, js extern
	&fake-getParameterBufferPointer, &fake-getParameterBufferPointer,
		(_ => throw not-implemented), null,
		null
-fake-getParameterBufferPointer view-c-string()
	throw not-implemented

-as-wasm-exports wasm-exports(a js-any) unsafe, js extern
	a["getParameterBufferPointer"].cast, \
	a["getParameterBufferLength"].cast,
	a["newServer"].cast,
	a["handleLspMessage"],
	a["memory"]

-make-lsp-server crow-lsp-server() summon, trusted, js extern
	res crow-lsp-server = (), 0, 0, uninit, 0, ()
	res.wasm := "../bin/crow.wasm" wasm-instantiate res.imports as-wasm-exports
	buffer js-any = res.wasm.memory["buffer"]
	res.view := (buffer,)
	res.parameters-begin := res.wasm getParameterBufferPointer
	res.parameters-length := res.wasm.getParameterBufferLength to
	server-params js-any = ("includeDir", include-dir.as-js), ("cwd", "file:///"::string.as-js)
	server-params-string = res write-parameters server-params
	res.server := res.wasm.newServer[server-params-string]
	res
-wasm-instantiate js-any(url string, imports js-any) unsafe, js extern
	fetched = "fetch".js-global call url
	options js-any = ("env", imports),
	result = "WebAssembly".js-global call-property "instantiateStreaming", fetched, options await
	result["instance"]["exports"]

-crow-lsp-server record mut
	view mut DataView
	parameters-begin mut float
	parameters-length mut nat
	wasm mut wasm-exports
	server mut wasm32
	perf-measures perf-measure mut[]

-response record
	messages js-any array
	exitCode nat?
-handle-message response(a crow-lsp-server, message js-any) unsafe, js extern
	response-str wasm32 = a.wasm.handleLspMessage call a.server, (a write-parameters message) cast
	response = a.view read-c-string response-str json-parse
	messages js-any array = response["messages"] cast
	exit-code js-any = response["exitCode"] cast
	messages, unless exit-code == null
		exit-code.cast::float.to,

-write-parameters view-c-string(a crow-lsp-server, params js-any) unsafe, js extern
	params-string string = params json-stringify
	a.view write-c-string a.parameters-begin, a.parameters-length, params-string

-request js-any(a crow-lsp-server, method symbol, params js-any) unsafe, js extern
	res = a handle-message (("id", 1::float.as-js), ("method", method.as-js), ("params", params))
	assert res.exitCode is-empty
	res.messages.size is 1
	message = res.messages[0]
	message["id"].cast::float is 1
	message["result"]

-make-message js-any(method string, params js-any) trusted, js extern
	("method", method.as-js), ("params", params)

-get-unloaded-uris uri array(a crow-server) summon, trusted, js extern
	(a.lsp-server request "custom/unloadedUris", ())["unloadedUris"] cast

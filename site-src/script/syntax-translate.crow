import
	crow/js/dom
	./crow: crow-server, syntax-translate
	./util/util: get-child-text

define-syntax-translate-element void(crow crow-server) summon, js extern
	"syntax-translate-row" define-custom-element "", _ => ()
	"syntax-translate" define-custom-element css, x =>
		x.shadow-root ~= crow make-div x.as-node.child-nodes

-make-div node(crow crow-server, child-nodes node[]) trusted, js extern
	ths node[] = "Crow syntax".th, "Java-like syntax".th, "C-like syntax".th
	tr = "tr" create-node (), "", ths
	thead = "thead" create-node (), "", (tr,)
	tbody = "tbody" create-node (), "", for x : child-nodes and-concat
		unless x is-text-node
			(crow create-row x.get-child-text),
	"table" create-node (), "", (thead, tbody)

-create-row node(crow crow-server, initial-c-source string) js extern
	inputs mut node[] = ()

	input-for-lang node mut(x string) = lang =>
		inputs[langs index-of! lang]

	on-input void mut(x string) = input-lang =>
		for output-lang : langs
			unless output-lang == input-lang
				input-value = input-for-lang[input-lang] value
				result = crow syntax-translate input-lang, input-value, output-lang
				input-for-lang[output-lang].value := result

	inputs := for lang : langs
		(_ => on-input[lang]) create-input-text (lang == "c" ? initial-c-source : "")

	on-input["c"]

	"tr" create-node (), "", for x : inputs
		"td" create-node (), "", (x,)

-langs string[]()
	"crow", "java", "c"

-th node(text string) js extern
	"th" create-node (), "", (text.create-text-node,)

-css string()
	"""
table \{
	table-layout: fixed;
	width: 100%;
	border-collapse: collapse;
}
table th \{
	padding: 0;
	width: 33%;
}
table td \{
	padding: 0;
	width: 33%;
	border: 1px solid #888;
}
table td:focus-within \{
	background: #f8ffe0;
}
input \{
	padding-left: 0.5em;
	padding-right: 0;
	width: calc(100% - 0.5em);
	font-family: "hack";
	font-size: 105%;
	border: none;
}
input:focus-visible \{
	outline: none;
	background: #f8ffe0;
}
"""

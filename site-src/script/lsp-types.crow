import
	crow/js: as-js, cast, js-any, new, subscript

token record(line nat, character nat, length nat, type symbol, modifiers symbol array)
tokens-and-diagnostics record(tokens token array, diagnostics diagnostic array)
new tokens-and-diagnostics()
	(), ()

tokens-legend record
	token-types symbol array
	token-modifiers symbol array
to tokens-legend(a js-any) unsafe, js extern
	a["tokenTypes"].cast, a["tokenModifiers"].cast

line-and-character record(line nat, character nat)
== bool(a line-and-character, b line-and-character)
<=> comparison(a line-and-character, b line-and-character)
to line-and-character(a js-any) unsafe, js extern
	a["line"].cast::float.to, a["character"].cast::float.to
to-js js-any(a line-and-character) trusted, js extern
	("line", a.line.to::float.as-js), ("character", a.character.to::float.as-js)

diagnostic record(range source-range, severity nat, message string)
to diagnostic(a js-any) unsafe, js extern
	a["range"].to, a["severity"].cast::float.to, a["message"].cast

source-range record(start line-and-character, end line-and-character)
to source-range(a js-any) unsafe, js extern
	a["start"].to, a["end"].to

run-result record(writes write array, exit-code nat)
to run-result(a js-any) unsafe, js extern
	writes write array = for x : a["writes"].cast::(js-any array); x to
	exit-code nat = a["exitCode"].cast::float to
	writes, exit-code

write record(pipe pipe, text string)
-to write(a js-any) unsafe, js extern
	a["pipe"].to, a["text"].cast
pipe enum(stdout, stderr)
-to pipe(a js-any) unsafe, js extern
	a.cast::string to

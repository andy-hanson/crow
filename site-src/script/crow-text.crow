import
	crow/col/mut-stack
	crow/io/duration: millisecond
	crow/js:
		+, as-js, call, call-property, cast, js-any, js-cast, js-global, set-subscript, subscript
	crow/js/dom:
		~~=, ~=, add-event-listener, attributes, create-div, create-node, create-span,
		create-text-node, custom-element-node, define-custom-element, node, remove-all-children,
		shadow-root, set-subscript, set-text-content, style
	./lsp-types:
		==, <=>, character, diagnostic, diagnostics, end, length, line, line-and-character, message,
		modifiers, new, range, start, tokens, tokens-and-diagnostics, type
	./util/mutable-observable: get, mutable-observable, now-and-subscribe, observable, set
	./util/util: debouncer, new, with-block

-line-height-px float()
	20
-tab-size nat()
	4

crow-text-props record mut
	getHover string mut(where line-and-character)
	tokensAndDiagnostics tokens-and-diagnostics observable
	text string mutable-observable

define-crow-text-custom-element void() summon, trusted, js extern
	"crow-text" define-custom-element css, x => x connected

create-crow-text node(props crow-text-props) trusted, js extern
	res = "crow-text" create-node
	res.as-js["props"] := props
	res

-connected void(a custom-element-node) unsafe, js extern
	props crow-text-props = a.as-js["props"] cast
	highlight-div = "highlight" create-div
	ta = "textarea" create-node
	ta.as-js["value"] := props.text.observable get
	ta.attributes["spellcheck"] := "false"
	ta add-event-listener "keydown", e =>
		insert string? = match e["key"].cast::string
		as Enter
			"\n{ta.as-js indentation-at-selection}",
		as Tab
			"\t",
		else
			()
		if i ?= insert
			_ = e call-property "preventDefault"
			props.text set (ta.as-js insert-text-area-text i)
	ta add-event-listener "input", _ =>
		_ = props.text set ta.as-js["value"].cast

	measurer-span = "" create-span ("a".create-text-node,)
	measurer = "measurer" create-div (measurer-span,)
	line-numbers = "line-numbers" create-div
	text-container = "code" create-div (measurer, highlight-div, ta)
	root = "root" create-div (line-numbers, text-container)

	state crow-text-state = props, ta, measurer-span, text-container
	ta add-event-listener "mouseout", _ =>
		state.mouse-is-in := false
		state remove-tooltip
	ta add-event-listener "mousemove", e =>
		state mouse-move e

	diag-debounce debouncer = 100.millisecond,
	props.tokensAndDiagnostics now-and-subscribe shared x =>
		text = props.text.observable get
		(x.tokens, ()) highlight highlight-div, text
		line-numbers.text-content := "\n" join for i : 0::nat .. (text split "\n").size
			"{i + 1}"
		with : diag-debounce
			x highlight highlight-div, text

	a.shadow-root ~= root

-crow-text-state record mut
	props crow-text-props
	text-area node
	measurer-span node
	text-container node
	mouse-move-index mut nat
	tooltip mut node?
	mouse-is-in mut bool
-new crow-text-state(props crow-text-props, text-area node, measurer-span node, text-container node)
	props, text-area, measurer-span, text-container, 0, (), false

-remove-tooltip void(state crow-text-state) unsafe, js extern
	if x ?= state.tooltip
		_ = x.as-js call-property "remove"
		state.tooltip := ()

-mouse-move void(state crow-text-state, event js-any) unsafe, js extern
	state.mouse-is-in := true
	state remove-tooltip
	offset-x float = event["offsetX"] cast
	offset-y float = event["offsetY"] cast
	lines = state.text-area.as-js["value"].cast::string split "\n"
	column-width float = state.measurer-span.as-js["offsetWidth"] cast
	line nat = (offset-y / line-height-px).round-down clamp-to
	column-pre nat = (offset-x / column-width).round-down clamp-to
	line-text = line < lines.size ? lines[line] : ""
	leading-tabs = line-text count-leading-tabs
	tabs-fix = leading-tabs * (tab-size - 1)
	character nat = line-text == "" ? 0 : (column-pre clamp-sub tabs-fix) min line-text.size - 1
	state.mouse-move-index +:= 1

	if state.mouse-move-index == 2 ** 16
		state.mouse-move-index := 0
	save-mouse-move-index = state.mouse-move-index
	timeout void mut() = () =>
		if state.mouse-is-in && state.mouse-move-index == save-mouse-move-index
			hover = state.props.getHover[line, character]
			if hover != ""
				hover-tooltip = "hover-tooltip" create-div (hover.create-text-node,)
				_ = state.text-container.as-js call-property "append", hover-tooltip
				hover-tooltip.style["left"] := "{offset-x}px"
				hover-tooltip.style["top"] := "{offset-y}px"
				assert state.tooltip.is-empty
				state.tooltip := hover-tooltip,

	_ = "setTimeout".js-global call timeout, 200::float

-insert-text-area-text string(text-area js-any, inserted string) unsafe, js extern
	value = text-area["value"]
	selection-start = text-area["selectionStart"]
	selection-end = text-area["selectionEnd"]
	# Selection is UTF-16 indices.
	# The easiest way to handle that is to use JS slicing instead of Crow slicing.
	before = value.as-js call-property "slice", 0::float, selection-start
	after = value.as-js call-property "slice", selection-end
	text-area["value"] := before + inserted.as-js + after
	# Similarly, get the string length in JS instead of in Crow.
	new-cursor = selection-start + inserted.as-js["length"]
	_ = text-area call-property "setSelectionRange", new-cursor, new-cursor
	text-area["value"] cast

-indentation-at-selection string(text-area js-any) unsafe, js extern
	str = text-area["value"]
	pos mut float = text-area["selectionStart"].cast min (str["length"].cast - 1)
	first-non-space mut = pos
	loop
		char string = str[pos.js-cast::nat] cast
		if char != " " && char != "\t"
			first-non-space := pos
		pos -:= 1
		if pos >= 0 && str[pos.js-cast::nat].cast::string != "\n"
			continue
		else
			break str call-property "slice", pos + 1, first-non-space cast

-count-leading-tabs nat(a string)
	res mut nat = 0
	for x : a
		if x == "\t"
			res +:= 1
			continue
		else
			break
	res

-highlight void(td tokens-and-diagnostics, highlight-div node, text string) js extern
	nodes = td tokens-and-diags-to-nodes text
	highlight-div remove-all-children
	highlight-div ~~= nodes

-tokens-and-diags-to-nodes node[](td tokens-and-diagnostics, text string) js extern
	a node-builder = td.diagnostics, text
	a start-line
	for token : td tokens
		a walk-to (token.line, token.character)
		_ = a maybe-start-diag
		class-name string = "{token.type} {" " join for x : token.modifiers; x.to}"
		a add-span class-name, (token.line, token.character + token.length)
		a maybe-stop-diag

	a walk-to a.lines.last-position
	a end-line
	assert a.container-stack.size == 1
	a.container-stack[0].all! move-to

-node-builder record mut
	lines line array
	diagnostics diagnostic array
	pos mut line-and-character
	container-stack container mut-stack
	diag-index mut nat
-new node-builder(diagnostics diagnostic array, text string)
	(for x : text split "\n"; x to), diagnostics, (0, 0), (().all,), 0

-pop-container void(a node-builder) js extern
	popped = a.container-stack.pop!
	child node = match popped
	as line x
		"line" create-div x.move-to
	as diag x
		x.message create-diag-span x.children.move-to
	else
		throw unreachable
	last-container = a.container-stack.peek!
	# text can't contain other nodes
	forbid last-container is-text
	last-container.children ~= child

-start-line void(a node-builder)
	a.container-stack ~= () line
-end-line void(a node-builder) js extern
	until a.container-stack.peek! is-line
		a pop-container
	a pop-container
-next-line void(a node-builder) js extern
	a end-line
	a start-line

-finish-text void(a node-builder) js extern
	last = a.container-stack.peek!
	if text ?= last text
		_ = a.container-stack.pop!
		new-last = a.container-stack.peek!
		# text can't contain other nodes
		forbid new-last is-text
		new-last.children ~= "no-token" create-span (text.text.create-text-node,)

-maybe-start-diag bool(a node-builder) js extern
	if a.diag-index < a.diagnostics.size
		diag = a.diagnostics[a.diag-index]
		message = diag message
		range = diag range
		start = range start
		end = range end
		if start < a.pos
			# Ignore nested diags
			unless a.container-stack.peek!.is-diag
				a finish-text
				a.container-stack ~= ((), end, message) diag
			a.diag-index +:= 1
			true

-should-stop-diag bool(a node-builder)
	last-container = a.container-stack.peek!
	if x ?= last-container.diag
		x.end <= a.pos

-maybe-stop-diag void(a node-builder) js extern
	if a should-stop-diag
		a pop-container

-no-token-node node(a node-builder, start-pos line-and-character) js extern
	assert start-pos < a.pos
	"no-token" create-span ((a.lines slice-line start-pos, a.pos).to.create-text-node,)

-walk-to void(a node-builder, end-pos line-and-character) js extern
	start-pos mut = a.pos
	while a.pos < end-pos
		if a maybe-start-diag
			if start-pos < a.pos
				a.container-stack[end - 2].children ~= a no-token-node start-pos
			start-pos := a.pos
		next-pos = a.lines next-position a.pos
		if next-pos.line != a.pos.line
			if start-pos != a.pos
				a.container-stack.peek!.children ~= a no-token-node start-pos
			start-pos := next-pos
			a next-line
		a.pos := next-pos
		if a should-stop-diag
			a.container-stack.peek!.children ~= a no-token-node start-pos
			start-pos := a.pos
			a pop-container
	if start-pos < a.pos
		a.container-stack.peek!.children ~= a no-token-node start-pos

-add-span void(a node-builder, class-name string, end-pos line-and-character) js extern
	assert a.pos <= end-pos
	if a.pos != end-pos
		parts = a.lines slice-lines a.pos, end-pos
		a.container-stack.peek!.children ~= class-name create-span (parts[0].to.create-text-node,)
		for part : parts[1 .. end]
			a next-line
			a.container-stack.peek!.children ~= class-name create-span (part.to.create-text-node,)
		a.pos := end-pos

-create-diag-span node(message string, children node[]) js extern
	"diagnostic" create-span (("data-tooltip", message),), children

-container union mut
	all node mut[]
	line node mut[]
	diag diag-container
	text text-container
-diag-container record mut
	children node mut[]
	end line-and-character
	message string
-text-container record mut
	text string

-is-line bool(a container)
	!a.line.is-empty
-is-diag bool(a container)
	!a.diag.is-empty
-is-text bool(a container)
	!a.text.is-empty

-children node mut[](a container)
	match a
	as all x
		x
	as line x
		x
	as diag x
		x.children
	as text _
		throw unreachable

line alias
	char32 array

-slice-lines line array(lines line array, start line-and-character, end line-and-character)
	if start.line == end.line
		(lines slice-line start, end),
	else
		(lines slice-line-from start) ~ lines[start.line .. end.line] ~ (lines slice-line-to end)
-slice-line line(lines line array, start line-and-character, end line-and-character)
	assert start.line == end.line
	lines[start.line][start.character .. end.character]
-slice-line-from line(lines line array, start line-and-character)
	line = lines[start line]
	line[start.character .. end]
-slice-line-to line(lines line array, end line-and-character)
	lines[end.line][0 .. end.character]

-next-position line-and-character(lines line array, pos line-and-character)
	if pos.character >= lines[pos.line].size
		pos.line + 1, 0
	else
		pos.line, pos.character + 1

-last-position line-and-character(lines line array)
	lines.size - 1, lines[end - 1].size

-css string()
	"""
.root \{
	display: flex;
	background: #2c292d;
	font-family: "hack";
	font-size: 85%;
}
.line-numbers \{
	display: inline-block;
	width: 1.5em;
	color: #6c696d;
	border-right: 0.1em solid #6c696d;
	line-height: 20px;
	text-align: right;
	white-space: pre;
	padding-right: 0.25em;
	margin-right: 0.25em;
}
.measurer \{
	visibility: hidden;
	height: 0;
}
.code \{
	width: 100%;
	height: 100%;
	margin: 0;
	padding: 0;
	position: relative;
	tab-size: 4;
	font-size: 1em;
	line-height: 20px;
	white-space: pre;
	display: inline-block;
}
.highlight \{
	margin: 0;
	padding: 0;
	width: 100%;
	height: 100%;
	z-index: 10;
}
.line \{
	height: 20px;
}
textarea \{
	z-index: 0;
	margin: 0;
	padding: 0;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	color: #00000020;
	caret-color: #fdf9f3;
	background: #00000000;
	line-height: 20px;
	font-size: 1em;
	border: none;
	outline: none;
	resize: none;
	overflow: hidden;
	white-space: pre;
	font-family: "hack";
}
.no-token \{ font-weight: light; color: #aaa; }

.declaration \{ font-weight: bold; }
.function \{ color: #78dce8; }
.interface \{ color: #a9dc76; }
.keyword \{ font-weight: bold; color: #ff6188; }
.modifier \{ color: #ff6188; }
.name \{ color: green; }
.namespace \{ color: #ff6188; }
.number \{ color: #ffd866; }
.parameter \{ color: #ffebbd; }
.property, .enumMember \{ color: #fefefe; }
.string \{ color: #ffd866; }
.type \{ color: #ab9df2; }
.typeParameter \{ color: #fc9867; }
.variable \{ color: #ffebbd; }
.comment \{ color: #ddeedd; }

.diagnostic \{
	position: relative;
	border-bottom: 0.2em dotted #e87878;
}
.diagnostic::after \{
	content: attr(data-tooltip);
	position: absolute;
	white-space: nowrap;
	background: #80000080;
	padding: 0.25em;
	color: #fdf9f3;
	border-radius: 0.5em;
	margin-left: -1em;
	margin-top: 0.25ex;
	top: 3ex;
}
.hover-tooltip \{
	background: #423e44;
	color: #fdf9f3;
	position: absolute;
	padding: 0.5em;
	border-radius: 0.5em;
	z-index: 100;
}
"""

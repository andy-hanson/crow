import
	crow/io/file: current-directory, read-file
	crow/io/path: change-extension, child-path, remove-extension
	./document-content: all-exports, module-content
	./get-modules: get-modules
	./module: module-path, path
	./page-template: page-template
	./path-and-content: path-and-content
	./search-dir-recursive: search-dir-recursive

documentation path-and-content[]() summon
	include = current-directory ~~ "/include"
	all-module-paths = "{include}/crow" search-dir-recursive (x => !x.ignore-dir),
		(x => x != "std.crow")
	include-uri string = if trusted extern windows
		"file:///{include.to-lower-case uri-encode}/"
	else
		"file://{include uri-encode}/"
	all-modules = all-module-paths get-modules include-uri
	all-paths = (for x : all-modules; x path) sort-paths
	all-exports = all-modules all-exports
	modules path-and-content[] = for module : all-modules
		content = module module-content all-exports
		module.path document-template "module {module.path}", content, all-paths
	index-content string = "site-src/doc/index.html" read-file
	index = "index" document-template "documentation", index-content, all-paths
	index ~ modules

# TODO: should be in std lib somewhere
-uri-encode string(a string)
	# TODO: handle all URI encoding
	a replace-all ":", "%3a"

-to-lower-case string(a string)
	for x : a; x.to-lower-case

-to-lower-case char32(a char32)
	if a in "A" .. "Z"
		diff = a.to::nat32 - "A"::char32.to
		"a".to + diff to
	else
		a

-sort-paths module-path[](a module-path[])
	a sort x => ("{x}" split "/")::string[]

-ignore-dir bool(a string)
	a in ("experimental", "private")::(string set)

-document-template path-and-content(
	path module-path,
	title string,
	content string,
	all-paths module-path[],
)
	out-path = "doc" child-path path.extension-to-html
	nav = all-paths generate-nav path
	full string =
		"""<div class="documentation" id="side-nav-wrapper">{nav}<main>{content}</main></div>"""
	out-path page-template title, full

-generate-nav string(all-paths module-path[], cur-path module-path)
	parts = "" join for x : all-paths
		x nav-part x == cur-path
	"""<nav><ul>{parts}</ul></nav>"""
-nav-part string(a module-path, is-current bool)
	cur string = is-current ? " class=\"current\""
	"""<li><a href="/doc/{a extension-to-html}"{cur}>{a.to remove-extension}</a></li>"""

extension-to-html string(a module-path)
	a.to change-extension "html"

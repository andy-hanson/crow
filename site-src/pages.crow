import
	crow/io/file: read-file
	crow/parse
	./page-template: page-template
	./path-and-content: path-and-content

pages path-and-content[]() summon
	index = "index.html" page-template "index", "site-src/index.html".read-file
	download = "download.html" page-template "download", "site-src/download.html".read-file
	play = "play.html" page-template "play", "site-src/play.html".read-file
	(index, download, play) ~~ tutorial-pages

tutorial-pages path-and-content[]() summon
	metas = tutorial-metas
	title-lookup string[symbol] = for x : metas; x.key, x.title
	for index, meta : metas with-index
		next tutorial-meta? = unless index + 1 == metas.size
			metas[index + 1],
		content string = "site-src/tutorial/{meta key}.html" read-file
		"tutorial" tutorial-template meta, metas, title-lookup, content, next

-tutorial-metas tutorial-meta[]()
	"""index: Running crow programs
	functions: Functions
	local-variables: Local variables
	conditionals: Conditional expressions
	loops: Loop expressions
	types: Basic types
	type-inference: Type inference
	special-call-syntax: Special call syntax
	options: Options
	records: Records
	unions: Unions
	variants: Variants
	purity: Purity
	collections: Collections
	lambdas: Lambdas
	for-and-with: "For" and "with" expressions
	exceptions: Exceptions
	fibers: Fibers
	io: I/O
	modules: Modules
	templates: Templates
	specs: Specs
	auto-functions: Auto functions
	enums: Enums and flags
	low-level: Low-level code
	extern: External libraries
	misc: Miscellaneous""" parse-tutorial-metas

-parse-tutorial-metas tutorial-meta[](input string)
	name symbol grammar = ":".text-not-containing map x => x to
	line tutorial-meta grammar = (name ~~ ": " ~~ "\n".text-not-containing) map pair =>
		pair.a, pair.b
	lines tutorial-meta[] grammar = line separated-by "\n\t"
	(lines parse input)!

-tutorial-meta record(key symbol, title string)

-path string(tutorial-dir string, a tutorial-meta)
	"{tutorial-dir}/{a key}.html"

-tutorial-nav string(tutorial-dir string, cur-path string, tutorial-metas tutorial-meta[])
	lines = "" join for x : tutorial-metas
		path = tutorial-dir path x
		cur string = path == cur-path ? " class=\"current\""
		"""<li><a href="/{path}"{cur}>{x title}</a></li>"""
	"<nav><ul>{lines}</ul></nav>"

-tutorial-template path-and-content(
	tutorial-dir string,
	meta tutorial-meta,
	tutorial-metas tutorial-meta[],
	tutorial-title-lookup string[symbol],
	content string,
	next tutorial-meta?,
)
	next-link string = if n ?= next
		"""<a id="next" href="/{tutorial-dir path n}">next: {n title}</a>"""
	page-path = tutorial-dir path meta
	content-with-links = content create-links link => tutorial-title-lookup convert-link link
	page-path page-template meta.title, """
	<div id="side-nav-wrapper">
		{tutorial-dir tutorial-nav page-path, tutorial-metas}
		<main>
			<h1>{meta title}</h1>
			{content-with-links}
			{next-link}
		</main>
	</div>"""

-create-links string(content string, fill-link string data(link string))
	if left, rest ?= content try-split-once "\{\{"
		if link, right ?= rest try-split-once "}}"
			left ~~ fill-link[link] ~~ (right create-links fill-link)
	else
		content

-convert-link string(tutorial-title-lookup string[symbol], str string)
	link = str parse-link
	match link kind
	as "doc"
		# TODO: validate the name
		"<a href=\"/doc/crow/{link name}.html\">{link name}</a>"
	as "tutorial"
		title = tutorial-title-lookup[link name] ??
			throw "Linked to '{link name}' but no tutorial page has that name.".error
		"<a href=\"/tutorial/{link name}.html{link hash}\">{title}</a>"
	else
		throw "Unexpected link kind {link kind}" error

-link record(kind symbol, name symbol, hash string)
-parse-link link(a string)
	kind, rest = a try-split-once "/" ??
		throw """Link "{a}" needs to begin with "doc/" or "tutorial/".""".error
	name, hash = rest try-split-once "#" ?? (rest, "")
	kind.to, name.to, hash.is-empty ? "" : "#{hash}"

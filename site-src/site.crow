import
	crow/io/file
	crow/io/path: child-path, parent-path
	crow/io/print: out, print
	crow/test-util/test-runner: run-all-tests
	./document: documentation
	./pages: pages
	./path-and-content: content, out-path, new, path-and-content
	./search-dir-recursive: search-dir-recursive

main void() summon, native extern
	run-all-tests
	all-content = documentation ~~ pages ~~ include-all
	for content : all-content parallel
		content ensure-up-to-date
	cwd = current-directory
	for x : all-to-link parallel
		x ensure-link cwd

-ensure-up-to-date void(a path-and-content) summon, native extern
	full-out-path = "site" child-path a.out-path
	unless full-out-path is-up-to-date a.content
		full-out-path.parent-path ensure-directory-recursive
		full-out-path write-file a.content
		()

-ensure-link void(a link, cwd string) summon, native extern
	full-out-path = "site" child-path a.link-path
	# TODO: check that link target is up to date
	unless full-out-path path-exists
		full-out-path.parent-path ensure-directory-recursive
		full-target = cwd child-path a.target
		out print "link {full-out-path} -> {full-target}"
		full-out-path make-symlink-to full-target
		()

-is-up-to-date bool(path string, content string) summon, native extern
	path.read-file-or-empty == content

-ensure-directory-recursive void(path string) summon, native extern
	unless path == "" || path.path-exists
		path.parent-path ensure-directory-recursive
		path ensure-directory

link record(target string, link-path string)
same link(a string)
	a, a

-all-to-link link[]() summon, native extern
	in-src-paths link[] = for x : ("crow.svg", "index.css", "tutorial/example.json")::string[]
		("site-src" child-path x), x

	script-paths = "site-src/script" search-dir-recursive x => x ends-with ".js"
	script = script-paths to-links "site-src/"

	font-paths = "site-src/font" search-dir-recursive
	font = font-paths to-links "site-src/"
	in-src-paths ~~ script ~~ font ~~ other-links

other-links link[]()
	with out : build
		if trusted extern windows
			out ~= "bin/crow-windows-x64.tar.xz" same
			out ~= "bin/crow-demo-windows.tar.xz" same
		else
			out ~= "bin/crow-linux-x64.tar.xz" same
			out ~= "bin/crow-demo.tar.xz" same
			out ~= "bin/crow-x64.deb" same
		out ~= "bin/crow.wasm" same
		out ~= ("editor/crow.sublime-syntax", "bin/crow.sublime-syntax")
		out ~= "bin/crow.vsix" same

-include-all path-and-content[]() summon, native extern
	include = "include" search-all-with-content ""
	pairs string[symbol] = for x : include
		x.out-path.remove-include.to, x.content
	content string = "{pairs.to::json}"
	("include-all.json", content),

-remove-include string(a string)
	a try-remove-start! "include/"

-search-all-with-content path-and-content[](path string, remove-prefix string) summon, native extern
	paths = path search-dir-recursive
	paths to-paths-and-contents remove-prefix

-to-links link[](targets string[], remove-prefix string)
	for target : targets
		target, target try-remove-start remove-prefix ??
			throw "{target} didn't start with {remove-prefix}" error

-to-paths-and-contents path-and-content[](
	paths string[],
	remove-prefix string,
) summon, native extern
	for path : paths parallel
		assert rel-path ?= path try-remove-start remove-prefix :
			"{path} didn't start with {remove-prefix}".error
		rel-path, path.read-file

import
	crow/io/file:
		current-directory, ensure-directory, make-symlink-to, path-exists, read-file, try-read-file,
		write-file
	crow/io/path: child-path, parent-path
	crow/io/print: out, print
	crow/test-util/test-runner: run-all-tests
	crow/version: is-windows
	./document: documentation
	./pages: pages
	./path-and-content: content, out-path, new, path-and-content
	./search-dir-recursive: search-dir-recursive

main nat^(_ string[]) summon
	run-all-tests
	all-content <- documentation ~~ pages ~~ include-all
	<- for content : all-content parallel
		content ensure-up-to-date
	cwd = current-directory
	to-link <- all-to-link
	<- for x : to-link parallel
		x ensure-link cwd

-ensure-up-to-date void^(a path-and-content) summon
	full-out-path = "site" child-path a.out-path
	unless full-out-path is-up-to-date a.content
		full-out-path.parent-path ensure-directory-recursive
		full-out-path write-file a.content
		()

-ensure-link void^(a link, cwd string) summon
	full-out-path = "site" child-path a.link-path
	# TODO: check that link target is up to date
	unless full-out-path path-exists
		full-out-path.parent-path ensure-directory-recursive
		full-target = cwd child-path a.target
		out print "link {full-out-path} -> {full-target}"
		full-out-path make-symlink-to full-target
		()

-is-up-to-date bool(path string, content string) summon
	if cur-content ?= path.try-read-file :: string?
		cur-content == content

-ensure-directory-recursive void(path string) summon
	unless path == "" || path.path-exists
		path.parent-path ensure-directory-recursive
		path ensure-directory

link record
	target string
	link-path string

-all-to-link link[]^() summon
	in-src-paths link[] = for x : ("crow.svg", "index.css")::string[]
		("site-src" child-path x), x

	script-paths <- "site-src/script" search-dir-recursive x => x ends-with ".js"
	script = script-paths to-links "site-src/"

	font-paths <- "site-src/font" search-dir-recursive
	font = font-paths to-links "site-src/"
	bundle = if trusted is-windows
		"bin/crow.zip"
	else
		"bin/crow.tar.xz"
	other link[] = for x : ("bin/crow.wasm", bundle, "crow-js/crow.js")::string[]
		x, x
	in-src-paths ~~ script ~~ font ~~ other,

-include-all path-and-content[]^() summon
	include <- "include" search-all-with-content ""
	pairs string[symbol] = for x : include
		x.out-path.remove-include.to, x.content
	content = "{pairs.to::json}"
	(("include-all.json", content),),

-remove-include string(a string)
	(a try-remove-start "include/")!

-search-all-with-content path-and-content[]^(path string, remove-prefix string) summon
	paths <- path search-dir-recursive
	paths to-paths-and-contents remove-prefix

-to-links link[](targets string[], remove-prefix string)
	for target : targets
		target, target try-remove-start remove-prefix ?? \
			throw "{target} didn't start with {remove-prefix}"

-to-paths-and-contents path-and-content[]^(paths string[], remove-prefix string) summon
	for path : paths parallel
		if rel-path ?= path try-remove-start remove-prefix
			(rel-path, path.read-file),
		else
			throw "{path} didn't start with {remove-prefix}"

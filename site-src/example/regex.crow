import
	crow/cell: as-const-ptr, as-mut-ptr, cell, new
	crow/col/mut-arr
	crow/c-types: c-int, size_t, u-long
	crow/io/print: print
	crow/ptr: as-const, const-ptr, mut-ptr, new
	crow/str-util: to-c-str, to-str

main fut nat(_ str[]) summon
	"cro\\+w" test-regex ("crow", "crooow", "duck")
	"[0-9" test-regex ("42",)
	()

test-regex void(source str, candidates str[]) summon trusted
	match source parse
	as ok regex
		for x : candidates
			print: "{source} matches {x}? {regex matches x}"
		regex free
	as err e
		print: "bad regex {source}: {e}"

regex record mut
	wrapped cell regex_t

# Unsafe because must 'free'
parse result<regex, str>(source str) unsafe
	res regex = ((),),
	err = res.wrapped.as-mut-ptr regcomp source.to-c-str, ()
	if err == REG_NOERROR
		res ok
	else
		buf char8 mut[] = 1000 fill-mut-arr "\0"
		_ = err regerror res.wrapped.as-const-ptr, buf.begin-ptr, buf.size
		res free
		buf.begin-ptr.as-const.to-str err

free void(a regex) unsafe
	a.wrapped.as-mut-ptr regfree

matches bool(a regex, candidate str) trusted
	err = a.wrapped.as-const-ptr regexec candidate.to-c-str, (), (), ()
	if err == REG_NOERROR
		true
	elif err == REG_NOMATCH
		false
	else
		buf char8 mut[] = 1000 fill-mut-arr "\0"
		_ = err regerror a.wrapped.as-const-ptr, buf.begin-ptr, buf.size
		throw buf.begin-ptr.as-const

regex_t record mut by-val extern
	buffer void mut*
	allocated size_t
	used size_t
	syntax u-long
	fastmap char8 mut*
	translate nat8 mut*
	re_nsub size_t
	re_flags nat8

new regex_t() unsafe
	(), (), (), (), (), (), (), ()

regoff_t alias
	c-int

regmatch_t record by-val extern
	rm_so regoff_t
	rm_eo regoff_t

reg_errcode_t enum<c-int> extern
	REG_ENOSYS = -1
	REG_NOERROR
	REG_NOMATCH
	_REG_BADPAT
	_REG_ECOLLATE
	_REG_ECTYPE
	_REG_EESCAPE
	_REG_ESUBREG
	_REG_EBRACK
	_REG_EPAREN
	_REG_EBRACE
	_REG_BADBR
	_REG_ERANGE
	_REG_ESPACE
	_REG_BADRPT

regcomp reg_errcode_t(regex regex_t mut*, pattern c-str, cflags c-int) extern<c>

regfree void(preg regex_t mut*) extern<c>

regexec reg_errcode_t(
	preg regex_t*,
	string c-str,
	nmatch size_t,
	pmatch regmatch_t mut*,
	eflags c-int,
) extern<c>

regerror size_t(
	errcode reg_errcode_t,
	preg regex_t*,
	errbuff char8 mut*,
	errbuf_size size_t,
) extern<c>

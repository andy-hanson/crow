import
	crow/cell
	crow/io/print: print
	crow/str-util: join

main fut nat(_ str[]) summon
	adder <- 0 make-store
	tasks fut<nat>[] = for x : 0 .. 10
		launch: () =>
			adder.get-and-set[x + 1]
	values <- tasks wait-all
	final-value <- adder.get[]
	print: "values: {(for x : values; x to-str) join ", "}"
	print: "final value: {final-value}"
	()

store record sendable
	get ref nat()
	get-and-set ref nat(nat)

make-store fut store(initial-value nat)
	launch: () =>
		cur cell nat = initial-value,
		get ref nat() = () => *cur,
		get-and-set ref nat(nat) = x =>
			prev-value = *cur
			*cur := x
			prev-value,
		(get, get-and-set),

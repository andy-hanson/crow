import
	crow/io/print: out, print
	crow/math/vec

main fut nat(_ arr str) summon
	a rect = 0.0, 1.0, 0.0, 1.0
	b rect = 0.75, 1.75, 0.5, 1.5
	c rect = 1.5, 2.5, 0.0, 1.0
	out print (a intersection-or-distance b).to-str
	out print (b intersection-or-distance c).to-str
	out print (a intersection-or-distance c).to-str
	()

to-str str(a result<rect, float>)
	match a
	as ok r
		"intersection: {r bottom-left} to {r top-right}"
	as err d
		"distance: {d}"

intersection-or-distance result<rect, float>(a rect, b rect)
	x = a.x-range intersection-or-distance b.x-range
	y = a.y-range intersection-or-distance b.y-range
	match x
	as ok x-intersect
		match y
		as ok y-intersect
			(x-intersect, y-intersect) ok
		as err e
			e err
	as err dx
		dy = match y
		as ok _
			0.0
		as err e
			e
		d vec2-64 = dx, dy
		d.length err

intersection-or-distance result<float-range, float>(a float-range, b float-range)
	if a.max < b.min
		b.min - a.max err
	elif a.min > b.max
		a.min - b.max err
	else
		((a.min max b.min), (b.max min a.max)) ok

float-range record
	min float
	max float

.rect record
	left float
	right float
	bottom float
	top float

new rect(x-range float-range, y-range float-range)
	x-range.min, x-range.max, y-range.min, y-range.max

bottom-left vec2-64(a rect)
	a.left, a.bottom

top-right vec2-64(a rect)
	a.right, a.top

x-range float-range(a rect)
	a.left, a.right

y-range float-range(a rect)
	a.bottom, a.top

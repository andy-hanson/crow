import
	crow/parse:
		/, ~~, and-return, exact, grammar, grammar-skip, many, map, parse, text-delimited,
		text-not-containing-any, to
	./module

all-exports record(types module-path[symbol], specs module-path[symbol])

all-exports all-exports(modules module[])
	types module-path mut[symbol] = ()
	specs module-path mut[symbol] = ()
	for module : modules
		for x : module exports
			match x.value export-kind
			as export-type
				types add-or-warn x.name, module.path
			as export-spec
				specs add-or-warn x.name, module.path
			as export-fun
				()
			as export-var
				()
	types.move-to, specs.move-to

-add-or-warn void(map module-path mut[symbol], key symbol, value module-path)
	if cur ?= map[key]
		warn log "duplicate name {key}: in {cur} and {value}"
	else
		map[key] := value

-export-kind enum(export-type, export-spec, export-fun, export-var)

-export-kind export-kind(a module-export-value)
	match a
	as alias-decl _
		export-type
	as builtin-decl
		export-type
	as enum-decl _
		export-type
	as extern-decl
		export-type
	as flags-decl _
		export-type
	as fun-decl _
		export-fun
	as record-decl _
		export-type
	as spec-decl _
		export-spec
	as union-decl _
		export-type
	as var-decl _
		export-var
	as variant-decl _
		export-type

module-content string(a module, all-exports all-exports)
	exports = "" join for x : a exports
		ctx ctx = all-exports, a.path, x.name, for p : x.type-params; p name
		x export-content ctx
	doc string = unless a.doc is-empty
		"""\n<section class="module-doc">{a.doc format-comment}</section>"""
	"{a.path module-top}{doc}\n{exports}"

-ctx record
	all-exports all-exports
	current-module module-path
	current-export symbol
	type-params symbol set

-type-name-reference string(name symbol, ctx ctx)
	if name in ctx.type-params || name in allowed-missing-reference
		"""<code class="type">{name}</code>"""
	else
		name type-or-spec-name-reference ctx.all-exports.types, "struct", ctx
-allowed-missing-reference symbol set()
	# TODO: hiding these requires 'internal' visibility
	"future-state", "lock"
-spec-name-reference string(name symbol, ctx ctx)
	name type-or-spec-name-reference ctx.all-exports.specs, "spec", ctx
-type-or-spec-name-reference string(name symbol, map module-path[symbol], kind string, ctx ctx)
	assert module ?= map[name] :
		"Could not find {kind} {name} in {ctx current-module} member {ctx current-export}" error
	module-path string = if module != ctx.current-module
		"/doc/{(module.to::string try-remove-end ".crow")!}.html"
	"""<a href="{module-path}#{name}"><code class="{kind}">{name}</code></a>"""

-module-top string(path module-path)
	url string = "https://github.com/andy-hanson/crow/blob/master/include/{path}"
	source string = """<a class="source-link" href="{url}">(source)</a>"""
	"""<h1><code class="module">{path}</code> {source}</h1>"""

-export-content string(a module-export, ctx ctx)
	type-params = a.type-params type-params-content
	header-extra = a.value export-header-extra ctx
	section string = """<section class="doc {a.value section-class}">
		<h4><code class="{a.value name-class}">{a name}</code>{type-params} {header-extra}</h4>
		{a.value export-body ctx}
		{a.doc format-comment}
	</section>
	"""
	if a.value.export-kind != export-fun
		"<a id=\"{a name}\">{section}</a>"
	else
		section

-section-class string(a module-export-value)
	match a
	as alias-decl _
		"alias"
	as builtin-decl
		"builtin"
	as enum-decl _
		"enum"
	as extern-decl
		"extern"
	as flags-decl _
		"flags"
	as fun-decl _
		"function"
	as record-decl _
		"record"
	as spec-decl _
		"spec"
	as union-decl _
		"union"
	as var-decl _
		"variable"
	as variant-decl _
		"variant"

-name-class string(a module-export-value)
	match a
	as alias-decl _
		"type"
	as builtin-decl
		"type"
	as enum-decl _
		"enum"
	as extern-decl
		"type"
	as flags-decl _
		"enum"
	as fun-decl _
		"function"
	as record-decl _
		"type"
	as spec-decl _
		"interface"
	as union-decl _
		"type"
	as var-decl _
		"variable"
	as variant-decl _
		"type"

-type-params-content string(a type-param[])
	guard !a.is-empty
	type-params = ", " join for x : a
		"""<code class="typeParameter">{x name}</code>"""
	"""<span class="type-params">[{type-params}]</span>"""

-export-header-extra string(a module-export-value, ctx ctx)
	match a
	as alias-decl _
		"alias" keyword
	as builtin-decl
		"builtin" keyword
	as enum-decl _
		"enum" keyword
	as extern-decl
		"extern" keyword
	as flags-decl _
		"flags" keyword
	as fun-decl f
		f.return-type return-type-and-params-and-specs f.variadic, f.params, f.specs, ctx
	as record-decl r
		modifiers string[] = with out : build
			match r.purity
			as data_
				()
			as shared_
				out ~= "shared"
			as mut_
				out ~= "mut"

			if r.nominal_
				out ~= "nominal"
			for v : r variants
				out ~= "{v type-ref-content ctx} variant-member"
		modifiers-content string = unless modifiers is-empty
			" {", " join for m : modifiers; m keyword}"
		"{"record" keyword}{modifiers-content}"
	as spec-decl s
		"{(s.is-builtin ? "spec builtin" : "spec") keyword}{s.parents spec-refs-content ctx}"
	as union-decl u
		"{"union" keyword}{u.purity purity-content}"
	as var-decl x
		kw string = match x kind
		as var-global
			"global"
		as var-thread-local
			"thread-local"
		"{kw keyword}({x.type type-ref-content ctx})"
	as variant-decl x
		"{"variant" keyword}{x.purity purity-content}"

-purity-content string(a purity)
	match a
	as data_
		""
	as shared_
		" shared" keyword
	as mut_
		" mut" keyword

-export-body string(a module-export-value, ctx ctx)
	match a
	as alias-decl al
		"""<div class="alias-target">{al.target type-ref-content ctx}</div>"""
	as builtin-decl
		""
	as enum-decl e
		e.members enum-flags-members-content
	as extern-decl
		""
	as flags-decl f
		f.members enum-flags-members-content
	as fun-decl _
		""
	as record-decl r
		pre string = if r.has-non-public-fields
			"""<p class="has-non-public-fields">(has non-public fields)</p>"""
		fields = "" join for x : r fields
			x field-content ctx
		"""{pre}<ul class="members">{fields}</ul>"""
	as spec-decl s
		sigs-content = "" join for x : s.sigs
			x spec-sig-li ctx
		"""<ul class="spec-sigs">{sigs-content}</ul>"""
	as union-decl u
		members = "" join for x : u members
			x union-member-content ctx
		"""<ul class="members">{members}</ul>"""
	as var-decl _
		""
	as variant-decl _
		""

-enum-flags-members-content string(a symbol[])
	members = "" join for x : a
		"""<li><code class="property">{x}</code></li>"""
	"""<ul class="members">{members}</ul>"""

-field-content string(a record-field, ctx ctx)
	name string = """<code class="property">{a name}</code>"""
	mut-kw string = a.is-mut ? """ <code class="keyword">mut</code>"""
	"<li>{name}{mut-kw} {a.type type-ref-content ctx}</li>"

-union-member-content string(a union-member, ctx ctx)
	name string = """<code class="property">{a name}</code>"""
	type string = if t ?= a type
		" {t type-ref-content ctx}"
	"<li>{name}{type}</li>"

-spec-sig-li string(a spec-sig, ctx ctx)
	rt = a.return-type return-type-and-params-and-specs false, a.params, (), ctx
	"""<li class="sig"><code class="function">{a name}</code> {rt}</li>"""

-return-type-and-params-and-specs string(
	return-type type-ref,
	variadic bool,
	params param[],
	specs spec-ref[],
	ctx ctx,
)
	return-content = return-type type-ref-content ctx
	params-content = ", " join for x : params
		x param-content variadic, ctx
	specs-content = specs spec-refs-content ctx
	"""{return-content}<span class="params">({params-content})</span>{specs-content}"""

-param-content string(a param, variadic bool, ctx ctx)
	var string = variadic ? """<code class="keyword">...</code>"""
	type = a.type type-ref-content ctx
	"""{var}<code class="parameter">{a name}</code> {type}"""

-type-ref-content string(a type-ref, ctx ctx)
	match a name
	as "option"
		a type-ref-suffix "?", ctx
	as "list"
		a type-ref-suffix "[]", ctx
	as "mut-list"
		a type-ref-suffix " mut[]", ctx
	as "map"
		a type-ref-map "[", ctx
	as "mut-map"
		a type-ref-map " mut[", ctx
	as "const-pointer"
		a type-ref-suffix "*", ctx
	as "mut-pointer"
		a type-ref-suffix " mut*", ctx
	else
		if type ?= fun-internal-name-to-keyword[a name]
			a type-ref-fun type, ctx
		else
			"{a.type-args type-args-content ctx}{a.name type-name-reference ctx}"

-type-ref-suffix string(a type-ref, suffix string, ctx ctx)
	"{a.type-args.only type-ref-content ctx}{suffix keyword}"
-type-ref-map string(a type-ref, open string, ctx ctx)
	assert a.type-args.size == 2
	v = a.type-args[0] type-ref-content ctx
	k = a.type-args[1] type-ref-content ctx
	"{v}{open keyword}{k}{"]" keyword}"
-type-ref-fun string(a type-ref, keyword symbol, ctx ctx)
	params = ", " join for x : a.type-args[1 .. end]
		x type-ref-content ctx
	kw = " {keyword}" keyword
	"{kw} {a.type-args[0] type-ref-content ctx}({params})"

-fun-internal-name-to-keyword symbol[symbol]()
	("fun-data", "data"), ("fun-shared", "shared"), ("fun-mut", "mut"), ("fun-pointer", "function")

-spec-refs-content string(specs spec-ref[], ctx ctx)
	unless specs is-empty
		contents = ", " join for x : specs
			x spec-ref-content ctx
		""" {contents}"""

-spec-ref-content string(a spec-ref, ctx ctx)
	args = a.type-args type-args-content ctx
	name string = a.name in special-specs ? "{a name}" : a.name spec-name-reference ctx
	"""{args}<code class="interface">{name}</code>"""

special-specs symbol set()
	"bare", "summon", "unsafe"

-type-args-content string(a type-ref[], ctx ctx)
	match a size
	as 0
		""
	as 1
		"{a.only type-ref-content ctx} "
	else
		"({", " join for x : a; x type-ref-content ctx}) "

-keyword string(a string)
	"""<code class="keyword">{a}</code>"""

-only[t] t(a t[])
	assert a.size == 1
	a[0]

-format-comment string(a string)
	match comment-part.many parse a.strip
	as ok parts
		parts format-comment-parts
	as error e
		throw "Could not parse doc comment:\n{a}\n\nReason: {e}" error

-format-comment-parts string(parts comment-part[])
	res mut string = "<p>"
	for part : parts
		res ~~:= match part
		as text t
			t
		as multi-newline
			"</p><p>"
		as newline
			"<br/>"
		as code-short code
			"<code>{code html-escape}</code>"
		as code-block code
			"</p><div class=\"code-block\">{code html-escape}</div><p>"
	"{res}</p>"

test
	"".format-comment is "<p></p>"
	" a\nb ".format-comment is "<p>a<br/>b</p>"
	"a\n\nb".format-comment is "<p>a</p><p>b</p>"
	"a\n\n\nb".format-comment is "<p>a</p><p>b</p>"
	"Use `x`\nNot `y`".format-comment is "<p>Use <code>x</code><br/>Not <code>y</code></p>"
	actual = "It is:\n\n```\nfoo\n```\nGot it?".format-comment
	actual is "<p>It is:</p><div class=\"code-block\">foo</div><p>Got it?</p>"

-html-escape string(a string)
	a replace-all "<", "&lt;"

-comment-part union
	text string
	multi-newline
	newline
	code-short string
	code-block string

-comment-part comment-part grammar()
	code-block / newlines / code-short / text
-newlines comment-part grammar()
	(("\n\n" ~~ skip-newlines) and-return multi-newline) / ("\n" exact newline)
-code-block comment-part grammar()
	block = "```" text-delimited "```"
	skip-newlines ~~ block ~~ skip-newlines map x => x.strip code-block
-skip-newlines grammar-skip()
	"\n".exact many
-code-short comment-part grammar()
	"`" text-delimited "`" map x => x code-short
-text comment-part grammar()
	("\n", "`").text-not-containing-any map x => x text

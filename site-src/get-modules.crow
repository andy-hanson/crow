import
	crow/io/process: has-error, spawn-and-wait-result, stderr, stdout
	crow/parse: ~~, force, parse, spaces
	crow/version: is-windows
	./module:
		alias-decl, builtin-decl, data, enum-decl, exports, extern-decl, flags-decl, fun-decl,
		module, module-export, module-export-value, mut_, new, param, purity, spec-decl, spec-ref,
		type-param, type-ref, record-decl, record-field, shared, spec-builtin, spec-sig, spec-sigs,
		union-decl, union-member

get-modules module[]^(paths string[], remove-prefix string) summon
	result = crow-path spawn-and-wait-result "doc" ~ paths
	if result has-error
		throw "Could not get documentation. stderr: {result stderr}"
	(((json ~~ spaces) parse result.stdout)! to-modules remove-prefix),

-crow-path string()
	if trusted is-windows
		"bin\\crow.exe"
	else
		"bin/crow"

-to-modules module[](a json, remove-prefix string)
	res module[] = for x : a["modules"]!.as-list!
		x to-module remove-prefix
	res filter x => !x.exports.is-empty

-to-module module(a json, remove-prefix string)
	path = a["path"]! to-path remove-prefix
	path, a.get-comment, for x : a["exports"]!.as-list!
		x to-export

-to-path symbol(a json, remove-prefix string)
	(a.as-string! try-remove-start remove-prefix)! to

-get-comment string(a json)
	if c ?= a["comment"]
		c.as-string!

-to-export module-export(a json)
	type-params type-param[] = if t ?= a["type-params"]
		for x : t.as-list!
			x to-type-param
	value = a["value"]! to-export-value
	a.get-name, a.get-comment, type-params, value

-to-export-value module-export-value(a json)
	kind = a["kind"]!.as-symbol!
	if kind == "alias"
		a.to-alias-decl alias-decl
	elif kind == "builtin"
		builtin-decl
	elif kind == "enum"
		a.to-enum-decl enum-decl
	elif kind == "extern"
		extern-decl
	elif kind == "flags"
		a.to-flags-decl flags-decl
	elif kind == "fun"
		a.to-fun-decl fun-decl
	elif kind == "spec"
		a.to-spec-decl spec-decl
	elif kind == "record"
		a.to-record-decl record-decl
	elif kind == "union"
		a.to-union-decl union-decl
	else
		throw "unexpected export kind {kind}"

-to-alias-decl alias-decl(a json)
	target = a["target"]! to-type-ref
	target,

-to-enum-decl enum-decl(a json)
	a.get-enum-flags-members,

-to-flags-decl flags-decl(a json)
	a.get-enum-flags-members,

-get-enum-flags-members symbol[](a json)
	for x : a["members"]!.as-list!
		x.as-string! to

-to-record-decl record-decl(a json)
	has-non-public-fields = if h ?= a["has-non-public-fields"]
		h.as-bool!
	a.get-purity, has-non-public-fields, for x : a["fields"]!.as-list!
		x to-record-field

-get-purity purity(a json)
	if p ?= a["purity"]
		s = p.as-string!
		if s == "shared"
			shared
		else
			s is "mut"
			mut_
	else
		data

-to-record-field record-field(a json)
	is-mut = if m ?= a["mut"]
		m.as-bool!
	a.get-name, a.get-type, is-mut

-to-union-decl union-decl(a json)
	a.get-purity, for x : a["members"]!.as-list!
		x to-union-member

-to-union-member union-member(a json)
	type type-ref? = if t ?= a["type"]
		t.to-type-ref,
	a.get-name, type

-get-name symbol(a json)
	a["name"]!.as-string! to

-to-type-param type-param(a json)
	a.get-name,

-get-type type-ref(a json)
	a["type"]! to-type-ref

-get-type-args type-ref[](a json)
	if args ?= a["type-args"]
		for x : args.as-list!
			x to-type-ref

-to-fun-decl fun-decl(a json)
	variadic = if v ?= a["variadic"]
		v.as-bool!
	a.get-return-type, variadic, a.get-params, if s ?= a["specs"]
		for x : s.as-list!
			x to-spec-ref

-to-spec-decl spec-decl(a json)
	parents spec-ref[] = for x : a["parents"]!.as-list!
		x to-spec-ref
	body-json = a["body"]!
	kind = body-json["kind"]!.as-symbol!
	body_ = if kind == "builtin"
		spec-builtin
	elif kind == "sigs"
		sigs spec-sig[] = for x : body-json["sigs"]!.as-list!
			x to-sig
		sigs spec-sigs
	else
		throw "unexpected spec kind {kind}"
	parents, body_

-to-sig spec-sig(a json)
	a.get-comment, a.get-name, a.get-return-type, a.get-params

-get-return-type type-ref(a json)
	a["return-type"]! to-type-ref

-get-params param[](a json)
	for x : a["params"]!.as-list!
		x to-param

-to-param param(a json)
	a.get-name, a.get-type

-to-type-ref type-ref(a json)
	kind = a["kind"]!.as-symbol!
	name symbol = a["name"]!.as-symbol!
	if kind == "type-param"
		name, ()
	else
		kind is "struct"
		name, a.get-type-args

-to-spec-ref spec-ref(a json)
	kind = a["kind"]!.as-symbol!
	name symbol = a["name"]!.as-symbol!
	if kind == "special"
		name, ()
	else
		kind is "spec"
		name, a.get-type-args

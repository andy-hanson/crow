import
	crow/io/process: has-error, spawn-and-wait-result, stderr, stdout
	crow/parse: ~~, force, parse, spaces
	crow/version: is-windows
	./module:
		alias-decl, builtin-decl, data_, enum-decl, exports, extern-decl, flags-decl, fun-decl,
		module, module-export, module-export-value, mut_, new, param, purity, spec-decl, spec-ref,
		type-param, type-ref, record-decl, record-field, shared_, spec-sig, union-decl, union-member

get-modules module[]^(paths string[], remove-prefix string) summon
	result = crow-path spawn-and-wait-result "document" ~ paths
	if result has-error
		throw "Could not get documentation. stderr: {result stderr}"
	(((json ~~ spaces) parse result.stdout)! to-modules remove-prefix),

-crow-path string()
	if trusted is-windows
		"bin\\crow.exe"
	else
		"bin/crow"

-to-modules module[](a json, remove-prefix string)
	res module[] = for x : a["modules"].as-list!
		x to-module remove-prefix
	res filter x => !x.exports.is-empty

-to-module module(a json, remove-prefix string)
	path = a["uri"] to-path remove-prefix
	path, a.get-doc, for x : a["exports"].as-list!
		x to-export

-to-path symbol(a json, remove-prefix string)
	(a.as-string! try-remove-start remove-prefix)! to

-get-doc string(a json)
	a["doc"].as-string-allow-null!

-to-export module-export(a json)
	t = a["type-params"]
	type-params type-param[] = if t != json-null
		for x : t.as-list!
			x to-type-param
	value = a["value"] to-export-value
	a.get-name, a.get-doc, type-params, value

-to-export-value module-export-value(a json)
	kind = a["kind"].as-symbol!
	if kind == "alias"
		a.to-alias-decl alias-decl
	elif kind == "builtin"
		builtin-decl
	elif kind == "enum"
		a.to-enum-decl enum-decl
	elif kind == "extern"
		extern-decl
	elif kind == "flags"
		a.to-flags-decl flags-decl
	elif kind == "fun"
		a.to-fun-decl fun-decl
	elif kind == "spec"
		a.to-spec-decl spec-decl
	elif kind == "record"
		a.to-record-decl record-decl
	elif kind == "union"
		a.to-union-decl union-decl
	else
		throw "unexpected export kind {kind}"

-to-alias-decl alias-decl(a json)
	target = a["target"] to-type-ref
	target,

-to-enum-decl enum-decl(a json)
	a.get-enum-flags-members,

-to-flags-decl flags-decl(a json)
	a.get-enum-flags-members,

-get-enum-flags-members symbol[](a json)
	for x : a["members"].as-list!
		x.as-string! to

-to-record-decl record-decl(a json)
	purity: a get-purity
	fields: for x : a["fields"].as-list!
		x to-record-field
	has-non-public-fields: a["has-non-public-fields"].as-bool-allow-null!
	nominal_: a["nominal"].as-bool-allow-null!

-get-purity purity(a json)
	p = a["purity"]
	if p == json-null
		data_
	else
		s = p.as-string!
		if s == "shared"
			shared_
		else
			s is "mut"
			mut_

-to-record-field record-field(a json)
	a.get-name, a.get-type, a["mut"].as-bool-allow-null!

-to-union-decl union-decl(a json)
	a.get-purity, for x : a["members"].as-list!
		x to-union-member

-to-union-member union-member(a json)
	t = a["type"]
	type type-ref? = unless t is-null
		t.to-type-ref,
	a.get-name, type

-get-name symbol(a json)
	a["name"].as-string! to

-to-type-param type-param(a json)
	a.get-name,

-get-type type-ref(a json)
	a["type"] to-type-ref

-get-type-args type-ref[](a json)
	for x : a["type-args"].as-list-allow-null!
		x to-type-ref

-to-fun-decl fun-decl(a json)
	variadic = a["variadic"].as-bool-allow-null!
	a.get-return-type, variadic, a.get-params, for x : a["specs"].as-list-allow-null!
		x to-spec-ref

-to-spec-decl spec-decl(a json)
	is-builtin = a["builtin"].as-bool-allow-null!
	parents spec-ref[] = for x : a["parents"].as-list!
		x to-spec-ref
	sigs spec-sig[] = for x : a["sigs"].as-list!
		x to-sig
	is-builtin, parents, sigs

-to-sig spec-sig(a json)
	a.get-doc, a.get-name, a.get-return-type, a.get-params

-get-return-type type-ref(a json)
	a["return-type"] to-type-ref

-get-params param[](a json)
	for x : a["params"].as-list!
		x to-param

-to-param param(a json)
	a.get-name, a.get-type

-to-type-ref type-ref(a json)
	kind = a["kind"].as-symbol!
	name symbol = a["name"].as-symbol!
	if kind == "type-param"
		name, ()
	else
		kind is "struct"
		name, a.get-type-args

-to-spec-ref spec-ref(a json)
	kind = a["kind"].as-symbol!
	name symbol = a["name"].as-symbol!
	if kind == "special"
		name, ()
	else
		kind is "spec"
		name, a.get-type-args

import
	crow/js: ==, as-js, as-t, await, call-new, call-property, get, js-any, js-cast, js-global, set, undefined
	./js-util: make-class, method
	./util: node

get-attribute string?(a node, attr-name symbol) trusted, js extern
	res = a.as-js call-property "getAttribute", attr-name
	unless res == undefined
		res.as-t,

custom-element-node extern
as-node node(a custom-element-node) trusted, js extern
	a js-cast
shadow-root node(a custom-element-node) trusted, js extern
	a.as-js get "shadowRoot" as-t
get-attribute string?(a custom-element-node, attr-name symbol) js extern
	a.as-node get-attribute attr-name

connected-callback alias
	void mut(this custom-element-node)

# TODO: I think the 'connected' callback should take a 'this custom-element-node' .....................................................
define-custom-element void(element-name string, connected connected-callback) summon, js extern
	element-name define-custom-element "", connected
define-custom-element void(element-name string, style-sheet string, connected connected-callback) summon, js extern
	element-name define-custom-element (_ => style-sheet), connected
define-custom-element void(element-name string, style-sheet string mut(this custom-element-node), connected connected-callback) summon, trusted, js extern
	constructor method = (this, _) =>
		# Using JSON.parse to make sure it's synchronous
		args = "JSON".js-global call-property "parse", "\{\"mode\":\"open\"}"::string
		root = this call-property "attachShadow", args
		root.as-t set-style-sheet style-sheet[this as-t] as-js
	connected-callback method = (this, _) =>
		connected[this as-t] as-js
	cls = "HTMLElement".js-global make-class constructor, (("connectedCallback", connected-callback),)
	_ = "customElements".js-global call-property "define", element-name, cls

set-style-sheet void(shadow-root node, css string) trusted, js extern
	style = "CSSStyleSheet".js-global call-new
	_ = style call-property "replace", css await
	_ = shadow-root.as-js set "adoptedStyleSheets", (style,)::(js-any array)

import
	crow/js:
		==, as-js, as-t, call, call-property, call-property-spread, get, instanceof, js-any,
		js-cast, js-global, null, set

# TODO: This should probably be a 'js/dom' library in crow standard library

node extern

~= void(a node, b node) trusted, js extern
	_ = a.as-js call-property "appendChild", b
~~= void(a node, b node[]) js extern
	for x : b
		a ~= x

+create-node node(tag-name symbol) trusted, js extern
	"document".js-global call-property "createElement", tag-name as-t
+create-node node(tag-name symbol, attr string[symbol]) trusted, js extern
	node = tag-name create-node
	for key, value : attr
		_ = node.as-js call-property "setAttribute", key, value
	node
+create-node node(tag-name symbol, attr string[symbol], class-name string, children node[]) trusted, js extern
	node = tag-name create-node attr
	node.as-js set "className", class-name
	_ = node.as-js call-property-spread "append", children.to
	node js-cast

+create-button node(title string, class-name string, children node[], on-click void mut()) trusted, js extern
	res = "button" create-node (("title", title),), class-name, children
	res.as-js set "onclick", on-click
	res

event extern

+create-input-text node(on-input void mut(x event), value string) trusted, js extern
	res = "input" create-node (("type", "text"), ("value", value))
	_ = res.as-js call-property "addEventListener", "input"::string, on-input # TODO: Do we need to 'syncify' it? ---------------------
	res

+create-div node() js extern	
	"" create-div
+create-div node(class-name string) js extern
	class-name create-div ()
+create-div node(class-name string, children node[]) js extern
	"div" create-node (), class-name, children

+create-span node(class-name string, children node[]) js extern
	class-name create-span (), children
+create-span node(class-name string, attr string[symbol], children node[]) js extern
	"span" create-node attr, class-name, children

+create-text-node node(text string) trusted, js extern
	"document".js-global call-property "createTextNode", text as-t

region query

+first-child node?(a node) trusted, js extern
	res = a.as-js get "firstChild"
	unless res == null
		res.as-t,

region mutate

+remove-all-children void(a node) trusted, js extern
	while child ?= a first-child
		_ = a.as-js call-property "removeChild", child

region Things that don't belong here

make-debouncer void mut(fn void mut())(msec float) trusted, js extern
	cur mut js-any = null
	action =>
		_ = "clearTimeout".js-global call cur
		cur := "setTimeout".js-global call action, msec

get-child-text string(node node) trusted, js extern
	child-nodes = node child-nodes
	assert child-nodes.size == 1
	child-nodes[0] get-text-from-node

-get-text-from-node string(node node) trusted, js extern
	assert node.as-js instanceof "Text".js-global
	(node.as-js get "data").as-t reduce-indent

reduce-indent string(a string)
	# Find first non-whtespace
	a replace-all "\n{"\t"::string repeat a.count-indent}", "\n" strip

count-indent nat(a string)
	i mut nat = 0
	for x : a
		match x
		as "\n"
			i := 0
			continue
		as "\t"
			i +:= 1
			continue
		else
			break i
	else
		0

+query-selector node array(selector string) trusted, js extern
	"document".js-global call-property "querySelectorAll", selector array-of-node-list

+child-nodes node array(a node) trusted, js extern
	a.as-js get "childNodes" array-of-node-list

-array-of-node-list node array(node-list js-any) trusted, js extern
	"Array".js-global call-property "from", node-list as-t

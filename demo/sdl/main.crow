import
	crow/io/duration: msec
	crow/io/print: out, print
	crow/io/time: for-break, get-monotime-msec, interval
	crow/c-types: c-int
	SDL2/SDL:
		SDL_GetError, SDL_Init, SDL_INIT_VIDEO, SDL_Quit
	SDL2/SDL_events:
		==, new, SDL_Event, SDL_PollEvent, SDL_PumpEvents, SDL_Quit, type
	SDL2/SDL_keyboard:
		SDL_GetKeyboardState
	SDL2/SDL_rect: new, SDL_Rect
	SDL2/SDL_render:
		|, SDL_CreateRenderer, SDL_DestroyTexture, SDL_CreateTextureFromSurface,
		SDL_DestroyRenderer, SDL_RenderClear, SDL_RenderCopy, SDL_Renderer,
		SDL_RENDERER_ACCELERATED, SDL_RENDERER_PRESENTVSYNC, SDL_RenderPresent, SDL_Texture
	SDL2/SDL_rwops: SDL_RWFromConstMem
	SDL2/SDL_scancode: SDL_NUM_SCANCODES, SDL_SCANCODE_RETURN, to-nat32
	SDL2/SDL_surface: SDL_FreeSurface, SDL_LoadBMP_RW
	SDL2/SDL_video: SDL_CreateWindow, SDL_DestroyWindow, SDL_Window, SDL_WINDOW_SHOWN
	./crow.bmp as crow-bmp nat8 array

main nat^(_ string[]) summon, trusted
	SDL_INIT_VIDEO.SDL_Init handle-sdl-error "SDL_INIT_VIDEO"
	window = "SDL demo" SDL_CreateWindow 100, 100, window-width, window-height, SDL_WINDOW_SHOWN
	if window == null
		"SDL_CreateWindow" fail-sdl-error
	renderer = window renderer
	texture = renderer create-texture
	<- for : 25.msec interval
		SDL_PumpEvents
		if look-for-quit-event
			break
		else
			<- renderer main-loop-body texture
			continue
	# TODO: use 'finally'
	texture SDL_DestroyTexture
	renderer SDL_DestroyRenderer
	window SDL_DestroyWindow
	SDL_Quit
	()

.window-width int32()
	640
.window-height int32()
	480
.image-width int32()
	200
.image-height int32()
	200

.main-loop-body void^(renderer SDL_Renderer mut*, texture SDL_Texture mut*) summon, trusted
	key-states-pointer = null SDL_GetKeyboardState
	# TODO: use a mut-enum-lookup type
	key-states = key-states-pointer[0 .. SDL_NUM_SCANCODES.to-nat32.to-nat64]
	if key-states[SDL_SCANCODE_RETURN.to-nat32.to-nat64] != 0
		out print "return is pressed"

	renderer.SDL_RenderClear handle-sdl-error "SDL_RenderClear"
	x = ((get-monotime-msec / 10) % window-width.to-nat64).to-int32
	renderer draw-image texture, x
	if x + image-width > window-width
		renderer draw-image texture, x - window-width
	renderer SDL_RenderPresent
	()

.draw-image void(renderer SDL_Renderer mut*, texture SDL_Texture mut*, x int32) summon, trusted
	dest SDL_Rect = x, (window-height - image-height) / 2, image-width, image-height
	renderer SDL_RenderCopy texture, null, &dest handle-sdl-error "SDL_RenderCopy"

.look-for-quit-event bool() summon, trusted
	loop
		e mut SDL_Event = ()
		if (&e).SDL_PollEvent == 0
			break false
		elif e.type == SDL_Quit
			break true
		else
			continue

.renderer SDL_Renderer mut*(window SDL_Window mut*) summon, trusted
	renderer = window SDL_CreateRenderer -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC
	if renderer == null
		"SDL_CreateRenderer" fail-sdl-error
	renderer

.create-texture SDL_Texture mut*(renderer SDL_Renderer mut*) summon, trusted
	bmp = crow-bmp.begin-pointer SDL_RWFromConstMem crow-bmp.size.to-int32 SDL_LoadBMP_RW 0
	if bmp == null
		"sdl-loadbmp-error" fail-sdl-error
	texture = renderer SDL_CreateTextureFromSurface bmp
	bmp SDL_FreeSurface
	if texture == null
		"SDL_CreateTextureFromSurface" fail-sdl-error
	texture

.handle-sdl-error void(err c-int, description string) summon, trusted
	unless err == 0
		description fail-sdl-error

.fail-sdl-error void(description string) summon, trusted
	throw "sdl error in {description}: {SDL_GetError}"
	SDL_Quit

#!/usr/bin/env crow
import
	crow/io/duration: msec
	crow/io/print: out, print
	crow/io/time: for-break, get-monotime-msec, interval
	crow/c-types: c-int
	crow/private/runtime: cur-thread-id
	SDL2/SDL: SDL_GetError, SDL_Init, SDL_INIT_VIDEO, SDL_Quit
	SDL2/SDL_events: new, SDL_Event, SDL_PollEvent, SDL_PumpEvents, SDL_Quit, type
	SDL2/SDL_keyboard:
		SDL_GetKeyboardState
	SDL2/SDL_rect: new, SDL_Rect
	SDL2/SDL_render:
		SDL_CreateRenderer, SDL_DestroyTexture, SDL_CreateTextureFromSurface, SDL_DestroyRenderer,
		SDL_RenderClear, SDL_RenderCopy, SDL_Renderer, SDL_RENDERER_ACCELERATED,
		SDL_RENDERER_PRESENTVSYNC, SDL_RenderPresent, SDL_Texture
	SDL2/SDL_rwops: SDL_RWFromConstMem
	SDL2/SDL_scancode: SDL_NUM_SCANCODES, SDL_SCANCODE_RETURN, to
	SDL2/SDL_surface: SDL_FreeSurface, SDL_LoadBMP_RW
	SDL2/SDL_video: SDL_CreateWindow, SDL_DestroyWindow, SDL_Window, SDL_WINDOW_SHOWN
	./crow.bmp as crow-bmp nat8 array

main nat^(_ string[]) summon
	trusted
		render-thread-id = cur-thread-id
		SDL_INIT_VIDEO.SDL_Init handle-sdl-error "SDL_INIT_VIDEO"
		window = "SDL demo" SDL_CreateWindow 100, 100, window-width, window-height, SDL_WINDOW_SHOWN
		assert window != null : "SDL_CreateWindow" describe-sdl-error
		renderer = window renderer
		texture = renderer create-texture
		<- for : 25.msec interval
			SDL_PumpEvents
			guard !look-for-quit-event : break
			<- renderer main-loop-body texture, render-thread-id
			continue

		render-thread-id run-with-thread-id () =>
			# TODO: use 'finally'
			texture SDL_DestroyTexture
			renderer SDL_DestroyRenderer
			window SDL_DestroyWindow
			SDL_Quit
			()

-window-width int32()
	640
-window-height int32()
	480
-image-width int32()
	200
-image-height int32()
	200

-main-loop-body void^(
	renderer SDL_Renderer mut*,
	texture SDL_Texture mut*,
	render-thread-id nat,
) summon
	trusted
		key-states-pointer = null SDL_GetKeyboardState
		# TODO: use a mut-enum-lookup type
		key-states = key-states-pointer[0 .. SDL_NUM_SCANCODES.to::nat32.to]
		if key-states[SDL_SCANCODE_RETURN.to::nat32.to] != 0
			out print "return is pressed"

		render-thread-id run-with-thread-id () =>
			renderer render texture

-render void(renderer SDL_Renderer mut*, texture SDL_Texture mut*) summon, unsafe
	renderer.SDL_RenderClear handle-sdl-error "SDL_RenderClear"
	x int32 = ((get-monotime-msec / 10) % window-width.to).to
	renderer draw-image texture, x
	if x + image-width > window-width
		renderer draw-image texture, x - window-width
	renderer SDL_RenderPresent
	()

-draw-image void(renderer SDL_Renderer mut*, texture SDL_Texture mut*, x int32) summon, unsafe
	dest SDL_Rect = x, (window-height - image-height) / 2, image-width, image-height
	renderer SDL_RenderCopy texture, null, &dest handle-sdl-error "SDL_RenderCopy"

-run-with-thread-id[t] t^(thread-id nat, cb t mut()) unsafe, t shared
	if cur-thread-id == thread-id
		cb[],
	else
		<- delay
		thread-id run-with-thread-id cb

-look-for-quit-event bool() summon
	trusted loop
		e mut SDL_Event = ()
		if (&e).SDL_PollEvent == 0
			break false
		elif e.type == SDL_Quit
			break true
		else
			continue

-renderer SDL_Renderer mut*(window SDL_Window mut*) summon, unsafe
	res = window SDL_CreateRenderer -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC
	assert res != null : "SDL_CreateRenderer" describe-sdl-error
	res

-create-texture SDL_Texture mut*(renderer SDL_Renderer mut*) summon, unsafe
	bmp = crow-bmp.begin-pointer SDL_RWFromConstMem crow-bmp.size.to SDL_LoadBMP_RW 0
	assert bmp != null : "sdl-loadbmp-error" describe-sdl-error
	texture = renderer SDL_CreateTextureFromSurface bmp
	bmp SDL_FreeSurface
	assert texture != null : "SDL_CreateTextureFromSurface" describe-sdl-error
	texture

-handle-sdl-error void(err c-int, description string) summon, unsafe
	assert err == 0 : description describe-sdl-error

-describe-sdl-error string(description string) summon, unsafe
	"sdl error in {description}: {SDL_GetError}"

import
	crow/io/duration: duration, msec
	crow/io/print: print
	crow/io/time: delay
	crow/ptr: ==, as-any-const-ptr, null
	crow/str-util: to-c-str, to-str
	crow/c-types: c-int
	SDL2/SDL:
		SDL_GetError, SDL_Init, SDL_INIT_VIDEO, SDL_Quit
	SDL2/SDL_events:
		==, SDL_Event, SDL_PollEvent, SDL_PumpEvents, SDL_Quit, type
	SDL2/SDL_keyboard:
		SDL_GetKeyboardState
	SDL2/SDL_render:
		|, SDL_CreateRenderer, SDL_DestroyTexture, SDL_CreateTextureFromSurface,
		SDL_DestroyRenderer, SDL_RenderClear, SDL_RenderCopy, SDL_Renderer,
		SDL_RENDERER_ACCELERATED, SDL_RENDERER_PRESENTVSYNC, SDL_RenderPresent, SDL_Texture
	SDL2/SDL_scancode: SDL_NUM_SCANCODES, SDL_SCANCODE_RETURN, to-nat32
	SDL2/SDL_surface: SDL_FreeSurface, SDL_LoadBMP
	SDL2/SDL_video: SDL_CreateWindow, SDL_DestroyWindow, SDL_Window, SDL_WINDOW_SHOWN

main fut nat(_ str[]) summon trusted
	SDL_INIT_VIDEO.SDL_Init handle-sdl-error "SDL_INIT_VIDEO"
	window = "Hello World!".to-c-str SDL_CreateWindow 100, 100, 640, 480, SDL_WINDOW_SHOWN
	if window.as-any-const-ptr == null
		"SDL_CreateWindow" fail-sdl-error
	renderer = window renderer
	texture = renderer create-texture

	<- 100.msec repeat-interval () => renderer main-loop-body texture

	# TODO: use 'finally'
	texture SDL_DestroyTexture
	renderer SDL_DestroyRenderer
	window SDL_DestroyWindow
	SDL_Quit

	print: "Bye bye"
	()

.main-loop-body continue-or-quit(renderer SDL_Renderer, texture SDL_Texture) summon trusted
	SDL_PumpEvents
	if look-for-quit-event
		quit
	else
		key-states-ptr = null SDL_GetKeyboardState
		# TODO: use a mut-enum-lookup type
		key-states = key-states-ptr[0 .. SDL_NUM_SCANCODES.to-nat32.to-nat64]
		print: if key-states[SDL_SCANCODE_RETURN.to-nat32.to-nat64] == 0
			"no return"
		else
			"return is pressed"

		renderer.SDL_RenderClear handle-sdl-error "SDL_RenderClear"
		renderer SDL_RenderCopy texture, null, null handle-sdl-error "SDL_RenderCopy"
		renderer SDL_RenderPresent
		continue

.look-for-quit-event bool() summon
	e = SDL_Event
	if e.SDL_PollEvent == 0
		false
	elif e.type == SDL_Quit
		true
	else
		look-for-quit-event

.renderer SDL_Renderer(window SDL_Window) summon trusted
	renderer = window SDL_CreateRenderer -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC
	if renderer.as-any-const-ptr == null
		"SDL_CreateRenderer" fail-sdl-error
	renderer

.create-texture SDL_Texture(renderer SDL_Renderer) summon trusted
	image-path = "demo/ball/hello.bmp"
	bmp = image-path SDL_LoadBMP
	if bmp.as-any-const-ptr == null
		"sdl-loadbmp-error" fail-sdl-error
	texture = renderer SDL_CreateTextureFromSurface bmp
	bmp SDL_FreeSurface
	if texture.as-any-const-ptr == null
		"SDL_CreateTextureFromSurface" fail-sdl-error
	texture

.handle-sdl-error void(err c-int, description str) summon trusted
	if err != 0
		description fail-sdl-error

.fail-sdl-error void(description str) summon trusted
	throw: "sdl error in {description}: {SDL_GetError}"
	SDL_Quit

continue-or-quit enum
	continue
	quit

# TODO:MOVE
.repeat-interval fut void(interval duration, action act continue-or-quit()) summon
	match action[]
	as continue
		<- interval delay
		interval repeat-interval action
	as quit
		void,

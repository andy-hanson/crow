import
	bits: bits-or
	include.SDL2.sdl:
		SDL_GetError, SDL_Init, SDL_INIT_VIDEO, SDL_Quit
	include.SDL2.SDL_events:
		SDL_Event, SDL_PollEvent, SDL_PumpEvents, SDL_Quit, type
	include.SDL2.SDL_keyboard:
		SDL_GetKeyboardState
	include.SDL2.SDL_render:
		SDL_CreateRenderer, SDL_DestroyTexture, SDL_CreateTextureFromSurface,
		SDL_DestroyRenderer, SDL_RenderClear, SDL_RenderCopy, SDL_Renderer,
		SDL_RENDERER_ACCELERATED, SDL_RENDERER_PRESENTVSYNC, SDL_RenderPresent, SDL_Texture
	include.SDL2.SDL_scancode:
		SDL_NUM_SCANCODES, SDL_SCANCODE_RETURN
	include.SDL2.SDL_Surface:
		SDL_FreeSurface, SDL_LoadBMP
	include.SDL2.SDL_video:
		SDL_CreateWindow, SDL_DestroyWindow, SDL_Window, SDL_Window-shown
	io.duration: duration, msec
	io.print: print
	io.time: delay
	posix.c-types: c-int
	ptr: as-any-ptr, null, null?
	str-util: to-c-str, to-str

main fut nat(_ arr str) summon trusted
	"SDL_INIT_VIDEO" handle-sdl-error: SDL_INIT_VIDEO SDL_Init
	window = "Hello World!".to-c-str SDL_CreateWindow 100, 100, 640, 480, SDL_WINDOW_SHOWN
	if window.as-any-ptr null?
		"SDL_CreateWindow" fail-sdl-error
	renderer = window renderer
	texture = renderer create-texture

	<- 100.msec repeat-interval () => renderer main-loop-body texture

	# TODO: use 'finally'
	texture SDL_DestroyTexture
	renderer SDL_DestroyRenderer
	window SDL_DestroyWindow
	SDL_Quit

	print: "Bye bye"
	0 resolved

.main-loop-body continue-or-quit(renderer SDL_Renderer, texture SDL_Texture) summon trusted
	SDL_PumpEvents
	if look-for-quit-event
		quit
	else
		key-states-ptr = null SDL_GetKeyboardState
		key-states = arr: SDL_NUM_SCANCODES, key-states-ptr
		print: key-states[SDL_SCANCODE_RETURN] == 0 ? "no return", "return is pressed"

		"SDL_RenderClear" handle-sdl-error: renderer SDL_RenderClear
		"SDL_RenderCopy" handle-sdl-error: renderer SDL_RenderCopy texture, null, null
		renderer SDL_RenderPresent
		continue

.look-for-quit-event bool() summon
	e = SDL_Event
	if e.SDL_PollEvent == 0
		false
	else
		if e.type == SDL_Quit
			true
		else
			look-for-quit-event

.renderer SDL_Renderer(window SDL_Window) summon trusted
	renderer = window SDL_CreateRenderer: -1, SDL_RENDERER_ACCELERATED bits-or SDL_RENDERER_PRESENTVSYNC
	if renderer.as-any-ptr null?
		"SDL_CreateRenderer" fail-sdl-error
	renderer

.create-texture SDL_Texture(renderer SDL_Renderer) summon trusted
	image-path = "demo/ball/hello.bmp"
	bmp = image-path SDL_LoadBMP
	if bmp.as-any-ptr null?
		"sdl-loadbmp-error" fail-sdl-error
	texture = renderer SDL_CreateTextureFromSurface bmp
	bmp SDL_FreeSurface
	if texture.as-any-ptr null?
		"SDL_CreateTextureFromSurface" fail-sdl-error
	texture

.handle-sdl-error void(operation str, err c-int) summon trusted
	if err != 0
		operation fail-sdl-error

.fail-sdl-error void(operation str) summon trusted
	throw: "sdl error in {operation}: {SDL_GetError}"
	SDL_Quit

continue record
quit record
continue-or-quit union
	continue
	quit

# TODO:MOVE
.repeat-interval fut void(interval duration, action act continue-or-quit()) summon
	match action[]
	as continue
		<- interval delay
		interval repeat-interval action
	as quit
		void resolved

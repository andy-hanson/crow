#!/usr/bin/env crow
import
	crow/io/print: clear-screen, out, print
	crow/io/stdin: read-stdin-until-parse
	crow/version: is-interpreted
	./board:
		==, board, board-cache, can-place, color, empty-board, enum-members, has-empty, just-won,
		new, opposite, place, red, set-subscript, show, subscript, width

main void() summon, native extern
	settings = ask-settings
	if settings.has-slow-ai && trusted is-interpreted
		warn log "AI may be slow in interpreter, try running with '--aot'"
	empty-board print-board red, ()
	winner = empty-board play-recur red, settings
	out print winner.show-winner

-ask-settings ai-settings() summon, native extern
	out print """
Choose an option:

2: 2-player game
E: VS Easy CPU
M: VS Medium CPU
H: VS Hard CPU (be sure to run with '--aot')
CPU: CPU vs CPU
"""
	"Invalid option" read-stdin-until-parse x => x parse-settings

-parse-settings ai-settings?(a string)
	match a
	as "2"
		((), ()),
	as E
		((), (6,)),
	as M
		((), (8,)),
	as H
		((), (9,)),
	as CPU
		((9,), (9,)),

-show-winner string(winner color?)
	if w ?= winner
		"{w show} wins!"
	else
		"It's a tie."

-ai-settings record(ai-depth-red nat?, ai-depth-blue nat?)

-has-slow-ai bool(a ai-settings)
	a.ai-depth-red.is-slow-ai || a.ai-depth-blue.is-slow-ai
-is-slow-ai bool(a nat?)
	if x ?= a
		x > 6

-ai-depth-for-color nat?(color color, ai-settings ai-settings)
	match color
	as red
		ai-settings ai-depth-red
	as blue
		ai-settings ai-depth-blue

-play-recur color?(board board, cur-player color, ai-settings ai-settings) summon, native extern
	x = if depth ?= cur-player ai-depth-for-color ai-settings
		board ai-best-x depth
	else
		board human-player-move cur-player
	new-board = board place x
	other-player = cur-player opposite
	clear-screen
	new-board print-board other-player, (x,)
	if new-board just-won
		cur-player,
	elif new-board has-empty
		new-board play-recur other-player, ai-settings

-print-board void(a board, cur-player color, last-x nat?) summon
	out print (a show cur-player, last-x)

-human-player-move nat(board board, color color) summon, native extern
	out print "{color} player, where will you go? (Type a letter A-G and hit enter)"
	loop
		column = "Not a valid column." read-stdin-until-parse x => x column-of-string
		if board can-place column
			break column
		else
			out print "Can't, column is full."
			continue

-column-of-string nat?(a string)
	guard n ?= a.strip letter-to-number
	guard n < width
	n,

-letter-to-number nat?(a string)
	chars char8[] = a to
	guard chars.size == 1
	n nat = chars[0] to
	if "A"::char8.to::nat <= n && n < "Z"::char8.to
		(n - "A"::char8.to),
	elif "a"::char8.to::nat <= n && n < "z"::char8.to
		(n - "a"::char8.to),

-strategy record(x nat, score int32)

score-cache alias
	int32 board-cache

-ai-best-x nat(board board, ai-depth nat)
	# Use a new cache each time, since each turn we're exploring to a further depth.
	cache score-cache = ()
	cache strategy-recur board, ai-depth, (0, min-value), 0, 0 x

-strategy-score int32(cache score-cache, board board, ai-depth nat)
	cache[board] ?? do
		res = cache strategy-recur board, ai-depth, (0, min-value), 0, 0 score
		cache[board] := res
		res

-strategy-recur strategy(
	cache score-cache,
	board board,
	ai-depth nat,
	best strategy,
	sum-score int,
	x nat,
)
	if x == width
		best.x, sum-score.clamp-to
	else
		score int32, new-best strategy = if board can-place x
			new-board = board place x
			score int32 = if new-board just-won
				width ** ai-depth clamp-to
			elif ai-depth == 0
				0
			else
				-(cache strategy-score new-board, ai-depth - 1)
			new-strategy = score <= best.score ? best : x, score
			score, new-strategy
		else
			0, best
		cache strategy-recur board, ai-depth, new-best, (sum-score + score.to), x + 1

indent string(depth nat)
	" " repeat 2 * (9 - depth)

import
	crow/io/file: read-file
	crow/io/net/http-server: http-handler, http-server, with-block
	crow/io/net/http-types:
		headers, http-bad-query, http-forbidden, http-not-found, http-ok, http-request,
		http-response, method, request-body-string, url
	crow/io/print: out, print
	crow/io/stdin: read-stdin
	crow/parse: ~~, grammar, nat, parse, separated-by, text-not-containing-any, to
	./db:
		add-post, cookie-expire-seconds, db, list-posts, list-users, login, open-real-db, post-info,
		register-user, to, user-cookie, user-info, user-name, with-block

main nat^(_ string[]) summon
	with db : open-real-db
		handler http-handler = shared req => (req handle-request db),
		with _ : 8080 http-server handler
			out print "Serving at http://localhost:8080; press enter to stop"
			_ <- read-stdin

-handle-request http-response(req http-request, db db) summon
	su = req.url split-url
	path = su path
	query = su query
	match req method
	as GET
		match path
		as "/"
			"demo/webapp/index.html".read-file http-ok
		as "/index.js"
			"demo/webapp/index.js".read-file http-ok
		as "/posts"
			(("posts", db.list-posts.to),)::json.to http-ok
		as "/user-name"
			user = query.parse-query["user"] ?? ""
			match nat parse user
			as ok user-id
				db user-name user-id http-ok
			as error e
				"{e}" http-bad-query
		as "/users"
			(("users", db.list-users.to),)::json.to http-ok
		else
			http-not-found
	as POST
		match path
		as "/register"
			args = req.request-body-string parse-query
			match db register-user (args["user-name"] ?? ""), (args["password"] ?? "")
			as register-user-success user-id
				# We need to get: user-name and password
				(("userId", user-id.to),)::json.to http-ok
			as bad-user-name message
				"Bad user name: {message}" http-bad-query
			as user-already-exists
				"User already exists" http-bad-query
		as "/login"
			args = req.request-body-string parse-query
			user-name = args["user-name"] ?? ""
			match db login user-name, (args["password"] ?? "")
			as ok cookie
				"Logged in as {user-name}" http-ok \
					(("Set-Cookie", "login={cookie}; Max-Age={cookie-expire-seconds}"),)
			as error e
				match e
				as empty-name-or-password
					"Invalid user or password" http-bad-query
				as user-does-not-exist
					"User does not exist" http-not-found
				as wrong-password
					"Wrong password" http-forbidden
		as "/post"
			cookie-str = req.headers["Cookie"] ?? ""
			guard cookie ?= cookie-str parse-cookie "login" : "Missing login cookie" http-forbidden
			match user-cookie parse cookie
			as ok user-cookie
				post = db add-post user-cookie, req.request-body-string
				(("postId", post.to),)::json.to http-ok
			as error e
				"Error parsing 'login' cookie: {e}" http-forbidden
		else
			http-not-found

-url record(path string, query string)

-split-url url(url-string string)
	if x, y ?= url-string try-split-once "?"
		x, y
	else
		url-string, ""

# Extra cookies are ignored
-parse-cookies string?[](cookies-string string, cookie-names string[])
	res string? mut[] = cookie-names.size n-of ()
	for part : cookies-string split "; "
		guard name, value ?= part try-split-once "="
		guard index ?= cookie-names index-of name
		res[index] := value,
	res move-to

-parse-cookie string?(cookies-string string, cookie-name string)
	(cookies-string parse-cookies (cookie-name,))[0]

-parse-query string[string](s string)
	match query parse s
	as ok pairs
		pairs to
	as error err
		error log "failed to parse query {s} with error {err}"
		()

-query (string, string)[] grammar()
	query-part separated-by "&"
-query-part (string, string) grammar()
	identifier = ("=", "&") text-not-containing-any
	identifier ~~ "=" ~~ identifier

-to json(a user-info)
-to json(a post-info)

import
	crow/io/file: read-file
	crow/io/net/http-server: http-handler, http-server, with-block
	crow/io/net/http-types
	crow/io/print: out, print
	crow/io/stdin: read-stdin
	crow/parse: nat, parse, to
	./db

main void() summon
	with db : open-real-db
		handler http-handler = shared req => req handle-request db
		port nat16 = 8080
		with _ : port http-server handler
			out print "Serving at http://localhost:{port}; press enter to stop"
			_ = read-stdin

-handle-request http-response(req http-request, db db) summon
	try
		req handle-request-inner db
	catch user-not-authorized
		http-forbidden

-handle-request-inner http-response(req http-request, db db) summon
	path = req path
	query = req query
	match req method
	as GET
		match path
		as "/"
			"demo/webapp/index.html".read-file http-ok
		as "/index.js"
			"demo/webapp/index.js".read-file http-ok
		as "/posts"
			(("posts", db.list-posts.to),)::json.to http-ok
		as "/user-name"
			user = query["user"] ?? ""
			guard user-id ?= nat parse user ok : "Bad user" http-bad-query
			db user-name user-id http-ok
		as "/users"
			(("users", db.list-users.to),)::json.to http-ok
		else
			http-not-found
	as POST
		match path
		as "/register"
			guard args ?= req.body-json : "Body must be JSON" http-bad-query
			guard user-name ?= args["userName"].string : "Missing userName" http-bad-query
			guard password ?= args["password"].string : "Missing password" http-bad-query
			match db register-user user-name, password
			as register-user-success user-id
				# We need to get: user-name and password
				(("userId", user-id.to),)::json.to http-ok
			as bad-user-name message
				"Bad user name: {message}" http-bad-query
			as user-already-exists
				"User already exists" http-bad-query
		as "/login"
			guard args ?= req.body-json : "Body must be JSON" http-bad-query
			guard user-name ?= args["userName"].string : "Missing userName" http-bad-query
			guard password ?= args["password"].string : "Missing password" http-bad-query
			guard cookie ?= db login user-name, password : http-forbidden
			cookies cookies = ("login", cookie.to), ("max-age", cookie-expire-seconds.to)
			"Logged in as {user-name}" http-ok (cookies.set-cookie-header,)
		as "/post"
			cookies = req parse-cookies
			guard cookie ?= cookies["login"] : "Missing login cookie" http-forbidden
			match user-cookie parse cookie
			as ok user-cookie
				guard args ?= req.body-json : "Body must be JSON" http-bad-query
				guard content ?= args["content"].string : "Missing content" http-bad-query
				post = db add-post user-cookie, content
				(("postId", post.to),)::json.to http-ok
			as error e
				"Error parsing 'login' cookie: {e}" http-forbidden
		else
			http-not-found

-to json(a user-info)
-to json(a post-info)

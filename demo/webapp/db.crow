import
	crow/crypto/experimental/login-cookie:
		cookie, cookie-matches, from-bytes, generate-login-cookie, login-cookie, to, to-bytes
	crow/crypto/password-hash: password-hash, password-matches-hash, quality-moderate
	crow/io/print: err, out, print
	crow/parse: ~~, grammar, map, nat
	crow/serialize: from-bytes, to-bytes
	lmdb/main

main nat^(_ string[]) summon
	with db : open-real-db
		if true
			match db register-user "alice", "swordfish"
			as register-user-success user-id
				out print "Success: user is {user-id}"
			as bad-user-name desc
				err print "Invalid user name: {desc}"
			as user-already-exists
				err print "That user already exists"

		cookie = match db login "alice", "swordfish"
		as ok o
			o
		as error _
			throw "TODO"
		first-post = db add-post cookie, "hello world"
		pi = db get-post-info first-post
		out print "{pi user-name} ({pi user}): {pi content}"

		out print "users:"
		for user : db list-users
			out print "{user}"
		out print "posts:"
		for post : db list-posts
			out print "{post}"
		()

user alias
	nat

user-info record(user user, user-name string)

to string(a user-info)
	"user {a user}: {a user-name}"

post alias
	nat

post-info record(post post, user user, user-name string, content string)

to string(a post-info)
	"post {a post}: {a user-name} (user {a user}) says: {a content}"

user-cookie record(user nat, inner login-cookie)

user-cookie user-cookie grammar()
	nat ~~ "|" ~~ login-cookie map (user, cookie) =>
		user, cookie

to string(a user-cookie)
	"{a user}|{a inner}"

db record mut
	-env lmdb-env
	-user-from-name (string, user) lmdb-db
	-user-name (user, string) lmdb-db
	-user-password-hash (user, nat8[]) lmdb-db
	-user-login-cookie (user, login-cookie) lmdb-db
	-post-user (post, user) lmdb-db
	-post-content (post, string) lmdb-db

open-db record(db-path string) nominal

open-real-db open-db()
	db-path open-db

with-block[t] t^(a open-db, f t^ mut(db db)) summon, t shared
	with env : a.db-path open-lmdb-env true
		with user-from-name : env database@(string, user) "user-from-name"
			with user-name : env database@(user, string) "user-name"
				with user-pw-hash : env database@(user, nat8[]) "user-password-hash"
					with user-login : env database@(user, login-cookie) "user-login-cookie"
						with post-user : env database@(post, user) "post-user"
							with post-content : env database@(post, string) "post-content"
								f[env, user-from-name, user-name, user-pw-hash, user-login,
									post-user, post-content]

list-users user-info[](db db) summon
	with txn : db.env read-transaction
		for user, name : txn each db.user-name
			user, name

user-name string(db db, user user) summon
	with txn : db.env read-transaction
		(txn get db.user-name, user)!

list-posts post-info[](db db) summon
	with txn : db.env read-transaction
		txn zip db.post-user, db.post-content, (post, user, content) =>
			user-name = (txn get db.user-name, user)!
			post, user, user-name, content

register-user-result union
	register-user-success user
	bad-user-name string
	user-already-exists
== bool(a register-user-result, b register-user-result)

register-user register-user-result(db db, user-name string, password string) summon
	guard !(user-name.size < 4 || user-name.size > 64) :
		"user name must be 4-64 characters" bad-user-name
	with txn : db.env abortable-write-transaction
		new-user-id = txn count db.user-from-name
		user-count-check = txn count db.user-name
		assert new-user-id == user-count-check
		guard txn try-add db.user-from-name, user-name, new-user-id :
			user-already-exists, transaction-abort
		txn add db.user-name, new-user-id, user-name
		hash = password password-hash quality-moderate
		txn add db.user-password-hash, new-user-id, hash
		new-user-id.register-user-success, transaction-commit

login-error enum(empty-name-or-password, user-does-not-exist, wrong-password)

login (user-cookie, login-error) result(db db, user-name string, password string) summon
	guard user-name.is-empty || password.is-empty : empty-name-or-password error
	with txn : db.env write-transaction
		guard user ?= db get-user txn, user-name : user-does-not-exist error
		hash = (txn get db.user-password-hash, user)!
		guard password password-matches-hash hash : wrong-password error
		cookie = generate-login-cookie
		txn set db.user-login-cookie, user, cookie
		(user, cookie) ok

-get-post-info post-info(db db, post post) summon
	with txn : db.env read-transaction
		user = (txn get db.post-user, post)!
		user-name = (txn get db.user-name, user)!
		content = (txn get db.post-content, post)!
		post, user, user-name, content

add-post post(db db, cookie user-cookie, content string) summon
	with txn : db.env write-transaction
		user = db authenticate txn, cookie
		post = txn count db.post-user
		txn add db.post-user, post, user
		txn add db.post-content, post, content
		post

-get-user user?(db db, txn lmdb-txn, user-name string) summon
	txn get db.user-from-name, user-name

-authenticate user(db db, txn lmdb-txn, cookie user-cookie) summon
	assert db try-authenticate txn, cookie : "Login cookie invalid (may have expired)"
	cookie user

-try-authenticate bool(db db, txn lmdb-txn, cookie user-cookie) summon
	guard login-cookie ?= txn get db.user-login-cookie, cookie.user
	login-cookie cookie-matches cookie.inner.cookie, cookie-expire-seconds

-db-path string()
	"demo/webapp/db"

cookie-expire-seconds nat()
	5 * 60

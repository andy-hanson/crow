#!/usr/bin/env crow
import
	crow/c-types: fd-t
	crow/io/print: out, print
	system/arpa/inet: inet_addr, inet_ntoa
	system/netdb: gethostbyname, getprotobyname, h_addr_list, p_proto
	system/netinet/in: htons, in_addr, new, sockaddr_in
	system/sys/socket: AF_INET, connect, sockaddr, socket, SOCK_STREAM
	system/unistd: read, write

main nat^(_ string[]) summon
	trusted
		socket = get-tcp-socket
		socket connect-socket "crow-lang.org", 80
		socket send-request "GET / HTTP/1.1\r\nHost: crow-lang.org\r\n\r\n"
		socket receive-response
	()

-get-tcp-socket fd-t() summon, unsafe
	protoent = "tcp" getprotobyname
	forbid protoent == null
	socket-file-descriptor = AF_INET socket SOCK_STREAM, protoent->p_proto
	forbid socket-file-descriptor == max-value
	socket-file-descriptor to

-connect-socket void(socket fd-t, hostname string, server-port nat16) summon, unsafe
	hostent = hostname.to gethostbyname
	forbid hostent == null
	in_addr0 in_addr* = hostent->h_addr_list->pointer-cast
	in_addr = in_addr0->inet_ntoa inet_addr

	sockaddr_in mut sockaddr_in = AF_INET, server-port.htons, (in_addr,)
	sockaddr sockaddr mut* = (&sockaddr_in)::sockaddr_in mut* pointer-cast
	# TODO: should be able to write size-of@sockaddr_in.to
	err = socket.to connect sockaddr, (size-of@sockaddr_in to)
	assert err == 0

-send-request void(socket fd-t, request string) summon, unsafe
	forbid request is-empty
	bytes mut nat8 array = request to
	loop
		bytes-sent = socket write bytes.begin-pointer, bytes.size
		# TODO: might be 0 if the socket is overloaded -- delay and try again
		assert bytes-sent > 0
		if bytes-sent < bytes.size.to
			bytes := bytes[bytes-sent.to .. end]
			continue
		else
			assert bytes-sent == bytes.size.to
			break

-receive-response void(socket fd-t) summon
	trusted
		buffer nat8 mut-array = 0x2000 uninitialized-mut-array
		# TODO: use epoll like we did in the server, for a non-blocking read.
		bytes-read = socket read buffer.begin-pointer, buffer.size
		assert bytes-read >= 0
		if bytes-read > 0
			out print "Read (possibly partial) response:"
			out print buffer[0 .. bytes-read.to].cast-immutable.as-string
			# TODO: Response might be partial. The parser will have to tell us that.

import
	collection.dict: dict
	collection.mut-set: ~=, mut-set, remove!, subscript
	io.net.http-server: http-handler, http-response, start-http-server
	io.net.tcp-server: close-client, start-tcp-server, stop, tcp-handler
	io.print: print
	io.time: delay, msec
	posix.errno: errno
	posix.extra-types: fd-t
	posix.stdio: perror
	posix.unistd: write
	sys.epoll: epoll-event

main fut nat(args arr str) unsafe summon
	assert: size-of<epoll-event> == 12
	if args.size != 1
		print: "Usage: server PORT"
		1 resolved
	else
		port = args[0]
		if false
			print: "RUNNING OLD MAIN"
			port old-main
		else
			port new-main

new-main fut nat(port str) unsafe summon
	handler = as<http-handler>: \req
		drop: req
		resolved: http-response: 200, "OK", dict, "Hello, internet world!"
	server = port start-http-server handler
	drop: server
	0 resolved

old-main fut nat(port str) unsafe summon
	clients = mut-set<fd-t>

	on-accepted-client = as<ref void(fd-t)>: \fd
		clients ~= fd
		void resolved
	on-received-chunk = as<ref void(fd-t, arr nat8)>: \client-fd, chunk
		print: "CHUNK: " ~ chunk.as-str
		if clients[client-fd]
			print: "got chunk (" ~ chunk.size.to-str ~ " bytes) on " ~ client-fd.to-str
			| TODO: this actually does not belong here..
			response = ok-response
			wrote = client-fd write response.data.ptr-cast<nat8, char>, response.size
			if wrote == -1
				print: "ERRNO IS: " ~ errno.to-str
				perror: "WRITE ERR\0".data

			print: "WROTE: " ~ wrote.to-str ~ " bytes to " ~ client-fd.to-str
			print: "Response size: " ~ response.size.to-str
			assert: wrote == response.size.to-int
			client-fd close-client
			print: "Closed client on " ~ client-fd.to-str
			clients remove! client-fd drop
		else
			print: "ignoring chunk from closed client " ~ client-fd.to-str
		void resolved
	server = port start-tcp-server tcp-handler: on-accepted-client, on-received-chunk

	print: "will stop after 10 seconds"
	ignore-me <- 10000.msec delay
	drop: ignore-me
	print: "stopping..."
	ignore-me-2 <- server.stop[]
	drop: ignore-me-2
	print: "done"
	0 resolved

ok-response str() noctx
	"HTTP/1.1 200 OK Feelin' Fine\nShoop: Da Woop\n\nHello, internet world!\n"

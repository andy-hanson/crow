#!/usr/bin/env crow

import
	crow/col/arr-util: tail
	crow/db/lmdb:
		from-lmdb-key, get, lmdb-key-flags, lmdb-open-options, set, stat, to-lmdb-key, to-str,
		with-db, with-env, with-read-transaction, with-write-transaction
	crow/io/print: print
	crow/parse-command: parse-named-args, single-str-or-throw
	crow/serialize: from-bytes, to-bytes

main fut nat(args str[]) unsafe summon
	command-name = if args is-empty
		""
	else
		args[0]
	if command ?= command-name.parse-command_name
		match command
		as get
			named-args = args.tail parse-named-args ["db-path", "db-name", "key"] force
			db-path = named-args[0] single-str-or-throw "db-path"
			db-name = named-args[1] single-str-or-throw "db-name"
			key = named-args[2] single-str-or-throw "key"
			db-path with-env true.lmdb-open-options, env =>
				env with-db<void, str, str> db-name, db =>
					print: env with-read-transaction txn =>
						txn get db, key or-default "none"
		as set
			named-args = args.tail parse-named-args ["db-path", "db-name", "key", "value"] force
			db-path = named-args[0] single-str-or-throw "db-path"
			db-name = named-args[1] single-str-or-throw "db-name"
			key = named-args[2] single-str-or-throw "key"
			value = named-args[3] single-str-or-throw "value"
			db-path with-env true.lmdb-open-options, env =>
				env with-db<void, str, str> db-name, db =>
					env with-write-transaction txn =>
						txn set db, key, value
		as stat
			named-args = args.tail parse-named-args ["db-path", "db-name"] force
			db-path = named-args[0] single-str-or-throw "db-path"
			db-name = named-args[1] single-str-or-throw "db-name"
			db-path with-env true.lmdb-open-options, env =>
				env with-db<void, str, str> db-name, db =>
					print: env with-read-transaction txn =>
						txn stat db to-str
		0 resolved
	else
		print: usage
		1 resolved

.usage str()
	# TODO: Use a """ string
	a = "Usage: crow run db <get | set | stat> --db-path <db file path> --db-name <db name> --key <key> --value <value>"

	b = "Creates the DB file if it does not yet exist."
	c = "The file contains multiple named sub-dbs."
	d = "Each sub-db is a map from keys to values."

	e = "Example:"
	f = "	crow run db -- set --db-path foo.db --db-name capitals --key indiana --value indianapolis"
	g = "	crow run db -- get --db-path foo.db --db-name capitals --key indiana"
	"{a}\n{b}\n{c}\n{d}\n{e}\n{f}\n{g}\n"

.parse-command_name command?(a str)
	if a == "get"
		get some
	elif a == "set"
		set some
	elif a == "stat"
		stat some

.command union
	get
	set
	stat
get record
set record
stat record

no-std
import
	crow/cell: *, cell
	crow/col/arr: begin-ptr, size
	crow/col/mut-arr: begin-ptr, copy-to-arr, uninitialized-mut-arr
	crow/compare: !=
	crow/exception: assert, throw
	crow/io/file: read-file
	crow/misc: void
	crow/number: ==, to-int32, to-nat64
	crow/ptr: null
	crow/str: str
	crow/str-util: to-c-str
	GLES2/gl2:
		glAttachShader, GLchar, glCompileShader, GL_COMPILE_STATUS, glCreateProgram, glCreateShader,
		glDeleteProgram, glDeleteShader, GLenum, GL_FALSE, GL_FRAGMENT_SHADER,
		glGetProgramInfoLog, glGetProgramiv, glGetShaderInfoLog, glGetShaderiv,
		GL_INFO_LOG_LENGTH, GLint, glLinkProgram, GL_LINK_STATUS, glShaderSource, GL_TRUE,
		GLuint, GL_VERTEX_SHADER

shader-prog-load GLuint(vert-file-name str, frag-file-name str) summon unsafe
	vert-shader = vert-file-name shader-load GL_VERTEX_SHADER
	frag-shader = frag-file-name shader-load GL_FRAGMENT_SHADER
	shader-prog = glCreateProgram
	assert: shader-prog != 0
	shader-prog glAttachShader vert-shader
	shader-prog glAttachShader frag-shader
	shader-prog glLinkProgram
	# TODO: type arg should not be needed
	linking-succeeded = GL_FALSE cell<GLint>
	shader-prog glGetProgramiv GL_LINK_STATUS, linking-succeeded
	vert-shader glDeleteShader
	frag-shader glDeleteShader
	if *linking-succeeded == GL_TRUE
		shader-prog
	else
		log-length = 0 cell<GLint>
		shader-prog glGetProgramiv GL_INFO_LOG_LENGTH, log-length
		err-log = (*log-length).to-nat64 uninitialized-mut-arr<GLchar>
		shader-prog glGetProgramInfoLog *log-length, log-length, err-log.begin-ptr
		shader-prog glDeleteProgram
		err-log.copy-to-arr.str throw

shader-prog-destroy void(shader-prog GLuint) summon unsafe
	shader-prog glDeleteProgram

.shader-load GLuint(file-name str, shader-type GLenum) summon unsafe
	shader = file-name create-shader-from-source shader-type
	shader glCompileShader
	compile-succeeded = GL_FALSE cell<GLint>
	shader glGetShaderiv GL_COMPILE_STATUS, compile-succeeded
	if *compile-succeeded == GL_TRUE
		shader
	else
		log-length = 0 cell<GLint>
		shader glGetShaderiv GL_INFO_LOG_LENGTH, log-length
		err-log = (*log-length).to-nat64 uninitialized-mut-arr<GLchar>
		shader glGetShaderInfoLog *log-length, log-length, err-log.begin-ptr
		shader glDeleteShader
		err-log.copy-to-arr.str throw

.create-shader-from-source GLuint(file-name str, shader-type GLenum) summon unsafe
	shader = shader-type glCreateShader
	ccc = file-name.read-file
	shader-sources = [ccc.to-c-str]
	shader glShaderSource shader-sources.size.to-int32, shader-sources.begin-ptr, null
	shader

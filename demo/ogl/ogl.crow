import
	crow/cell: as-ptr, cell, subscript
	crow/col/mut-arr: begin-ptr, map-to-arr, mut-arr, set-subscript, size, subscript
	crow/c-types: c-int
	crow/io.duration: duration, msec
	crow/io.print: print
	crow/io.time: delay
	crow/math/vec: +, vec-2-32
	crow/ptr: as-any-ptr, null, null?, ptr-cast, ptr-to, size-of, to-ptr
	crow/str-util: join, to-c-str, to-str
	GLES2/gl2:
		==, glActiveTexture, GL_ARRAY_BUFFER, glBindBuffer, glBindTexture, glBufferData,
		glBufferSubData, glClear, glClearColor, GL_COLOR_BUFFER_BIT, glDeleteBuffers, glDrawArrays,
		glEnableVertexAttribArray, GL_FLOAT, glGenBuffers, glGetError, glGetUniformLocation,
		GL_NO_ERROR, GL_STATIC_DRAW, GL_TEXTURE0, GL_TEXTURE_2D, GL_TRIANGLE_FAN, GLuint, glUniform1i,
		glUseProgram, glVertexAttribPointer, to-str
	SDL2/SDL:
		SDL_GetError, SDL_Init, SDL_INIT_VIDEO, SDL_Quit
	SDL2/SDL_events:
		==, SDL_Event, SDL_PollEvent, SDL_PumpEvents, SDL_Quit, type
	SDL2/SDL_keyboard:
		SDL_GetKeyboardState
	SDL2/SDL_scancode:
		SDL_NUM_SCANCODES, SDL_SCANCODE_RETURN, to-nat32
	SDL2/SDL_video:
		|, SDL_CreateWindow, SDL_DestroyWindow, SDL_GL_CONTEXT_PROFILE_ES, SDL_GL_CreateContext,
		SDL_GL_DOUBLEBUFFER, SDL_GL_CONTEXT_MAJOR_VERSION, SDL_GL_CONTEXT_MINOR_VERSION,
		SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_SetAttribute, SDL_GL_SwapWindow, SDL_Window,
		SDL_WINDOW_OPENGL, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOW_SHOWN, to-int32
	./shader: shader-prog-destroy, shader-prog-load
	./texture: load-texture, free-texture

main fut nat(_ arr str) summon trusted
	"SDL_INIT_VIDEO" handle-sdl-error: SDL_INIT_VIDEO SDL_Init

	"set GL ES" handle-sdl-error: SDL_GL_CONTEXT_PROFILE_MASK SDL_GL_SetAttribute SDL_GL_CONTEXT_PROFILE_ES.to-int32
	"set major version" handle-sdl-error: SDL_GL_CONTEXT_MAJOR_VERSION SDL_GL_SetAttribute 3
	"set minor version" handle-sdl-error: SDL_GL_CONTEXT_MINOR_VERSION SDL_GL_SetAttribute 0
	"set double buffer" handle-sdl-error: SDL_GL_DOUBLEBUFFER SDL_GL_SetAttribute 1

	wflags = SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN
	window = "my game".to-c-str SDL_CreateWindow SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 480, wflags
	if window.as-any-ptr null?
		"SDL_CreateWindow" fail-sdl-error

	context = window SDL_GL_CreateContext
	if context.as-any-ptr null?
		"SDL_GL_CreateContext" fail-sdl-error

	#0.0 glClearColor 0.0, 0.0, 1.0
	#GL_COLOR_BUFFER_BIT glClear
	#window SDL_GL_SwapWindow

	shader-prog = "demo/ogl/vertex.vert.essl" shader-prog-load "demo/ogl/fragment.frag.essl"
	"after shader-prog" gl-check-error
	shader-prog glUseProgram

	tex-sampler-uniform-loc = shader-prog glGetUniformLocation "texSampler".to-c-str
	"after tex-sampler-uniform-loc" gl-check-error
	assert: tex-sampler-uniform-loc >= 0
	tex-sampler-uniform-loc glUniform1i 0
	"after glUniform1i" gl-check-error

	texture = "demo/ogl/sprite.webp" load-texture

	v0 = -0.9 vec-2-32 -0.9
	v1 = 0.9 vec-2-32 -0.9
	v2 = 0.9 vec-2-32 0.9
	v3 = -0.9 vec-2-32 0.9
	t0 = 0.0 vec-2-32 0.0
	t1 = 1.0 vec-2-32 0.0
	t2 = 1.0 vec-2-32 1.0
	t3 = 0.0 vec-2-32 1.0
	vertices = mut-arr: [(v0 vertex red, t0), (v1 vertex green, t1), (v2 vertex blue, t2), (v3 vertex white, t3)]
	triangle-vbo = vertices vbo-create
	assert: triangle-vbo != 0

	colors = vertices map-to-arr (v => v.color to-str) join " | "
	print: colors

	renderer = window renderer shader-prog, vertices, triangle-vbo, texture

	<- 100.msec repeat-interval () => renderer main-loop-body

	# TODO: use 'finally'
	texture free-texture
	triangle-vbo vbo-free
	shader-prog shader-prog-destroy
	window SDL_DestroyWindow
	SDL_Quit

	print: "Bye bye"
	0 resolved

.vertex record
	by-val
	pos vec-2-32
	color color-32
	tex-coord vec-2-32

# TODO:MOVE
color-32 record
	by-val
	r float32
	g float32
	b float32

to-str str(a color-32)
	"<{a r}, {a g}, {a b}>"

white color-32()
	1 color-32 1, 1
red color-32()
	1 color-32 0, 0
green color-32()
	0 color-32 1, 0
blue color-32()
	0 color-32 0, 1

.renderer record mut
	window SDL_Window
	shader-prog GLuint
	vertices mut-arr vertex
	triangle-vbo GLuint
	texture GLuint

.main-loop-body continue-or-quit(renderer renderer) summon trusted
	SDL_PumpEvents
	if look-for-quit-event
		quit
	else
		key-states-ptr = null SDL_GetKeyboardState
		key-states = arr: SDL_NUM_SCANCODES.to-nat32.to-nat64, key-states-ptr
		print: if key-states[SDL_SCANCODE_RETURN.to-nat32 to-nat64] == 0
			"no return"
		else
			"return is pressed"

		v0 = renderer.vertices[0]
		renderer.vertices[0] := (v0.pos + (0.003 vec-2-32 0)) vertex v0.color, v0.tex-coord

		renderer draw-it

		#"SDL_RenderClear" handle-sdl-error: renderer SDL_RenderClear
		#"SDL_RenderCopy" handle-sdl-error: renderer SDL_RenderCopy texture, null, null
		#renderer SDL_RenderPresent
		continue


.draw-it void(renderer renderer) summon unsafe
	0.0 glClearColor 0.0, 0.0, 1.0
	GL_COLOR_BUFFER_BIT glClear

	renderer.shader-prog glUseProgram

	GL_ARRAY_BUFFER glBindBuffer renderer.triangle-vbo
	GL_ARRAY_BUFFER glBufferSubData 0, renderer.vertices.n-bytes.to-int64, renderer.vertices.begin-ptr.ptr-cast
	# TODO: don't do this every frame?
	stride = (to-int32: size-of<vertex>)
	0 glVertexAttribPointer 2, GL_FLOAT, false, stride, 0.to-ptr
	0 glEnableVertexAttribArray
	1 glVertexAttribPointer 3, GL_FLOAT, false, stride, (2 * size-of<float32>).to-ptr
	1 glEnableVertexAttribArray
	2 glVertexAttribPointer 2, GL_FLOAT, false, stride, (5 * size-of<float32>).to-ptr
	2 glEnableVertexAttribArray

	GL_TEXTURE0 glActiveTexture
	GL_TEXTURE_2D glBindTexture renderer.texture

	GL_TRIANGLE_FAN glDrawArrays 0, renderer.vertices.size.to-int32

	renderer.window SDL_GL_SwapWindow

.look-for-quit-event bool() summon
	e = SDL_Event
	if e.SDL_PollEvent == 0
		false
	else
		if e.type == SDL_Quit
			true
		else
			look-for-quit-event

.handle-sdl-error void(operation str, err c-int) summon trusted
	if err != 0
		operation fail-sdl-error

.fail-sdl-error void(operation str) summon trusted
	throw: "sdl error in {operation}: {SDL_GetError}"
	SDL_Quit

continue record
quit record
continue-or-quit union
	continue
	quit

# TODO:MOVE
.repeat-interval fut void(interval duration, action act continue-or-quit()) summon
	match action[]
	as continue
		<- interval delay
		interval repeat-interval action
	as quit
		void resolved

.vbo-create GLuint(vertices mut-arr vertex) summon unsafe
	vbo-cell = 0 cell<GLuint>
	n-buffers = 1 to-int32
	n-buffers glGenBuffers vbo-cell.as-ptr
	vbo = vbo-cell[]
	GL_ARRAY_BUFFER glBindBuffer vbo
	GL_ARRAY_BUFFER glBufferData vertices.n-bytes.to-int64, vertices.begin-ptr.ptr-cast, GL_STATIC_DRAW
	GL_ARRAY_BUFFER glBindBuffer 0
	err = glGetError
	if err != GL_NO_ERROR
		n-buffers glDeleteBuffers vbo-cell.as-ptr
		"Creating VBO failed: Code {err}" throw
	vbo

n-bytes nat(vertices mut-arr vertex) unsafe
	vertices.size * size-of<vertex>

.vbo-free void(vbo GLuint) summon unsafe
	1 glDeleteBuffers vbo.ptr-to

.gl-check-error void(desc str) summon
	err = glGetError
	if err != GL_NO_ERROR
		"Gl error at {desc}: code {err}" throw


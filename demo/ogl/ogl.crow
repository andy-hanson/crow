import
	bits: bits-or
	cell: as-ptr, cell, subscript
	col.mut-arr: begin-ptr, mut-arr, set-subscript, size, subscript
	include.GLES2.gl2:
		GL_ARRAY_BUFFER, glBindBuffer, glBufferData, glBufferSubData, glClear,
		glClearColor, GL_COLOR_BUFFER_BIT, glDeleteBuffers, glDrawArrays,
		glEnableVertexAttribArray, GL_FLOAT, glGenBuffers, glGetError, GL_NO_ERROR,
		GL_STATIC_DRAW, GL_TRIANGLES, GLuint, glUseProgram, glVertexAttribPointer
	include.SDL2.SDL:
		SDL_GetError, SDL_Init, SDL_INIT_VIDEO, SDL_Quit
	include.SDL2.SDL_events:
		SDL_Event, SDL_PollEvent, SDL_PumpEvents, SDL_Quit, type
	include.SDL2.SDL_keyboard:
		SDL_GetKeyboardState
	include.SDL2.SDL_scancode:
		SDL_NUM_SCANCODES, SDL_SCANCODE_RETURN
	include.SDL2.SDL_video:
		SDL_CreateWindow, SDL_DestroyWindow, SDL_GL_CONTEXT_PROFILE_ES, SDL_GL_CreateContext,
		SDL_GL_DOUBLEBUFFER, SDL_GL_CONTEXT_MAJOR_VERSION, SDL_GL_CONTEXT_MINOR_VERSION,
		SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_SetAttribute, SDL_GL_SwapWindow, SDL_Window, SDL_WINDOW_OPENGL,
		SDL_WINDOWPOS_UNDEFINED, SDL_WINDOW_SHOWN
	io.duration: duration, msec
	io.print: print
	io.time: delay
	math.vec: +, vec-2-32
	posix.c-types: c-int
	ptr: as-any-ptr, null, null?, ptr-cast, ptr-to, size-of
	str-util: to-c-str, to-str
	.shader: shader-prog-destroy, shader-prog-load

main fut nat(_ arr str) summon trusted
	"SDL_INIT_VIDEO" handle-sdl-error: SDL_INIT_VIDEO SDL_Init

	"set GL ES" handle-sdl-error: SDL_GL_CONTEXT_PROFILE_MASK SDL_GL_SetAttribute SDL_GL_CONTEXT_PROFILE_ES
	"set major version" handle-sdl-error: SDL_GL_CONTEXT_MAJOR_VERSION SDL_GL_SetAttribute 3
	"set minor version" handle-sdl-error: SDL_GL_CONTEXT_MINOR_VERSION SDL_GL_SetAttribute 0
	"set double buffer" handle-sdl-error: SDL_GL_DOUBLEBUFFER SDL_GL_SetAttribute 1

	wflags = SDL_WINDOW_OPENGL bits-or SDL_WINDOW_SHOWN
	window = "my game".to-c-str SDL_CreateWindow SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 480, wflags
	if window.as-any-ptr null?
		"SDL_CreateWindow" fail-sdl-error

	context = window SDL_GL_CreateContext
	if context.as-any-ptr null?
		"SDL_GL_CreateContext" fail-sdl-error

	#0.0 glClearColor 0.0, 0.0, 1.0
	#GL_COLOR_BUFFER_BIT glClear
	#window SDL_GL_SwapWindow

	shader-prog = "demo/ogl/vertex.vert.essl" shader-prog-load "demo/ogl/fragment.frag.essl"

	v0 = (0.0 vec-2-32 -0.9)
	v1 = (0.9 vec-2-32 0.9)
	v2 = (-0.9 vec-2-32 0.9)
	vertices = mut-arr: [(v0 vertex red), (v1 vertex green), (v2 vertex blue)]
	triangle-vbo = vertices vbO_CREATe
	assert: triangle-vbo != 0

	renderer = window renderer shader-prog, vertices, triangle-vbo

	<- 100.msec repeat-interval {renderer main-loop-body}

	# TODO: use 'finally'
	triangle-vbo vbo-free
	shader-prog shader-prog-destroy
	window SDL_DestroyWindow
	SDL_Quit

	print: "Bye bye"
	0 resolved

.vertex record
	by-val
	pos vec-2-32
	color color-32

# TODO:MOVE
color-32 record
	by-val
	r float32
	g float32
	b float32

red color-32()
	1 color-32 0, 0
green color-32()
	0 color-32 1, 0
blue color-32()
	0 color-32 0, 1

.renderer record mut
	window SDL_Window
	shader-prog GLuint
	vertices mut-arr vertex
	triangle-vbo GLuint

.main-loop-body continue-or-quit(renderer renderer) summon trusted
	SDL_PumpEvents
	if look-for-quit-event
		quit
	else
		key-states-ptr = null SDL_GetKeyboardState
		key-states = arr: SDL_NUM_SCANCODES, key-states-ptr
		print: key-states[SDL_SCANCODE_RETURN] == 0 ? "no return", "return is pressed"

		renderer.vertices[0] := (renderer.vertices[0].pos + (0.01 vec-2-32 0)) vertex renderer.vertices[0].color

		renderer draw-it

		#"SDL_RenderClear" handle-sdl-error: renderer SDL_RenderClear
		#"SDL_RenderCopy" handle-sdl-error: renderer SDL_RenderCopy texture, null, null
		#renderer SDL_RenderPresent
		continue


.draw-it void(renderer renderer) summon unsafe
	0.0 glClearColor 0.0, 0.0, 1.0
	GL_COLOR_BUFFER_BIT glClear

	renderer.shader-prog glUseProgram

	GL_ARRAY_BUFFER glBindBuffer renderer.triangle-vbo
	GL_ARRAY_BUFFER glBufferSubData 0, renderer.vertices.n-bytes.to-int, renderer.vertices.begin-ptr.ptr-cast
	position-idx = 0 as<GLuint>
	position-idx glVertexAttribPointer 5, GL_FLOAT, false, (to-int32: size-of<vertex>), null
	position-idx glEnableVertexAttribArray

	GL_TRIANGLES glDrawArrays 0, renderer.vertices.size.to-int32

	renderer.window SDL_GL_SwapWindow

.look-for-quit-event bool() summon
	e = SDL_Event
	if e.SDL_PollEvent == 0
		false
	else
		if e.type == SDL_Quit
			true
		else
			look-for-quit-event

.handle-sdl-error void(operation str, err c-int) summon trusted
	if err != 0
		operation fail-sdl-error

.fail-sdl-error void(operation str) summon trusted
	throw: "sdl error in {operation}: {SDL_GetError}"
	SDL_Quit

continue record
quit record
continue-or-quit union
	continue
	quit

# TODO:MOVE
.repeat-interval fut void(interval duration, action act continue-or-quit()) summon
	match action[]
	as continue
		<- interval delay
		interval repeat-interval action
	as quit
		void resolved

.vbO_CREATe GLuint(vertices mut-arr vertex) summon unsafe
	vbo-cell = 0 cell<GLuint>
	n-buffers = 1 to-int32
	n-buffers glGenBuffers vbo-cell.as-ptr
	vbo = vbo-cell[]
	GL_ARRAY_BUFFER glBindBuffer vbo
	GL_ARRAY_BUFFER glBufferData vertices.n-bytes.to-int, vertices.begin-ptr.ptr-cast, GL_STATIC_DRAW
	GL_ARRAY_BUFFER glBindBuffer 0
	err = glGetError
	if err != GL_NO_ERROR
		n-buffers glDeleteBuffers vbo-cell.as-ptr
		"Creating VBO failed: Code {err}" throw
	vbo

n-bytes nat(vertices mut-arr vertex) unsafe
	vertices.size * size-of<vertex>

.vbo-free void(vbo GLuint) summon unsafe
	1 glDeleteBuffers vbo.ptr-to

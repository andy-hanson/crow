import
	crow/c-types: c-int
	./headers:
		sqlite3, sqlite3_close, sqlite3_exec, sqlite3_free, SQLITE_OK, SQLITE_OPEN_CREATE,
		SQLITE_OPEN_READWRITE, sqlite3_open_v2

+db record force-shared
	raw sqlite3 mut*

+open-sqlite3 record(db-path string) nominal
+with-block[t] t(a open-sqlite3, cb t mut(db db)) summon, t shared
	trusted
		db mut sqlite3 mut* = null
		# Create empty file if not exist
		err = a.db-path.to sqlite3_open_v2 &db, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE, null
		assert err == SQLITE_OK
		finally db close
		cb[db,]

-close void(db sqlite3 mut*) summon, unsafe
	err2 = db sqlite3_close
	assert err2 == SQLITE_OK

+run void(db db, command string) summon
	for _ : db query command
		()

+query record(db db, query string) mut, nominal

# TODO: this is just to get the size hint. Should be named 'size-hint'?
+size nat64(_ query)
	0

+iterate bool(a query, f bool mut(row string[symbol])) summon
	trusted
		error-message mut c-string = null
		ctx mut callback-ctx = f,
		ctx-ptr callback-ctx mut* = &ctx
		err = a.db.raw sqlite3_exec a.query.to, &callback, ctx-ptr.pointer-cast, &error-message
		# TODO: if err == SQLITE_ABORT, callback returned non-0
		if err != SQLITE_OK
			error-string string = error-message to
			error-message.as-mut.pointer-cast sqlite3_free
			throw "ERROR {err}: {error-string}" error

-callback-ctx record by-val, mut
	cb-row bool mut(row string[symbol])

-callback c-int(
	ctx-pointer any-mut-pointer,
	argc c-int,
	argv c-string*,
	col-name c-string*,
) summon, unsafe
	row string[symbol] = for i : 0::nat64 .. argc.to
		col-name[i].to::string.to, argv[i].to
	(ctx-pointer.as-const.pointer-cast::callback-ctx*)->cb-row[row] ? 1 : 0

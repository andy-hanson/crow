import
	crow/private/thread-utils: acquire, init, lock, release, uninit
	./audio: new, playing-sound
	./sound: ==, format, new, samples, show, sound, sound-format

audio-queue record by-ref, force-shared
	format sound-format
	-lk mut lock
	# All sounds normalized to `format`
	-playing entry mut[]

lock lock mut*(a audio-queue) bare, unsafe, native extern
	&a.lk

new audio-queue(format sound-format) native extern
	trusted
		res audio-queue = format, uninit, ()
		res.lock init
		res

-entry record by-ref, force-shared
	samples float32 array
	cur mut float32*
	looping bool

-reset-position void(a entry) native extern
	a.cur := trusted a.samples begin-pointer

-is-over bool(a entry) bare, native extern
	!a.looping && trusted a.cur == a.samples.end-pointer

clear void(a audio-queue) bare, native extern
	trusted
		a.lock acquire
		a.playing clear
		a.lock release

play playing-sound(a audio-queue, sound sound) native extern
	a play-common sound, false

play-loop playing-sound(a audio-queue, sound sound) native extern
	a play-common sound, true

# This locks the queue, so make sure 'out' isn't huge
pull void(a audio-queue, out float32 mut-array) bare, unsafe, native extern
	out fill 0
	a.lock acquire
	a.playing.begin-pointer each-playing a.playing.end-pointer, out
	a.lock release

-each-playing void(
	cur entry mut*,
	end entry mut*,
	out float32 mut-array,
) bare, unsafe, native extern
	guard cur != end
	*cur add-to out
	cur + 1 each-playing end, out

-add-to void(a entry, out float32 mut-array) bare, unsafe, native extern
	n-remaining = a.samples.end-pointer - a.cur
	if n-remaining > out.size
		end = a.cur + out.size
		out add (a.cur .. end).as-array
		a.cur := end
	else
		out-mid = out.begin-pointer + n-remaining
		(out.begin-pointer .. out-mid).as-mut-array add (a.cur .. a.samples.end-pointer).as-array
		if a looping
			a.cur := a.samples begin-pointer
			a add-to (out-mid .. out.end-pointer).as-mut-array
		else
			a.cur := a.samples end-pointer

-add void(a float32 mut-array, b float32 array) bare, unsafe, native extern
	assert a.size == b.size
	out mut = a begin-pointer
	read mut = b begin-pointer
	until out == a.end-pointer
		*out +:= *read
		out +:= 1
		read +:= 1
	assert read == b.end-pointer

-play-common playing-sound(a audio-queue, sound sound, looping bool) native extern
	assert sound.format == a.format :
		"sound format mismatch: expected {a format}, got {sound format}" error
	trusted
		a.lock acquire
		# Can't use 'filter=' in 'bare' code, so do it here
		a.playing filter= x => !x.is-over
		entry entry = sound.samples, sound.samples.begin-pointer, looping
		a.playing ~= entry
		a.lock release
		reset-position: () =>
			entry reset-position
		set-playing: desired =>
			a set-playing entry, desired

-set-playing void(a audio-queue, entry entry, desired bool) native extern
	trusted
		a.lock acquire
		is-playing mut bool = false
		# Can't use 'set-filter' in 'bare' code, so do it here
		a.playing filter= x =>
			if x is-over
				false
			elif x reference-equal entry
				is-playing := true
				desired
			else
				true
		if desired && !is-playing
			a.playing ~= entry
		a.lock release

test native extern
	format sound-format = 2, 44100
	a audio-queue = format,
	sound sound = format, (1, 2, 3, 4, 5, 6, 7, 8)
	buf float32 mut-array = 0, 0, 0
	trusted
		a pull buf
		buf.to::float32[] is (0, 0, 0)
		_ = a play sound
		a pull buf
		buf.to::float32[] is (1, 2, 3)
		a pull buf
		buf.to::float32[] is (4, 5, 6)
		a pull buf
		buf.to::float32[] is (7, 8, 0)
		a pull buf
		buf.to::float32[] is (0, 0, 0)

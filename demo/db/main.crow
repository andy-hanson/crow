#!/usr/bin/env crow

import
	crow/io/print: out, print
	crow/parse-command: parse-named-args, single-str-or-throw
	crow/serialize: from-bytes
	lmdb/main:
		database, from-lmdb-key, get, lmdb-key-flags, open-lmdb-env, read-transaction, set, stat,
		to-lmdb-key, to-str, with-block, write-transaction

main nat^(args str[]) unsafe summon
	command-name = !args.is-empty ? args[0]
	if command ?= command-name.parse-command_name
		match command
		as get
			named-args = (args.tail parse-named-args ("db-path", "db-name", "key"))!
			db-path = named-args[0] single-str-or-throw "db-path"
			db-name = named-args[1] single-str-or-throw "db-name"
			key = named-args[2] single-str-or-throw "key"
			with env : db-path open-lmdb-env true
				with db : env database@<str, str> db-name
					value = with txn : env read-transaction
						txn get db, key ?? "none"
					out print value
					()
		as set
			named-args = (args.tail parse-named-args ("db-path", "db-name", "key", "value"))!
			db-path = named-args[0] single-str-or-throw "db-path"
			db-name = named-args[1] single-str-or-throw "db-name"
			key = named-args[2] single-str-or-throw "key"
			value = named-args[3] single-str-or-throw "value"
			with env : db-path open-lmdb-env true
				with db : env database@<str, str> db-name
					with txn : env write-transaction
						txn set db, key, value
					()
		as stat
			named-args = (args.tail parse-named-args ("db-path", "db-name"))!
			db-path = named-args[0] single-str-or-throw "db-path"
			db-name = named-args[1] single-str-or-throw "db-name"
			with env : db-path open-lmdb-env true
				with db : env database@<str, str> db-name
					stats = with txn : env read-transaction
						txn stat db to-str
					out print stats
					()
	else
		out print usage
		1,

.usage str()
	# TODO: Use a """ string
	a = "Usage: crow run db <get | set | stat> --db-path <db file path> --db-name <db name> --key <key> --value <value>"

	b = "Creates the DB file if it does not yet exist."
	c = "The file contains multiple named sub-dbs."
	d = "Each sub-db is a map from keys to values."

	e = "Example:"
	f = "	crow run db -- set --db-path foo.db --db-name capitals --key indiana --value indianapolis"
	g = "	crow run db -- get --db-path foo.db --db-name capitals --key indiana"
	"{a}\n{b}\n{c}\n{d}\n{e}\n{f}\n{g}\n"

.parse-command_name command?(a str)
	if a == "get"
		get,
	elif a == "set"
		set,
	elif a == "stat"
		stat,

.command enum
	get
	set
	stat

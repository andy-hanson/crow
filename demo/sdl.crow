import
	bits: bit-shift-left, bits-or
	io.duration: duration, msec
	io.print: print
	io.time: delay
	ptr: as-any-ptr, null, null?, ptr
	str-util: to-c-str, to-str

c-int alias
	int

# SDL.h

sdl-flags alias
	nat32

sdl-init c-int(flags sdl-flags) extern<"SDL_Init", "SDL2"> noctx summon

sdl-init-video sdl-flags()
	1 bit-shift-left 5

sdl-init-joystick sdl-flags()
	1 bit-shift-left 9

sdl-quit void() extern<"SDL_Quit", "SDL2"> noctx summon

# SDL_error.h

sdl-err alias
	int

sdl-get-error c-str() extern<"SDL_GetError", "SDL2"> noctx summon

# SDL_events.h

sdl-pump-events void() extern<"SDL_PumpEvents", "SDL2"> noctx summon

# SDL_keyboard.h

sdl-get-keyboard-state ptr nat8(num-keys ptr int) extern<"SDL_GetKeyboardState", "SDL2"> noctx summon

# SDL_rect.h

sdl-rect record
	x c-int
	y c-int
	w c-int
	h c-int

# SDL_render.h

sdl-create-renderer sdl-renderer
	window sdl-window
	index c-int
	flags sdl-flags
spec
	extern<"SDL_CreateRenderer", "SDL2">
	noctx
	summon
	unsafe

sdl-create-texture-from-surface sdl-texture
	renderer sdl-renderer
	surface sdl-surface
spec
	extern<"SDL_CreateTextureFromSurface", "SDL2">
	noctx
	summon
	unsafe

sdl-destroy-renderer void(renderer sdl-renderer) extern<"SDL_DestroyRenderer", "SDL2"> noctx summon unsafe

sdl-destroy-texture void(texture sdl-texture) extern<"SDL_DestroyTexture", "SDL2"> noctx summon unsafe

sdl-render-clear c-int(renderer sdl-renderer) extern<"SDL_RenderClear", "SDL2"> noctx summon unsafe

sdl-render-copy c-int
	renderer sdl-renderer
	texture sdl-texture
	src-rect ptr sdl-rect
	dest-rect ptr sdl-rect
spec
	extern<"SDL_RenderCopy">
	noctx
	summon
	unsafe

sdl-renderer extern-ptr

sdl-renderer-accelerated sdl-flags()
	2

sdl-renderer-present-vsync sdl-flags()
	4

sdl-render-present void(renderer sdl-renderer) extern<"SDL_RenderPresent", "SDL2"> noctx summon unsafe

sdl-texture extern-ptr

# SDL_rwops.h

sdl-rwops extern-ptr

sdl-rw-from-file sdl-rwops(file c-str, mode c-str) extern<"SDL_RWFromFile", "SDL2"> noctx summon unsafe

# SDL_surface.h

sdl-free-surface void(surface sdl-surface) extern<"SDL_FreeSurface", "SDL2"> noctx summon unsafe

sdl-surface extern-ptr

sdl-load-bmp-rw sdl-surface(src sdl-rwops, freesrc c-int) extern<"SDL_LoadBMP_RW", "SDL2"> noctx summon unsafe

sdl-load-bmp sdl-surface(file str) summon unsafe
	file.to-c-str sdl-rw-from-file "rb".to-c-str sdl-load-bmp-rw 1

# SDL_scancode.h

sdl-scancode alias
	nat

sdl-scancode-return sdl-scancode()
	40

sdl-scancode-right sdl-scancode()
	79
sdl-scancode-left sdl-scancode()
	80
sdl-scancode-down sdl-scancode()
	81
sdl-scancode-up sdl-scancode()
	82
sdl-num-scancodes sdl-scancode()
	512

# SDL_video.h

sdl-destroy-window void(window sdl-window) extern<"SDL_DestroyWindow", "SDL2"> noctx summon unsafe

sdl-window extern-ptr

sdl-create-window sdl-window
	title c-str
	x c-int
	y c-int
	w c-int
	h c-int
	flags sdl-flags
spec
	extern<"SDL_CreateWindow", "SDL2">
	noctx
	summon
	unsafe

sdl-window-shown sdl-flags()
	4

# Not lib code


main fut nat(_ arr str) summon trusted
	"sdl-init-video" handle-sdl-error: sdl-init-video sdl-init
	window = "Hello World!".to-c-str sdl-create-window 100, 100, 640, 480, sdl-window-shown
	if window.as-any-ptr null?
		"sdl-create-window" fail-sdl-error
	renderer = window renderer
	texture = renderer create-texture

	<- 20 repeat-interval 100.msec, {renderer main-loop-body texture}

	# TODO: use 'finally'
	texture sdl-destroy-texture
	renderer sdl-destroy-renderer
	window sdl-destroy-window
	sdl-quit

	print: "Bye bye"
	0 resolved

main-loop-body void(renderer sdl-renderer, texture sdl-texture) summon trusted
	sdl-pump-events
	key-states-ptr = null sdl-get-keyboard-state
	key-states = arr: sdl-num-scancodes, key-states-ptr
	print: key-states[sdl-scancode-return] == 0 ? "no return", "return is pressed"

	"sdl-render-clear" handle-sdl-error: renderer sdl-render-clear
	"sdl-render-copy" handle-sdl-error: renderer sdl-render-copy texture, null, null
	renderer sdl-render-present

renderer sdl-renderer(window sdl-window) summon trusted
	renderer = window sdl-create-renderer: -1, sdl-renderer-accelerated bits-or sdl-renderer-present-vsync
	if renderer.as-any-ptr null?
		"sdl-create-renderer" fail-sdl-error
	renderer

create-texture sdl-texture(renderer sdl-renderer) summon trusted
	image-path = "demo/hello.bmp"
	bmp = image-path sdl-load-bmp
	if bmp.as-any-ptr null?
		"sdl-loadbmp-error" fail-sdl-error
	texture = renderer sdl-create-texture-from-surface bmp
	bmp sdl-free-surface
	if texture.as-any-ptr null?
		"sdl-create-texture-from-surface" fail-sdl-error
	texture


handle-sdl-error void(operation str, err c-int) summon trusted
	if err != 0
		operation fail-sdl-error

fail-sdl-error void(operation str) summon trusted
	throw: "sdl error in {operation}: {sdl-get-error}"
	sdl-quit

# TODO:MOVE
repeat-interval fut void(times nat, interval duration, action act void()) summon
	if times != 0
		action[]
		<- interval delay
		times - 1 repeat-interval interval, action
	else
		void resolved

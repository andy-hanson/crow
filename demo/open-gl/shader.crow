import
	crow/cell: *, cell, new
	crow/col/fix-arr: begin-ptr, fix-arr, to-arr, uninitialized-fix-arr
	crow/col/private/arr-low-level: begin-ptr
	crow/ptr: null
	crow/str-util: to-c-str
	GLES2/gl2:
		glAttachShader, GLchar, glCompileShader, GL_COMPILE_STATUS, glCreateProgram, glCreateShader,
		glDeleteProgram, glDeleteShader, GLenum, GL_FALSE, GL_FRAGMENT_SHADER,
		glGetProgramInfoLog, glGetProgramiv, glGetShaderInfoLog, glGetShaderiv,
		GL_INFO_LOG_LENGTH, GLint, glLinkProgram, GL_LINK_STATUS, glShaderSource, GL_TRUE,
		GLuint, GL_VERTEX_SHADER

shader-prog-load GLuint(vert-shader-source str, frag-shader-source str) summon unsafe
	vert-shader = vert-shader-source shader-load GL_VERTEX_SHADER
	frag-shader = frag-shader-source shader-load GL_FRAGMENT_SHADER
	shader-prog = glCreateProgram
	assert: shader-prog != 0
	shader-prog glAttachShader vert-shader
	shader-prog glAttachShader frag-shader
	shader-prog glLinkProgram
	# TODO: type arg should not be needed
	linking-succeeded cell GLint = GL_FALSE,
	shader-prog glGetProgramiv GL_LINK_STATUS, linking-succeeded
	vert-shader glDeleteShader
	frag-shader glDeleteShader
	if *linking-succeeded == GL_TRUE
		shader-prog
	else
		log-length cell GLint = 0,
		shader-prog glGetProgramiv GL_INFO_LOG_LENGTH, log-length
		err-log fix-arr GLchar = log-length->to-nat64 uninitialized-fix-arr
		shader-prog glGetProgramInfoLog *log-length, log-length, err-log.begin-ptr
		shader-prog glDeleteProgram
		err-log.to-arr.str throw

shader-prog-destroy void(shader-prog GLuint) summon unsafe
	shader-prog glDeleteProgram

.shader-load GLuint(source str, shader-type GLenum) summon unsafe
	shader = source create-shader-from-source shader-type
	shader glCompileShader
	compile-succeeded cell GLint = GL_FALSE,
	shader glGetShaderiv GL_COMPILE_STATUS, compile-succeeded
	if *compile-succeeded == GL_TRUE
		shader
	else
		log-length cell GLint = 0,
		shader glGetShaderiv GL_INFO_LOG_LENGTH, log-length
		err-log fix-arr GLchar = log-length->to-nat64 uninitialized-fix-arr
		shader glGetShaderInfoLog *log-length, log-length, err-log.begin-ptr
		shader glDeleteShader
		err-log.to-arr.str throw

.create-shader-from-source GLuint(source str, shader-type GLenum) summon unsafe
	shader = shader-type glCreateShader
	shader-sources c-str[] = source.to-c-str,
	shader glShaderSource shader-sources.size.to-int32, shader-sources.begin-ptr, null
	shader

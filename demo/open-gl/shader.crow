import
	OpenGL/gl:
		glAttachShader, glCompileShader, glCreateProgram, glCreateShader, glDeleteProgram,
		glDeleteShader, gl-ext, glGetProgramInfoLog, glGetProgramiv, glGetShaderInfoLog,
		glGetShaderiv, glLinkProgram, glShaderSource
	OpenGL/headers:
		GLchar, GL_COMPILE_STATUS, GLenum, GL_FALSE, GL_FRAGMENT_SHADER, GL_INFO_LOG_LENGTH, GLint,
		GL_LINK_STATUS, GL_TRUE, GLuint, GL_VERTEX_SHADER

shader-prog-load GLuint(
	gl gl-ext,
	vert-shader-source string,
	frag-shader-source string,
) summon, unsafe
	vert-shader = gl shader-load "vertex shader", vert-shader-source, GL_VERTEX_SHADER
	frag-shader = gl shader-load "fragment shader", frag-shader-source, GL_FRAGMENT_SHADER
	shader-prog GLuint = gl glCreateProgram
	assert shader-prog != 0
	gl glAttachShader shader-prog, vert-shader
	gl glAttachShader shader-prog, frag-shader
	gl glLinkProgram shader-prog
	linking-succeeded mut GLint = GL_FALSE
	gl glGetProgramiv shader-prog, GL_LINK_STATUS, &linking-succeeded
	gl glDeleteShader vert-shader
	gl glDeleteShader frag-shader
	if linking-succeeded == GL_TRUE
		shader-prog
	else
		log-length mut GLint = 0
		gl glGetProgramiv shader-prog, GL_INFO_LOG_LENGTH, &log-length
		err-log GLchar mut-array = log-length.to uninitialized-mut-array
		gl glGetProgramInfoLog shader-prog, log-length, &log-length, err-log.begin-pointer
		gl glDeleteProgram shader-prog
		throw "Error loading shaders: {err-log.to::(char8 array)}"

shader-prog-destroy void(gl gl-ext, shader-prog GLuint) summon, unsafe
	gl glDeleteProgram shader-prog

-shader-load GLuint(gl gl-ext, name string, source string, shader-type GLenum) summon, unsafe
	shader = gl create-shader-from-source source, shader-type
	gl glCompileShader shader
	compile-succeeded mut GLint = GL_FALSE
	gl glGetShaderiv shader, GL_COMPILE_STATUS, &compile-succeeded
	if compile-succeeded == GL_TRUE
		shader
	else
		log-length mut GLint = 0
		gl glGetShaderiv shader, GL_INFO_LOG_LENGTH, &log-length
		err-log GLchar mut-array = log-length.to uninitialized-mut-array
		gl glGetShaderInfoLog shader, log-length, &log-length, err-log.begin-pointer
		gl glDeleteShader shader
		throw "error compiling GLSL {name}: {err-log.to::(char8 array)}"

-create-shader-from-source GLuint(gl gl-ext, source string, shader-type GLenum) summon, unsafe
	shader = gl glCreateShader shader-type
	shader-sources c-string array = source.to,
	gl glShaderSource shader, shader-sources.size.to, shader-sources.begin-pointer, null
	shader

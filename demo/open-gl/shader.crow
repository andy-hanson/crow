import
	crow/cell: *, cell, new
	crow/col/mut-array: begin-ptr, mut-array, to-array, uninitialized-mut-array
	crow/col/private/array-low-level: begin-ptr
	crow/ptr: null
	OpenGL/gl:
		glAttachShader, glCompileShader, glCreateProgram, glCreateShader, glDeleteProgram,
		glDeleteShader, gl-ext, glGetProgramInfoLog, glGetProgramiv, glGetShaderInfoLog,
		glGetShaderiv, glLinkProgram, glShaderSource
	OpenGL/headers:
		GLchar, GL_COMPILE_STATUS, GLenum, GL_FALSE, GL_FRAGMENT_SHADER, GL_INFO_LOG_LENGTH, GLint, GL_LINK_STATUS,
		GL_TRUE, GLuint, GL_VERTEX_SHADER

shader-prog-load GLuint(gl gl-ext, vert-shader-source str, frag-shader-source str) summon unsafe
	vert-shader = gl shader-load "vertex shader", vert-shader-source, GL_VERTEX_SHADER
	frag-shader = gl shader-load "fragment shader", frag-shader-source, GL_FRAGMENT_SHADER
	shader-prog = gl glCreateProgram
	assert shader-prog != 0
	gl glAttachShader shader-prog, vert-shader
	gl glAttachShader shader-prog, frag-shader
	gl glLinkProgram shader-prog
	# TODO: type arg should not be needed
	linking-succeeded cell GLint = GL_FALSE,
	gl glGetProgramiv shader-prog, GL_LINK_STATUS, linking-succeeded
	gl glDeleteShader vert-shader
	gl glDeleteShader frag-shader
	if *linking-succeeded == GL_TRUE
		shader-prog
	else
		log-length cell GLint = 0,
		gl glGetProgramiv shader-prog, GL_INFO_LOG_LENGTH, log-length
		err-log mut-array GLchar = log-length->to-nat64 uninitialized-mut-array
		gl glGetProgramInfoLog shader-prog, *log-length, log-length, err-log.begin-ptr
		gl glDeleteProgram shader-prog
		throw "Error loading shaders: {err-log.to-array.to-list.str}"

shader-prog-destroy void(gl gl-ext, shader-prog GLuint) summon unsafe
	gl glDeleteProgram shader-prog

.shader-load GLuint(gl gl-ext, name str, source str, shader-type GLenum) summon unsafe
	shader = gl create-shader-from-source source, shader-type
	gl glCompileShader shader
	compile-succeeded cell GLint = GL_FALSE,
	gl glGetShaderiv shader, GL_COMPILE_STATUS, compile-succeeded
	if *compile-succeeded == GL_TRUE
		shader
	else
		log-length cell GLint = 0,
		gl glGetShaderiv shader, GL_INFO_LOG_LENGTH, log-length
		err-log mut-array GLchar = log-length->to-nat64 uninitialized-mut-array
		gl glGetShaderInfoLog shader, *log-length, log-length, err-log.begin-ptr
		gl glDeleteShader shader
		throw "error compiling GLSL {name}: {err-log.to-array.to-list.str}"

.create-shader-from-source GLuint(gl gl-ext, source str, shader-type GLenum) summon unsafe
	shader = gl glCreateShader shader-type
	shader-sources array c-str = source.to-c-str,
	gl glShaderSource shader, shader-sources.size.to-int32, shader-sources.begin-ptr, null
	shader

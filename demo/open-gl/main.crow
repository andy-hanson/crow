import
	crow/c-types: c-int
	crow/io/duration: msec
	crow/io/print: out, print
	crow/io/time: for-break, get-monotime-msec, interval
	crow/math/mat: *, I, mat3-32, rotation, to
	crow/math/math: pi
	crow/math/vec: +, -, *, new, right, up, vec2-32, vec3-32
	crow/private/runtime: cur-thread-id
	OpenGL/gl:
		glActiveTexture, glBindBuffer, glBindTexture, glBufferData, glBufferSubData, glClear,
		glClearColor, glCullFace, glDeleteBuffers, glDrawArrays, glEnable,
		glEnableVertexAttribArray, gl-ext, glGenBuffers, glGetError, glGetUniformLocation,
		glUniform1i, glUniformMatrix3fv, glUseProgram, glVertexAttribPointer, new
	OpenGL/headers:
		GL_ARRAY_BUFFER, GL_BACK, GL_COLOR_BUFFER_BIT, GL_CULL_FACE, GLenum, GL_FLOAT, GLint,
		GL_NO_ERROR, GL_STATIC_DRAW, GL_TEXTURE0, GL_TEXTURE_2D, GL_TRIANGLES, GLuint
	SDL2/SDL:
		SDL_GetError, SDL_Init, SDL_INIT_VIDEO, SDL_Quit
	SDL2/SDL_events: new, SDL_Event, SDL_PollEvent, SDL_PumpEvents, SDL_Quit, type
	SDL2/SDL_keyboard: SDL_GetKeyboardState
	SDL2/SDL_scancode: SDL_NUM_SCANCODES, SDL_SCANCODE_RETURN, to
	SDL2/SDL_video:
		SDL_CreateWindow, SDL_DestroyWindow, SDL_GL_CONTEXT_PROFILE_ES, SDL_GL_CreateContext,
		SDL_GL_DeleteContext, SDL_GL_DOUBLEBUFFER, SDL_GL_CONTEXT_MAJOR_VERSION,
		SDL_GL_CONTEXT_MINOR_VERSION, SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_LoadLibrary,
		SDL_GL_SetAttribute, SDL_GL_SwapWindow, SDL_Window, SDL_WINDOW_OPENGL,
		SDL_WINDOWPOS_UNDEFINED, SDL_WINDOW_SHOWN, to
	./shader: shader-prog-destroy, shader-prog-load
	./texture: load-texture-from-bmp, free-texture
	./crow.bmp as crow-bmp nat8 array
	./fragment.frag.essl as fragment-shader string
	./vertex.vert.essl as vertex-shader string

main nat^(_ string[]) summon
	trusted
		SDL_INIT_VIDEO.SDL_Init handle-sdl-error "SDL_INIT_VIDEO"

		# TODO: is this redundant?
		# This should be done after initializing the video driver,
		# but before creating any OpenGL windows.
		if false
			"C:\\Windows\\System32\\opengl32.dll".SDL_GL_LoadLibrary handle-sdl-error \
				"SDL_GL_LoadLibrary"

		SDL_GL_CONTEXT_PROFILE_MASK SDL_GL_SetAttribute SDL_GL_CONTEXT_PROFILE_ES.to \
			handle-sdl-error "set GL ES"
		SDL_GL_CONTEXT_MAJOR_VERSION SDL_GL_SetAttribute 3 handle-sdl-error "set major version"
		SDL_GL_CONTEXT_MINOR_VERSION SDL_GL_SetAttribute 0 handle-sdl-error "set minor version"
		SDL_GL_DOUBLEBUFFER SDL_GL_SetAttribute 1 handle-sdl-error "set double buffer"

		wflags = SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN
		window = "crube" SDL_CreateWindow SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
			960, 720, wflags
		if window == null
			"SDL_CreateWindow" fail-sdl-error

		context = window SDL_GL_CreateContext
		if context == null
			"SDL_GL_CreateContext" fail-sdl-error

		gl gl-ext = ()
		shader-prog = gl shader-prog-load vertex-shader, fragment-shader

		gl gl-check-error "after shader-prog"
		gl glUseProgram shader-prog

		tex-sampler-uniform-loc = gl glGetUniformLocation shader-prog, "texSampler"
		gl gl-check-error "after tex-sampler-uniform-loc"
		assert tex-sampler-uniform-loc >= 0
		gl glUniform1i tex-sampler-uniform-loc, 0
		gl gl-check-error "after glUniform1i"

		rotation-loc = gl glGetUniformLocation shader-prog, "rotation"
		gl gl-check-error "after rotation-loc"
		assert tex-sampler-uniform-loc >= 0
		gl glUniform1i tex-sampler-uniform-loc, 0
		gl gl-check-error "after glUniform1i"
		gl glUniformMatrix3fv rotation-loc, 1, false, I.to.begin-pointer
		gl gl-check-error "after set rotation-loc"

		texture = gl load-texture-from-bmp crow-bmp.to

		vertices vertex array = make-cube
		triangle-vbo = gl vbo-create vertices
		forbid triangle-vbo == 0

		renderer renderer = gl, cur-thread-id, window, shader-prog, vertices, triangle-vbo,
			texture, rotation-loc
		renderer set-up-renderer

		<- for : 25.msec interval
			SDL_PumpEvents
			if look-for-quit-event
				break
			else
				<- renderer main-loop-body
				continue

		# SDL_DestroyWindow hangs on Windows if called from a different thread
		renderer.render-thread-id run-with-thread-id () =>
			# TODO: use 'finally'
			gl free-texture texture
			gl vbo-free triangle-vbo
			gl shader-prog-destroy shader-prog
			context SDL_GL_DeleteContext
			window SDL_DestroyWindow
			SDL_Quit
			()

-make-cube vertex array()
	front = I.cube-side ~~ (up rotation pi / 2 cube-side) ~~ (right rotation pi / 2 cube-side)
	back vertex[] = with out : build
		for xs : front groups-of 3
			# Change order so that the triangles have reverse winding
			out ~~= (xs[1].invert, xs[0].invert, xs[2].invert)
	for v : front ~~ back
		v.pos, v.normal, (v.pos + (1, 1, 1)) * 0.5, v.tex-coord

-cube-side vertex[](mat mat3-32)
	t0 vec2-32 = 0.0, 1.0
	t1 vec2-32 = 1.0, 1.0
	t2 vec2-32 = 0.0, 0.0
	t3 vec2-32 = 1.0, 0.0
	n vec3-32 = 0, 0, -1
	black vec3-32 = 0, 0, 0
	dl vertex = (-1, -1, -1), n, black, t0
	dr vertex = (1, -1, -1), n, black, t1
	ul vertex = (-1, 1, -1), n, black, t2
	ur vertex = (1, 1, -1), n, black, t3
	(dl, dr, ul, ul, dr, ur) apply mat

-apply vertex[](a vertex[], m mat3-32)
	for x : a
		m * x.pos, m * x.normal, x.color, x.tex-coord

-vertex record extern
	pos vec3-32
	normal vec3-32
	color vec3-32
	tex-coord vec2-32

-invert vertex(a vertex)
	-a.pos, -a.normal, a.color, a.tex-coord

-renderer record mut
	gl gl-ext
	# OpenGL only allows renders on the same thread.
	render-thread-id nat
	window SDL_Window mut*
	shader-prog GLuint
	vertices vertex array
	triangle-vbo GLuint
	texture GLuint
	rotation-loc GLint

-set-up-renderer void(renderer renderer) summon, unsafe
	gl = renderer gl
	gl glEnable GL_CULL_FACE
	gl glCullFace GL_BACK

	gl glUseProgram renderer.shader-prog

	gl glBindBuffer GL_ARRAY_BUFFER, renderer.triangle-vbo
	n-vertices int64 = renderer.vertices.size-bytes to
	gl glBufferSubData GL_ARRAY_BUFFER, 0, n-vertices, renderer.vertices.begin-pointer.pointer-cast
	stride int32 = size-of@vertex to
	# pos
	gl glVertexAttribPointer 0, 3, GL_FLOAT, false, stride, 0.to-const-pointer
	gl glEnableVertexAttribArray 0
	# normal
	# TODO: should not need parentheses
	gl glVertexAttribPointer 1, 3, GL_FLOAT, false, stride, (size-of@vec3-32).to-const-pointer
	gl glEnableVertexAttribArray 1
	# color
	gl glVertexAttribPointer 2, 3, GL_FLOAT, false, stride, (2 * size-of@vec3-32).to-const-pointer
	gl glEnableVertexAttribArray 2
	# tex-coord
	gl glVertexAttribPointer 3, 2, GL_FLOAT, false, stride, (3 * size-of@vec3-32).to-const-pointer
	gl glEnableVertexAttribArray 3

	gl glActiveTexture GL_TEXTURE0
	gl glBindTexture GL_TEXTURE_2D, renderer.texture

-main-loop-body void^(renderer renderer) summon
	trusted
		key-states-pointer = null SDL_GetKeyboardState
		key-states = key-states-pointer[0 .. SDL_NUM_SCANCODES.to::nat32.to]
		if key-states[SDL_SCANCODE_RETURN.to::nat32 to] != 0
			out print "return is pressed"
		renderer.render-thread-id run-with-thread-id () =>
			renderer render
-render void(renderer renderer) summon, unsafe
	gl = renderer gl
	gl glClearColor 0.5, 0.5, 0.5, 1
	gl glClear GL_COLOR_BUFFER_BIT

	t float32 = get-monotime-msec.to * 0.0003
	mat mat3-32 = (0.5::float32) * ((1, 2, 3) rotation t)
	gl glUniformMatrix3fv renderer.rotation-loc, 1, false, mat.to.begin-pointer

	gl glDrawArrays GL_TRIANGLES, 0, renderer.vertices.size.to
	gl gl-check-error "after render"

	renderer.window SDL_GL_SwapWindow

-run-with-thread-id[t] t^(thread-id nat, cb t mut()) unsafe, t shared
	if cur-thread-id == thread-id
		cb[],
	else
		<- delay
		thread-id run-with-thread-id cb

-look-for-quit-event bool() summon
	trusted loop
		e mut SDL_Event = ()
		if (&e).SDL_PollEvent == 0
			break false
		elif e.type == SDL_Quit
			break true
		else
			continue

-handle-sdl-error void(err c-int, description string) summon, unsafe
	unless err == 0
		description fail-sdl-error

-fail-sdl-error void(description string) summon, unsafe
	throw "sdl error in {description}: {SDL_GetError}"
	SDL_Quit

-vbo-create GLuint(gl gl-ext, vertices vertex array) summon, unsafe
	vbo mut GLuint = 0
	n-buffers int32 = 1
	gl glGenBuffers n-buffers, &vbo
	gl glBindBuffer GL_ARRAY_BUFFER, vbo
	gl glBufferData GL_ARRAY_BUFFER, vertices.size-bytes.to, vertices.begin-pointer.pointer-cast,
		GL_STATIC_DRAW
	gl glBindBuffer GL_ARRAY_BUFFER, 0
	err GLenum = gl glGetError
	unless err == GL_NO_ERROR
		gl glDeleteBuffers n-buffers, &vbo
		throw "Creating VBO failed: Code {err}"
	vbo

size-bytes nat(vertices vertex array) unsafe
	vertices.size * size-of@vertex

-vbo-free void(gl gl-ext, vbo GLuint) summon, unsafe
	gl glDeleteBuffers 1, &vbo

-gl-check-error void(gl gl-ext, desc string) summon
	err GLenum = gl glGetError
	assert err == GL_NO_ERROR : "Gl error at {desc}: code {err}"

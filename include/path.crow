no-std
import
	.bool: bool
	.collection.arr: ~, empty?, size, subscript
	.collection.arr-util: each, last, r-index-of, rtail
	.compare: ==
	.fun: subscript
	.io.file: is-dir?, read-dir
	.misc: ->, void
	.number: +, -, nat
	.opt: none, opt, some, value
	.str: char, str

parent-path str(a str)
	match a r-index-of "/"
	as none
		""
	as some s
		a[0 -> s.value]

child-path str(a str, child-name str)
	a ~ "/" ~ child-name

each-child-recursive void(path str, filter act bool(str), f act void(str)) summon
	if path is-dir?
		path.read-dir each \child-name
			if filter[child-name]
				path child-path child-name each-child-recursive filter, f
	else
		f[path]

last-index-of opt nat(s str, c char)
	if s empty?
		none
	elif s.last == c
		s.size - 1 some
	else
		s.rtail last-index-of c

get-extension opt str(name str)
	match name last-index-of "."
	as none
		none
	as some s
		name[s.value + 1 -> name.size] some

remove-extension str(name str)
	match name last-index-of "."
	as none
		name
	as some s
		name[0 -> s.value]

add-extension str(name str, ext str)
	name ~ "." ~ ext

change-extension str(name str, ext str)
	name.remove-extension add-extension ext

base-name str(path str)
	i = path last-index-of "/"
	match i
	as none
		path
	as some s
		path[s.value + 1 -> path.size]

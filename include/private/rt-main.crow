no-std
import
	..bool: ?, false
	..cell: as-cell
	..col.arr: arr
	..col.arr-util: map, tail
	..compare: !=
	..fun: fun-ptr2, subscript
	..fut: delay, fut, handle-exceptions, then-void
	..io.process: exit-code
	..misc: as, void
	..number: int32, nat, to-int
	..opt: value
	..posix.pthread: pthread-t
	..ptr:
		+, any-ptr, as-any-ptr, as-ref, by-val, null, ptr, ptr-to, ref-of-val, set-subscript,
		subscript
	..str: c-str, str
	..str-util: to-str
	..sys.sysinfo: get-nprocs
	.alloc
	.bootstrap: call-with-ctx, ctx, get-ctx, state, thread-local-stuff
	.exception-low-level: exception-ctx
	.log-low-level: log-ctx
	.number-low-level: unsafe-to-int, unsafe-to-int32, unsafe-to-nat, wrap-add, wrap-sub
	.perf-low-level: perf-ctx
	.runtime:
		any-unhandled-exceptions?, ctx, global-ctx, island, may-be-work-to-do, print-lock,
		set-islands, thread-function
	.thread-utils:
		create-one-thread, create-condition, destroy-condition, join-one-thread, lock-by-val

.main-ptr alias
	fun-ptr2<fut nat, ctx, arr str>

# Treated specially by the compiler
rt-main exit-code(argc int32, argv ptr c-str, main-ptr main-ptr) trusted noctx summon
	n-threads = get-nprocs
	f = false
	gctx-by-val = as<by-val global-ctx>: global-ctx: lock-by-val, lock-by-val, [], n-threads, create-condition, f, f
	gctx = gctx-by-val ref-of-val
	island-by-val = island: gctx, 0, n-threads
	island = island-by-val ref-of-val

	gctx.islands := arr: 1, island.ptr-to

	main-fut = gctx add-main-task (n-threads wrap-sub 1), island, argc, argv, main-ptr

	n-threads run-threads gctx

	gctx-by-val.ref-of-val.may-be-work-to-do.ref-of-val destroy-condition

	match main-fut state
	as fut-state-no-callbacks
		# Should never happen
		1
	as fut-state-callbacks
		# Should never happen
		1
	as fut-state-resolved r
		# TODO: handle nat too big for int32
		gctx.any-unhandled-exceptions? ? 1, r.value.unsafe-to-int.unsafe-to-int32
	as exception
		# 'handle-exceptions' should have logged the error
		1

.add-main-task fut nat
	gctx global-ctx
	thread-id nat
	island island
	argc int32
	argv ptr c-str
	main-ptr main-ptr
spec
	trusted
	noctx
body
	# Before we start the engine, add a task.
	# Create a ctx manually so we can call functions that need it when creating the task
	ectx = exception-ctx
	log-ctx = log-ctx
	perf-ctx = perf-ctx
	ectx-ptr = ectx.ref-of-val as-any-ptr
	log-ctx-ptr = log-ctx.ref-of-val as-any-ptr
	perf-ptr = perf-ctx.ref-of-val as-any-ptr
	print-lock = gctx.print-lock.ref-of-val
	tls = as<by-val<thread-local-stuff>>: thread-local-stuff: thread-id, print-lock, ectx-ptr, log-ctx-ptr, perf-ptr
	ctx-by-val = ctx: gctx, tls.ref-of-val, island, 0
	ctx = ctx-by-val ref-of-val
	add = as<act fut nat(arr c-str, main-ptr)>: \all-args, main-ptr
		add-first-task: all-args, main-ptr
	all-args = arr: argc.to-int.unsafe-to-nat, argv
	add call-with-ctx ctx, all-args, main-ptr

.thread-args record mut
	by-ref
	thread-id nat
	gctx global-ctx

# TODO: if mut-bag-node is in unmanaged memory, don't need ctx for this
# We want main-fut to be available immediately, not after having run some user code.
# So we create main-fut now, and forward the result of 'main' to that.
.add-first-task fut nat(all-args arr c-str, main-ptr fun-ptr2<fut nat, ctx, arr str>) unsafe
	# 'then' is useful here -- it handles any errors in 'main' and gets us main-fut immediately.
	# TODO: 'then' overload for fut<void> taking lambda with 0 params
	res = delay then-void \
		# First argument is the path to this executable.
		args = all-args tail
		main-ptr[get-ctx, args map {it to-str}]
	res handle-exceptions
	res

# Each thread will get the thread ID, and the common arguments.
.run-threads void(n-threads nat, gctx global-ctx) noctx unsafe summon
	threads = n-threads unmanaged-alloc-elements<pthread-t>
	thread-args = n-threads unmanaged-alloc-elements<by-val<thread-args>>

	actual-n-threads = n-threads wrap-sub 1

	start-threads-recur: 0, actual-n-threads, threads, thread-args, gctx
	thread-function: actual-n-threads, gctx
	join-threads-recur: 0, actual-n-threads, threads

	threads unmanaged-free
	thread-args unmanaged-free

.start-threads-recur void
	i nat
	n-threads nat
	threads ptr pthread-t
	thread-args-begin ptr by-val<thread-args>
	gctx global-ctx
spec
	noctx
	unsafe
	summon
body
	if i != n-threads
		thread-arg-ptr = thread-args-begin + i
		thread-arg-ptr[] := thread-args: i, gctx
		thread-ptr = threads + i
		thread-ptr.as-cell create-one-thread thread-arg-ptr.as-any-ptr, &thread-fun
		i wrap-add 1 start-threads-recur n-threads, threads, thread-args-begin, gctx

.thread-fun any-ptr(args-ptr any-ptr) noctx unsafe summon
	args = args-ptr as-ref<thread-args>
	args.thread-id thread-function args.gctx
	null

.join-threads-recur void(i nat, n-threads nat, threads ptr pthread-t) noctx unsafe summon
	if i != n-threads
		threads[i] join-one-thread
		i wrap-add 1 join-threads-recur n-threads, threads

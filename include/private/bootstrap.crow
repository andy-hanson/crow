no-std

region basic types

void builtin

void void() noctx builtin

as ?a(value ?a) noctx builtin

###
A type is data if it is:
* A primitive
* A record or union of pure types
###
data<?a> builtin-spec

# A type is sendable if it does not have any thread-unsafe mutable state.
send<?a> builtin-spec

## TODO: extern<?a> builtin-spec for extern ptr types

region opt.crow

opt<?a> union
	none
	some<?a>

some<?a> record
	by-val
	value ?a

none record

region result.crow

# Union that represents a value that may have failed.
result<?ok, ?err> union
	ok<?ok>
	err<?err>

# Successful case of a result.
ok<?a> record
	by-val
	value ?a

# Error case of a result.
err<?a> record
	by-val
	value ?a

region ptr.crow

by-val<?a> builtin

###
A raw pointer. GC will not trace these.
WARN: If ?a is a reference type, ptr<?a> is a pointer to a pointer to ?a
###
ptr<?a> builtin mut

any-ptr alias
	ptr nat8

region arr

###
Array of values.

For a mutable version, see the `mut-arr` module.

This is implemented as a pointer and a length, also known as a "fat pointer".
This means this is also the type for a slice of an array, and slicing is O(1).

A slice does not keep the whole array alive, only the elements it can reach;
elements not reachable by any slice will be garbage collected.
###
arr<?a> record force-data
	by-val
	size nat
	begin-ptr ptr ?a

region str

# Single character in a string.
# This could be any UTF-8 code point.
char builtin
# String type.
str record
	by-val
	chars arr char
###
C-style string.
This should be a valid pointer whose content ends in a "\0", though this is not enforced.
Thus, all operations on `c-str` are unsafe.
###
c-str alias
	ptr char

to-char char(a nat8) noctx builtin
to-nat8 nat8(c char) noctx builtin

region bool.crow

bool builtin
false bool() noctx builtin
true bool() noctx builtin

region bootstrap arithmetic

# The compiler needs special access to these types to support number literals

nat builtin
nat8 builtin
nat16 builtin
nat32 builtin
nat64 alias
	nat
int builtin
int8 builtin
int16 builtin
int32 builtin
int64 alias
	int
float builtin

region hard assertions

abort! void() noctx unsafe extern<"abort">

###
Zeroed data isn't safe as it would contain null pointers.
It's GC-safe though, since the GC treats a null pointer same as any external pointer.
###
zeroed ?a() noctx unsafe builtin

hard-unreachable ?a() unsafe noctx
	abort!
	zeroed

todo ?a() trusted noctx
	## TODO: soft-fail, remove 'trusted noctx' above
	abort!
	zeroed

hard-assert void(condition bool) noctx unsafe
	if condition
		void
	else
		abort!

hard-forbid void(condition bool) noctx unsafe
	if condition
		abort!

region bootstrap runtime

# Since this fun is not marked 'noctx', it simply returns the ctx that already exists.
get-ctx ctx() unsafe builtin

# The ctx only exists temporarily, so can use 'any-ptr' without worrying about GC
ctx record mut
	by-ref
	gctx-ptr any-ptr
	island-id island-id
	exclusion exclusion
	gc-ctx-ptr any-ptr
	thread-local-stuff thread-local-stuff

thread-local-stuff record mut
	by-ref
	thread-id nat
	print-lock lock
	exception-ctx-ptr any-ptr
	log-ctx-ptr any-ptr
	perf-ctx-ptr any-ptr

island-id alias
	nat

exclusion alias
	nat

island-and-exclusion record
	by-val
	island island-id
	exclusion exclusion

region fun

# Low-level function pointer type. Must point to `noctx` code.
fun-ptr0<?r> builtin
fun-ptr1<?r, ?p0> builtin
fun-ptr2<?r, ?p0, ?p1> builtin
fun-ptr3<?r, ?p0, ?p1, ?p2> builtin
fun-ptr4<?r, ?p0, ?p1, ?p2, ?p3> builtin
fun-ptr5<?r, ?p0, ?p1, ?p2, ?p3, ?p4> builtin
fun-ptr6<?r, ?p0, ?p1, ?p2, ?p3, ?p4, ?p5> builtin

###
Don't reference directly, instead use syntax `fun ?r(?p0, ?p1)`
Contrasted with `act`, a fun can't close over mutable data, so is thread-safe.
It can still close over `send` data and perform I/O, so it's not a completely pure function.
###
fun0<?r> builtin sendable
fun1<?r, ?p0> builtin sendable
fun2<?r, ?p0, ?p1> builtin sendable
fun3<?r, ?p0, ?p1, ?p2> builtin sendable
fun4<?r, ?p0, ?p1, ?p2, ?p3> builtin sendable

###
Don't reference directly, instead use syntax `act ?r(?p0, ?p1)`
Can close over anything. Can only be run by the exclusion context that created it.
###
fun-act0<?r> builtin mut
fun-act1<?r, ?p0> builtin mut
fun-act2<?r, ?p0, ?p1> builtin mut
fun-act3<?r, ?p0, ?p1, ?p2> builtin mut
fun-act4<?r, ?p0, ?p1, ?p2, ?p3> builtin mut

###
Don't reference directly, instead use syntax `act ?r(?p0, ?p1)`
This wraps an `act` combined with the island/exclusion it came from, and becomes sendable
since the `act` can't be called directly. Instead, it adds a task to the island.
###
fun-ref0<?r> record force-sendable
	by-val
	island-and-exclusion island-and-exclusion
	fun act fut ?r()
fun-ref1<?r, ?p0> record force-sendable
	by-val
	island-and-exclusion island-and-exclusion
	fun act fut ?r(?p0)
fun-ref2<?r, ?p0, ?p1> record force-sendable
	by-val
	island-and-exclusion island-and-exclusion
	fun act fut ?r(?p0, ?p1)
fun-ref3<?r, ?p0, ?p1, ?p2> record force-sendable
	by-val
	island-and-exclusion island-and-exclusion
	fun act fut ?r(?p0, ?p1, ?p2)
fun-ref4<?r, ?p0, ?p1, ?p2, ?p3> record force-sendable
	by-val
	island-and-exclusion island-and-exclusion
	fun act fut ?r(?p0, ?p1, ?p2, ?p3)

# Calls the function (immediately) and returns its return value.
subscript ?r(a fun-ptr0 ?r) noctx builtin
subscript ?r(a fun-ptr1<?r, ?p0>, p0 ?p0) noctx builtin
subscript ?r(a fun-ptr2<?r, ?p0, ?p1>, p0 ?p0, p1 ?p1) noctx builtin
subscript ?r(a fun-ptr3<?r, ?p0, ?p1, ?p2>, p0 ?p0, p1 ?p1, p2 ?p2) noctx builtin
subscript ?r(a fun-ptr4<?r, ?p0, ?p1, ?p2, ?p3>, p0 ?p0, p1 ?p1, p2 ?p2, p3 ?p3) noctx builtin
subscript ?r(a fun-ptr5<?r, ?p0, ?p1, ?p2, ?p3, ?p4>, p0 ?p0, p1 ?p1, p2 ?p2, p3 ?p3, p4 ?p4) noctx builtin
subscript ?r(a fun-ptr6<?r, ?p0, ?p1, ?p2, ?p3, ?p4, ?p5>, p0 ?p0, p1 ?p1, p2 ?p2, p3 ?p3, p4 ?p4, p5 ?p5) noctx builtin

# Calls the function (immediately) and returns its return value.
subscript ?r(a fun ?r()) trusted
	a call-with-ctx get-ctx
subscript ?r(a fun ?r(?p0), p0 ?p0) trusted
	a call-with-ctx get-ctx, p0
subscript ?r(a fun ?r(?p0, ?p1), p0 ?p0, p1 ?p1) trusted
	a call-with-ctx get-ctx, p0, p1
subscript ?r(a fun ?r(?p0, ?p1, ?p2), p0 ?p0, p1 ?p1, p2 ?p2) trusted
	a call-with-ctx get-ctx, p0, p1, p2
subscript ?r(a fun ?r(?p0, ?p1, ?p2, ?p3), p0 ?p0, p1 ?p1, p2 ?p2, p3 ?p3) trusted
	a call-with-ctx get-ctx, p0, p1, p2, p3

# Calls the function (immediately) and returns its return value.
subscript ?r(a act ?r()) trusted
	a call-with-ctx get-ctx
subscript ?r(a act ?r(?p0), p0 ?p0) trusted
	a call-with-ctx get-ctx, p0
subscript ?r(a act ?r(?p0, ?p1), p0 ?p0, p1 ?p1) trusted
	a call-with-ctx get-ctx, p0, p1
subscript ?r(a act ?r(?p0, ?p1, ?p2), p0 ?p0, p1 ?p1, p2 ?p2) trusted
	a call-with-ctx get-ctx, p0, p1, p2
subscript ?r(a act ?r(?p0, ?p1, ?p2, ?p3), p0 ?p0, p1 ?p1, p2 ?p2, p3 ?p3) trusted
	a call-with-ctx get-ctx, p0, p1, p2, p3

call-with-ctx ?r(f fun ?r(), c ctx) noctx builtin
call-with-ctx ?r(f act ?r(), c ctx) noctx builtin
call-with-ctx ?r(f fun ?r(?p0), c ctx, p0 ?p0) noctx builtin
call-with-ctx ?r(f act ?r(?p0), c ctx, p0 ?p0) noctx builtin
call-with-ctx ?r(f fun ?r(?p0, ?p1), c ctx, p0 ?p0, p1 ?p1) noctx builtin
call-with-ctx ?r(f act ?r(?p0, ?p1), c ctx, p0 ?p0, p1 ?p1) noctx builtin
call-with-ctx ?r(f fun ?r(?p0, ?p1, ?p2), c ctx, p0 ?p0, p1 ?p1, p2 ?p2) noctx builtin
call-with-ctx ?r(f act ?r(?p0, ?p1, ?p2), c ctx, p0 ?p0, p1 ?p1, p2 ?p2) noctx builtin
call-with-ctx ?r(f fun ?r(?p0, ?p1, ?p2, ?p3), c ctx, p0 ?p0, p1 ?p1, p2 ?p2, p3 ?p3) noctx builtin
call-with-ctx ?r(f act ?r(?p0, ?p1, ?p2, ?p3), c ctx, p0 ?p0, p1 ?p1, p2 ?p2, p3 ?p3) noctx builtin

region fut

backtrace record
	by-val
	return-stack arr str

exception record
	by-val
	message str
	## TODO: accessing backtrace should be unsafe
	backtrace backtrace

fut<?a> record force-sendable
	lk by-val lock
	state mut fut-state ?a

fut-state<?a> union mut
	fut-state-no-callbacks
	fut-state-callbacks<?a>
	fut-state-resolved<?a>
	exception

fut-state-no-callbacks record

fut-state-callbacks<?a> record mut
	by-ref
	# WARN: the cb will be called with whatever ctx resolves the fut, not the ctx that created it
	cb act void(result<?a, exception>)
	next opt fut-state-callbacks ?a

fut-state-resolved<?a> record
	value ?a

region lock

atomic-bool record force-sendable
	value mut bool

# TODO: use pthread lock
lock record sendable
	by-ref
	is-locked by-val atomic-bool

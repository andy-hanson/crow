no-std
import
	..bool: ?, bool, false, true
	..col.arr: arr, begin-ptr, size
	..col.mut-arr: begin-ptr, cast-immutable, uninitialized-mut-arr
	..compare: ==
	..exception: assert
	..include.sodium:
		crypto-pwhash-memlimit-moderate, crypto-pwhash-memlimit-sensitive,
		crypto-pwhash-opslimit-moderate, crypto-pwhash-opslimit-sensitive, crypto-pwhash-str,
		crypto-pwhash-strbytes, crypto-pwhash-str-verify
	..number: nat8
	..ptr: ptr-cast
	..str: char, str
	..test: is
	.private.sodium: ensure-sodium-initialized

password-hash-quality union
	quality-moderate
	quality-sensitive
quality-moderate record
quality-sensitive record

password-hash arr nat8(password str, quality password-hash-quality) trusted
	ensure-sodium-initialized
	strbytes = crypto-pwhash-strbytes
	assert: strbytes == 128
	res = strbytes uninitialized-mut-arr<nat8>
	sensitive? = quality == quality-sensitive
	ops-limit = sensitive? ? crypto-pwhash-opslimit-sensitive, crypto-pwhash-opslimit-moderate
	mem-limit = sensitive? ? crypto-pwhash-memlimit-sensitive, crypto-pwhash-memlimit-moderate
	err = res.begin-ptr.ptr-cast<char, nat8> crypto-pwhash-str password.begin-ptr, password.size, ops-limit, mem-limit
	assert: err == 0
	res cast-immutable

password-matches? bool(password str, hash arr nat8) trusted
	assert: hash.size == crypto-pwhash-strbytes
	(hash.begin-ptr.ptr-cast<char, nat8> crypto-pwhash-str-verify password.begin-ptr, password.size) == 0

test
	password = "hunter2"
	hash = password password-hash quality-moderate
	# Can't assert hash value as it will be different every time
	"hunter2" password-matches? hash is true
	"hutner2" password-matches? hash is false

| .str-utils for c-str.to-str
| TODO: don't import .io or .number-utils
import
	.arr-utils
	.bootstrap
	.cell
	.exceptions
	.fut-low-level
	.gc
	.io
	.mut-bag
	.number-utils
	.posix
	.str-utils
	.thread-utils

get-gctx global-ctx() unsafe
	get-ctx.gctx-ptr as-ref

get-vat vat(vat-id vat-id) unsafe
	get-gctx.vats at vat-id

get-cur-vat vat() unsafe
	get-ctx.vat-id get-vat

| This fun is required by the compiler.
cur-actor vat-and-actor-id() unsafe
	c = get-ctx
	new c.vat-id, c.actor-id

global-ctx record mut
	lk by-val lock
	| TODO: mut-arr
	vats mut arr vat
	| When a thread finds no work to do, it decrements this and waits on 'may-be-work-to-do'.
	| When the last thread decrements this, it can't go to sleep!
	| But if there's no work to do, it can set 'is-shut-down' and wake up the other threads so they can shut down too.
	n-live-threads mut nat
	may-be-work-to-do by-val condition
	is-shut-down mut bool
	| Set to true the first time the default exception handler is invoked.
	| Can never be unset.
	any-unhandled-exceptions? mut bool

vat record mut
	gctx global-ctx
	id vat-id
	gc by-val gc

	| these variables are all protected by tasks-lock
	tasks-lock by-val lock
	tasks by-val mut-bag<task>
	| TODO: mut-set
	currently-running-actors by-val mut-arr<actor-id>
	| Number of threads currently performing tasks in this vat
	n-threads-running mut nat

	| not protected by tasks-lock, thread-safe on its own
	next-actor-id by-val thread-safe-counter

	| When there's an exception, we'll enqueue this as a task.
	| Default is to print it and set `gctx.any-unhandled-exceptions`
	exception-handler mut fun-mut1 void exception


task record mut
	by-val
	| Unlike a fun-ref, this is stored in the vat already, so no need to store vat here too.
	| Also, the fun just returns 'void'. You can just use a fut-returning fun and drop the fut.
	| The fun runs using a ctx created from the actor-id.
	actor-id actor-id
	fun fun-mut0 void


new-actor-id actor-id(v vat) noctx trusted
	v.next-actor-id.ref-of-val get-and-increment

new-mut-arr-by-val-with-capacity-from-unmanaged-memory by-val mut-arr<?t>(capacity nat) noctx unsafe
	new
		frozen?. false
		size. zero
		capacity. capacity
		data. capacity unmanaged-alloc-elements<?t>

new-vat by-val vat(gctx global-ctx, id vat-id, max-threads nat) noctx unsafe
	actors = max-threads new-mut-arr-by-val-with-capacity-from-unmanaged-memory<actor-id>
	new
		gctx. gctx
		id. id
		gc. new-gc
		tasks-lock. new-lock
		tasks. new-mut-bag
		currently-running-actors. actors
		n-threads-running. zero
		next-actor-id. new-thread-safe-counter
		exception-handler. &default-exception-handler

default-exception-handler void(e exception) summon unsafe
	print-err-sync-no-newline: "uncaught exception: "
	print-err-sync: e.message.empty? if "<<empty message>>", e.message
	get-gctx.any-unhandled-exceptions? := true

set-this-vats-exception-handler void(exception-handler fun-mut1 void exception) summon trusted
	get-cur-vat.exception-handler := exception-handler

| Unsafe because you must ensure 'task' is safe to run in parallel.
add-task void(v vat, t task) unsafe
	| Do allocation outside of the lock
	node = t new-mut-bag-node

	v.tasks-lock.ref-of-val acquire-lock
	v.tasks.ref-of-val add node
	v.tasks-lock.ref-of-val release-lock

	v.gctx.may-be-work-to-do.ref-of-val broadcast

thread-local-stuff record mut
	by-ref
	| Reusing the exception ctx to avoid needing to allocate it every time
	exception-ctx exception-ctx

thread-function void(thread-id nat, gctx global-ctx) noctx unsafe summon
	ectx = new-exception-ctx
	tls = as<by-val<thread-local-stuff>>: new ectx.ref-of-val
	thread-function-recur: thread-id, gctx, tls.ref-of-val

thread-function-recur void(thread-id nat, gctx global-ctx, tls thread-local-stuff) noctx unsafe summon
	when
		gctx is-shut-down
			gctx.lk.ref-of-val acquire-lock
			| Remove this thread from live threads for good.
			gctx.n-live-threads := gctx.n-live-threads noctx-decr
			assert-vats-are-shut-down: zero, gctx.vats
			gctx.lk.ref-of-val release-lock
		else
			hard-assert: gctx.n-live-threads > zero
			| Get a task to do; or sleep.
			last-checked = gctx.may-be-work-to-do.ref-of-val get-last-checked

			match gctx choose-task
				ok ok-chosen-task
					gctx do-task tls, ok-chosen-task.value
				err e
					when
						e.value.last-thread-out
							hard-forbid: gctx.is-shut-down
							gctx.is-shut-down := true
							| Wake up sleeping threads so they can shut down
							gctx.may-be-work-to-do.ref-of-val broadcast
						else
							gctx.may-be-work-to-do.ref-of-val wait-on last-checked

					gctx.lk.ref-of-val acquire-lock
					| We decremented this while holding the lock, increment it again
					gctx.n-live-threads := gctx.n-live-threads noctx-incr
					gctx.lk.ref-of-val release-lock

			| Do another task
			thread-function-recur: thread-id, gctx, tls

new-ctx by-val ctx(gctx global-ctx, tls thread-local-stuff, vat vat, actor-id actor-id) noctx unsafe
	new
		gctx-ptr. gctx.as-any-ptr
		vat-id. vat.id
		actor-id. actor-id
		gc-ctx-ptr. vat.gc.ref-of-val.get-gc-ctx.as-any-ptr
		exception-ctx-ptr. tls.exception-ctx.as-any-ptr

return-ctx void(c ctx) noctx unsafe
	c.gc-ctx-ptr.as-ref return-gc-ctx

do-task void(gctx global-ctx, tls thread-local-stuff, chosen-task chosen-task) noctx unsafe summon
	vat = chosen-task.vat
	match chosen-task.task-or-gc
		none
			| Means -- do GC
			| We might have avoided doing a task because GC was running.
			| Now those tasks can be done.
			todo
			gctx.may-be-work-to-do.ref-of-val broadcast
		some some-task
			task = some-task.value
			ctx = new-ctx: gctx, tls, vat, task.actor-id
			| TODO: parens should not be necessary
			| ctx.ref-of-val call-with-ctx (&do-task-with-ctx).as<fun-mut1<void, fun-mut0<void>>>, task.fun
			ctx.ref-of-val call-with-ctx task.fun
			vat.tasks-lock.ref-of-val acquire-lock
			vat.currently-running-actors.ref-of-val noctx-must-remove-unordered task.actor-id
			vat.tasks-lock.ref-of-val release-lock
			ctx.ref-of-val return-ctx

	| We incremented this when choosing the task.
	vat.tasks-lock.ref-of-val acquire-lock
	vat.n-threads-running := vat.n-threads-running.noctx-decr
	vat.tasks-lock.ref-of-val release-lock

| do-task-with-ctx void(task-fun fun-mut0 void) unsafe summon
| 	{task-fun call} catch \exception
| 		{get-cur-vat.exception-handler call exception} catch \exception-handler-exception
| 			| TODO: can print throw exceptions? Should have an unfailable version.
| 			print-err-sync: "exception handler threw an exception!"
| 			print-err-sync: exception-handler-exception.message

task-or-gc alias
	opt task

chosen-task record mut
	by-val
	vat vat
	| If none, do GC on the vat.
	task-or-gc task-or-gc

no-chosen-task record
	by-val
	| If true, no threads are doing any work and we should exit the program.
	last-thread-out bool


choose-task result chosen-task no-chosen-task(gctx global-ctx) noctx unsafe
	gctx.lk.ref-of-val acquire-lock

	| TODO: more fair algorithm.
	| This looks for the first vat with some work to do.
	| (That is unfair as vat 0 will tend to get the most attention.)

	res = as<result<chosen-task, no-chosen-task>>: match gctx.vats choose-task-recur zero
		none
			| Did not find a task to do.
			| (Tasks may have been added concurrently;
			| this is fine as we're about to wait on a condition and will immediately wake up if so.)
			| Need to do this here while we hold the lock
			gctx.n-live-threads := gctx.n-live-threads.noctx-decr
			err: new<no-chosen-task> gctx.n-live-threads zero?
		some s
			s.value ok

	gctx.lk.ref-of-val release-lock

	res


choose-task-recur opt chosen-task(vats arr vat, i nat) noctx unsafe
	when
		i == vats.size
			none
		else
			vat = vats noctx-at i
			match vat choose-task-in-vat
				none
					vats choose-task-recur i.noctx-incr
				some s
					some: new<chosen-task> vat, s.value



| some(none) means: do a GC
choose-task-in-vat opt task-or-gc(vat vat) noctx unsafe
	vat.tasks-lock.ref-of-val acquire-lock

	res = as<opt<task-or-gc>>: when
		| TODO: ref-of-val should be unnecessary for property access?
		vat.gc.ref-of-val.needs-gc
			when
				vat.n-threads-running zero?
					| do GC
					none some
				else
					| do nothing -- a thread is running on this vat
					| we can't do a GC now, but don't want to start a new task either
					| because that would block GC
					none
		else
			match vat find-and-remove-first-doable-task
				none
					| No tasks to run
					none
				some s
					s.value.some some

	when
		res empty?
			pass
		else
			vat.n-threads-running := vat.n-threads-running.noctx-incr

	vat.tasks-lock.ref-of-val release-lock

	res

task-and-nodes record mut
	by-val
	task task
	nodes opt mut-bag-node<task>

find-and-remove-first-doable-task opt task(vat vat) noctx unsafe
	tasks = vat.tasks.ref-of-val
	res = vat find-and-remove-first-doable-task-recur tasks.head
	match res
		none
			none
		some s
			tasks.head := s.value.nodes
			s.value.task some

find-and-remove-first-doable-task-recur opt task-and-nodes(vat vat, opt-node opt mut-bag-node<task>) noctx unsafe
	match opt-node
		none
			none
		some s
			node = s.value
			task = node.value
			| Can't do this task if the actor is busy.
			| (If we don't have space to expand currently-running-actors,
			| shouldn't be starting a new task anyway.)
			actors = vat.currently-running-actors ref-of-val
			task-ok = when
				actors contains? task.actor-id
					false
				else
					actors push-capacity-must-be-sufficient task.actor-id
					true
			when
				task-ok
					| Extract this task (return just its tail)
					some: new<task-and-nodes> task, node.next-node
				else
					match vat find-and-remove-first-doable-task-recur node.next-node
						none
							none
						some ss
							tn = ss.value as<task-and-nodes>
							node.next-node := tn.nodes
							some: new<task-and-nodes> tn.task, node some

assert-vats-are-shut-down void(i nat, vats arr vat) noctx unsafe
	when
		i == vats.size
			pass
		else
			vat = vats noctx-at i

			vat.tasks-lock.ref-of-val acquire-lock
			hard-forbid: vat.gc.ref-of-val needs-gc
			hard-assert: vat.n-threads-running zero?
			hard-assert: vat.tasks.ref-of-val empty?
			vat.tasks-lock.ref-of-val release-lock

			assert-vats-are-shut-down: i.noctx-incr, vats

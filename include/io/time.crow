no-std
import
	..fut: fut
	..misc: void
	..number: +, *, nat
	..posix.time: time, time-t
	..private.fut-low-level: resolve!, unresolved
	..private.runtime: add-task, get-cur-island, new-exclusion
	..ptr: null
	.time-low-level: get-monotime-nsec

unix-time record
	seconds-since-epoch time-t

get-unix-time unix-time() summon trusted
	unix-time: null time

# Represents an amount of time.
duration record
	nsec nat

# Duration in milliseconds.
msec duration(a nat)
	duration: a * 1000000

# Returns a `fut` that will resolve after `duration` has passed.
delay fut void(duration duration) trusted summon
	target-time = get-monotime-nsec + duration.nsec
	island = get-cur-island
	res = unresolved<void>
	island add-task target-time, island.new-exclusion, \
		res resolve! void
	res

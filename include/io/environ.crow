import
	..bootstrap: ->, arrow, char, c-str, data, deref, from, incr, not, null, null?, ptr, str, to, void
	..collection.arr: ~, arr-from-begin-end
	..collection.dict: dict, each
	..collection.mut-dict: move-to-dict!, mut-dict, new-mut-dict, set-subscript
	..collection.mut-list: ~=, move-to-arr!, mut-list
	..str-utils: find-char-in-cstr, find-cstr-end, to-c-str
	..posix.unistd: environ

environ alias
	dict<str, str>

get-environ environ() summon trusted
	res = new-mut-dict<str, str>
	environ get-environ-recur res
	res move-to-dict!

get-environ-recur void(env ptr c-str, res mut-dict<str, str>) unsafe
	if env.deref.null? not
		entry = env.deref.parse-environ-entry
		res[entry.from] := entry to
		env.incr get-environ-recur res

parse-environ-entry arrow<str, str>(entry c-str) unsafe
	key-end = entry find-char-in-cstr "="
	key = entry arr-from-begin-end key-end
	value-begin = key-end incr
	value-end = value-begin find-cstr-end
	value = value-begin arr-from-begin-end value-end
	key -> value

convert-environ ptr c-str(environ environ)
	res = mut-list<c-str>
	environ each \key, value
		res ~= key ~ "=" ~ value to-c-str
	res ~= null<char>
	res.move-to-arr! data

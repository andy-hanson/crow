import
	.arr-utils: + at empty? last rtail tail
	.bootstrap
		== ? as bool char eight false five float four int int16 int32 nat nat16 nat32 nine one
		seven six str ten three todo to-float to-int to-nat true truncate-to-int two unsafe-to-int32
		unsafe-to-nat16 unsafe-to-nat32 zero
	.number-utils: + * / abs mod neg negative? to-int
	.str-utils: literal

to-str str(b bool)
	b ? "true", "false"

parse-bool bool(s str)
	if s == "true"
		true
	elif s == "false"
		false
	else
		todo

to-str str(n nat)
	if n == 0
		"0"
	elif n == 1
		"1"
	elif n == 2
		"2"
	elif n == 3
		"3"
	elif n == 4
		"4"
	elif n == 5
		"5"
	elif n == 6
		"6"
	elif n == 7
		"7"
	elif n == 8
		"8"
	elif n == 9
		"9"
	else
		hi = to-str: n / ten
		lo = to-str: n mod ten
		hi + lo

to-str str(n nat32)
	n.to-nat to-str

to-str str(n nat16)
	n.to-nat to-str

to-str str(i int)
	a = i.abs to-str
	| TODO: string interpolation
	i.negative? ? ("-" + a), a

to-str str(i int32)
	i.to-int to-str

to-str str(i int16)
	i.to-int to-str

| TODO: actually handle floats!
to-str str(a float)
	a.truncate-to-int to-str

char-to-nat nat(c char) noctx
	if c == "0"
		zero
	elif c == "1"
		one
	elif c == "2"
		two
	elif c == "3"
		three
	elif c == "4"
		four
	elif c == "5"
		five
	elif c == "6"
		six
	elif c == "7"
		seven
	elif c == "8"
		eight
	elif c == "9"
		nine
	else
		todo

literal nat(s str)
	if s empty?
		zero
	else
		higher-digits = s.rtail.literal as<nat>
		higher-digits * ten + (char-to-nat: s last)

literal nat16(s str)
	| TODO: make safe
	s.literal.as<nat> unsafe-to-nat16

literal nat32(s str)
	| TODO: make safe
	s.literal.as<nat> unsafe-to-nat32

literal int(s str)
	fst = s at zero
	if fst == "-"
		n = as<nat>: s.tail.literal
		n neg
	elif fst == "+"
		s.tail.literal.as<nat> to-int
	else
		s.literal.as<nat> to-int

literal int32(s str)
	| TODO: make safe
	s.literal.as<int> unsafe-to-int32

| TODO: handle the decimal point!
literal float(a str)
	a.literal.as<nat> to-float

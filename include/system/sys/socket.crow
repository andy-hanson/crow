import
	crow/c-types: c-int, err-t, fd-t, size_t
	../unistd: ssize_t
	./types: socklen_t

+AF_UNSPEC nat16() bare
	0

+AF_INET nat16() bare
	2
+AF_INET c-int() bare
	2

# On win32, this is UINT_PTR; on Posix, this is fd-t.
+SOCKET alias
	nat64
# To call on POSIX
+as-fd fd-t(a SOCKET) unsafe, posix extern
	a to
+as-socket SOCKET(a fd-t) unsafe, posix extern
	a.wrap-to::nat32 to

+INVALID_SOCKET SOCKET() unsafe
	if extern windows
		max-value
	elif extern posix
		-1 as-socket
	else
		throw not-implemented

+sockaddr extern

+accept err-t(a SOCKET, addr sockaddr mut*, addrlen socklen_t mut*) posix extern

+bind err-t(a SOCKET, addr sockaddr mut*, len socklen_t) posix extern

+recv ssize_t(a SOCKET, buf any-mut-pointer, n size_t, recv-flags int32) posix extern

+socket SOCKET(domain c-int, type c-int, protocol c-int) posix extern

+connect int32(a SOCKET, addr sockaddr mut*, len socklen_t) posix extern

+listen err-t(a SOCKET, n int32) posix extern

+shutdown err-t(a SOCKET, how int32) posix extern

# Win32 only; on POSIX just use 'close'
+closesocket c-int(s SOCKET) windows extern

+SHUT_RD int32() bare
	0
+SHUT_WR int32() bare
	1
+SHUT_RDWR int32() bare
	2

+SOCK_STREAM int32() bare
	1
+SOCK_DGRAM int32() bare
	2
+SOCK_RAW int32() bare
	3
+SOCK_RDM int32() bare
	4
+SOCK_SEQPACKET int32() bare
	5
+SOCK_DCCP int32() bare
	6
+SOCK_PACKET int32() bare
	10
+SOCK_CLOEXEC int32() bare
	0o2000000
+SOCK_NONBLOCK int32() bare
	0o4000

+sa_family_t alias
	nat16

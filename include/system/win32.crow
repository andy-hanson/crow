no-std
import
	crow/bits: |, <<
	crow/bool: bool
	crow/c-types: c-char, c-int, err-t, long, u-short, u-int, size_t
	crow/misc: void
	crow/number: int64, max-value, nat8, nat16, nat32, nat64, new, to
	crow/pointer:
		*, any-const-pointer, any-mut-pointer, const-pointer, mut-pointer, new, pointer-cast,
		size-of, to-mut-pointer
	crow/private/c-string-util: c-string
	system/stdio: FILE
	system/sys/types: mode_t

+CRITICAL_SECTION record extern
	n0 nat64
	n1 nat64
	n2 nat64
	n3 nat64
	n4 nat64

+InitializeCriticalSection void(a CRITICAL_SECTION mut*) kernel32 extern, pure

+EnterCriticalSection void(a CRITICAL_SECTION mut*) kernel32 extern, pure

+LeaveCriticalSection void(a CRITICAL_SECTION mut*) kernel32 extern, pure

+DeleteCriticalSection void(a CRITICAL_SECTION mut*) kernel32 extern, pure

+CONDITION_VARIABLE record(n nat64) extern, mut

+InitializeConditionVariable void(a CONDITION_VARIABLE mut*) kernel32 extern, pure

+SleepConditionVariableCS bool(
	a CONDITION_VARIABLE mut*,
	crit CRITICAL_SECTION mut*,
	millis DWORD,
) kernel32 extern

+WakeAllConditionVariable void(a CONDITION_VARIABLE mut*) kernel32 extern, pure

+INFINITE DWORD() bare
	0xffffffff

+SYNCHRONIZATION_BARRIER record extern, mut
	-Reserved1 DWORD
	-Reserved2 DWORD
	-Reserved3_0 ULONG_PTR
	-Reserved3_1 ULONG_PTR
	-Reserved4 DWORD
	-Reserved5 DWORD

+InitializeSynchronizationBarrier bool(
	lpBarrier SYNCHRONIZATION_BARRIER mut*,
	lTotalThreads long,
	lSpinCount long,
) kernel32 extern, pure

+DeleteSynchronizationBarrier bool(lpBarrier SYNCHRONIZATION_BARRIER mut*) kernel32 extern, pure

+EnterSynchronizationBarrier bool(
	lpBarrier SYNCHRONIZATION_BARRIER mut*,
	dwFlags EnterSynchronizationBarrierFlags,
) kernel32 extern, pure

+EnterSynchronizationBarrierFlags flags extern, DWORD storage
	SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY = 1
	SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY = 2
	SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE = 4

+WORD alias
	nat16
+DWORD alias
	nat32
+DWORD64 alias
	nat64
+ULONG_PTR alias
	nat64

+GetLastError DWORD() kernel32 extern
+SetLastError void(err-code DWORD) kernel32 extern

+ERROR_BROKEN_PIPE DWORD() bare
	109
+ERROR_TIMEOUT DWORD() bare
	1460

+HANDLE alias
	any-mut-pointer

+INVALID_HANDLE_VALUE HANDLE() bare, unsafe
	max-value to-mut-pointer

+WaitForSingleObject DWORD(handle HANDLE, milliseconds DWORD) kernel32 extern

+CloseHandle bool(a HANDLE) kernel32 extern

+_beginthreadex HANDLE(
	security any-mut-pointer,
	stack_size u-int,
	start-address any-mut-pointer function(arg any-mut-pointer),
	arglist any-mut-pointer,
	initflag u-int,
	thrdaddr u-int mut*,
) c extern

+WAIT_OBJECT_0 DWORD() bare
	0

+GetStdHandle HANDLE(stdHandle std-handle) kernel32 extern

+std-handle enum extern, DWORD storage
	# In winbase.h these are -10, -11, -12 even though DWORD is unsigned
	STD_INPUT_HANDLE = 0xfffffff6
	STD_OUTPUT_HANDLE = 0xfffffff5
	STD_ERROR_HANDLE = 0xfffffff4

+ReadConsoleA bool(
	hConsoleInput HANDLE,
	lpBuffer nat8 mut*,
	nNumberOfCharsToRead DWORD,
	lpNumberOfCharsRead DWORD mut*,
	pInputControl DWORD mut*,
) kernel32 extern

+WriteFile bool(
	hFile HANDLE,
	lpBuffer any-const-pointer,
	nNumberOfBytesToWrite DWORD,
	lpNumberOfBytesWritten DWORD mut*,
	lpOverlapped any-mut-pointer,
) kernel32 extern

+WIN32_FIND_DATAA record extern, mut
	dwFileAttributes DWORD
	ftCreationTime FILETIME
	ftLastAccessTime FILETIME
	ftLastWriteTime FILETIME
	nFileSizeHigh DWORD
	nFileSizeLow DWORD
	dwReserved0 DWORD
	dwReserved1 DWORD
	# TODO: use char[260]
	cFileName_STORAGE chars260
	# TODO: use char[14]
	cAlternateFileName_STORAGE chars14

-chars260 extern(260, 1)
-chars14 extern(14, 1)

+new WIN32_FIND_DATAA() bare, unsafe
	(), (), (), (), () , (), (), (), (), ()

+cFileName c-char mut*(a WIN32_FIND_DATAA mut*) unsafe
	(&a->cFileName_STORAGE)::chars260 mut* pointer-cast

+FILETIME record(dwLowDateTime DWORD, dwHighDateTime DWORD) extern

+new FILETIME() bare
	(), ()

+DeleteFileA bool(lpFileName c-string) kernel32 extern

+GetFileAttributesA FileAttributes(lpFileName c-string) kernel32 extern

+FileAttributes flags extern, nat32 storage
	FILE_ATTRIBUTE_READONLY = 0x1
	FILE_ATTRIBUTE_HIDDEN = 0x2
	FILE_ATTRIBUTE_SYSTEM = 0x4
	FILE_ATTRIBUTE_DIRECTORY = 0x10
	FILE_ATTRIBUTE_ARCHIVE = 0x20
	FILE_ATTRIBUTE_DEVICE = 0x40
	FILE_ATTRIBUTE_NORMAL = 0x80
	FILE_ATTRIBUTE_TEMPORARY = 0x100
	FILE_ATTRIBUTE_SPARSE_FILE = 0x200
	FILE_ATTRIBUTE_REPARSE_POINT = 0x400
	FILE_ATTRIBUTE_COMPRESSED = 0x800
	FILE_ATTRIBUTE_OFFLINE = 0x1000
	FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x2000
	FILE_ATTRIBUTE_ENCRYPTED = 0x4000
	FILE_ATTRIBUTE_INTEGRITY_STREAM = 0x8000
	FILE_ATTRIBUTE_VIRTUAL = 0x10000
	FILE_ATTRIBUTE_NO_SCRUB_DATA = 0x20000
	FILE_ATTRIBUTE_PINNED = 0x80000
	FILE_ATTRIBUTE_UNPINNED = 0x100000
	FILE_ATTRIBUTE_RECALL_ON_OPEN = 0x40000
	FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 0x400000
	INVALID_FILE_ATTRIBUTES = 0xffffffff

+FindFirstFileA HANDLE(
	lpFileName c-string,
	lpFindFileData WIN32_FIND_DATAA mut*,
) kernel32 extern
+FindNextFileA bool(hFindFile HANDLE, lpFindFileData WIN32_FIND_DATAA mut*) kernel32 extern
+FindClose bool(hFindFile HANDLE) kernel32 extern

+_getcwd c-char mut*(buffer c-char mut*, size size_t) c extern
+_mkdir err-t(path c-string, mode mode_t) c extern
+_pclose err-t(stream FILE mut*) c extern
+_popen FILE mut*(command c-string, mode c-string) c extern

+ERROR_FILE_NOT_FOUND DWORD() bare
	2
+ERROR_PATH_NOT_FOUND DWORD() bare
	3
+ERROR_NO_MORE_FILES DWORD() bare
	18

+FormatMessageA DWORD(
	dwFlags DWORD,
	lpSource any-const-pointer,
	dwMessageId DWORD,
	dwLanguageId DWORD,
	lpBuffer c-char mut*,
	nSize DWORD,
	arguments any-mut-pointer,
) kernel32 extern

+FORMAT_MESSAGE_IGNORE_INSERTS DWORD() bare
	0x200
+FORMAT_MESSAGE_FROM_STRING DWORD() bare
	0x400
+FORMAT_MESSAGE_FROM_HMODULE DWORD() bare
	0x800
+FORMAT_MESSAGE_FROM_SYSTEM DWORD() bare
	0x1000
+FORMAT_MESSAGE_ARGUMENT_ARRAY DWORD() bare
	0x2000

+LANG_NEUTRAL WORD()
	0
+SUBLANG_NEUTRAL WORD()
	0

+MAKELANGID DWORD(p WORD, s WORD) bare
	(s.to << 10) | p.to

+STARTUPINFOA record extern, mut
	cb DWORD
	lpReserved c-char mut*
	lpDesktop c-char mut*
	lpTitle c-char mut*
	dwX DWORD
	dwY DWORD
	dwXSize DWORD
	dwYSize DWORD
	dwXCountChars DWORD
	dwYCountChars DWORD
	dwFillAttribute DWORD
	dwFlags startup-flags
	wShowWindow WORD
	cbReserved2 WORD
	lpReserved2 nat8 mut*
	hStdInput HANDLE
	hStdOutput HANDLE
	hStdError HANDLE

+startup-flags enum extern, DWORD storage
	STARTF_USESHOWWINDOW = 1
	STARTF_USESIZE = 2
	STARTF_USEPOSITION = 4
	STARTF_USECOUNTCHARS = 8
	STARTF_USEFILLATTRIBUTE = 0x10
	STARTF_RUNFULLSCREEN = 0x20
	STARTF_FORCEONFEEDBACK = 0x40
	STARTF_FORCEOFFFEEDBACK = 0x80
	STARTF_USESTDHANDLES = 0x100

+new STARTUPINFOA(
	dwFlags startup-flags,
	hStdInput HANDLE,
	hStdOutput HANDLE,
	hStdError HANDLE,
) bare, unsafe
	size DWORD = size-of@STARTUPINFOA to
	size, (), (), (), (), (), (), (), (), (), (), dwFlags, (), (), (),
		hStdInput, hStdOutput, hStdError

+SECURITY_ATTRIBUTES record extern, mut
	nLength DWORD
	lpSecurityDescriptor any-mut-pointer
	bInheritHandle c-int

+new SECURITY_ATTRIBUTES(lpSecurityDescriptor any-mut-pointer, bInheritHandle bool) bare, unsafe
	# TODO: shouldn't need parens
	(size-of@SECURITY_ATTRIBUTES).to, lpSecurityDescriptor, bInheritHandle ? 1 : 0

+PROCESS_INFORMATION record extern, mut
	hProcess HANDLE
	hThread HANDLE
	dwProcessId DWORD
	dwThreadId DWORD

+new PROCESS_INFORMATION() bare, unsafe
	(), (), (), ()

+CreatePipe bool(
	hReadPipe HANDLE mut*,
	hWritePipe HANDLE mut*,
	lpPipeAttributes SECURITY_ATTRIBUTES*,
	nSize DWORD,
) kernel32 extern

+CreateSymbolicLinkA bool(
	lpSymlinkFileName c-string,
	lpTargetFileName c-string,
	dwFlags link-flags,
) kernel32 extern

+link-flags flags extern, DWORD storage
	SYMBOLIC_LINK_FLAG_DIRECTORY = 1
	SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE = 2

+SetHandleInformation bool(hObject HANDLE, dwMask DWORD, dwFlags DWORD) kernel32 extern

+HANDLE_FLAG_INHERIT DWORD() bare
	1
+HANDLE_FLAG_PROTECT_FROM_CLOSE DWORD() bare
	2

+CreateProcessA bool(
	lpApplicationName c-string,
	lpCommandLine c-string,
	lpProcessAttributes SECURITY_ATTRIBUTES*,
	lpThreadAttributes SECURITY_ATTRIBUTES*,
	bInheritHandles bool,
	dwCreationFlags DWORD,
	lpEnvironment any-mut-pointer,
	lpCurrentDirectory c-string,
	lpStartupInfo STARTUPINFOA*,
	lpProcessInformation PROCESS_INFORMATION mut*,
) kernel32 extern

+GetExitCodeProcess bool(hProcess HANDLE, lpExitCode DWORD mut*) kernel32 extern

+ReadFile bool(
	hFile HANDLE,
	lpBuffer nat8 mut*,
	nNumberOfBytesToRead nat32,
	lpNumberOfBytesRead nat32 mut*,
	# TODO: Overlapped type
	lpOverlapped any-mut-pointer,
) kernel32 extern

+PeekNamedPipe bool(
	hNamedPipe HANDLE,
	lpBuffer void mut*,
	nBufferSize DWORD,
	lpBytesRead DWORD mut*,
	lpTotalBytesAvail DWORD mut*,
	lpBytesLeftThisMessage DWORD mut*,
) kernel32 extern

+MAKEWORD WORD(a nat8, b nat8)
	(a.to | (b.to << 8))

+WSAStartup c-int(wVersionRequested WORD, lpWSAData WSADATA mut*) kernel32 extern

+WSADATA record extern, mut
	wVersion WORD
	wHighVersion WORD
	iMaxSockets u-short
	iMaxUdpDg u-short
	lpVendorInfo c-char mut*
	# TODO: use char[257]
	szDescription_STORAGE chars257
	# TODO: use char[129]
	szSystemStatus_STORAGE chars129
-chars129 extern(129)
-chars257 extern(257)

+new WSADATA() bare, unsafe
	(), (), (), (), (), (), ()

+GetSystemInfo void(lpSystemInfo SYSTEM_INFO mut*) kernel32 extern

+SYSTEM_INFO record extern, mut
	-DUMMYUNIONNAME DWORD
	dwPageSize DWORD
	lpMinimumApplicationAddress any-mut-pointer
	lpMaximumApplicationAddress any-mut-pointer
	dwActiveProcessorMask int64
	dwNumberOfProcessors DWORD
	dwProcessorType DWORD
	dwAllocationGranularity DWORD
	wProcessorLevel WORD
	wProcessorRevision WORD

+new SYSTEM_INFO() bare, unsafe
	(), (), (), (), (), (), (), (), (), ()

# TODO: should not be 'pure'
+GetTickCount DWORD() kernel32 extern, pure

+Sleep void(dwMilliseconds DWORD) kernel32 extern

+CONTEXT record extern, mut
	P1Home DWORD64
	P2Home DWORD64
	P3Home DWORD64
	P4Home DWORD64
	P5Home DWORD64
	P6Home DWORD64
	ContextFlags DWORD

	SegCs WORD
	SegDs WORD
	SegEs WORD
	SegFs WORD
	SegGs WORD
	SegSs WORD
	EFlags DWORD

	Dr0 DWORD64
	Dr1 DWORD64
	Dr2 DWORD64
	Dr3 DWORD64
	Dr6 DWORD64
	Dr7 DWORD64

	Rax DWORD64
	Rcx DWORD64
	Rdx DWORD64
	Rbx DWORD64
	Rsp DWORD64
	Rbp DWORD64
	Rsi DWORD64
	Rdi DWORD64
	R8 DWORD64
	R9 DWORD64
	R10 DWORD64
	R11 DWORD64
	R12 DWORD64
	R13 DWORD64
	R14 DWORD64
	R15 DWORD64

	Rip DWORD64
	# There's a lot more declared here, reserve enough space for it all
	-opaque bytes2048
-bytes2048 extern(2048)

+new CONTEXT(ContextFlags DWORD) bare, unsafe
	cf = ContextFlags
	0, 0, 0, 0, 0, 0, cf, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, ()

# TODO: should not be 'pure'
+RtlCaptureContext void(context CONTEXT mut*) kernel32 extern, pure

# TODO: use a flags enum
+CONTEXT_AMD64 DWORD() bare
	0x00100000
+CONTEXT_CONTROL DWORD() bare
	CONTEXT_AMD64 | 0x00000001
+CONTEXT_INTEGER DWORD() bare
	CONTEXT_AMD64 | 0x00000002
+CONTEXT_SEGMENTS DWORD() bare
	CONTEXT_AMD64 | 0x00000004
+CONTEXT_FLOATING_POINT DWORD() bare
	CONTEXT_AMD64 | 0x00000008
+CONTEXT_DEBUG_REGISTERS DWORD() bare
	CONTEXT_AMD64 | 0x00000010
+CONTEXT_FULL DWORD() bare
	CONTEXT_CONTROL | CONTEXT_INTEGER | CONTEXT_FLOATING_POINT
+CONTEXT_ALL DWORD() bare
	CONTEXT_CONTROL | CONTEXT_INTEGER | CONTEXT_SEGMENTS | CONTEXT_FLOATING_POINT |
		CONTEXT_DEBUG_REGISTERS
+CONTEXT_XSTATE DWORD() bare
	CONTEXT_AMD64 | 0x00000040

# TODO: should not be 'pure'
+GetCurrentProcess HANDLE() kernel32 extern, pure
+GetCurrentThread HANDLE() kernel32 extern, pure

+IMAGE_FILE_MACHINE_AMD64 DWORD() bare
	0x8664

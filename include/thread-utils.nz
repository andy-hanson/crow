import .bootstrap .posix

region atomic

new-atomic-bool by-val atomic-bool() noctx
	new false

| TODO: works on any primitive type, not just bool
compare-exchange-strong bool(value-ptr ptr bool, expected-ptr ptr bool, desired bool) noctx builtin

try-change bool(a atomic-bool, old-value bool) noctx trusted
	a.value.ptr-to compare-exchange-strong old-value.ptr-to, old-value.not

try-set bool(a atomic-bool) noctx
	a try-change false

try-unset bool(a atomic-bool) noctx
	a try-change true

must-unset void(a atomic-bool) noctx unsafe
	did-unset = a try-unset
	did-unset hard-assert

new-lock by-val lock() noctx
	new new-atomic-bool

try-acquire-lock bool(l lock) noctx trusted
	l.is-locked.ref-of-val try-set

acquire-lock void(l lock) noctx unsafe
	l acquire-lock-recur zero

acquire-lock-recur void(l lock, n-tries nat) noctx unsafe
	when
		l.try-acquire-lock
			pass
		n-tries == thousand
			hard-fail: "Couldn't acquire lock after 1000 tries"
		else
			yield-thread
			l acquire-lock-recur n-tries.noctx-incr

yield-thread void() noctx unsafe
	err = pthread-yield
	| TODO: remove this. I'm using this to reduce the number of recurisve calls in run-tests.
	thousand usleep
	hard-assert: err zero?

release-lock void(l lock) noctx unsafe
	l.is-locked.ref-of-val must-unset

with-lock ?t(l lock, f fun0 ?t) trusted
	l acquire-lock
	res = f call
	l release-lock
	res

condition record mut
	lk by-val lock
	value mut nat

new-condition by-val condition() noctx
	new new-lock, zero

broadcast void(c condition) noctx trusted
	c.lk.ref-of-val acquire-lock
	c.value := c.value noctx-incr
	c.lk.ref-of-val release-lock

last-checked alias
	nat

get-last-checked last-checked(c condition) noctx
	c.value

| TODO:MOVE
sleep-ms-sync void(ms nat) noctx
	| TODO: wrap-mul is unsafe
	ms wrap-mul thousand usleep

wait-on void(c condition, last-checked last-checked) noctx unsafe
	| last-checked should have been called before a change, we wait until c.value is different
	when
		c.value == last-checked
			yield-thread
			c wait-on last-checked
		else
			| condition changed
			pass

| TODO: use atomic operations for this
thread-safe-counter record mut
	lk by-val lock
	value mut nat

new-thread-safe-counter by-val thread-safe-counter() noctx
	zero new-thread-safe-counter

new-thread-safe-counter by-val thread-safe-counter(init nat) noctx
	new new-lock, init

increment void(t thread-safe-counter) noctx
	t.get-and-increment drop

get-and-increment nat(t thread-safe-counter) noctx trusted
	l = t.lk.ref-of-val
	l acquire-lock
	res = t.value
	t.value := t.value noctx-incr
	l release-lock
	res

| Returns true if the counter is now 0.
decrement bool(t thread-safe-counter) noctx
	t.get-and-decrement zero?

get-and-decrement nat(t thread-safe-counter) noctx trusted
	l = t.lk.ref-of-val
	l acquire-lock
	res = t.value
	hard-forbid: res zero?
	t.value := t.value noctx-decr
	l release-lock
	res

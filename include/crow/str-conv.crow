no-std
import
	./bool: bool
	./col/arr: new
	./compare: <
	./misc: void
	./number:
		==, <=>, *, /, %, abs, float64, float32, int8, int16, int32, int64, is-nan, min-int64,
		nat8, nat16, nat32, nat64, to-float64, to-int64, to-nat64, truncate-to-int64
	./str: ==, ~~, char8, c-str, literal, str
	./str-util: strip-right, to-c-str
	./test-util: is

# Returns `"void"`.
to-str str(_ void)
	"void"

# `"true"` or `"false"`.
to-str str(b bool) noctx
	if b
		"true"
	else
		"false"

# String containing a single character.
to-str str(c char8)
	(c,) str

###
Converts a nat64 to a str.
Result is only digits, no punctuation.
###
to-str str(a nat64)
	a to-base 10

.digit-to-str str(a nat64)
	if a == 0
		"0"
	elif a == 1
		"1"
	elif a == 2
		"2"
	elif a == 3
		"3"
	elif a == 4
		"4"
	elif a == 5
		"5"
	elif a == 6
		"6"
	elif a == 7
		"7"
	elif a == 8
		"8"
	elif a == 9
		"9"
	elif a == 10
		"a"
	elif a == 11
		"b"
	elif a == 12
		"c"
	elif a == 13
		"d"
	elif a == 14
		"e"
	elif a == 15
		"f"
	else
		"?"

to-binary str(a nat64)
	a to-base 2

to-hex str(a nat64)
	a to-base 16
to-hex str(a nat8)
	a to-base 16

.to-base str(a nat64, base nat64)
	if a < base
		a digit-to-str
	else
		(a / base to-base base) ~~ (a % base).digit-to-str
.to-base str(a nat8, base nat64)
	a.to-nat64 to-base base

# Spec of any type that could be converted to a str.
to-str<a> spec
	to-str str(a a)

# Identity function to satisfy the `to-str` spec.
to-str str(a str)
	a

to-str str(a nat8)
	a.to-nat64 to-str

to-str str(a nat16)
	a.to-nat64 to-str

to-str str(a nat32)
	a.to-nat64 to-str

to-str str(a int8)
	a.to-int64 to-str

to-str str(a int16)
	a.to-int64 to-str

to-str str(a int32)
	a.to-int64 to-str

to-str str(a int64)
	if a == min-int64
		"-9223372036854775808"
	else
		s = a.abs to-str
		a < 0 ? "-{s}" : s

to-str str(a float32)
	a.to-float64 to-str

to-str str(a float64)
	if a is-nan
		"NaN"
	else
		pos = a.abs to-str-positive
		if a < 0
			"-{pos}"
		else
			pos
test
	12.3.to-str is "12.3"
	0.04.to-str is "0.04"
	0.123.to-str is "0.123"
	0.001.to-str is "0.001"

.to-str-positive str(a float64)
	# TODO: Use a real float to str algorithm
	times-1000 = (a * 1000.0).truncate-to-int64
	thousandths = times-1000 % 1000
	whole-part = "{times-1000 / 1000}"
	hundredths = thousandths / 10
	tenths = hundredths / 10
	d0 = tenths digit-to-str
	d1 = hundredths % 10 digit-to-str
	d2 = thousandths % 10 digit-to-str
	if thousandths == 0
		whole-part
	else
		"{whole-part}.{d0}{d1}{d2}" strip-right "0"

region Interpolation

interp record mut
	inner str

interp interp()
	"",

with-str interp(a interp, b str)
	a.inner ~~ b,

with-value<a> interp(a interp, b a) to-str<a>
	a with-str b.to-str

# TODO: not trusted
finish c-str(a interp) trusted
	a.inner to-c-str

finish str(a interp)
	a inner

no-std
import
	./bool: bool, false, true
	./col/mut-list: ~=, move-to-arr!, mut-list
	./compare: <
	./misc: void
	./number:
		==, <=>, *, /, abs, float64, float32, int8, int16, int32, int64, is-multiple-of, mod, nat8,
		nat16, nat32, nat64, to-float64, to-int64, to-nat64, truncate-to-int64
	./opt: opt, some
	./reader: take-float!, take-int!, take-nat!, with-reader
	./str: ==, ~, char, chars, str

to-str str(_ void)
	"void"

# "true" or "false".
to-str str(b bool) noctx
	if b
		"true"
	else
		"false"

# Str containing a single character.
to-str str(c char)
	[c] str

# Parses "true" or "false".
parse-bool bool?(a str)
	if a == "true"
		true some
	elif a == "false"
		false some

###
Converts a nat64 to a str.
Result is only digits, no punctuation.
###
to-str str(a nat64)
	a to-base 10

.digit-to-str str(a nat64)
	if a == 0
		"0"
	elif a == 1
		"1"
	elif a == 2
		"2"
	elif a == 3
		"3"
	elif a == 4
		"4"
	elif a == 5
		"5"
	elif a == 6
		"6"
	elif a == 7
		"7"
	elif a == 8
		"8"
	elif a == 9
		"9"
	elif a == 10
		"a"
	elif a == 11
		"b"
	elif a == 12
		"c"
	elif a == 13
		"d"
	elif a == 14
		"e"
	elif a == 15
		"f"
	else
		"?"

to-binary str(a nat64)
	a to-base 2

to-hex str(a nat64)
	a to-base 16
to-hex str(a nat8)
	a to-base 16

.to-base str(a nat64, base nat64)
	if a < base
		a digit-to-str
	else
		(a / base to-base base) ~ (a mod base).digit-to-str
.to-base str(a nat8, base nat64)
	a.to-nat64 to-base base

# Spec of any type that could be converted to a str.
to-str<a> spec
	to-str str(a a)

# Identity function to satisfy the `to-str` spec.
to-str str(a str)
	a

to-str<a> str(a a?) to-str<a>
	if v ?= a
		"some({v})"
	else
		"none"

to-str str(a nat8)
	a.to-nat64 to-str

to-str str(a nat16)
	a.to-nat64 to-str

to-str str(a nat32)
	a.to-nat64 to-str

to-str str(a int8)
	a.to-int64 to-str

to-str str(a int16)
	a.to-int64 to-str

to-str str(a int32)
	a.to-int64 to-str

to-str str(a int64)
	s = a.abs to-str
	if a < 0
		"-{s}"
	else
		s

to-str str(a float32)
	a.to-float64 to-str

to-str str(a float64)
	pos = a.abs to-str-positive
	if a < 0
		"-{pos}"
	else
		pos

.to-str-positive str(a float64)
	# TODO: Use a real float to str algorithm
	times-100 = (a * 100.0).truncate-to-int64
	hundredths = times-100 mod 100
	tenths = hundredths / 10
	whole-part = (times-100 / 100).to-str
	if hundredths == 0
		whole-part
	elif hundredths is-multiple-of 10
		"{whole-part}.{tenths}"
	else
		"{whole-part}.{hundredths}"

###
Parse digits as a nat64.
Return none if the str contains any punctuation or whitespace.
###
parse-nat nat64?(a str)
	a with-reader r => r take-nat!

###
The str should be a series of digits, optionally preceded by "-" or "+".
If not, this returns `none`.
###
parse-int int64?(a str)
	a with-reader r => r take-int!

###
The str should be a valid int, optionally followed by a "." and then a valid int.
If not, this returns `none`.
###
parse-float float64?(a str)
	a with-reader r => r take-float!

region Interpolation

interp record mut
	inner mut-list char

interp interp()
	interp: mut-list

with-str interp(a interp, b str)
	a.inner ~= b chars
	a

with-value<a> interp(a interp, b a) to-str<a>
	a with-str b.to-str

finish str(a interp)
	a.inner.move-to-arr! str

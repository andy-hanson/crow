no-std
import
	./bool: bool
	./col/arr: arr, new
	./col/arr-util: flat-map, map
	./misc: name, named-val, val
	./str: str
	./str-util: join
	./sym: sym, to-str

flags-like<a> spec
	empty a()
	all a()
	flags-members named-val<a>[]()
	== bool(a a, b a)
	~ a(a a)
	& a(a a, b a)
	| a(a a, b a)

is-in<a> bool(a a, b a) flags-like<a>
	a & b == a

to-syms<a> sym[](a a) flags-like<a>
	flags-members flat-map member =>
		member.val is-in a ? member.name,

flags-to-str<a> str(a a) flags-like<a>
	a.to-syms map (x => x to-str) join " | "

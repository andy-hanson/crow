no-std
import
	./bool: bool
	./col/array: ~=, array, build, iterate, size
	./col/collection: build, for-loop, with-block
	./compare: equal
	./json: json, to
	./misc: new
	./string: join, string
	./symbol: symbol, to

+flags-like[t] spec t equal
	& t(a t, b t)
	| t(a t, b t)
	flags-members (symbol, t)[]()

###
True if every flag set in `a` is set in `b`.
###
+is-in[t] bool(a t, b t) bare, t flags-like
	a & b == a

# Returns the names of every flag set in `a`.
+to[t] symbol[](a t) t flags-like
	with out : build
		for name, value : flags-members
			if value is-in a
				out ~= name

# Flag names separated by `|`, like `"foo | bar"`.
+to[t] string(a t) t flags-like
	" | " join for x : a.to::symbol[]; x to

+to[t] json(a t) t flags-like
	a.to::symbol[] to

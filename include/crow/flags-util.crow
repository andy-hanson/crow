no-std
import
	./bool: bool
	./col/arr: arr, for-loop, new
	./col/arr-util: join
	./misc: name, named-val, val
	./str: literal, str
	./str-util: join
	./sym: sym, to-str

###
Spec that will be satisfied by generated functions for any `flags` type.
Functions in this spec will be generated when you declare a `flags` type.

(Declaring a `flags` type also generates other functions that aren't needed here.)
###
flags-like<a> spec
	new a()
	all a()
	flags-members named-val<a>[]()
	== bool(a a, b a)
	~ a(a a)
	& a(a a, b a)
	| a(a a, b a)

min-flags-like<a> spec
	== bool(a a, b a)
	& a(a a, b a)

###
True if every flag set in `a` is set in `b`.
###
is-in<a> bool(a a, b a) min-flags-like<a>
	a & b == a

# Returns an array of the name of every flag set in `a`.
to-syms<a> sym[](a a) flags-like<a>
	() join for member : flags-members
		if member.val is-in a
			member.name,

# Flag names separated by `|`, like `"foo | bar"`.
flags-to-str<a> str(a a) flags-like<a>
	" | " join for x : a to-syms
		x to-str

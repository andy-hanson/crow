no-std
import
	./bool: bool
	./col/array: array, iterate, size
	./col/collection: for-loop, join
	./col/list: ~~, ~=, build, iterate, list, new, size
	./string: ~~, literal, new, string
	./symbol: symbol, to

###
Spec that will be satisfied by generated functions for any `flags` type.
Functions in this spec will be generated when you declare a `flags` type.

(Declaring a `flags` type also generates other functions that aren't needed here.)
###
+flags-like[t] spec
	new t()
	all t()
	flags-members (symbol, t) array()
	== bool(a t, b t)
	~ t(a t)
	& t(a t, b t)
	| t(a t, b t)

+min-flags-like[t] spec
	== bool(a t, b t)
	& t(a t, b t)

###
True if every flag set in `a` is set in `b`.
###
+is-in[t] bool(a t, b t) t min-flags-like
	a & b == a

# Returns the names of every flag set in `a`.
+to[t] symbol[](a t) t flags-like
	parts symbol[][] = for name, value : flags-members
		if value is-in a
			name,
	() join parts

# Flag names separated by `|`, like `"foo | bar"`.
+to-string[t] string(a t) t flags-like
	" | " join for x : a.to::symbol[]; x to

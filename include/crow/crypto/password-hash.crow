no-std
import
	system/sodium:
		crypto_pwhash_memlimit_moderate, crypto_pwhash_memlimit_sensitive,
		crypto_pwhash_opslimit_moderate, crypto_pwhash_opslimit_sensitive, crypto_pwhash_str,
		crypto_pwhash_strbytes, crypto_pwhash_str_verify
	../bool: bool
	../col/array: array, begin-pointer, size
	../col/mut-array: begin-pointer, cast-immutable, gc-safe-mut-array, mut-array
	../number: ==, nat8
	../pointer: const-pointer, mut-pointer, pointer-cast
	../string: char8, string, to
	./private/sodium: ensure-sodium-initialized

###
These correspond to options from libsodium.
Use `quality-moderate` for most cases.
`quality-sensitive` is for non-interactive use cases.
###
+password-hash-quality enum(quality-moderate, quality-sensitive)

# Get the hash of a password.
+password-hash nat8[](password string, quality password-hash-quality) (native, sodium) extern
	trusted
		ensure-sodium-initialized
		strbytes = crypto_pwhash_strbytes
		assert strbytes == 128
		res nat8 mut-array = strbytes gc-safe-mut-array
		ops-limit = match quality
		as quality-moderate
			crypto_pwhash_opslimit_moderate
		as quality-sensitive
			crypto_pwhash_opslimit_sensitive
		mem-limit = match quality
		as quality-moderate
			crypto_pwhash_memlimit_moderate
		as quality-sensitive
			crypto_pwhash_memlimit_sensitive
		res-bytes char8 mut* = res.begin-pointer pointer-cast
		chars char8[] = password to
		err = res-bytes crypto_pwhash_str chars.begin-pointer, chars.size, ops-limit, mem-limit
		assert err == 0
		res cast-immutable

# With high probability, this will only be `true` if `hash` was the result of hashing `password`.
+password-matches-hash bool(password string, hash nat8[]) bare, trusted, (native, sodium) extern
	assert hash.size == crypto_pwhash_strbytes
	chars char8[] = password to
	ptr char8* = hash.begin-pointer pointer-cast
	(ptr crypto_pwhash_str_verify chars.begin-pointer, chars.size) == 0

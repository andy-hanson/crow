no-std
import
	sodium:
		crypto_pwhash_memlimit_moderate, crypto_pwhash_memlimit_sensitive,
		crypto_pwhash_opslimit_moderate, crypto_pwhash_opslimit_sensitive, crypto_pwhash_str,
		crypto_pwhash_strbytes, crypto_pwhash_str_verify
	../bool: bool
	../col/arr: arr, begin-ptr, size
	../col/fix-arr: begin-ptr, cast-immutable, fix-arr, uninitialized-fix-arr
	../exception: assert
	../number: ==, nat8
	../ptr: mut-ptr, ptr-cast
	../str: char, chars, size-bytes, str
	./private/sodium: ensure-sodium-initialized

password-hash-quality enum
	quality-moderate
	quality-sensitive

password-hash nat8[](password str, quality password-hash-quality) trusted
	ensure-sodium-initialized
	strbytes = crypto_pwhash_strbytes
	assert: strbytes == 128
	res fix-arr nat8 = strbytes uninitialized-fix-arr
	ops-limit = match quality
	as quality-moderate
		crypto_pwhash_opslimit_moderate
	as quality-sensitive
		crypto_pwhash_opslimit_sensitive
	mem-limit = match quality
	as quality-moderate
		crypto_pwhash_memlimit_moderate
	as quality-sensitive
		crypto_pwhash_memlimit_sensitive
	res-bytes char mut* = res.begin-ptr ptr-cast
	err = res-bytes crypto_pwhash_str password.chars.begin-ptr, password.size-bytes, ops-limit, mem-limit
	assert: err == 0
	res cast-immutable

password-matches bool(password str, hash nat8[]) trusted
	assert: hash.size == crypto_pwhash_strbytes
	(hash.begin-ptr.ptr-cast crypto_pwhash_str_verify password.chars.begin-ptr, password.size-bytes) == 0

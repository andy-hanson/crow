no-std
import
	sodium:
		crypto_pwhash_memlimit_moderate, crypto_pwhash_memlimit_sensitive,
		crypto_pwhash_opslimit_moderate, crypto_pwhash_opslimit_sensitive, crypto_pwhash_str,
		crypto_pwhash_strbytes, crypto_pwhash_str_verify
	../bool: ==, bool, false, true
	../col/arr: arr, begin-ptr, size
	../col/mut-arr: begin-ptr, cast-immutable, uninitialized-mut-arr
	../exception: assert
	../number: ==, nat8
	../ptr: ptr-cast
	../str: char, chars, size-bytes, str
	../test: is
	./private/sodium: ensure-sodium-initialized

password-hash-quality union
	quality-moderate
	quality-sensitive
quality-moderate record
quality-sensitive record

password-hash nat8[](password str, quality password-hash-quality) trusted
	ensure-sodium-initialized
	strbytes = crypto_pwhash_strbytes
	assert: strbytes == 128
	res = strbytes uninitialized-mut-arr<nat8>
	ops-limit = match quality
	as quality-moderate
		crypto_pwhash_opslimit_moderate
	as quality-sensitive
		crypto_pwhash_opslimit_sensitive
	mem-limit = match quality
	as quality-moderate
		crypto_pwhash_memlimit_moderate
	as quality-sensitive
		crypto_pwhash_memlimit_sensitive
	res-bytes = res.begin-ptr ptr-cast<char, nat8>
	err = res-bytes crypto_pwhash_str password.chars.begin-ptr, password.size-bytes, ops-limit, mem-limit
	assert: err == 0
	res cast-immutable

password-matches bool(password str, hash nat8[]) trusted
	assert: hash.size == crypto_pwhash_strbytes
	(hash.begin-ptr.ptr-cast<char, nat8> crypto_pwhash_str_verify password.chars.begin-ptr, password.size-bytes) == 0

test
	password = "hunter2"
	hash = password password-hash quality-moderate
	# Can't assert hash value as it will be different every time
	"hunter2" password-matches hash is true
	"hutner2" password-matches hash is false

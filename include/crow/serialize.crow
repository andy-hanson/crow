no-std
import
	./bits: &, |, <<, >>
	./col/arr: ==, arr, arr-cast, new, size, subscript
	./col/arr-util: fold, strip-left-while
	./compare: <, <=
	./exception: assert
	./number: to-int64, to-nat32, to-nat64
	./range: ..
	./str: chars, str
	./test-util: is
	./private/bootstrap: todo
	./private/number-low-level: ==, <=>, int64, max-int64, nat8, nat32, nat64, unsafe-to-nat8

serialize<a> spec
	to-bytes nat8[](a a)
	from-bytes a(a nat8[])

to-bytes nat8[](a nat8[])
	a
from-bytes nat8[](a nat8[])
	a

to-bytes nat8[](a str) trusted
	a.chars arr-cast
from-bytes str(a nat8[]) trusted
	a.arr-cast str

to-bytes nat8[](a nat64)
	a.to-8-bytes strip-left-while byte => byte == 0
to-8-bytes nat8[](a nat64)
	b0 = a >> 0x00 wrap-to-nat8
	b1 = a >> 0x08 wrap-to-nat8
	b2 = a >> 0x10 wrap-to-nat8
	b3 = a >> 0x18 wrap-to-nat8
	b4 = a >> 0x20 wrap-to-nat8
	b5 = a >> 0x28 wrap-to-nat8
	b6 = a >> 0x30 wrap-to-nat8
	b7 = a >> 0x38 wrap-to-nat8
	b7, b6, b5, b4, b3, b2, b1, b0
from-bytes nat64(a nat8[])
	assert: a.size <= 8
	0 fold a, (cur, x) =>
		cur << 8 | x.to-nat64
test
	n = 0x0123456789abcdef
	bytes = n to-bytes
	bytes is (0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef)
	bytes.from-bytes :: nat64 is n
	0x500.to-8-bytes is (0, 0, 0, 0, 0, 0, 5, 0)
	0x500.to-bytes is (5, 0)

# TODO:MOVE
.wrap-to-nat8 nat8(a nat64) trusted
	# TODO: gccjit has a bug if I inline 'masked'
	masked = a & 0xff
	masked unsafe-to-nat8

to-4-bytes nat8[](a nat32)
	a.to-nat64.to-8-bytes[4 .. 8]
to-bytes nat8[](a nat32)
	a.to-nat64 to-bytes
from-bytes nat32(a nat8[])
	a.from-bytes :: nat64 to-nat32

to-8-bytes nat8[](a int64)
	if a < 0
		todo
	else
		a.to-nat64 to-8-bytes
from-bytes int64(a nat8[])
	n nat64 = a from-bytes
	if n < max-int64.to-nat64
		n to-int64
	else
		todo

###
Functions for converting values to/from byte arrays.

For JSON serialization, see the `crow/json` module.
###

no-std
import
	./bits: &, |, <<, >>
	./col/array: ==, array, begin, end, iterate, next, new, size, slice, subscript
	./col/collection: drop-while, for-loop
	./compare: <, <=
	./json: to
	./number: ==, <=>, int64, max-value, nat8, nat32, nat64, to
	./range: ..
	./string: as-string, string
	./test-util: is
	./private/bootstrap: todo

###
A type is serializable if it can convert to and from a byte array.

Implementations should ensure that `a.to-bytes.from-bytes == a`.
###
+serialize[t] spec
	to-bytes nat8[](a t)
	from-bytes t(a nat8[])

# Identity function to ensure that byte lists are trivially serializable.
+to-bytes nat8[](a nat8[])
	a
+from-bytes nat8[](a nat8[])
	a

+from-bytes string(a nat8[])
	a as-string

###
Convert a number to a nat8[] simply by taking its component bytes in big-endian order.
This strips leading 0 bytes.
###
+to-bytes nat8[](a nat64)
	a.to-8-bytes drop-while byte => byte == 0
###
Unlike `a to-bytes`, this always returns an 8-byte array, including any leading 0 bytes.
###
+to-8-bytes nat8[](a nat64)
	b0 = a >> 0x00 wrap-to
	b1 = a >> 0x08 wrap-to
	b2 = a >> 0x10 wrap-to
	b3 = a >> 0x18 wrap-to
	b4 = a >> 0x20 wrap-to
	b5 = a >> 0x28 wrap-to
	b6 = a >> 0x30 wrap-to
	b7 = a >> 0x38 wrap-to
	b7, b6, b5, b4, b3, b2, b1, b0
# This works for the result of either `to-bytes` or `to-8-bytes`.
+from-bytes nat64(a nat8[])
	assert a.size <= 8
	res mut nat64 = 0
	for x : a
		res <<:= 8
		res |:= x to
	res
test
	n nat64 = 0x0123456789abcdef
	bytes = n to-bytes
	bytes is (0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef)
	bytes.from-bytes :: nat64 is n
	0x500::nat64.to-8-bytes is (0, 0, 0, 0, 0, 0, 5, 0)
	0x500::nat64.to-bytes is (5, 0)

# TODO:MOVE
-wrap-to nat8(a nat64) bare
	# TODO: gccjit has a bug if I inline 'masked'
	masked = a & 0xff
	masked to

+to-bytes nat8[](a nat32)
	a.to::nat64 to-bytes
+to-4-bytes nat8[](a nat32)
	a.to::nat64.to-8-bytes[4 .. 8]
+from-bytes nat32(a nat8[])
	a.from-bytes::nat64 to

+to-bytes nat8[](a int64)
	a to-8-bytes
+to-8-bytes nat8[](a int64)
	if a < 0
		todo
	else
		a.to::nat64 to-8-bytes
+from-bytes int64(a nat8[])
	n nat64 = a from-bytes
	if n < max-value::int64.to
		n to
	else
		todo

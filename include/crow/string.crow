no-std
import
	./bits: ~, &, |, <<, >>, bits-intersect, has-all-bits
	./bool: ||, bool, false, not, true
	./compare: !=, <, <=, >, compare, comparison, equal, greater, less
	./col/array:
		~, ~~, ~=, ~~=, ==, <=>, array, array-builder, array-cast, array-iterator, as-array, begin,
		begin-pointer, build, collection, end, is-empty, iterate, new, next, prev, size, slice,
		subscript
	./col/mut-slice: cast-immutable, cast-mutable, copy, mut-slice
	./col/collection:
		build, build-options, drop-right-while, drop-while, for-break, for-loop,
		try-remove-end, try-split-once, with-block
	./col/mut-array: ~=, insert-at, move-to, mut-array, new, reverse-in-place, size
	./col/util: split
	./fun-util: subscript
	./hash: hasher, hash-mix
	./js: ==, <, +, as-js, call, call-property, cast, js-global
	./misc: loop-break, loop-continue, new, void
	./number:
		==, <=>, +, -, *, /, %, abs, float64, float32, infinity, int8, int16, int32, int64,
		is-nan, is-near-int, min-value, nat8, nat16, nat32, nat64, to, round, truncate-to
	./option: ??, force, new, option
	./pointer: ==, <=>
	./private/exception-low-level: exception, unreachable
	./private/number-low-level: wrap-sub
	./range: .., in, iterate
	./tuple: b, new
export
	./private/bootstrap: char32, string
	# TODO: don't export find-c-string-end
	./private/c-string-util: ==, char8, c-string, find-c-string-end, to

+to char8[](a string) builtin, bare

-unsafe-to char32(a char8) builtin, bare
+to char32(a char8) bare
	assert a is-valid-single-byte-character
	a.unsafe-to
+to char32[](a string)
	for x : a; x

+~~ string(a string, b string)
	if trusted extern js
		trusted a.as-js + b.as-js cast
	else
		a.to::char8[] ~~ b.to to

+interpolate string(...parts string[])
	if trusted extern js
		# This makes sure it's synchronous, and faster
		trusted parts.as-js call-property "join", ""::string cast
	else
		"" join parts
+interpolate c-string(...parts string[]) unsafe, native extern
	"" join parts to

# Same as `""`.
+new string() bare
	""

# Same as `a == ""`.
+is-empty bool(a string) bare
	a.to::char8[] is-empty

# Size in `char8`s
+size-char8s nat64(a string) bare
	a.to::char8[] size
+size nat64(a string)
	res mut nat64 = 0
	for _ : a
		res +:= 1
	res

+== bool(a string, b string)
	if trusted extern js
		trusted a.as-js == b.as-js
	else
		a.to::char8[] == b.to
+== bool(a char32, b char32) bare, builtin
+to nat32(a char32) bare, builtin
# This is unsafe because a 'char32' should be a valid unicode character.
+unsafe-to char32(a nat32) bare, builtin, unsafe
+to char32(a nat32) bare
	assert a is-valid-unicode-character
	trusted a unsafe-to

+<=> comparison(a string, b string)
	if trusted extern js
		if trusted a.as-js < b.as-js
			less
		elif a == b
			equal
		else
			greater
	else
		a.to::char8[] <=> b.to
+<=> comparison(a char8, b char8) bare
	a.to::nat8 <=> b.to
+<=> comparison(a char32, b char32) bare
	a.to::nat32 <=> b.to

+hash-mix void(hasher hasher, a string)
	chars char8[] = a to
	i mut nat64 = 0
	until i == chars.size
		hasher hash-mix chars[i]
		i +:= 1
+hash-mix void(hasher hasher, a char8)
	hasher hash-mix a.to::nat8.to::nat64
+hash-mix void(hasher hasher, a char32)
	hasher hash-mix a.to::nat32.to::nat64

region conversion

+to string(a char32[])
	with out : build
		for x : a
			out ~= x

# Assumes its input is valid UTF-8 without validation.
-trust-as-string string(a char8[]) builtin, bare, unsafe

# Treats UTF-8 character codes as a string. O(n) due to validation.
+to string(a char8[]) trusted
	res string = a trust-as-string
	# Validate decoding
	for _ : res; ()
	res
+move-to string(a char8 mut[]) unsafe
	a.move-to::char8[] to
# Validates that bytes are UTF-8 character codes, and returns them as a string.
+as-string string(bytes nat8[]) trusted
	bytes.array-cast::char8[] to

+to nat64(a char8) bare
	a.to::nat8 to

###
Treats a string as a list of UTF-8 bytes.
This is O(1).
###
+to-bytes nat8[](a string) trusted
	a.to::char8[] array-cast

+to nat8[](a string)
	a to-bytes

###
Converts a string to a c-string by appending "\0".
This is O(n).

WARN: The resulting string is allocated from GC memory but isn't traced by the garbage collector,
so it may be freed after the current task.
###
+to c-string(a string) unsafe, native extern
	(a.to::char8[] ~ "\0") begin-pointer

###
Treats a c-string as a string by walking to the end.

Unsafe because this does not copy the memory, and because `a` must end in a `"\0"` character.
###
+as-string string(a c-string) unsafe, native extern
	a.to::char8[] to

+to char8[](a c-string) unsafe, native extern
	a .. a.find-c-string-end as-array

###
Unlike 'as-string' this copies the 'c-string'.

This is still unsafe because 'a' must end in a `"\0"` character.
###
+to string(a c-string) unsafe, native extern
	copy char8 mut-slice = a.to.cast-mutable copy
	copy.cast-immutable to

+show[t] spec
	show string(a t)

# `"true"` or `"false"`.
+show string(a bool) bare
	if a
		"true"
	else
		"false"

# String containing a single character.
+to string(a char8)
	a.to::char32 to
+show string(a char8)
	a to
+to string(a char32)
	with out : build
		out ~= a
+show string(a char32)
	a to

###
Converts a nat64 to a string.
Result is only digits, no punctuation.
###
+show string(a nat64)
	if trusted extern js
		trusted a js-to-string
	else
		a to-base 10

-js-to-string[t] string(a t) unsafe, js extern
	"String".js-global call a cast

-digit-to-string string(a nat64)
	a.digit-to-char to
-digit-to-char char32(a nat64)
	match a
	as 0
		"0"
	as 1
		"1"
	as 2
		"2"
	as 3
		"3"
	as 4
		"4"
	as 5
		"5"
	as 6
		"6"
	as 7
		"7"
	as 8
		"8"
	as 9
		"9"
	as 10
		"a"
	as 11
		"b"
	as 12
		"c"
	as 13
		"d"
	as 14
		"e"
	as 15
		"f"
	else
		throw unreachable

+to-binary string(a nat8)
	a.to::nat64 to-binary
+to-binary string(a nat16)
	a.to::nat64 to-binary
+to-binary string(a nat32)
	a.to::nat64 to-binary
+to-binary string(a nat64)
	a to-base 2

+to-hex string(a nat8)
	a.to::nat64 to-hex
+to-hex string(a nat16)
	a.to::nat64 to-hex
+to-hex string(a nat32)
	a.to::nat64 to-hex
+to-hex string(a nat64)
	a to-base 16

-to-base string(a nat64, base nat64)
	if a < base
		a digit-to-string
	else
		(a / base to-base base) ~~ (a % base).digit-to-string

+show string(a c-string) unsafe, native extern
	a to
+show string(a string) bare
	a

+show string(a nat8)
	a.to::nat64 show

+show string(a nat16)
	a.to::nat64 show

+show string(a nat32)
	a.to::nat64 show

+show string(a int8)
	a.to::int64 show

+show string(a int16)
	a.to::int64 show

+show string(a int32)
	a.to::int64 show

+show string(a int64)
	if trusted extern js
		trusted a js-to-string
	elif a == min-value
		"-9223372036854775808"
	else
		s string = "{a abs}"
		a < 0 ? "-{s}" : s

+show string(a float32)
	a.to::float64 show

+show string(a float64) trusted
	guard !(extern js) : a js-to-string
	guard a !is-nan : "NaN"
	guard a != infinity : "Infinity"
	guard a != -infinity : "-Infinity"
	guard a != a.truncate-to::int64.to : a.truncate-to show
	guard a > 0 : a == 0 ? "0" : "-{-a}"

	dec mut, exp mut = a to-decimal-and-exponent
	# Ouptut in reverse
	out char32 mut[] = ()
	while dec != 0
		digit = dec % 10
		out ~= digit digit-to-char
		dec /:= 10
		exp +:= 1

	if exp <= 0
		for _ : 0::nat64 .. exp.abs
			out ~= "0"
		out ~= "."
		out ~= "0"
	out reverse-in-place
	if exp > 0
		if exp.to::nat64 < out.size
			out insert-at exp.to, "."
		else
			for _ : out.size .. exp.to
				out ~= "0"
	out.move-to::char32[] to

-to-decimal-and-exponent (nat64, int64)(a float64)
	assert a > 0
	x mut = a
	exp mut int64 = 0
	while x < 1
		x *:= 10
		exp -:= 1

	digits mut nat64 = 0
	until x.is-near-int || digits == 15
		x *:= 10
		exp -:= 1
		digits +:= 1

	dec mut nat64 = x.round.to
	while dec % 10 == 0
		dec /:= 10
		exp +:= 1
	dec, exp

region spec impls (see collection.crow)

+iterate bool(a string, f bool mut(x char32))
	iter mut = a begin
	loop
		guard x, next ?= iter next : break false
		if f[x]
			break true
		else
			iter := next
			continue

+string-iterator record by-val
	-inner char8 array-iterator

+== bool(a string-iterator, b string-iterator)
+<=> comparison(a string-iterator, b string-iterator)

+begin string-iterator(a string) bare
	a.to.begin,

+end string-iterator(a string) bare
	a.to.end,

+collection string(a string-iterator) bare, trusted
	a.inner.collection.trust-as-string

+slice string(a string-iterator, b string-iterator) bare, trusted
	a.inner slice b.inner trust-as-string

+next (char32, string-iterator)?(a string-iterator)
	guard x, next ?= a.inner next
	char, next2 = x unicode-decode next
	(char, (next2,)),

+prev (string-iterator, char32)?(a string-iterator)
	guard prev, x ?= a.inner prev
	prev2, char = prev unicode-decode-prev x
	((prev2,), char),

+string-builder record mut
	-inner char8 array-builder
+build string(a build-options, f void mut(out string-builder))
	chars char8[] = a build out => f[out,]
	trusted chars trust-as-string
+~= void(a string-builder, value char32)
	a unicode-encode value.to
+~~= void(a string-builder, s string)
	a.inner ~~= s to

region utilities

+invalid-unicode-character record(character nat32) exception variant-member
+show string(a invalid-unicode-character)
	"0x{a.character to-hex} is not a valid Unicode character."
+unicode-decode-error record exception variant-member
+show string(_ unicode-decode-error)
	"Error decoding bytes as UTF-8"

+lines string[](a string)
	# TODO:PERF should be better (or at least just as good) with just `a split "\n"`
	for x : a.to::char32[] split ("\n",)
		((x try-remove-end "\r") ?? x) to

# Lower cases every character in `a`.
+lower-case string(a string)
	for x : a; x lower-case-char

-lower-case-char char32(a char32) bare
	diff = a.to::nat32 wrap-sub "A"::char32.to
	if diff < 26
		trusted "a"::char32.to + diff unsafe-to
	else
		a

# Capitalizes every character in `a`.
+upper-case string(a string)
	for x : a; x upper-case-char

-upper-case-char char32(a char32) bare
	diff = a.to::nat32 wrap-sub "a"::char32.to
	if diff < 26
		trusted "A"::char32.to + diff unsafe-to
	else
		a

# Replaces every instance of the substring `find` with `replace-with`.
+replace-all string(a string, find string, replace-with string)
	# TODO:PERF
	if l, r ?= a try-split-once find
		l ~~ replace-with ~~ (r replace-all find, replace-with)
	else
		a

# Strips whitespace from both ends.
+strip string(a string)
	a.strip-left strip-right

# Strips whitespace from the front.
+strip-left string(a string)
	a drop-while x => x is-whitespace

# Strips whitespace from the end.
+strip-right string(a string)
	a drop-right-while x => x is-whitespace

+is-whitespace bool(a char32)
	match a
	as " "
		true
	as "\r"
		true
	as "\n"
		true
	as "\t"
		true
	else
		false

+normalize-newlines string(a string)
	a replace-all "\r\n", "\n" replace-all "\r", "\n"

# Enclose a string in quotes and escape special characters.
+quote string(a string)
	with out : build
		out ~= "\""
		for x : a
			match x
			as "\""
				out ~~= "\\\""
			as "\n"
				out ~~= "\\n"
			as "\r"
				out ~~= "\\r"
			as "\t"
				out ~~= "\\t"
			as "\\"
				out ~~= "\\\\"
			else
				out ~= x
		out ~= "\""

+unindent string(a string)
	a replace-all "\t", ""

###
Equivalent to `parts[0] ~~ joiner ~~ parts[1] ~~ joiner ~~ ... ~~ parts[n]`.
###
+join string(joiner string, parts string[])
	match parts size
	as 0
		""
	as 1
		parts[0]
	else
		res-size mut = joiner.size-char8s * (parts.size - 1)
		for part : parts
			res-size +:= part.size-char8s
		# NOTE: parts can only be a list because otherwise
		# `" " join for x : xs; "{x}"` is ambiguous (the 'for' could return any collection)
		first mut = true
		with out : res-size build
			for x : parts
				if first
					first := false
				else
					out ~~= joiner
				out ~~= x

-unicode-encode void(out string-builder, a nat32)
	if a < (1 << 7)
		out push-byte a.to
	elif a < (1 << 11)
		out push-byte (a >> 6).to | first-byte-flags
		out push-byte a.last-6-bits | byte-top-bit
	elif a < (1 << 16)
		forbid a in 0xd800 .. 0xe000 : a invalid-unicode-character
		out push-byte (a >> 12).to | 0b1110_0000
		out push-byte (a >> 6).last-6-bits | byte-top-bit
		out push-byte a.last-6-bits | byte-top-bit
	else
		assert a < 0x110000 : a invalid-unicode-character
		out push-byte (a >> 18).to | 0b1111_0000
		out push-byte (a >> 12).last-6-bits | byte-top-bit
		out push-byte (a >> 6).last-6-bits | byte-top-bit
		out push-byte a.last-6-bits | byte-top-bit
-push-byte void(out string-builder, a nat8)
	out.inner ~= a to

-unicode-decode (char32, char8 array-iterator)(first-char char8, original-iter char8 array-iterator)
	if first-char is-valid-single-byte-character
		first-char.to, original-iter
	else
		assert first-char is-first-byte : unicode-decode-error
		iter mut = original-iter
		res mut nat32 = first-char.to::nat8 to
		flag mut nat8 = first-char.to << 1
		for i : 1::nat64 .. 4
			next-char, next-iter = iter.next ?? throw unicode-decode-error
			code nat8 = next-char to
			assert (code & first-byte-flags) == byte-top-bit : unicode-decode-error
			iter := next-iter
			res := (res << 6) | code.to.last-6-bits
			flag <<:= 1
			if (flag & 0x80) == 0
				assert res bits-intersect ~(i - 1).mask : unicode-decode-error
				res &:= i.mask
				assert res is-valid-unicode-character : unicode-decode-error
				break res.to, iter
			else
				continue
		else
			throw unicode-decode-error

-mask nat32(i nat64)
	match i
	as 0
		(1 << 7) - 1
	as 1
		(1 << 11) - 1
	as 2
		(1 << 16) - 1
	as 3
		(1 << 21) - 1
	else
		unreachable

-unicode-decode-prev (char8 array-iterator, char32)(
	original-iter char8 array-iterator,
	first-char char8,
)
	if first-char is-valid-single-byte-character
		original-iter, first-char.to
	else
		iter mut = original-iter
		for _ : 1::nat64 .. 4
			prev-iter, prev-char = iter.prev ?? throw unicode-decode-error
			if prev-char is-first-byte
				res, end-iter = prev-char unicode-decode iter
				assert end-iter == original-iter.next!.b
				break prev-iter, res
			else
				iter := prev-iter
				continue
		else
			throw unicode-decode-error

-last-6-bits nat32(a nat32)
	a & 0b111111
-last-6-bits nat8(a nat32)
	a.last-6-bits.to

-first-byte-flags nat8()
	0b1100_0000
-is-first-byte bool(a char8)
	a.to::nat8 has-all-bits first-byte-flags

-is-valid-single-byte-character bool(a char8) bare
	a.to::nat8 < 0b1000_0000

-byte-top-bit nat8() bare
	0x80

-is-valid-unicode-character bool(a nat32) bare
	a < 0xd800 || a in 0xe000 .. 0x110000

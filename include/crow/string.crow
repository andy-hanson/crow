no-std
import
	./bits: &, |, <<, >>, has-all-bits
	./bool: ||, bool, false, true
	./compare: <, compare, comparison, equal
	./col/array: ~=, array, as-array, begin, begin-pointer, build, end, new, next, prev, slice
	./col/collection:
		build, build-options, drop-right-while, drop-while, for-break, for-loop, split, strip-right,
		subscript, try-remove-end, try-split-once, with-block
	./col/list:
		==, <=>, ~=, ~, ~~, ~~=, +, begin, build, collection, end, is-empty, iterate,
		list, list-builder, list-cast, list-iterator, new, next, prev, size, slice, to
	./col/mut-list: copy, move-to, mut-list, to
	./fun-util: subscript
	./hash: hasher, hash-mix
	./misc: loop-break, loop-continue, new, void
	./number:
		==, <=>, +, -, *, /, %, abs, float64, float32, int8, int16, int32, int64, is-nan, min-value,
		nat8, nat16, nat32, nat64, to, truncate-to
	./option: ??, force, new, option
	./pointer: ==, <=>, const-pointer
	./private/bootstrap: inner
	./private/number-low-level: wrap-sub
	./range: .., in, iterate
	./tuple: b, new
export
	./private/bootstrap: char32, string
	# TODO: don't export find-c-string-end
	./private/c-string-util: ==, char8, c-string, find-c-string-end, to

+to char8 array(a string)
	a.inner to
+to char8[](a string)
	a inner

-unsafe-to char32(a char8) builtin, bare
+to char32(a char8) bare
	assert a is-valid-single-byte-character
	a.unsafe-to
+to char32 array(a string)
	for x : a; x
+to char32[](a string)
	for x : a; x

###
Concatenate two strings.
This is O(n).

If you need to concatenate many strings, consider using the `crow/writer` module.
###
+~~ string(a string, b string)
	a.inner ~~ b.inner,

+interpolate string(...parts string array)
	"" join parts.to
+interpolate char8*(...parts string array)
	("" join parts.to) to

# Same as `""`.
+new string() bare
	""

# Same as `a == ""`.
+is-empty bool(a string) bare
	a.inner is-empty

# Size in `char8`s
+size-char8s nat64(a string) bare
	a.inner size
+size nat64(a string)
	res mut nat64 = 0
	for _ : a
		res +:= 1
	res

+== bool(a string, b string)
	a.inner == b.inner
+== bool(a char32, b char32) bare, builtin
+to nat32(a char32) bare, builtin
# This is unsafe because a 'char32' should be a valid unicode character.
+unsafe-to char32(a nat32) bare, builtin, unsafe
+to char32(a nat32) bare
	assert a is-valid-unicode-character
	trusted a unsafe-to

+<=> comparison(a string, b string)
	a.inner <=> b.inner
+<=> comparison(a char8, b char8) bare
	a.to::nat8 <=> b.to
+<=> comparison(a char32, b char32) bare
	a.to::nat32 <=> b.to

+hash-mix void(hasher hasher, a string)
	for c : a inner
		hasher hash-mix c
+hash-mix void(hasher hasher, a char8)
	hasher hash-mix a.to::nat8.to::nat64
+hash-mix void(hasher hasher, a char32)
	hasher hash-mix a.to::nat32.to::nat64

region conversion

+to string(a char32 array)
	a.to::char32[].to
+to string(a char32[])
	with out : build
		for x : a
			out ~= x

# Assumes its input is valid UTF-8 without validating.
+trust-as-string string(a char8 array) bare, unsafe
	a.to,
+trust-as-string string(a char8[]) bare, unsafe
	a,

###
Treat a list of UTF-8 character codes as a string.
This is O(N) since it has to validate.
###
+as-string string(a char8[])
	res string = a,
	# Validate decoding
	for _ : res; ()
	res
+as-string string(a char8 array)
	a.to as-string
+as-string string(bytes nat8[])
	(trusted bytes.list-cast::char8[]) as-string
+as-string string(bytes nat8 array)
	bytes.to::nat8[] as-string

+to nat64(a char8) bare
	a.to::nat8 to

###
Treats a string as a list of UTF-8 bytes.
This is O(1).
###
+to-bytes nat8[](a string)
	trusted a.inner list-cast
+to-bytes nat8 array(a string)
	a.to-bytes to

+to nat8 array(a string)
	a to-bytes

# TODO: this should probably be 'unsafe', but safe functions like "throw" need a c-string
###
Converts a string to a c-string by appending "\0".
This is O(n).

WARN: The resulting string is allocated from GC memory but isn't traced by the garbage collector,
so it may be freed after the current task.
###
+to c-string(a string)
	# TODO: not trusted
	trusted (a.inner ~ "\0")::char8[].to begin-pointer

###
Treats a c-string as a string by walking to the end.

Unsafe because this does not copy the memory, and because `a` must end in a `"\0"` character.
###
+as-string string(a c-string) unsafe
	(a .. a.find-c-string-end).as-array as-string

###
Unlike 'as-string' this copies the 'c-string'.

This is still unsafe because 'a' must end in a `"\0"` character.
###
+to string(a c-string) unsafe
	# TODO: 'copy' seems unnecessary since 'to' should do that?
	a.as-string.inner.to.copy.move-to

# `"true"` or `"false"`.
+to string(a bool) bare
	if a
		"true"
	else
		"false"

# String containing a single character.
+to string(a char8)
	a.to::char32 to
+to string(a char32)
	with out : build
		out ~= a

###
Converts a nat64 to a string.
Result is only digits, no punctuation.
###
+to string(a nat64)
	a to-base 10

-digit-to-string string(a nat64)
	if a == 0
		"0"
	elif a == 1
		"1"
	elif a == 2
		"2"
	elif a == 3
		"3"
	elif a == 4
		"4"
	elif a == 5
		"5"
	elif a == 6
		"6"
	elif a == 7
		"7"
	elif a == 8
		"8"
	elif a == 9
		"9"
	elif a == 10
		"a"
	elif a == 11
		"b"
	elif a == 12
		"c"
	elif a == 13
		"d"
	elif a == 14
		"e"
	elif a == 15
		"f"
	else
		"?"

+to-binary string(a nat8)
	a.to::nat64 to-binary
+to-binary string(a nat16)
	a.to::nat64 to-binary
+to-binary string(a nat32)
	a.to::nat64 to-binary
+to-binary string(a nat64)
	a to-base 2

+to-hex string(a nat8)
	a.to::nat64 to-hex
+to-hex string(a nat16)
	a.to::nat64 to-hex
+to-hex string(a nat32)
	a.to::nat64 to-hex
+to-hex string(a nat64)
	a to-base 16

-to-base string(a nat64, base nat64)
	if a < base
		a digit-to-string
	else
		(a / base to-base base) ~~ (a % base).digit-to-string

+to string(a string) bare
	a

+to string(a nat8)
	a.to::nat64 to

+to string(a nat16)
	a.to::nat64 to

+to string(a nat32)
	a.to::nat64 to

+to string(a int8)
	a.to::int64 to

+to string(a int16)
	a.to::int64 to

+to string(a int32)
	a.to::int64 to

+to string(a int64)
	if a == min-value
		"-9223372036854775808"
	else
		s string = "{a abs}"
		a < 0 ? "-{s}" : s

+to string(a float32)
	a.to::float64 to

+to string(a float64)
	if a is-nan
		"NaN"
	else
		pos = a.abs to-string-positive
		if a < 0
			"-{pos}"
		else
			pos

-to-string-positive string(a float64)
	# TODO: Use a real float to string algorithm
	times-1000 int64 = a * 1000.0 truncate-to
	thousandths = times-1000 % 1000
	whole-part string = "{times-1000 / 1000}"
	hundredths = thousandths / 10
	tenths = hundredths / 10
	d0 = tenths digit-to-string
	d1 = hundredths % 10 digit-to-string
	d2 = thousandths % 10 digit-to-string
	if thousandths == 0
		whole-part
	else
		"{whole-part}.{d0}{d1}{d2}" strip-right "0"

# TODO: what is this for? ---------------------------------------------------------------------------------------------------------
+move-to string(a char8 mut[]) unsafe
	a.move-to::(char8 array) as-string

region spec impls (see collection.crow)

+iterate bool(a string, f bool mut(x char32))
	iter mut = a begin
	loop
		if x, next ?= iter next
			if f[x]
				break true
			else
				iter := next
				continue
		else
			break false
	#a.inner iterate f

+string-iterator record by-val
	-inner char8 list-iterator

+== bool(a string-iterator, b string-iterator)
+<=> comparison(a string-iterator, b string-iterator)

+begin string-iterator(a string) bare
	a.inner.begin,

+end string-iterator(a string) bare
	a.inner.end,

+collection string(a string-iterator) bare
	a.inner.collection,

+slice string(a string-iterator, b string-iterator)
	(a.inner slice b.inner),

+next (char32, string-iterator)?(a string-iterator)
	if x, next ?= a.inner next
		char, next2 = x unicode-decode next
		(char, (next2,)),

+prev (string-iterator, char32)?(a string-iterator)
	if prev, x ?= a.inner prev
		prev2, char = prev unicode-decode-prev x
		((prev2,), char),

+string-builder record mut
	-inner char8 list-builder
+build string(a build-options, f void mut(out string-builder))
	chars char8[] = a build out => f[out,]
	trusted chars trust-as-string
+~= void(a string-builder, value char32)
	a unicode-encode value.to
+~~= void(a string-builder, s string)
	a.inner ~~= s.inner

region utilities

+lines string[](a string)
	# TODO:PERF should be better (or at least just as good) with just `a split "\n"`
	arr char32 array = a to
	for x : arr split ("\n",)
		rme char32 array? = x try-remove-end "\r"
		rmex char32 array = rme ?? x
		rmex.to

# Lower cases every character in `a`.
+lower-case string(a string)
	for x : a; x lower-case-char

-lower-case-char char32(a char32) bare
	diff = a.to::nat32 wrap-sub "A"::char32.to
	if diff < 26
		trusted "a"::char32.to + diff unsafe-to
	else
		a

# Capitalizes every character in `a`.
+upper-case string(a string)
	for x : a; x upper-case-char

-upper-case-char char32(a char32) bare
	diff = a.to::nat32 wrap-sub "a"::char32.to
	if diff < 26
		trusted "A"::char32.to + diff unsafe-to
	else
		a

# Replaces every instance of the substring `find` with `replace-with`.
+replace-all string(a string, find string, replace-with string)
	# TODO:PERF
	if l, r ?= a try-split-once find
		l ~~ replace-with ~~ (r replace-all find, replace-with)
	else
		a

# Strips whitespace from both ends.
+strip string(a string)
	a.strip-left strip-right

# Strips whitespace from the front.
+strip-left string(a string)
	a drop-while x => x is-whitespace

# Strips whitespace from the end.
+strip-right string(a string)
	a drop-right-while x => x is-whitespace

+is-whitespace bool(a char32)
	a == " " || a == "\r" || a == "\n" || a == "\t"

+normalize-newlines string(a string)
	a replace-all "\r\n", "\n" replace-all "\r", "\n"

# Enclose a string in quotes and escape special characters.
+quote string(a string)
	inner string[] = for x : a inner
		if x == "\""
			"\\\""
		elif x == "\n"
			"\\n"
		elif x == "\r"
			"\\r"
		elif x == "\t"
			"\\t"
		elif x == "\\"
			"\\\\"
		else
			"{x}"
	# TODO: "\"{inner}\""
	"\"" ~~ ("" join inner) ~~ "\""

+unindent string(a string)
	a replace-all "\t", ""

###
Equivalent to `parts[0] ~~ joiner ~~ parts[1] ~~ joiner ~~ ... ~~ parts[n]`.
###
+join string(joiner string, parts string[])
	if parts is-empty
		""
	elif parts.size == 1
		parts[0]
	else
		res-size mut = joiner.size-char8s * (parts.size - 1)
		for part : parts
			res-size +:= part.size-char8s
		# NOTE: parts can only be a list because otherwise
		# `" " join for x : xs; "{x}"` is ambiguous (the 'for' could return any collection)
		first mut = true
		with out : res-size build
			for x : parts
				if first
					first := false
				else
					out ~~= joiner
				out ~~= x

-unicode-encode void(out string-builder, a nat32) # TODO: NEATER ---------------------------------------------------
	if a < 0x80
		out push-byte a
	elif a < 0x800
		out push-byte (a >> 6) | 0xc0
		out push-byte (a & 0x3f) | 0x80
	elif a < 0x10000
		forbid a in 0xd800 .. 0xe000
		out push-byte (a >> 12) | 0xe0
		out push-byte ((a >> 6) & 0x3f) | 0x80
		out push-byte (a & 0x3f) | 0x80
	else
		assert a < 0x110000
		out push-byte (a >> 18) | 0xf0
		out push-byte ((a >> 12) & 0x3f) | 0x80
		out push-byte ((a >> 6) & 0x3f) | 0x80
		out push-byte (a & 0x3f) | 0x80
-push-byte void(out string-builder, a nat32)
	out.inner ~= a.to to

-unicode-decode (char32, char8 list-iterator)(first-char char8, original-iter char8 list-iterator) # TODO: NEATER ---------
	if first-char is-valid-single-byte-character
		first-char.to, original-iter
	else
		assert first-char is-first-byte : "Unicode decode error"
		fst mut nat8 = first-char to
		iter mut = original-iter
		d mut nat32 = fst to
		fst <<:= 1
		for i : 1::nat64 .. 4
			next-char, next-iter = iter.next ?? throw "Unicode decode error"
			tmp nat8 = next-char to
			iter := next-iter
			assert (tmp & 0xc0) == 0x80 : "Unicode decode error"
			d := (d << 6) | (tmp & 0x3f).to
			fst <<:= 1
			if (fst & 0x80) == 0
				break (d & bit-mask[i]).to, iter
			else
				continue
		else
			throw "Unicode decode error"

-unicode-decode-prev (char8 list-iterator, char32)(original-iter char8 list-iterator, first-char char8)
	if first-char is-valid-single-byte-character
		original-iter, first-char.to
	else
		iter mut = original-iter
		for _ : 1::nat64 .. 4
			prev-iter, prev-char = iter.prev ?? throw "Unicode decode error"
			if prev-char is-first-byte
				res, end-iter = prev-char unicode-decode iter
				assert end-iter == original-iter.next!.b
				break prev-iter, res
			else
				iter := prev-iter
				continue
		else
			throw "Unicode decode error"

-first-byte-flags nat8()
	0b1100_0000
-is-first-byte bool(a char8)
	a.to::nat8 has-all-bits first-byte-flags

-is-valid-single-byte-character bool(a char8) bare
	a.to::nat8 < 0x80

-is-valid-unicode-character bool(a nat32) bare
	a < 0xd800 || a in 0xe000 .. 0x110000

-bit-mask nat32[]()
	(1 << 7) - 1, (1 << 11) - 1, (1 << 16) - 1, (1 << 21) - 1

no-std
import
	./bool: bool, false, new, true
	./compare: equal
	./private/bootstrap: none, some
	./private/number-low-level: ==, int64, nat64, new
export
	./private/bootstrap: opt

# Empty option.
new<a> a?() noctx
	none

# Option containing `a`.
new<a> a?(a a) noctx
	a some

== bool(a int64?, b int64?) no-doc noctx
	a opt-equal b
== bool(a nat64?, b nat64?) no-doc noctx
	a opt-equal b

# TODO:GENERIC
opt-equal<a> bool(a a?, b a?) equal<a> noctx no-doc
	if va ?= a
		if vb ?= b
			va == vb
	else
		b is-empty

# True iff `a` is an empty option.
is-empty<a> bool(a a?) noctx
	# TODO: `if _ ?= a`
	if x ?= a
		_ = x
		false
	else
		true

# 1 if `a` has a value, else 0.
size<a> nat64(a a?) noctx
	unless a is-empty
		1

###
Lazily-evaluated.
If `a` is non-empty, returns it and does not evaluate `b`.
Else, returns `b`.
###
||<a> a?(a a?, b a?) builtin

###
Lazily-evaluated. 
If `a` is non-empty, returns its value and does not evaluate `b`.
Else, returns `b`.
###
??<a> a(a a?, default a) builtin

# If `a` is non-empty, returns its value; else throws.
!<a> a(a a?)
	a ?? throw "tried to force empty option"

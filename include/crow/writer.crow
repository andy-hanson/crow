no-std
import
	./bool: bool
	./col/mut-arr: ~=, move-to-arr, mut-arr, new, pop-n
	./col/seq: each
	./misc: void
	./number: float64, int64, nat64
	./str: ==, char, char8s, c-str, literal, str
	./str-conv: to-str
	./str-util: to-str

###
Used for generating a string left-to-right.

The main operation is `~=` which adds to the end of the string being generated.
Then, use `move-to-str` to get the result.
###
writer record mut
	.chars char mut[]

# Spec satisfied by any type that can be written to a `writer`.
write<a> spec
	~~= void(writer writer, value a)

# New writer initialized with an empty string.
new writer()
	(),

# Returns the generated string and clears the writer.
move-to-str str(a writer)
	a.chars.move-to-arr str

# Remove the last character written. Throws if the writer is empty.
backup void(a writer)
	a backup 1

# Backup `n` times.
backup void(a writer, n nat64)
	a.chars pop-n n

~= void(a writer, b char)
	a.chars ~= b

~~= void(a writer, b c-str) unsafe
	a ~~= b to-str

~~= void(a writer, b str)
	b.char8s each x =>
		a.chars ~= x

~~= void(a writer, b bool)
	a ~~= b to-str

~~= void(a writer, b nat64)
	a ~~= b to-str

~~= void(a writer, b int64)
	a ~~= b to-str

~~= void(a writer, b float64)
	a ~~= b to-str

# Unlike `out ~= a`, this encloses `a` in quotes and escapes special characters.
write-quoted-str void(out writer, a str)
	out ~= "\""
	a.char8s each x =>
		if x == "\""
			out ~~= "\\\""
		elif x == "\n"
			out ~~= "\\n"
		elif x == "\r"
			out ~~= "\\r"
		elif x == "\t"
			out ~~= "\\t"
		elif x == "\\"
			out ~~= "\\\\"
		else
			out ~= x
	out ~= "\""

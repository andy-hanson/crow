no-std
import
	./bool: ||, bool
	./col/arr: arr
	./col/private/arr-low-level: arr-cast, begin-ptr
	./col/arr-util: fold
	./col/iter: new, rest, value, value-and-rest
	./col/mut-arr: copy, move-to-arr, to-mut-arr
	./col/seq:
		contains-subseq, copy, drop-right-while, drop-while, end-iter, ends-with, iter,
		left, map, map-to-arr, middle, mut-iter, mut-seq-iter, next, peek, prev, repeat, reverse,
		right, seq-iter, slice-left, slice-right, split-by-subseq, starts-with, to-arr, to-seq,
		try-remove-end, try-remove-start, try-split-once-by-fn, try-split-once-by-subseq,
		try-split-once-by-subseq-right
	./compare: <
	./number: ==, <=>, nat8, nat64
	./opt: new, opt
	./str: ==, ~, ~~, char8, char8s, c-str, is-empty, literal, str, to-char8, to-nat8
	./tuple: a, b, new, pair
	./private/number-low-level: wrap-add, wrap-sub

region iterator

str-iter record
	by-val
	.inner seq-iter char8

iter str-iter(a str)
	a.char8s.iter,

end-iter str-iter(a str)
	a.char8s.end-iter,

next value-and-rest<char8, str-iter>?(a str-iter)
	if res ?= a.inner next
		(res.value, (res.rest,)),

prev value-and-rest<char8, str-iter>?(a str-iter)
	if res ?= a.inner prev
		(res.value, (res.rest,)),

slice-left str(a str-iter)
	a.inner.slice-left str

slice-right str(a str-iter)
	a.inner.slice-right str

mut-str-iter record mut
	.inner mut-seq-iter char8

mut-iter mut-str-iter(a str)
	a.char8s.mut-iter,

copy mut-str-iter(a mut-str-iter)
	a.inner.copy,

peek char8?(a mut-str-iter)
	a.inner peek

next char8?(a mut-str-iter)
	a.inner next

region split

###
`true` iff `b` is a subtring of `a`.

That means: The characters in `b` appear in `a`, in order, without interruptions.
###
contains-substr bool(a str, b str)
	a.char8s contains-subseq b.char8s

# `true` iff the first characters of `a` are `b`.
starts-with bool(a str, b str)
	a.char8s starts-with b.char8s

# `true` iff the last characters of `a` are `b`.
ends-with bool(a str, b str)
	a.char8s ends-with b.char8s

###
If `a` starts with `b`, returns the rest.
Else, returns an empty option.
###
try-remove-start str?(a str, b str)
	if res ?= a.char8s try-remove-start b.char8s
		res.str,

###
If `a` ends with `b, returns the rest.
Else, returns an empty option.
###
try-remove-end str?(a str, b str)
	if res ?= a.char8s try-remove-end b.char8s
		res.str,

###
If `b` is a substring of `a`, removes it and return the parts of `a` before and after it.
###
try-split-once pair<str, str>?(a str, b str)
	if res ?= a.char8s try-split-once-by-subseq b.char8s
		(res.a.str, res.b.str),

# Like `try-split-once`, but splits on the rightmost occurrence of `b`.
try-split-once-right pair<str, str>?(a str, b str)
	if res ?= a.char8s try-split-once-by-subseq-right b.char8s
		(res.a.str, res.b.str),

###
Removes every occurrence of the substring `b` in `a` and return the remaining parts as an array.
The result may include empty strings.
###
split-by str[](a str, b str)
	a.char8s split-by-subseq b.char8s map-to-arr x => x str

lines str[](a str)
	a split-by "\n"

split-str record
	by-val
	left str
	middle char8
	right str

###
Find the first character where `f` returns `true`, and return the parts of `a` before and after it.
Returns an empty option if `f` does not returns `true` for any character in `a`.
###
try-split-once-by-fn split-str?(a str, f act bool(char8))
	if res ?= a.char8s try-split-once-by-fn f
		(res.left.str, res.middle, res.right.str),

# Finds the first whitespace character in `a` and returns the parts before and after it.
try-split-once-by-whitespace pair<str, str>?(a str)
	if x ?= a try-split-once-by-fn x => x is-whitespace
		(x.left, x.right),

###
Returns a string containing each element of `a`, with `b` as a separator.
This is `a[0] ~ b ~ a[1] ~ b ~ ... ~ a[a.size - 1]`.
###
join str(a str[], b str)
	"" fold a, (cur, x) =>
		if cur is-empty
			x
		else
			cur ~~ b ~~ x

# Lower cases every character in `a`.
lower-case str(a str)
	a.char8s map (it => it lower-case-char) str

.lower-case-char char8(a char8) noctx
	diff = a.to-nat8 wrap-sub "A".to-nat8
	if diff < 26
		"a".to-nat8 wrap-add diff to-char8
	else
		a

# Capitalizes every character in `a`.
upper-case str(a str)
	a.char8s map (it => it upper-case-char) str

.upper-case-char char8(a char8) noctx
	diff = a.to-nat8 wrap-sub "a".to-nat8
	if diff < 26
		"A".to-nat8 wrap-add diff to-char8
	else
		a

# String with characters in reverse order.
reverse str(a str)
	a.char8s.reverse str

# Replaces every instance of the substring `find` with `replace-with`.
replace str(a str, find str, replace-with str)
	# TODO:PERF
	if pair ?= a try-split-once find
		pair.a ~~ replace-with ~~ (pair.b replace find, replace-with)
	else
		a

region strip

# Strips whitespace from both ends.
strip str(a str)
	a.strip-left strip-right

# Strips whitespace from the front.
strip-left str(a str)
	a.char8s drop-while (x => x is-whitespace) str

# Removes all occurrences of 'b' from the front of 'a'.
strip-left str(a str, b str)
	if x ?= a try-remove-start b
		x strip-left b
	else
		a

# Strips whitespace from the end.
strip-right str(a str)
	a.char8s drop-right-while (x => x is-whitespace) str

# Removes all occurrences of 'b' from the end of 'a'.
strip-right str(a str, b str)
	if x ?= a try-remove-end b
		x strip-right b
	else
		a

.is-whitespace bool(a char8)
	a == " " || a == "\r" || a == "\n" || a == "\t"

normalize-newlines str(a str)
	a replace "\r\n", "\n" replace "\r", "\n"

region Conversion

###
Treats UTF-8 bytes as a string.
This is O(1).
###
as-str str(bytes nat8[]) unsafe noctx
	bytes.arr-cast@<char8, nat8> str

###
Converts to an array of UTF-8 bytes.
This is O(n).
###
to-bytes nat8[](a str)
	a.char8s map-to-arr x => x to-nat8

###
Converts a str to a c-str by appending "\0".
This is O(n).

WARN: The resulting string is allocated from GC memory but isn't traced by the garbage collector,
so it may be freed after the current task.
###
to-c-str c-str(a str) unsafe
	(a ~ "\0").char8s.to-arr begin-ptr

###
Treats a c-str as a str by walking to the end.
This does not copy the memory.

Unsafe because:
* `a` must end in a `"\0"` character somewhere.
* The resulting string should not be used longer than `a` lives.
###
to-str str(a c-str) unsafe noctx
	a literal

###
Like `to-str`, but takes a copy (in case `a` is temporary)
###
copy-to-str str(a c-str) unsafe
	a.literal.char8s.to-arr.to-mut-arr.copy.move-to-arr.to-seq str

region other

repeat str(a str, n nat64)
	a.char8s repeat n str

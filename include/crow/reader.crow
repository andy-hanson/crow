no-std
import
	./bool: !, &&, ||, bool, false, new, true
	./col/mut-arr: ~=, move-to-arr, mut-arr, new
	./fun-util: subscript
	./misc: drop, new, void
	./number: +, *, **, float64, int64, nat64, to-float64, to-int64
	./opt: ??, is-empty, new, opt
	./str: ==, char, literal, str
	./str-util: copy, mut-iter, mut-str-iter, next, peek
	./test-util: is
	./private/exception-low-level: throw-c-str

###
Stateful type used for simple parsers that read strictly left-to-right.

Once it gets to the end, `is-empty` will return `true`.
###
reader record mut
	.iter mut mut-str-iter

new reader(a str) trusted
	a.mut-iter,

###
Creates a reader for the string, calls `f`, and returns the result.

Returns an empty option if the reader did not make it to the end of the string.
###
with-reader<a> a?(a str, f act a?(reader))
	reader reader = a,
	res = f[reader]
	if !res.is-empty && reader.is-empty
		res

# `true` iff the reader has reached the end of the string.
is-empty bool(a reader) trusted
	a.iter.peek is-empty

###
Gets the next character without advancing.
Throws if the reader has reached the end.
###
peek char(a reader) trusted
	a.iter.peek ?? "reader empty".throw-c-str

###
Gets the next character and advances.
Throws if the reader had already reached the end before calling `next`.
###
next char(a reader) trusted
	a.iter.next ?? "reader empty".throw-c-str

###
Iff the next character is `c`, advances and returns `true`.
Else, this does nothing and returns `false`.

If the reader had already reached the end of the string before calling this, returns `false`.
###
try-take-char bool(a reader, c char)
	if peek ?= a.iter peek
		if peek == c
			a.next drop
			true

###
Like `try-take-char` but for a whole string.

If the next `s.size` characters to be read match `s`, takes them all and returns `true`.
Else, this does nothing and returns `false`.

This will not read only part of `s`; it's all or nothing.
###
try-take-str bool(a reader, s str) trusted
	start = a.iter copy
	if a.iter try-take-str-recur s.mut-iter
		true
	else
		a.iter := start
		false

try-take-str-recur bool(a mut-str-iter, b mut-str-iter)
	if nb ?= b next
		if na ?= a next
			na == nb && a try-take-str-recur b
	else
		true

.nat-and-count-digits record
	.value nat64
	.count-digits nat64

###
Takes a number (a sequence of digits 0-9). Stops at the first non-digit.
Does not take separator characters like `,` or `_`.

Returns an empty option if it could not parse any digits.
###
take-nat nat64?(a reader)
	if x ?= a.take-nat-and-count-digits
		x.value,
.take-nat-and-count-digits nat-and-count-digits?(a reader)
	unless a is-empty
		if first-digit ?= a.peek.char-to-nat64
			a.next drop
			(first-digit take-nat-and-count-digits-recur 1, a),
.take-nat-and-count-digits-recur nat-and-count-digits(acc nat64, count-digits nat64, a reader)
	if a is-empty
		acc, count-digits
	elif v ?= a.peek.char-to-nat64
		a.next drop
		acc * 10 + v take-nat-and-count-digits-recur count-digits + 1, a
	else
		acc, count-digits

# This is like `take-nat`, but the number may start with a `+` or `-` sign.
take-int int64?(a reader) trusted
	start = a.iter copy
	sign = if a try-take-sign
		+1
	else
		-1
	if n ?= a take-nat
		n.to-int64 * sign,
	else
		a.iter := start
		()

# TODO: use 'is-whitespace' function from str-util
# Skips whitespace characters: `" "`, `"\n"`, `"t"`.
skip-whitespace void(a reader)
	if a try-take-char " " || a try-take-char "\n" || a try-take-char "\t"
		a skip-whitespace

.try-take-sign bool(a reader)
	if a try-take-char "-"
		false
	else
		a try-take-char "+" drop
		true

###
Takes a floating-point number. This is:
* Optionally: A `+` or `-` sign
* A series of digits (`0` - `9`)
* Optionally: A decimal point (`.`), then more digits.
###
take-float float64?(a reader) trusted
	sign = if a.try-take-sign
		1.0
	else
		-1.0
	if whole-nat ?= a take-nat
		whole-part = whole-nat to-float64
		before-dot = a.iter copy
		if a try-take-char "."
			if nd ?= a take-nat-and-count-digits
				# TODO: more accurate methods exist
				sign * (whole-part + nd.value.to-float64 * 0.1 ** nd.count-digits),
			else
				a.iter := before-dot
				sign * whole-part,
		else
			sign * whole-part,

###
Takes a quoted string.

Like in crow, a quoted string begins and ends with `"`.
It can use `\` to escape characters.
Unlike in crow, `{` is not a special character.

Does nothing and returns an empty option if it did not take an entire quoted string correctly.
###
take-quoted-str str?(a reader)
	start = a.iter copy
	if a try-take-char "\""
		res = a take-quoted-str-recur ()
		if res is-empty
			a.iter := start
		res

.take-quoted-str-recur str?(a reader, res char mut[])
	unless a is-empty
		if a try-take-char "\""
			res.move-to-arr.str,
		elif a try-take-char "\\"
			if esc ?= a.next escape
				res ~= esc
				a take-quoted-str-recur res
		else
			res ~= a next
			a take-quoted-str-recur res

.escape char?(a char)
	if a == "n"
		"\n",
	elif a == "r"
		"\r",
	elif a == "t"
		"\t",
	elif a == "\""
		"\"",
	elif a == "\\"
		"\\",
	elif a == "0"
		"\0",

.char-to-nat64 nat64?(c char)
	if c == "0"
		0,
	elif c == "1"
		1,
	elif c == "2"
		2,
	elif c == "3"
		3,
	elif c == "4"
		4,
	elif c == "5"
		5,
	elif c == "6"
		6,
	elif c == "7"
		7,
	elif c == "8"
		8,
	elif c == "9"
		9,

###
Parse digits as a nat64.
Return an empty option if the string contains any punctuation or whitespace.
###
parse-nat nat64?(a str)
	a with-reader r => r take-nat

###
Same as `a with-reader r => r take-int`.
###
parse-int int64?(a str)
	a with-reader r => r take-int

###
Same as `a with-reader r => r take-float`.
###
parse-float float64?(a str)
	a with-reader r => r take-float

test
	"a" is "a"

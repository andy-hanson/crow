no-std
import
	./private/bootstrap: new-void
	./compare: compare
	./hash: hash-mix
export
	./private/bootstrap: void

+new void() bare
	new-void

+new[t] spec
	new t()

+copy[t] spec
	copy t(a t)

# Spec for values that can be used as keys in a map or set.
+key[t] spec t data, t compare, t hash-mix

# Spec for functions that convert `in` to `out`.
+to[out, in] spec
	to out(a in)

+break-or-continue[t] union(loop-break t, loop-continue)
# Default is to 'continue'
+new[t] t break-or-continue()
	continue

###
Specifies that a type must be immutable data.

This includes most types in crow that are not `mut`.
This does not include `future` or `ref`, though these types work with `shared`.

To put it another way, a type works with `data` if it is:
* A primitive like `nat`, an `enum`, or `flags`.
* A record with no `mut` fields, whose fields are all `data`.
* A union whose member types are all `data`.
* Immutable collections like `x[]`, where the type arguments are all `data`.
* A constant pointer like `nat*`.
###
+data[t] spec builtin

###
Specifies that a type must be safe to share between tasks that may run in parallel.

Anything that satisfies `data` satisfies `shared`.
In addition, `future` and `ref` types are shared if their type arguments are.
(`nat mut[]^` is not shared.)

In the future, parallel-safe collections may be included here.
###
+shared[t] spec builtin

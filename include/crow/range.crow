no-std
import
	./bool: !, bool
	./col/array: for-loop
	./col/list: ~=, build-list, list, to-list, with-block
	./fun-util: subscript
	./misc: new, void
	./number: ==, +, -, nat64
	./option: is-empty, new, option
export
	./private/range-low-level: .., low, high, range, size

to-list nat64[](a range nat64)
	for x : a
		x

region iteration

is-empty bool(a range nat64) noctx
	a.low == a.high

# Calls `f` for each value in the range, from `a.low` to `a.high - 1`.
for-loop void(a range nat64, f act void(nat64))
	cur mut = a low
	high = a high
	until cur == high
		f[cur]
		cur := cur + 1

range-reverse<a> record
	low a
	high a

size nat64(a range-reverse nat64)
	a.high - a.low

is-empty bool(a range-reverse nat64) noctx
	a.low == a.high

reverse<a> range-reverse a(a range a)
	a.low, a.high

# Calls `f` for each value in the range, from `a.high - 1` to `a.low`.
for-loop void(a range-reverse nat64, f act void(nat64))
	unless a is-empty
		low = a low
		cur mut = a.high - 1
		loop
			f[cur]
			if cur == low
				break
			else
				cur := cur - 1
				continue

for-loop<out> out[](a range-reverse nat64, f act out(nat64))
	with out : a.size build-list
		for x : a
			out ~= f[x]

for-loop<out> out[](a range nat64, f act out(nat64)) trusted
	a for-loop f to-list

# `true` iff `f` is `true` for some value in the range.
exists bool(a range nat64, f act bool(nat64))
	!(a find f is-empty)

# TODO: use 'for-break'
# Returns the first value in the range for which `f` returns true.
find nat64?(a range nat64, f act bool(nat64))
	cur mut = a low
	high = a high
	loop
		if cur == high
			break
		elif f[cur]
			break cur,
		else
			cur := cur + 1
			continue

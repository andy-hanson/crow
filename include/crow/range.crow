no-std
import
	./bool: bool, false, true
	./col/array: array, for-loop
	./col/list: ~=, build, list, to-list, with-block
	./fun-util: subscript
	./misc: break-or-continue, loop-break, new, void
	./number: ==, +, -, nat64
	./option: new, option
	./pointer: ==, +, const-pointer
export
	./private/range-low-level: .., low, high, range, size

to-list nat64[](a nat64 range)
	for x : a
		x

region iteration

is-empty bool(a nat64 range) noctx
	a.low == a.high

# Calls `f` for each value in the range, from `a.low` to `a.high - 1`.
for-loop void(a nat64 range, f act void(nat64))
	cur mut = a low
	high = a high
	until cur == high
		f[cur]
		cur := cur + 1

for-break[out, in] out?(a in* range, f act out break-or-continue(in*)) unsafe
	cur mut = a low
	high = a high
	loop
		if cur == high
			break
		else
			match f[cur]
			as loop-break v
				break v,
			as loop-continue
				cur := cur + 1
				continue

range-reverse[t] record
	low t
	high t

size nat64(a nat64 range-reverse)
	a.high - a.low

is-empty bool(a nat64 range-reverse) noctx
	a.low == a.high

reverse[t] t range-reverse(a t range)
	a.low, a.high

# Calls `f` for each value in the range, from `a.high - 1` to `a.low`.
for-loop void(a nat64 range-reverse, f act void(nat64))
	unless a is-empty
		low = a low
		cur mut = a.high - 1
		loop
			f[cur]
			if cur == low
				break
			else
				cur := cur - 1
				continue

for-loop[out] out[](a nat64 range-reverse, f act out(nat64))
	with out : a.size build
		for x : a
			out ~= f[x]

for-loop[out] out[](a nat64 range, f act out(nat64)) trusted
	(a for-loop f)::(out array) to-list

for-break[out] out(a nat64 range, f-loop act out break-or-continue(nat64), f-else act out())
	cur mut = a low
	high = a high
	loop
		if cur == high
			break f-else[]
		else
			# TOOD: should it be possible to return f-loop[cur] directly here?
			match f-loop[cur]
			as loop-break x
				break x
			as loop-continue
				cur := cur + 1
				continue

# `true` iff `f` is `true` for some value in the range.
exists bool(a nat64 range, f act bool(nat64))
	for x : a
		if f[x]
			break true
	else
		false

no-std
import
	./bool: &&, bool
	./col/collection: index-too-big, iterator-not-comparable
	./compare: <, <=, >, compare, comparison, equal
	./number: ==, <=>, nat64
	./option: new, option
	./private/bootstrap: new
export
	./private/range-low-level:
		.., forward-rangeable, iterate, low, high, range, rangeable, size, subtract-to-nat

region iteration

+add-nat[t] spec
	+ t(a t, n nat64)

+==[t] bool(a t range, b t range) bare, t equal

+is-empty[t] bool(a t range) bare, t equal
	a.low == a.high

+range-iterator[t] record by-val
	-collection t range
	-next-value t
+==[t] bool(a t range-iterator, b t range-iterator) bare, t equal
	assert a.collection == b.collection : iterator-not-comparable
	a.next-value == b.next-value
+<=>[t] comparison(a t range-iterator, b t range-iterator) bare, t compare
	assert a.collection == b.collection : iterator-not-comparable
	a.next-value <=> b.next-value

+-[t] nat64(a t range-iterator, b t range-iterator) t subtract-to-nat
	a.next-value - b.next-value
++[t] t range-iterator(a t range-iterator, n nat64) t compare, t add-nat
	value t = a.next-value + n
	assert value <= a.collection.high
	a.collection, value
+slice[t] t range(a t range-iterator, b t range-iterator) t compare
	assert a.next-value <= b.next-value
	a.next-value .. b.next-value

+begin[t] t range-iterator(a t range) bare
	a, a.low
+end[t] t range-iterator(a t range) bare
	a, a.high

+prev[t] (t range-iterator, t)?(a t range-iterator) bare, t rangeable
	guard a.next-value > a.collection.low
	value = a.next-value - 1::nat64
	((a.collection, value), value),
+next[t] (t, t range-iterator)?(a t range-iterator) bare, t forward-rangeable
	guard a.next-value < a.collection.high
	(a.next-value, (a.collection, a.next-value + 1)),

+in[t] bool(a t, b t range) bare, t compare
	b.low <= a && a < b.high

+subscript[t] t(a t range, index nat64) bare, t rangeable
	assert index < a.size : index index-too-big a.size
	a.low + index

+subscript[t] t range(a t range, indices nat64 range) bare, t rangeable
	assert indices.high <= a.size : indices.high index-too-big a.size
	a.low + indices.low .. a.low + indices.high

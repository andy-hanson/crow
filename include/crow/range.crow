no-std
import
	./bool: ||, bool, new
	./fun-util: subscript
	./misc: new, void
	./number: ==, <=>, nat64
	./opt: new, opt
	./private/number-low-level: wrap-add, wrap-sub
export
	./private/range-low-level: .., low, high, range, size

region iteration

# Calls `f` for each value in the range, from `a.low` to `a.high - 1`.
each void(a range nat64, f act void(nat64))
	unless a.low == a.high
		f[a low]
		(a.low wrap-add 1) .. a.high each f

# Calls `f` for each value in the range, from `a.high - 1` to `a.low`.
each-reverse void(a range nat64, f act void(nat64))
	unless a.low == a.high
		a.low each-reverse-recur (a.high wrap-sub 1), f
.each-reverse-recur void(low nat64, cur nat64, f act void(nat64))
	f[cur]
	unless cur == low
		low each-reverse-recur (cur wrap-sub 1), f

# `true` iff `f` is `true` for some value in the range.
exists bool(a range nat64, f act bool(nat64))
	unless a.low == a.high
		f[a low] || (a.low wrap-add 1) .. a.high exists f

# Returns the first value in the range for which `f` returns true.
find nat64?(a range nat64, f act bool(nat64))
	unless a.low == a.high
		if f[a low]
			a.low,
		else
			(a.low wrap-add 1) .. a.high find f

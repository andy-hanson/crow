no-std
import
	./bool: !, bool
	./col/arr: arr
	./col/arr-util: make-arr
	./fun-util: subscript
	./misc: new, void
	./number: ==, <=>, nat64
	./opt: is-empty, new, opt
	./private/number-low-level: wrap-add, wrap-sub
export
	./private/range-low-level: .., low, high, range, size

to-arr nat64[](a range nat64)
	a map x => x

region iteration

is-empty bool(a range nat64) noctx
	a.low == a.high

# Calls `f` for each value in the range, from `a.low` to `a.high - 1`.
each void(a range nat64, f act void(nat64))
	unless a.low == a.high
		f[a low]
		(a.low wrap-add 1) .. a.high each f

# Calls `f` for each value in the range, from `a.high - 1` to `a.low`.
each-reverse void(a range nat64, f act void(nat64))
	unless a is-empty
		low = a low
		cur mut = a.high wrap-sub 1
		loop
			f[cur]
			if cur == low
				break
			else
				cur := cur wrap-sub 1

map<a> a[](a range nat64, f act a(nat64))
	(a.high wrap-sub a.low) make-arr i =>
		f[a.low wrap-add i]

# `true` iff `f` is `true` for some value in the range.
exists bool(a range nat64, f act bool(nat64))
	!(a find f is-empty)

# Returns the first value in the range for which `f` returns true.
find nat64?(a range nat64, f act bool(nat64))
	cur mut = a low
	high = a high
	loop
		if cur == high
			break
		elif f[cur]
			break cur,
		else
			cur := cur wrap-add 1

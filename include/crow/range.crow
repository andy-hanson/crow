no-std
import
	./bool: ||, bool, false
	./cell: *, cell, new, set-deref
	./compare: !=
	./fun-util: subscript
	./iter: iterator, new
	./misc: void
	./number: ==, <=>, nat64
	./opt: new, opt
	./private/number-low-level: wrap-add, wrap-sub
export
	./private/range-low-level: .., low, high, range, size

region iteration

###
Iterator for a number range.
The beginning is inclusive and the end is exclusive.
The beginning must be less than the end.
###
iter iterator nat64(r range nat64)
	n cell nat64 = r.low,
	new: () =>
		if *n != r.high
			res = *n
			*n := res wrap-add 1
			res,

each void(a range nat64, f act void(nat64))
	if a.low != a.high
		f[a low]
		(a.low wrap-add 1) .. a.high each f

each-reverse void(a range nat64, f act void(nat64))
	if a.low != a.high
		a.low each-reverse-recur (a.high wrap-sub 1), f
.each-reverse-recur void(low nat64, cur nat64, f act void(nat64))
	f[cur]
	if cur != low
		low each-reverse-recur (cur wrap-sub 1), f

exists bool(a range nat64, f act bool(nat64))
	if a.low != a.high
		f[a low] || (a.low wrap-add 1) .. a.high exists f
	else
		false

find nat64?(a range nat64, f act bool(nat64))
	if a.low != a.high
		if f[a low]
			a.low,
		else
			(a.low wrap-add 1) .. a.high find f

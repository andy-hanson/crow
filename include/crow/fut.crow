no-std
import
	./col/arr: ~, arr, is-empty, new, subscript
	./col/arr-util: tail
	./exception: catch, exception
	./fun-util: subscript
	./misc: new, void
	./result: result
	./private/bootstrap:
		action, exclusion, fut-state-exception, fut-state-resolved, is-sendable, new
	./private/fut-low-level: callback, reject, resolve, resolve-or-reject, unresolved
	./private/runtime: add-task, exception-handler, get-global-ctx, new-exclusion
	./private/thread-utils: lock-by-val
export
	./private/bootstrap: fut

###
A future already resolved to void.
Writing `<- delay` will cause the code below to run in a new task.
This can be useful for breaking up big tasks.

`delay` from `crow/io/time` is useful for delaying for linger times.
###
delay fut void()
	()

# Converts a value to a `fut` resolved with that value.
new<a> fut a(value a)
	lock-by-val, value.fut-state-resolved

# `fut` resolved to `()`.
new<a> fut a() new<a>
	(),

# `fut` resolved with an exception.
rejected<a> fut a(err exception)
	lock-by-val, err.fut-state-exception

# TODO: is-sendable<a[]> should not be necessary
###
Waits for every one of `futures` to be resolved, then returns an array all of their results.
If one of `futures` resolves with an exception, returns the first one from the left.

Use `wait-fold` instead of you intend to iterate over the result anyway.
###
wait-all<a> fut a[](futures fut<a>[]) is-sendable<a> is-sendable<a[]>
	() wait-fold futures, (acc, x) =>
		acc ~ x,

###
Waits on each of `futures` in turn, calling `f` to get a new accumulator.
###
wait-fold<a, b> fut a(acc a, futures fut<b>[], f ref a(a, b)) is-sendable<a> is-sendable<b>
	if futures is-empty
		acc,
	else
		cur <- futures[0]
		new-acc <- f[acc, cur]
		new-acc wait-fold futures.tail, f

.forward-to<a> void(from fut a, to fut a) unsafe
	from callback it => to resolve-or-reject it

###
Fut resolved to `ok` if `a` succeeds and `err` if `a` fails with an exception.
###
fut-catch<a> fut result<a, exception>(a fut a) trusted
	res fut result<a, exception> = unresolved
	a callback value => res resolve value
	res

###
Calls `f` once `a` is resolved.
Returns a fut for the result of `f`.

If `a` is resolved with an exception, this never calls `f`,
and the result of `then` will have the same exception as `a`.
###
then<out, in> fut out(a fut in, f ref out(in)) trusted is-sendable<out> is-sendable<in>
	res fut out = unresolved
	a callback result =>
		match result
		as ok o
			f[o] forward-to res
		as err e
			res reject e
	res

# TODO: rename to just 'then'
# This requires that we be able to handle two expected types at once,
# and choose just one based on the arity of a lambda.

# Like `then`, but `f` takes no parameter (since it will be `void` anyway.)
then-void<out> fut out(a fut void, f ref out()) is-sendable<out>
	a then ignore =>
		f[]

###
Run `f` in a task with a new exclusion and return a `fut` for its result.

`f` must be a `fun` and not an `act` so that it can have a new exclusion,
which allows it to run in parallel.
###
launch<a> fut a(f fun fut a()) trusted
	res fut a = unresolved
	gctx = get-global-ctx
	gctx add-task gctx.new-exclusion, () =>
		f[] forward-to res
	res

###
Calls a `ref`.

This enqueues a task with the ref's exclusion for invoking its function,
and returns a `fut` for the result of that task.
###
subscript<r> fut r(f ref r()) trusted is-sendable<r>
	res fut r = unresolved
	get-global-ctx add-task f.exclusion, () =>
		(() => f.action[] forward-to res) catch err => res reject err
	res

# Calls a `ref` with one argument.
subscript<r, p0> fut r(f ref r(p0), p0 p0) trusted is-sendable<r> is-sendable<p0>
	res fut r = unresolved
	get-global-ctx add-task f.exclusion, () =>
		(() => f.action[p0] forward-to res) catch err => res reject err
	res

# Calls a `ref` with two arguments.
subscript<r, p0, p1> fut r
	f ref r(p0, p1)
	p0 p0
	p1 p1
spec
	trusted
	is-sendable<r>
	is-sendable<p0>
	is-sendable<p1>
body
	res fut r = unresolved
	get-global-ctx add-task f.exclusion, () =>
		(() => f.action[p0, p1] forward-to res) catch err => res reject err
	res

###
If the fut resolves successfully, does nothing.
Else, this will call the default exception handler.
###
handle-exceptions<a> void(a fut a) no-doc trusted
	a callback result =>
		match result
		as ok _
			()
		as err e
			get-global-ctx.exception-handler[e]

no-std
import
	./bool: bool, false, true
	./compare: equal
	./exception: exception, rethrow
	./fun-util: subscript
export
	./private/bootstrap: error, ok, result

+==[t, u] bool(a (t, u) result, b (t, u) result) t equal, u equal

+then[out, in, err] (out, err) result(a (in, err) result, f (out, err) result mut(x in))
	match a
	as ok v
		f[v]
	as error e
		e error

+force[t] t(a (t, exception) result)
	match a
	as ok v
		v
	as error e
		e rethrow

+is-ok[t, u] bool(a (t, u) result)
	match a
	as ok _
		true
	as error _
		false

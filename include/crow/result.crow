no-std
import
	./bool: bool, false, true
	./compare: equal
	./fun-util: subscript

###
A `result` is either a success (`ok`) or failure (`error`) value.

This provides a more explicit alternative to throwing an exception.
Prefer this over throwing an exception if failure is likely.
###
+result[ok, error] union(ok ok, error error)

+==[t, u] bool(a (t, u) result, b (t, u) result) t equal, u equal

+then[out, in, err] (out, err) result(a (in, err) result, f (out, err) result mut(x in))
	match a
	as ok v
		f[v]
	as error e
		e error

+is-ok[t, u] bool(a (t, u) result)
	match a
	as ok _
		true
	as error _
		false

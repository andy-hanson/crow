###
Functions for measuring performance.

Even non-`summon` code is can measure perf, but only `summon` code can access the measurements.
###
no-std
import
	./col/array: array, is-empty, iterate, new, size, subscript
	./col/collection: for-loop, index-of
	./col/list: ~=, build
	./col/map: ~=, build, iterate, map, size
	./col/mut-array: ~=, build, mut-array, new, set-subscript, subscript
	./exception: error
	./fun-util: subscript
	./io/duration: duration, nanosecond, show
	./io/private/time-low-level: get-monotime-nsec
	./misc: new, void
	./number: ==, <=>, +, -, nat64, to
	./range: .., iterate, size
	./string: interpolate, join, show, string
	./symbol: ==, <=>, hash-mix, show, symbol
	./tuple: new

+perf-result record(total duration, measures measure-total[symbol])
+show string(a perf-result)
	measures = ", " join for name, total : a measures
		"{name}: {total}"
	"total: {a total}, {measures}"

# Count and total duration of all measurements with the same name.
+measure-total record
	# Number of times a perf measure happend with this name.
	count nat64
	# Total time spent in all measures with this name.
	total-duration duration
+show string(a measure-total)
	"{a count} Ã— {a total-duration}"

# Use 'nsec' instead of 'duration' to avoid spending time converting to floats
-measure-accum record(count nat64, total-nsec nat64)
-new measure-accum()
	0, 0
-+ measure-accum(a measure-accum, b measure-accum)
	a.count + b.count, a.total-nsec + b.total-nsec

+measure-performance record(measure-names symbol array) nominal
+measure-performance measure-performance()
	() measure-performance

# Enable performance, run the callback, then return its result and the measured performance.
+with-block[t] (t, perf-result)(a measure-performance, f t mut()) summon, native extern
	assert (trusted measure-names.is-empty) : "Already measuring performance".error
	finally trusted clear-perf
	trusted
		measure-names := a measure-names
		measure-accums := for _ : measure-names; ()
	start = perf-now
	f-res = f[]
	end = perf-now
	# TODO: 'zip'
	measures measure-total[symbol] = trusted for i : 0::nat64 .. measure-names.size
		value = measure-accums[i]
		measure-names[i], (value.count, value.total-nsec.to.nanosecond)
	f-res, ((end - start).to.nanosecond, measures)

+perf-measure record(measure-name symbol) nominal

###
Runs `f` and returns its result.
If the performance measure `measure-name` is enabled,
this contribues to its performance measurement.
###
+with-block[t] t(a perf-measure, f t mut()) native extern
	guard index ?= (trusted measure-names) index-of a.measure-name : f[]
	start = perf-now
	res = f[]
	nsec = perf-now - start
	(trusted measure-accums)[index] +:= (1, nsec)
	res

# List of all names being measured
-measure-names thread-local(symbol array)
# Parallel to measure-names
-measure-accums thread-local(measure-accum mut-array)
-clear-perf void() unsafe
	measure-names := ()
	measure-accums := ()

-perf-now nat64() bare, native extern
	get-monotime-nsec

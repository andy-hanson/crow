###
Functions for measuring performance.

Even non-`summon` code is can measure perf, but only `summon` code can access the measurements.

To measure performance:
* First call `perf-enable`.
* Then wrap the code you want to measure in `with-perf-measure`.
* Then call `get-measured-perf` and output the results.
###
no-std
import
	./col/arr: arr, new
	./col/dict: dict
	./col/mut-dict: move-to-dict, mut-dict, new, set-subscript
	./fun-util: subscript
	./io/duration: duration, new, nsec, to-str
	./io/private/time-low-level: get-monotime-nsec
	./misc: void
	./number: -, nat64, to-float64
	./str: literal, str
	./str-conv: finish, interp, to-str, with-str, with-value
	./sym: ==, <=>, hash-mix, sym
	./private/perf-low-level:
		add-measure-value-at-index, count, each-measure, get-measure-index, perf-enable-low-level,
		perf-measure-value, total-nsec

perf-enable void(measure-names sym[]) summon
	measure-names perf-enable-low-level

# Disables performance measurement and clears all measurements.
perf-disable void() summon
	() perf-enable

###
Run `f` and measure its time.
This will be added to the total time for this measure name.
###
with-perf-measure<a> a(measure-name sym, f act a()) trusted
	if index ?= measure-name get-measure-index
		start = perf-now
		res = f[]
		index add-measure-value-at-index perf-now.nsec - start.nsec
		res
	else
		f[]

# Count and total duration of all measurements with the same name.
measure-total record
	# Number of times a perf measure happend with this name.
	count nat64
	# Total time spent in all measures with this name.
	total-duration duration

new measure-total()
	0, ()

to-str str(a measure-total)
	"{a count} times, totaling {a total-duration}"

# TODO: what if a measurement is taken while this is running?
###
Calls `f` for each performance measurement and its total.

This must be called before `perf-disable`.
###
get-measured-perf measure-total[sym]() summon trusted
	res measure-total mut[sym] = ()
	each-measure: (name, value) =>
		res[name] := value to-measure-total
	res move-to-dict

.to-measure-total measure-total(a perf-measure-value)
	a.count, a.total-nsec.to-float64.nsec

.perf-now perf-time() noctx
	get-monotime-nsec,

perf-time record
	.nsec nat64

no-std
import
	.bool: bool
	.col.arr: arr
	.col.arr-util: each, map
	.col.mut-list: ~=, move-to-arr!, mut-list
	.fun: subscript
	.misc: name, named-val, val
	.str: str
	.str-util: join
	.sym: sym, to-str

flags<?a> spec
	empty ?a()
	all ?a()
	flags-members arr named-val<?a>()
	== bool(a ?a, b ?a)
	~ ?a(a ?a)
	& ?a(a ?a, b ?a)
	| ?a(a ?a, b ?a)

in bool(a ?a, b ?a) flags<?a>
	a & b == a

to-syms arr sym(a ?a) flags<?a>
	flags-members flat-map member =>
		if member.val in a
			[member name]
		else
			[]

flags-to-str str(a ?a) flags<?a>
	a.to-syms map (x => x to-str) join " | "

# TODO:MOVE
.flat-map arr ?out(a arr ?in, f act arr ?out(?in))
	res = mut-list<?out>
	a each x =>
		res ~= f[x]
	res move-to-arr!

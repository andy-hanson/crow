###
Functions dealing with pointers and low-level memory issues.
###

no-std
import
	./bool: bool
	./compare: !=, comparison, less, equal, greater
	./misc: void
	./private/number-low-level: ==, nat8, nat64, unsafe-div, wrap-sub
export
	./private/bootstrap: const-pointer, mut-pointer, zeroed

+any-const-pointer alias
	nat8*
+any-mut-pointer alias
	nat8 mut*

# Treats a mutable pointer as constant.
+as-const[t] t*(a t mut*) builtin, bare, unsafe
###
Treats a constant pointer as mutable.
Do not actually write to it.
###
+as-mut[t] t mut*(a t*) builtin, bare, unsafe

# Null pointer.
+null[t] t*() bare, unsafe
	null.as-const
+null[t] t mut*() builtin, bare, unsafe
+null[r, p] fun* r(p)() bare, unsafe
	null as-fun-pointer

# Same as `null`.
+new[t] t*() bare, unsafe
	null
+new[t] t mut*() bare, unsafe
	null

# `*a` reads the value pointed to by `a`.
+*[t] t(a t*) builtin, bare, unsafe
+*[t] t(a t mut*) builtin, bare, unsafe

# `*a := value` writes `value` to the place pointed to be `a`.
+set-deref[t] void(a t mut*, value t) builtin, bare, unsafe

# `a[n]` is the same as `*(a + n)`.
+subscript[t] t(a t*, n nat64) bare, unsafe
	*(a + n)
+subscript[t] t(a t mut*, n nat64) bare, unsafe
	*(a + n)

# `a[n] := value` is the same as `*(a + n) := value`.
+set-subscript[t] void(a t mut*, n nat64, value t) bare, unsafe
	*(a + n) := value

###
`true` iff the two pointers are identical.
(That means: `false` if they point to equal values but are different pointers.)
###
+==[t] bool(a t*, b t*) builtin, bare, unsafe
+==[t] bool(a t mut*, b t mut*) builtin, bare, unsafe

###
Advance the pointer past `offset` values of type `a`.

Like in C, the address increases by `offset * size-of@t`.
###
+ +[t] t*(a t*, offset nat64) builtin, bare, unsafe
+ +[t] t mut*(a t mut*, offset nat64) builtin, bare, unsafe

# Back up the pointer by `offset` values of type `a`.
+-[t] t*(a t*, offset nat64) builtin, bare, unsafe
+-[t] t mut*(a t mut*, offset nat64) builtin, bare, unsafe

###
Get the difference between two pointers, measured in strides of `a`.

This is undefined behavior if `a < b` or if `size-of@t == 0`.
###
+-[t] nat64(a t*, b t*) bare, unsafe
	a.as-mut - b.as-mut
+-[t] nat64(a t mut*, b t mut*) bare, unsafe
	assert size-of@t != 0
	(a.to wrap-sub b.to) unsafe-div size-of@t

-is-less[t] bool(a t*, b t*) builtin, bare, unsafe
-is-less[t] bool(a t mut*, b t mut*) builtin, bare, unsafe
# Same as `a.to::nat64 <=> b.to::nat64`.
+<=>[t] comparison(a t*, b t*) bare, unsafe
	if a is-less b
		less
	elif a == b
		equal
	else
		greater
+<=>[t] comparison(a t mut*, b t mut*) bare, unsafe
	if a is-less b
		less
	elif a == b
		equal
	else
		greater

###
Number of bytes taken up by a type.
You'll need to manually supply a type argument, as in `size-of@nat`.

If `a` is a reference type, this is just the size of a pointer.
Similarly, this is the same for all array types,
regardless of the number of size of the array elements.
###
+size-of[t] nat64() builtin, bare, unsafe

###
Change the type of the pointee. This is like a pointer cast `(out*) a` in C.

At a low level, this is just an identity function; it just changes the type.
###
+pointer-cast[out, in] out*(a in*) bare, unsafe
	a.as-mut.pointer-cast as-const
+pointer-cast[out, in] out mut*(a in mut*) builtin, bare, unsafe

# Raw address of a pointer.
+to[t] nat64(a t*) builtin, bare, unsafe
+to[t] nat64(a t mut*) builtin, bare, unsafe
# Get a pointer from a raw address.
+to-const-pointer[t] t*(a nat64) bare, unsafe
	a.to-mut-pointer as-const
+to-mut-pointer[t] t mut*(a nat64) builtin, bare, unsafe

# Swap the value pointed to be 'a' with the value pointed to by 'b'.
+swap[t] void(a t mut*, b t mut*) bare, unsafe
	temp = *a
	*a := *b
	*b := temp

region Conversion between pointers and pointer-like types

###
Convert a 'by-ref' type to a pointer.
WARN: GC references and pointers should generally not mix. Use this only in the GC.
WARN: If the type is not 'by-ref', this may crash the compiler.
###
as-any-const-pointer[t] any-const-pointer(reference t) bare, unsafe
	reference.as-any-mut-pointer.as-const
# WARN: See comment on 'as-any-const-pointer'.
as-any-mut-pointer[t] any-mut-pointer(reference t) builtin, bare, unsafe

+as-fun-pointer[r, p] fun* r(p)(a any-const-pointer) builtin, bare, unsafe

###
True if two references have the same pointer.
Contrast with `a == b` which can also e true for different pointers with equal contents.
###
+reference-equal[t] bool(a t, b t) builtin, bare, unsafe

no-std
import
	./bool: ||, bool, new, true
	./col/array: +, begin, iterate, next, size, slice
	./col/collection: find-index, for-loop, starts-with, subscript
	./col/list: ~=, build
	./compare: >
	./fun-util: subscript
	./misc: new, void
	./number: ==, <=>, -
	./private/bootstrap: new
	./range: ..
	./string: ==, begin, interpolate, is-empty, join, next, string, to
export
	./private/backtrace: backtrace, backtrace-entry, entries, file-path, function-name, line-number
	./private/exception-low-level: catch, exception, message, rethrow, unreachable

region handling

+finally record mut, nominal
	cleanup void mut()
###
Runs `try`, and then runs `cleanup`, even if `try` threw an exception.

If there was an exception, it will be rethrown after `after` finishes.
If `after` throws an exception, the original exception will be lost.
###
+with-block[t] t(a finally, try t mut())
	res = a.cleanup do-if-error () => try[]
	a cleanup
	res

###
Rus `try`, and if it throws an exception, runs `on-error`.

This is like `finally`, but does not run in the successful case.
###
+do-if-error[t] t(on-error void mut(), try t mut())
	try catch err =>
		on-error[]
		err rethrow

# Outputs the exception's message and backtrace to a string.
+to string(a exception) unsafe
	"{a.message}{a.backtrace}"

###
Prepends 'description' to any thrown exception messages.
(Does not change the stack trace.)
###
+augment-exceptions record(description string) nominal
+with-block[t] t(a augment-exceptions, f t mut())
	f catch err =>
		("{a.description}: {err.message}", err.backtrace) rethrow

-to string(a backtrace)
	# Don't include entries from runtime, only at start of function
	kept-entries = if idx ?= a.entries find-index x => x is-runtime-function-entry
		if idx > 0
			if trusted a.entries[idx - 1].function-name.to::string == "call"
				a.entries[0 .. idx - 1]
			else
				a.entries[0 .. idx]
		else
			a entries
	else
		a entries
	"" join for x : kept-entries
		"\n\tat {x}"

-translate-name string(a string)
	if a == "main_0"
		"main"
	else
		a

-is-runtime-function-entry bool(a backtrace-entry)
	(trusted a.function-name.to) is-runtime-function-name

-is-runtime-function-name bool(a string)
	if a starts-with "then@"
		true
	elif a == "wrap-main"
		true
	elif a == "invoke-action" || a == "invoke__45action"
		true
	elif a == "add-first-task.lambda0" || a == "add__45first__45task__lambda0"
		true

-to string(a backtrace-entry)
	name string = trusted a.function-name.to translate-name
	path string = trusted a.file-path to
	if name is-empty
		"<<unknown>>"
	elif path is-empty
		name
	elif a.line-number == 0
		"{name} ({path})"
	else
		"{name} ({path}:{a line-number})"

no-std
import
	./bool: !, ?, bool
	./col/arr-util: each
	./fun: subscript
	./misc: void
	./str: empty?, str
	./writer: ~=, move-to-str!, writer
	./private/backtrace: return-stack
	./private/bootstrap: backtrace, to-c-str
export
	./private/exception-low-level: assert, catch, exception, forbid, message, throw

region throwing

###
Fail if the condition is false, providing a custom message.
The message is eagerly evaluated; pass a `fun str()` instead to have it lazily evaluatied.
###
assert void(condition bool, message str)
	if !condition
		message throw

###
Fail if the condition is false, providing a custom message.
The message is evaluated only if an exception will be thrown.
###
assert void(condition bool, message fun str())
	if !condition
		message[] throw

###
Fail if the condition is true, providing a custom message.
The message is eagerly evaluated; pass a `fun str()` instead to have it lazily evaluatied.
###
forbid void(condition bool, message str)
	if condition
		message throw

###
Fail if the condition is false, providing a custom message.
The message is evaluated only if an exception will be thrown.
###
forbid void(condition bool, message fun str())
	if condition
		message[] throw

###
Fail unconditionally.
This function is used to mark part of an `if` or `match` that should not be possible.
###
unreachable ?a()
	"should be unreachable" throw

region handling

###
Run `try`, and then run `after`, even if `try` threw an exception.
(The exception is only temporarily caught to run `after` and is then rethrown.)
###
finally ?a(after act void(), try act ?a())
	res = after do-if-error try
	after[]
	res

###
Run `try`, and if there is an exception run `on-error`.
Unlike `finally` this does not run in the successful case.
(The exception is only temporarily caught to run `after` and is then rethrown.)
###
do-if-error ?a(on-error act void(), try act ?a())
	try catch err =>
		on-error[]
		err throw

to-str str(a exception) unsafe
	res = writer
	res ~= a.message.empty? ? "<<empty message>>", a.message
	a.backtrace.return-stack each x =>
		res ~= "\n\tat "
		res ~= x.to-c-str
	res move-to-str!

no-std
import
	./bool: ||, bool, new, true
	./col/array: +, begin, iterate, next, size, slice
	./col/collection: find-index, for-loop, starts-with, subscript
	./col/list: ~=, build
	./compare: >
	./number: ==, <=>, -, a, b, binary-out-of-range, divide-by-0, input, integral-value, unary-out-of-range
	./private/exception-low-level: test-failure
	./range: ..
	./result: result
	./string: ==, begin, interpolate, is-empty, join, next, string, to
export
	./private/backtrace: backtrace, backtrace-entry, entries, file-path, function-name, line-number
	./private/exception-low-level:
		catch-all, error, exception, exception-and-backtrace, message, rethrow, unreachable

region handling

+todo record exception variant-member

# Outputs the exception's message and backtrace to a string. TODO: MAKE THIS A METHOD -------------------------------------------
+to string(a exception-and-backtrace) unsafe
	description string = match a exception
	as error e
		"Error: {e.message}" # TODO: how do I destructure one thing? ---------------------------------------------------------
	as binary-out-of-range e # TODO: Support destructure for non-tuple (tuple-like record) ----------------------------------
		"Result would be out of range given arguments {e.a}, {e.b}."
	as divide-by-0
		"Division by 0."
	as test-failure e
		"Test failure: {e.message}"
	as unary-out-of-range e
		"Result would be out of range given argument {e input}."
	else
		"Other exception"
	"{description}{a backtrace}"

-to string(a integral-value)
	match a
	as unsigned x
		"{x}"
	as signed x
		"{x}"

+to string(a backtrace) unsafe
	# Don't include entries from runtime, only at start of function
	kept-entries = if idx ?= a.entries find-index x => x is-runtime-function-entry
		if idx > 0
			if a.entries[idx - 1].function-name.to::string == "call"
				a.entries[0 .. idx - 1]
			else
				a.entries[0 .. idx]
		else
			a entries
	else
		a entries
	"" join for x : kept-entries
		"\n\tat {x}"

-translate-name string(a string)
	if a == "main_0"
		"main"
	else
		a

-is-runtime-function-entry bool(a backtrace-entry)
	(trusted a.function-name.to) is-runtime-function-name

-is-runtime-function-name bool(a string)
	if a starts-with "then@"
		true
	elif a == "wrap-main" || a == "__wrap_main"
		true
	elif a == "invoke-action" || a == "invoke__45action"
		true

-to string(a backtrace-entry)
	name string = trusted a.function-name.to translate-name
	path string = trusted a.file-path to
	if name is-empty
		"<<unknown>>"
	elif path is-empty
		name
	elif a.line-number == 0
		"{name} ({path})"
	else
		"{name} ({path}:{a line-number})"

+force[t] t(a (t, exception-and-backtrace) result)
	match a
	as ok v
		v
	as error e
		e rethrow

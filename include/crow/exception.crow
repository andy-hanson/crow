no-std
import
	./bool: bool
	./col/arr-util: each
	./fun-util: subscript
	./misc: new, void
	./str: is-empty, str
	./writer: ~=, move-to-str, new, writer
	./private/backtrace: return-stack
	./private/bootstrap: backtrace, to-c-str
export
	./private/exception-low-level: assert, catch, exception, forbid, message, throw

region throwing

###
Throw if the condition is false, providing a custom message.
The message is eagerly evaluated; pass a `fun str()` instead to have it lazily evaluatied.
###
assert void(condition bool, message str)
	unless condition
		message throw

###
Fail if the condition is false, providing a custom message.
The message is evaluated only if an exception will be thrown.
###
assert void(condition bool, message fun str())
	unless condition
		message[] throw

###
Fail if the condition is true, providing a custom message.
The message is eagerly evaluated; pass a `fun str()` instead to have it lazily evaluatied.
###
forbid void(condition bool, message str)
	if condition
		message throw

###
Fail if the condition is false, providing a custom message.
The message is evaluated only if an exception will be thrown.
###
forbid void(condition bool, message fun str())
	if condition
		message[] throw

###
Fail unconditionally.
This function is used to mark part of an `if` or `match` that should not be possible.
###
unreachable<a> a()
	"should be unreachable" throw

region handling

###
Runs `try`, and then runs `after`, even if `try` threw an exception.

If there was an exception, it will be rethrown after `after` finishes.
If `after` throws an exception, the original exception will be lost.
###
finally<a> a(after act void(), try act a())
	res = after do-if-error try
	after[]
	res

###
Rus `try`, and if it throws an exception, runs `on-error`.

This is like `finally`, but does not run in the successful case.
###
do-if-error<a> a(on-error act void(), try act a())
	try catch err =>
		on-error[]
		err throw

# Outputs the exception's message and backtrace to a string.
to-str str(a exception) unsafe
	res writer = ()
	res ~= if a.message.is-empty
		"<<empty message>>"
	else
		a.message
	a.backtrace.return-stack each x =>
		res ~= "\n\tat "
		res ~= x.to-c-str
	res move-to-str

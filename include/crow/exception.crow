no-std
import
	./col/arr: for-loop
	./fun-util: subscript
	./misc: void
	./number: ==
	./str: ~~, is-empty, literal, str
	./str-conv: finish, interp, to-str, with-str, with-value
	./writer: ~~=, move-to-str, new, writer
	./private/backtrace: backtrace, backtrace-entry, entries, file-path, function-name, line-number
	./str-util: join, to-str
export
	./private/exception-low-level: catch, exception, message, rethrow, unreachable

region handling

###
Runs `try`, and then runs `after`, even if `try` threw an exception.

If there was an exception, it will be rethrown after `after` finishes.
If `after` throws an exception, the original exception will be lost.
###
finally<a> a(after act void(), try act a())
	res = after do-if-error try
	after[]
	res

###
Rus `try`, and if it throws an exception, runs `on-error`.

This is like `finally`, but does not run in the successful case.
###
do-if-error<a> a(on-error act void(), try act a())
	try catch err =>
		on-error[]
		err rethrow

# Outputs the exception's message and backtrace to a string.
to-str str(a exception) unsafe
	res writer = ()
	message = a.message to-str
	res ~~= (message.is-empty ? "<<empty message>>" : message)
	for x : a.backtrace entries
		res ~~= "\n\tat "
		res ~~= x.to-str
	res move-to-str

to-str str(a backtrace)
	"" join for x : a entries
		"\n\tat " ~~ x.to-str

to-str str(a backtrace-entry) trusted
	name = a.function-name to-str
	path = a.file-path to-str
	if name is-empty
		"<<unknown>>"
	elif path is-empty
		name
	elif a.line-number == 0
		"{name} ({path})"
	else
		"{name} ({path}:{a line-number})"

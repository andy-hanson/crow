no-std
import
	./bool: ||, bool, new, true
	./col/array: iterate, size, subscript
	./col/collection: find-index, for-loop, starts-with
	./col/list: ~=, build
	./compare: >
	./js: as-js, cast, subscript
	./number: ==, <=>, -
	./option: new, option
	./range: ..
	./result: result
	./string: ==, begin, interpolate, is-empty, join, next, string, to
	./private/bootstrap: hard-unreachable
export
	./private/backtrace: native-backtrace, backtrace-entry, file-path, function-name, line-number
	./private/exception-low-level:
		backtrace, catch-all, describe, error, exception, exception-and-backtrace, rethrow,
		threw-non-exception, thrown, unreachable

+ignore-exceptions record nominal
+with-block[t] t?(_ ignore-exceptions, f t mut())
	match f catch-all
	as ok x
		x,
	as error _
		()

+todo record exception variant-member
+describe string(_ todo)
	"TODO"

+not-implemented record exception variant-member
+describe string(_ not-implemented)
	"The operation is not implemented on this platform."

# Outputs the exception's message and backtrace to a string.
+to string(a exception-and-backtrace) unsafe
	if extern native
		"{a exception}{a backtrace}"
	elif extern js
		a.exception.as-js["stack"] cast
	else
		hard-unreachable

+to string(a exception)
	a describe

-to string(a native-backtrace) unsafe, native extern
	# Don't include entries from runtime, only at start of function
	kept-entries = if idx ?= a find-index x => x is-runtime-function-entry
		if idx > 0
			if a[idx - 1].function-name.to::string == "call"
				a[0 .. idx - 1]
			else
				a[0 .. idx]
		else
			a
	else
		a
	"" join for x : kept-entries
		"\n\tat {x}"

-translate-name string(a string)
	if a == "main_0"
		"main"
	else
		a

-is-runtime-function-entry bool(a backtrace-entry) native extern
	(trusted a.function-name.to) is-runtime-function-name

-is-runtime-function-name bool(a string)
	if a starts-with "then@"
		true
	elif a == "wrap-main" || a == "__wrap_main"
		true
	elif a == "invoke-action" || a == "invoke__45action"
		true

-to string(a backtrace-entry) native extern
	name string = trusted a.function-name.to translate-name
	path string = trusted a.file-path to
	if name is-empty
		"<<unknown>>"
	elif path is-empty
		name
	elif a.line-number == 0
		"{name} ({path})"
	else
		"{name} ({path}:{a line-number})"

+force[t] t(a (t, exception-and-backtrace) result)
	match a
	as ok v
		v
	as error e
		e rethrow

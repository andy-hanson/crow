no-std
import
	./bool: bool
	./col/collection: build, flatten, for-loop, iterate, size, subscript, with-block, with-index
	./col/util: groupable, groups-of
	./col/list: ~~, +, ~=, begin, build, iterate, list, new, next, size
	./exception: catch-all, exception-and-backtrace, rethrow, to
	./fun-util: subscript
	./log: error, log
	./number: nat64
	./misc: shared, new, void
	./pointer: any-mut-pointer, as-any-mut-pointer, mut-pointer, reference-from-pointer
	./private/bootstrap: add-to-queue, await-future, fiber, lk, new, rejected, resolved, todo
	./private/future-low-level: get-result, reject, resolve, try-add-awaiting-fiber, unresolved
	./private/runtime: add-new-fiber, get-global-ctx, yield-this-fiber
	./private/thread-utils: init, lock, uninit
	./result: result
	./string: interpolate
export
	./private/bootstrap: future

+await[t] t(a t future) trusted, native extern
	match a await-result
	as ok x
		x
	as error x
		x rethrow

+await-result[t] (t, exception-and-backtrace) result(a t future) trusted, native extern
	(a.as-any-mut-pointer, &add-awaiting-fiber-for-t@t).await-future yield-this-fiber
	a get-result

# Just yields the fiber temporarily. It may be restarted immediately.
+yield-fiber void() trusted, native extern
	add-to-queue yield-this-fiber

add-awaiting-fiber-for-t[t] bool(future any-mut-pointer, fiber fiber) bare, unsafe
	typed t future = future reference-from-pointer
	typed try-add-awaiting-fiber fiber

-lock[t] lock mut*(a t future) unsafe
	&a.lk

# Converts a value to a future resolved with that value.
+new[t] t future(value t)
	res t future = trusted uninit, value.resolved
	trusted res.lock init
	res

# Future resolved with an exception.
+rejected[t] t future(err exception-and-backtrace)
	res t future = trusted uninit, err.rejected
	trusted res.lock init
	res

+parallel record nominal
###
Run `f` in a new fiber with a new exclusion and return a future for its result.
###
+with-block[t] t future(_ parallel, f t shared())
	if trusted extern native
		res t future = trusted unresolved
		trusted get-global-ctx add-new-fiber () =>
			match (() => f[]) catch-all
			as ok x
				res resolve x
			as error e
				res reject e
		res
	else
		todo # -----------------------------------------------------------------------------------------------------------

###
This is like running something with `parallel` and then waiting on it.
The purpose is to allow other fibers with the current exclusion to run while waiting.
###
+new-exclusion record nominal
+with-block[t] t(_ new-exclusion, f t shared()) native extern
	parallel with-block f await

+later record nominal
###
Run `f` in a new fiber with the current exclusion. So it can't run until the current fiber yields.
###
+with-block[t] t future(_ later, f t mut()) t shared
	if trusted extern native
		fs t shared() = shared () => f[]
		parallel with-block fs
	else
		todo

# Does not await the future, but will log any exceptions from the future once it is done.
+forget[t] void(a t future) native extern
	trusted get-global-ctx add-new-fiber () =>
		match a await-result
		as ok _
			()
		as error e
			error log "{e}"

+fire-and-forget record nominal
###
Runs 'f' in parallel and logs any exceptions, but does not await it.
###
+with-block void(_ fire-and-forget, f void shared()) trusted, native extern
	parallel with-block f forget

+parallel-collection[col] record(collection col)
+parallel[col] col parallel-collection(a col)
	a,
###
For each element of `a`, runs `f` in parallel. Then awaits them all.
###
+for-loop[out-elem, in-col, in-elem] out-elem[](
	a in-col parallel-collection,
	f out-elem shared(elem in-elem),
) out-elem shared, in-elem shared, (in-col, in-elem) iterate, in-col size
	if trusted extern native
		futures out-elem future[] = for x : a collection
			with : parallel
				f[x]
		for x : futures
			x await
	else
		for x : a.collection
			f[x]
# Same as the above but returning 'void'.
+for-loop[in-col, in-elem] void(
	a in-col parallel-collection,
	f void shared(elem in-elem),
) (in-col, in-elem) iterate, in-col size, in-elem shared
	if trusted extern native
		futures void future[] = for x : a collection
			with : parallel
				f[x]
		for x : futures
			x await
	else
		for x : a.collection
			f[x]

# Runs `f` in parallel for each element of `a` and concatenates results.
+parallel-concat[col] record(collection col) nominal
+for-loop[out-elem, in-col, in-elem] out-elem[](
	a in-col parallel-concat,
	f out-elem[] shared(elem in-elem),
) out-elem shared, in-elem shared, (in-col, in-elem) iterate, in-col size
	a.collection.parallel for-loop f flatten

# Runs `f` in parallel for each element of `a` and returns results for which it was `true`.
+filter[out-col, in-col, elem, builder] out-col(
	a in-col parallel-collection,
	f bool shared(elem elem),
) (in-col, elem) iterate, in-col size, (out-col, elem, builder) build, elem shared, out-col shared, native extern
	bools bool[] = a for-loop f
	with out : build
		for i, x : a.collection with-index
			if bools[i]
				out ~= x

###
Works like `parallel`, but works in groups of 'chunk-size' elements to reduce parallelism.
###
+chunked-parallel[col] record(collection col, chunk-size nat64) nominal

+chunkable[col, iter, elem] spec col shared, elem shared, (col, iter) groupable, (col, elem) iterate

+for-loop[out-elem, in-col, in-iter, in-elem] out-elem[](
	a in-col chunked-parallel,
	f out-elem shared(elem in-elem),
) out-elem shared, (in-col, in-iter, in-elem) chunkable
	if trusted extern native
		for chunk : a.collection groups-of a.chunk-size parallel-concat
			for x : chunk
				f[x]
	else
		for x : a.collection
			f[x]

+for-loop[in-col, in-iter, in-elem] void(
	a in-col chunked-parallel,
	f void shared(elem in-elem),
) (in-col, in-iter, in-elem) chunkable
	if trusted extern native
		for chunk : a.collection groups-of a.chunk-size parallel
			for x : chunk
				f[x]
	else
		for x : a.collection
			f[x]

+filter[out-col, in-col, in-iter, elem, builder] out-col(
	a in-col chunked-parallel,
	f bool shared(elem elem),
) out-col shared, (in-col, in-iter, elem) chunkable, (out-col, elem, builder) build, native extern
	bools bool[] = a for-loop f
	with out : build
		for i, x : a.collection with-index
			if bools[i]
				out ~= x

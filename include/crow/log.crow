no-std
import
	./js: as-t, call, js-global
	./fun-util: subscript
	./io/print: err, out, pipe, print
	./misc: new, void
	./private/bootstrap: must-cur-fiber, set-log-handler, todo
	./string: interpolate, string, to
export
	./private/bootstrap: error, info, level, logged, log-handler, log-level, message, warn

+new logged(level log-level, message string)
	level logged message

###
Sends a log to the current log handler.
By default, this means the message is logged to the console.

This is not considered `summon` since the I/O is done by the log handler,
which is passed in via the crow context. `with-log-handler` can change it.
###
+log void(level log-level, message string)
	get-log-handler[level, message]

+temp-log-handler record(handler log-handler) shared, nominal
###
Temporarily replaces the log handler.

Only applies within this task. Even if you launch a task inside `with-log-handler`,
that task will still have the default log handler.
###
+with-block[t] t(a temp-log-handler, cb t mut())
	original-handler = get-log-handler
	trusted a.handler set-log-handler
	finally trusted original-handler set-log-handler
	cb[]

# TODO: this is what 'to string' in enum.crow would do, is there a way to use that?
-to string(a log-level)
	match a
	as debug
		"debug"
	as info
		"info"
	as warn
		"warn"
	as error
		"error"

default-log-handler void(a logged) summon
	pipe pipe = match a level
	as debug
		err
	as info
		out
	as warn
		err
	as error
		err
	pipe print "{a level}: {a message}"

###
This gets the current log handler.
This is useful if you want to use `with-log-handler` to add a little extra information,
then fall back to the original log handler.

If you just want to call the curent log handler, you could just use `log`.
###
+get-log-handler log-handler()
	trusted if extern native
		must-cur-fiber log-handler
	elif extern js
		logged => "console".js-global call logged.level.to, logged.message as-t
	else
		todo

# WARN: Most code should use 'temp-log-handler' to set it back. This is just to set it initially.
~set-log-handler void(handler log-handler) bare, unsafe
	if extern native
		must-cur-fiber.log-handler := handler
	else
		todo

no-std
import
	./fun-util: subscript
	./io/print: out, print
	./misc: new, void
	./string: ~~, literal, string, to
	./private/exception-low-level: catch, rethrow

###
Sends a log to the current log handler.
By default, this means the message is logged to the console.

This is not considered `summon` since the I/O is done by the log handler,
which is passed in via the crow context. `with-log-handler` can change it.
###
+log void(level log-level, message string)
	get-log-handler[level, message]

###
Temporarily replaces the log handler.

Only applies within this task. Even if you launch a task inside `with-log-handler`,
that task will still have the default log handler.
###
+with-log-handler[t] t(handler log-handler, cb act t())
	original-handler = get-log-handler
	action act t() = () =>
		trusted handler set-log-handler
		res = cb[]
		trusted original-handler set-log-handler
		res
	# TODO: 'finally'
	action catch err =>
		trusted original-handler set-log-handler
		err rethrow

###
Log severity.
The log handler can use this any way it wants.
The default log handler just prints the level at the beginning of each log.
###
+log-level enum
	# Any log message not fitting in other levels can be 'info'.
	info
	###
	This is useful for anything that seems like it might be a problem in the future.

	For example: Something took an unusually long time; or some resource like memory is running low.
	###
	warn
	###
	An error is for when something has gone wrong (but wasn't worthy of an exception).

	For example: An HTTP request that is expected to normally succeed failed.
	###
	error

# TODO: this is what 'to string' in enum.crow would do, is there a way to use that?
-to string(a log-level)
	match a
	as info
		"info"
	as warn
		"warn"
	as error
		"error"

# Represents a single call to `log`.
+logged record
	level log-level
	message string

###
Function that handles a log message.

For example, this might write it to the console.
###
+log-handler alias
	fun void(logged)

default-log-handler void(a logged) summon
	out print "{a level}: {a message}"

# GC doesn't trace thread-locals, but won't outlive a task anyway.
-cur-log-handler thread-local(log-handler)

###
This gets the current log handler.
This is useful if you want to use `with-log-handler` to add a little extra information,
then fall back to the original log handler.

If you just want to call the curent log handler, you could just use `log`.
###
+get-log-handler log-handler() bare
	trusted cur-log-handler

set-log-handler void(handler log-handler) bare, unsafe
	cur-log-handler := handler

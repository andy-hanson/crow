no-std
import
	./fun-util: subscript
	./io/print: err, out, pipe, print
	./misc: new, void
	./string: interpolate, string, to

###
Sends a log to the current log handler.
By default, this means the message is logged to the console.

This is not considered `summon` since the I/O is done by the log handler,
which is passed in via the crow context. `with-log-handler` can change it.
###
+log void(level log-level, message string)
	get-log-handler[level, message]

+temp-log-handler record(handler log-handler) shared, nominal
###
Temporarily replaces the log handler.

Only applies within this task. Even if you launch a task inside `with-log-handler`,
that task will still have the default log handler.
###
+with-block[t] t(a temp-log-handler, cb t mut())
	original-handler = get-log-handler
	trusted a.handler set-log-handler
	finally trusted original-handler set-log-handler
	cb[]

###
Log severity.
The log handler can use this any way it wants.
The default log handler just prints the level at the beginning of each log.
###
+log-level enum
	# Temporary log for debugging
	debug
	# Any log message not fitting in other levels can be 'info'.
	info
	###
	This is useful for anything that seems like it might be a problem in the future.

	For example: Something took an unusually long time; or some resource like memory is running low.
	###
	warn
	###
	An error is for when something has gone wrong (but wasn't worthy of an exception).

	For example: An HTTP request that is expected to normally succeed failed.
	###
	error

# TODO: this is what 'to string' in enum.crow would do, is there a way to use that?
-to string(a log-level)
	match a
	as debug
		"debug"
	as info
		"info"
	as warn
		"warn"
	as error
		"error"

# Represents a single call to `log`.
+logged record(level log-level, message string)

###
Function that handles a log message.

For example, this might write it to the console.
###
+log-handler alias
	void shared(logged logged)

default-log-handler void(a logged) summon
	pipe pipe = match a level
	as debug
		err
	as info
		out
	as warn
		err
	as error
		err
	pipe print "{a level}: {a message}"

# TODO: STORE THIS ON THE FIBER. AND REMEMBER TO GC TRACE IT -------------------------------------------------------------------
-cur-log-handler thread-local(log-handler)

###
This gets the current log handler.
This is useful if you want to use `with-log-handler` to add a little extra information,
then fall back to the original log handler.

If you just want to call the curent log handler, you could just use `log`.
###
+get-log-handler log-handler() bare
	trusted cur-log-handler

set-log-handler void(handler log-handler) bare, unsafe
	cur-log-handler := handler

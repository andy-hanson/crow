no-std
import
	.private.bool-low-level: !, ?, bool, false, true
	.private.bootstrap: str

# Comparison for `a < b`
less record
# Comparison for `a == b`
equal record
# Comparison for `a > b`
greater record
comparison union
	less
	equal
	greater

== bool(a comparison, b comparison) noctx
	match a
	as less
		match b
		as less
			true
		as equal
			false
		as greater
			false
	as equal
		match b
		as less
			false
		as equal
			true
		as greater
			false
	as greater
		match b
		as less
			false
		as equal
			false
		as greater
			true

equal<?a> spec
	== bool(a ?a, b ?a)

compare<?a> spec
	== bool(a ?a, b ?a)
	<=> comparison(a ?a, b ?a)

# True iff `!(a == b)`.
!= bool(a ?a, b ?a) noctx equal<?a>
	!(a == b)

# True iff `(a <=> b) == less`.
< bool(a ?a, b ?a) noctx compare<?a>
	match a <=> b
	as less
		true
	as equal
		false
	as greater
		false

# True iff `!(a > b)`
<= bool(a ?a, b ?a) noctx compare<?a>
	!(b < a)

# True iff `(a <=> b) == greater`.
> bool(a ?a, b ?a) noctx compare<?a>
	b < a

# True iff `!(a < b)`.
>= bool(a ?a, b ?a) noctx compare<?a>
	!(a < b)

# Returns the lesser argument
min ?a(a ?a, b ?a) noctx compare<?a>
	a < b ? a, b

# Returns the greater argument
max ?a(a ?a, b ?a) noctx compare<?a>
	a < b ? b, a

max ?a(a ?a, b ?a, c ?a) noctx compare<?a>
	a max b max c

max ?a(a ?a, b ?a, c ?a, d ?a) noctx compare<?a>
	a max b max c max d

# Returns "less", "equal", or "greater"
to-str str(a comparison)
	match a
	as less
		"less"
	as equal
		"equal"
	as greater
		"greater"

clamp ?a(a ?a, min ?a, max ?a) noctx compare<?a>
	if a < min
		min
	elif a > max
		max
	else
		a

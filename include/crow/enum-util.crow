no-std
import
	./bool: bool
	./col/arr: arr
	./col/arr-util: first-some
	./exception: throw
	./misc: name, named-val, val
	./opt: opt, some
	./sym: ==, sym, to-str
	./str: str

enum-like<a> spec
	enum-members named-val<a>[]()
	== bool(a a, b a)

to-sym<a> sym(a a) enum-like<a>
	res = enum-members first-some@<sym, named-val a> member =>
		if member.val == a
			member.name some
	if name ?= res
		name
	else
		"Invalid enum value" throw

to-enum<a> a?(a sym) enum-like<a>
	enum-members first-some@<a, named-val a> member =>
		if member.name == a
			member.val some

enum-convert<out, in> out?(a in) enum-like<in> enum-like<out>
	a.to-sym to-enum

# TODO: should just be called to-str, but that requires better overloading
enum-to-str<a> str(a a) enum-like<a>
	a.to-sym to-str

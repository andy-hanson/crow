no-std
import
	./col/array: array, for-break
	./compare: equal
	./misc: loop-break, name, new, named-val, val
	./option: option
	./private/symbol-low-level: ==, symbol, to-string
	./string: ==, string

###
Spec that will be satisfied by generated functions for any `enum` type.
Functions in this spec will be generated when you declare an `enum`.

(Declaring an `enum` also generates other functions that aren't needed here.)
###
enum-like[e] spec e equal
	# Returns every name and value in the enum.
	enum-members e named-val array()

# Convert an enum value to name that was used to declare it.
to-symbol[e] symbol(a e) e enum-like
	for x : enum-members
		if x.val == a
			break x name
	else
		throw "Invalid enum value"

###
Converts a symbol to the enum value that was declared with that name.

Returns an empty option if `a` is not the name of an enum member.
###
to-enum[e] e?(a symbol) e enum-like
	for x : enum-members
		if x.name == a
			break x val

# Same as `a.to-symbol to-enum`.
to-enum[e] e?(a string) e enum-like
	for x : enum-members
		if x.name.to-string == a
			break x val

###
Converts to the output enum value with the same name.

Returns an empty option if there is no corresponding output value.
###
enum-convert[out, in] out?(a in) in enum-like, out enum-like
	a.to-symbol to-enum

# TODO: should just be called to-string, but that requires better overloading
# Same as `a.to-symbol to-string`.
enum-to-string[e] string(a e) e enum-like
	a.to-symbol to-string

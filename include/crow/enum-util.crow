no-std
import
	./col/array: array, iterate, size
	./col/collection: for-break, for-loop
	./col/list: ~=, build, list
	./compare: equal
	./json: json, to
	./misc: loop-break, new
	./option: ??, option
	./string: ==, ~~, string, to
	./symbol: ==, symbol, to

###
Spec that will be satisfied by generated functions for any `enum` type.
Functions in this spec will be generated when you declare an `enum`.

(Declaring an `enum` also generates other functions that aren't needed here.)
###
+enum-like[e] spec e equal
	# Returns every name and value in the enum.
	enum-members (symbol, e) array()

+values[e] e[]() e enum-like
	for _, value : enum-members
		value

+to[e] symbol(a e) e enum-like
	for name, value : enum-members
		if value == a
			break name
	else
		throw "Invalid enum value"

+to[e] string(a e) e enum-like
	a.to::symbol to

+to[e] json(a e) e enum-like
	a.to::symbol to

###
Converts a symbol to the enum value that was declared with that name.

Returns an empty option if `a` is not the name of an enum member.
###
+to[e] e?(a symbol) e enum-like
	for name, value : enum-members
		if name == a
			break value

+to[e] e(a symbol) e enum-like
	a.to ?? throw "unexpected enum member {a}"

+to[e] e?(a string) e enum-like
	for name, value : enum-members
		if name.to::string == a
			break value

+to[e] e(a string) e enum-like
	a.to ?? throw "unexpected enum member {a}"

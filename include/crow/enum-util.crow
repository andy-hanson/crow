no-std
import
	./bool: bool
	./col/array: array, find-and-get
	./misc: name, named-val, val
	./opt: ??, new, opt
	./private/symbol-low-level: ==, symbol, to-string
	./string: ==, string

# TODO: inherit from 'compare' spec
###
Spec that will be satisfied by generated functions for any `enum` type.
Functions in this spec will be generated when you declare an `enum`.

(Declaring an `enum` also generates other functions that aren't needed here.)
###
enum-like<a> spec
	# Returns every name and value in the enum.
	enum-members array named-val a()
	== bool(a a, b a)

# Convert an enum value to name that was used to declare it.
to-symbol<a> symbol(a a) enum-like<a>
	(enum-members find-and-get x => x.val == a ? x.name,) ?? throw "Invalid enum value"

###
Converts a symbol to the enum value that was declared with that name.

Returns an empty option if `a` is not the name of an enum member.
###
to-enum<a> a?(a symbol) enum-like<a>
	enum-members find-and-get member =>
		member.name == a ? member.val,

# Same as `a.to-symbol to-enum`.
to-enum<a> a?(a string) enum-like<a>
	enum-members find-and-get member =>
		member.name.to-string == a ? member.val,

###
Converts to the output enum value with the same name.

Returns an empty option if there is no corresponding output value.
###
enum-convert<out, in> out?(a in) enum-like<in> enum-like<out>
	a.to-symbol to-enum

# TODO: should just be called to-string, but that requires better overloading
# Same as `a.to-symbol to-string`.
enum-to-string<a> string(a a) enum-like<a>
	a.to-symbol to-string

no-std
import
	./bool: bool
	./col/array: array, iterate, size
	./col/collection: for-break, for-loop
	./col/list: ~=, build, list
	./json: json, to
	./misc: loop-break, new
	./option: ??, option
	./string: ==, interpolate, string, to
	./symbol: ==, symbol, to

###
Spec that is satisfied if 't' is an 'enum' type
###
+enum[t] spec builtin

+==[t] bool(a t, b t) builtin, bare, t enum

# Returns every name and value in the enum.
+enum-members[t] (symbol, t) array() builtin, bare, t enum

+values[t] t[]() t enum
	for _, value : enum-members@t
		value

+to[t] symbol(a t) t enum
	for name, value : enum-members@t
		if value == a
			break name
	else
		throw "Invalid enum value"

+to[t] string(a t) t enum
	a.to::symbol to

+to[t] json(a t) t enum
	a.to::symbol to

###
Converts a symbol to the enum value that was declared with that name.

Returns an empty option if `a` is not the name of an enum member.
###
+to[t] t?(a symbol) t enum
	for name, value : enum-members@t
		if name == a
			break value

+to[t] t(a symbol) t enum
	a.to ?? throw "unexpected enum member {a}"

+to[t] t?(a string) t enum
	for name, value : enum-members@t
		if name.to::string == a
			break value

+to[t] t(a string) t enum
	opt t? = a to
	opt ?? throw "unexpected enum member {a}"

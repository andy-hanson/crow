no-std
import
	./bool: ==, bool, false
	./compare: equal
	./col/array: ~=, array, build, iterate, size
	./col/collection: for-loop
	./col/experimental/index-set: iterate, index-set, size
	./col/map: ==, ~=, build, iterate, map, size, subscript, to
	./col/mut-list: iterate, mut-list, size
	./col/list: ==, ~=, build, iterate, list, new, size
	./js:
		==, as-js, call-new, call-property, cast, instanceof, js-any, js-global, null,
		set-subscript, subscript, typeof
	./parse:
		/, ~~, bool, exact, float, grammar, lazy, map, quoted-string, separated-by, spaces,
		with-block
	./misc: ==, key, to
	./number: ==, float32, float64, int8, int16, int32, int64, nat8, nat16, nat32, nat64, to
	./option: ??, new, option
	./result: result
	./string: ==, char8, char32, interpolate, join, quote, string, to
	./symbol: ==, <=>, hash-mix, symbol, to
	./tuple: a, b, new

###
JSON data.
###
+json union
	null
	bool bool
	number float64
	string string
	list json[]
	object json[symbol]
+== bool(a json, b json)

+new json(...pairs (symbol, json) array)
	pairs.to object

+to json(a json)
	a
+to json(a bool)
	a bool
+to json(a char8)
	a.to::string to
+to json(a char32)
	a.to::string to
+to json(a nat8)
	a.to::nat64 to
+to json(a nat16)
	a.to::nat64 to
+to json(a nat32)
	a.to::nat64 to
+to json(a nat64)
	a.to::float64 to
+to json(a int8)
	a.to::int64 to
+to json(a int16)
	a.to::int64 to
+to json(a int32)
	a.to::int64 to
+to json(a int64)
	a.to::float64 to
+to json(a float32)
	a.to::float64 to
+to json(a float64)
	a number
+to json(a string)
	a string
+to json(a symbol)
	a.to::string to
+to[t] json(a t array) (json, t) to
	(for x : a; x to) list
+to[t] json(a t[]) (json, t) to
	(for x : a; x to) list
+to[t] json(a t mut[]) (json, t) to
	(for x : a; x to) list
+to[k, v] json(a v[k]) k key, (symbol, k) to, (json, v) to
	(for k, v : a; k.to, v.to) object
to json(a index-set)
	(for x : a; x to) list
+to[t] json(a t?) (json, t) to
	if x ?= a
		(x.to,) list
+to[t, u] json(a (t, u)) (json, t) to, (json, u) to
	(a.a to, a.b to) list
+to[t, u] json(a (t, u) result) (json, t) to, (json, u) to
	match a
	as ok v
		("ok", v to),
	as error e
		("err", e to),

+symbol symbol?(a json)
	a.string?.to

###
If `a` is an `object` containing the key `key`, returns the associated value.
Returns `null` if:
* `a` is not an object
* `a` is an object but does not have `key`.
* `a` is an object with the key, and its value is `null`.

Most code does not care about this distinction.
If you do, you can test `if obj ?= a object` and `if value ?= object[key]`.
###
+subscript json(a json, key symbol)
	a.object?[key] ?? null

# `x.bool-or-null` is like `x.bool`, but treats `null` as `false`.
+bool-or-null bool?(a json)
	a == null ? false, : a.bool

# `x.list-or-null` is like `x.list`, but treats `null` as an empty list.
+list-or-null json[]?(a json)
	a == null ? (), : a.list

+json json grammar()
	spaces ~~ json-inner ~~ spaces
-json-inner json grammar()
	with : lazy
		(json-object map x => x.object) / (json-list map x => x.list) / json-primitive
-json-object json[symbol] grammar()
	quoted-symbol symbol grammar = quoted-string map s => s.to
	pair (symbol, json) grammar = quoted-symbol ~~ spaces ~~ ":" ~~ spaces ~~ json
	pairs (symbol, json)[] grammar = pair separated-by "," ~~ spaces
	pairs2 json[symbol] grammar = pairs map x => x to
	"\{" ~~ spaces ~~ pairs2 ~~ spaces ~~ "}"
-json-list json[] grammar()
	"[" ~~ spaces ~~ (json separated-by "," ~~ spaces) ~~ spaces ~~ "]"
-json-primitive json grammar()
	literal json grammar = (bool map x => x to) / ("null" exact null)
	(quoted-string map x => x.to) / (float map x => x.to) / literal

# Renders a json value to JSON.
+to string(a json)
	match a
	as null
		"null"
	as bool b
		"{b}"
	as number f
		"{f}"
	as string s
		s quote
	as list xs
		parts = "," join for x : xs; "{x}"
		"[{parts}]"
	as object o
		parts = "," join for k, v : o
			"{k.to quote}:{v}"
		"\{{parts}}"

# Converts from a json value to the corresponding JS object
+to js-any(a json) trusted, js extern
	match a
	as null
		null
	as bool x
		x as-js
	as number x
		x as-js
	as string x
		x as-js
	as list xs
		(for x : xs; x to)::(js-any array) as-js
	as object x
		res = "Object".js-global call-new
		for key, value : x
			res[key] := value
		res

# Converts a JS object to the corresponding JSON value.
# This does not fail on bad JS values, it just returns 'null'.
+to json(a js-any) unsafe, js extern
	match a typeof
	as boolean
		a.cast::bool to
	as number
		a.cast::float64 to
	as string
		a.cast::string to
	as object
		if a == null
			null
		elif a instanceof "Array".js-global
			a.cast::(js-any array) to
		else
			entries js-any array = "Object".js-global call-property "entries", a cast
			map json[symbol] = for entry : entries
				entry[0::nat64].cast::string.to, entry[1::nat64].to
			map to
	else
		null

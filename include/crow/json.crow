no-std
import
	./bool: ==, bool, false, new, true
	./col/arr: arr, arr-equal, is-empty, new
	./col/arr-util: each
	./col/dict: dict, dict-equal, each, is-empty, new, subscript
	./col/mut-dict: move-to-dict, mut-dict, new, set-subscript
	./col/mut-arr: ~=, move-to-arr, mut-arr, new
	./hash: hash-mix
	./misc: new, void
	./number: ==, float64
	./opt: new, opt
	./reader:
		reader, skip-whitespace, try-take-char, take-float, take-quoted-str, try-take-str, with-reader
	./str: ==, <=>, str
	./test-util: is
	./tuple: new
	./writer: ~=, backup, move-to-str, new, writer, write-quoted-str

json union
	json-bool bool
	json-number float64
	json-str str
	json-arr json[]
	json-object json[str]

== bool(a json, b json)
	match a
	as json-bool ba
		if bb ?= b as-bool
			ba == bb
	as json-number fa
		if fb ?= b as-number
			fa == fb
	as json-str sa
		if sb ?= b as-str
			sa == sb
	as json-arr aa
		if ab ?= b as-arr
			aa arr-equal ab, (x, y) =>
				x == y
	as json-object oa
		if ob ?= b as-object
			oa dict-equal ob

# TODO: opt equality should be generic
== bool(a json?, b json?)
	if va ?= a
		if vb ?= b
			va == vb

as-bool bool?(a json) noctx
	match a
	as json-bool b
		b,
	as json-number _
		()
	as json-str _
		()
	as json-arr _
		()
	as json-object _
		()
as-number float64?(a json) noctx
	match a
	as json-bool _
		()
	as json-number n
		n,
	as json-str _
		()
	as json-arr _
		()
	as json-object _
		()
as-str str?(a json) noctx
	match a
	as json-bool _
		()
	as json-number _
		()
	as json-str s
		s,
	as json-arr _
		()
	as json-object _
		()
as-arr json[]?(a json) noctx
	match a
	as json-bool _
		()
	as json-number _
		()
	as json-str _
		()
	as json-arr arr
		arr,
	as json-object _
		()
as-object json[str]?(a json) noctx
	match a
	as json-bool _
		()
	as json-number _
		()
	as json-str _
		()
	as json-arr _
		()
	as json-object o
		o,

subscript json?(a json, key str)
	if o ?= a.as-object
		o[key]

parse-json json?(a str)
	a with-reader r =>
		res = r take-json
		r skip-whitespace
		res

to-str str(a json)
	res writer = ()
	res to-str-recur a
	res move-to-str

.to-str-recur void(out writer, a json)
	match a
	as json-bool b
		out ~= b
	as json-number f
		out ~= f
	as json-str s
		out write-quoted-str s
	as json-arr xs
		out ~= "["
		xs each x =>
			out to-str-recur x
			out ~= ","
		unless xs is-empty
			out backup
		out ~= "]"
	as json-object o
		out ~= "\{"
		o each (key, value) =>
			out write-quoted-str key
			out ~= ":"
			out to-str-recur value
			out ~= ","
		unless o is-empty
			out backup
		out ~= "}"

take-json json?(a reader)
	a skip-whitespace
	if f ?= a take-float
		f.json-number,
	elif a try-take-str "true"
		true.json-bool,
	elif a try-take-str "false"
		false.json-bool,
	elif s ?= a take-quoted-str
		s.json-str,
	elif a try-take-char "["
		a skip-whitespace
		if a try-take-char "]"
			().json-arr,
		else
			a take-arr-recur ()
	elif a try-take-char "\{"
		a skip-whitespace
		if a try-take-char "}"
			().json-object,
		else
			a take-object-recur ()

.take-arr-recur json?(a reader, res json mut[])
	if j ?= a take-json
		res ~= j
		a skip-whitespace
		if a try-take-char ","
			a skip-whitespace
			a take-arr-recur res
		elif a try-take-char "]"
			res.move-to-arr.json-arr,

.take-object-recur json?(a reader, res json mut[str])
	if key ?= a take-quoted-str
		a skip-whitespace
		if a try-take-char ":"
			if j ?= a take-json
				res[key] := j
				a skip-whitespace
				if a try-take-char ","
					a skip-whitespace
					a take-object-recur res
				elif a try-take-char "}"
					res.move-to-dict.json-object,
				else
					a take-object-recur res

.verify void(a json, s str)
	s.parse-json is (a,)
	a.to-str is s

test
	true.json-bool verify "true"
	false.json-bool verify "false"
	-3.0.json-number verify "-3"
	1.5.json-number verify "1.5"
	-1.5.json-number verify "-1.5"
	"j".json-str verify "\"j\""
	"a\nb".json-str verify "\"a\\nb\""

	().json-arr verify "[]"
	(1.0.json-number,).json-arr verify "[1]"
	(1.0.json-number, true.json-bool).json-arr verify "[1,true]"

	().json-object verify "\{}"
	(("a", 1.0.json-number),).json-object verify "\{\"a\":1}"
	(("a", 1.0.json-number), ("x\ny", true.json-bool)).json-object verify "\{\"a\":1,\"x\\ny\":true}"

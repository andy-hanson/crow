no-std
import
	./bool: ==, bool, false, new, true
	./col/array: array, iterate, size
	./col/collection: for-loop, join
	./col/experimental/index-set: iterate, index-set, size
	./col/map: ==, ~=, build, iterate, map, size, subscript, to
	./col/mut-list: iterate, mut-list, size
	./col/list: ==, ~=, build, iterate, list, new, size
	./parse:
		/, ~~, bool, exact, float, grammar, lazy, map, quoted-string, separated-by, spaces,
		with-block
	./misc: to
	./number: ==, float32, float64, int8, int16, int32, int64, nat8, nat16, nat32, nat64, to
	./option: ??, new, option
	./result: result
	./string: ==, ~~, char8, new, quote, string, to
	./symbol: ==, <=>, hash-mix, symbol, to
	./tuple: a, b, new

###
JSON data.
###
+json union
	json-null
	json-bool bool
	json-number float64
	json-string string
	json-list json[]
	json-object json[symbol]

+null json()
	json-null

+new json(...pairs (symbol, json) array)
	pairs.to json-object

+to json(a json)
	a
+to json(a bool)
	a.json-bool
+to json(a char8)
	a.to::string to
+to json(a nat8)
	a.to::nat64 to
+to json(a nat16)
	a.to::nat64 to
+to json(a nat32)
	a.to::nat64 to
+to json(a nat64)
	a.to::float64 to
+to json(a int8)
	a.to::int64 to
+to json(a int16)
	a.to::int64 to
+to json(a int32)
	a.to::int64 to
+to json(a int64)
	a.to::float64 to
+to json(a float32)
	a.to::float64 to
+to json(a float64)
	a json-number
+to json(a string)
	a json-string
+to json(a symbol)
	a.to::string to
+to[t] json(a t array) (json, t) to
	(for x : a; x to) json-list
+to[t] json(a t[]) (json, t) to
	(for x : a; x to) json-list
+to[t] json(a t mut[]) (json, t) to
	(for x : a; x to) json-list
+to[t] json(a t[symbol]) (json, t) to
	(for k, v : a; k, v.to) json-object
to json(a index-set)
	(for x : a; x to) json-list
+to[t] json(a t?) (json, t) to
	if x ?= a
		(x.to,) json-list
+to[t, u] json(a (t, u)) (json, t) to, (json, u) to
	(a.a to, a.b to) json-list
+to[t, u] json(a (t, u) result) (json, t) to, (json, u) to
	match a
	as ok v
		("ok", v to),
	as error e
		("err", e to),

+== bool(a json, b json)
	match a
	as json-null
		b is-null
	as json-bool ba
		if bb ?= b as-bool
			ba == bb
	as json-number fa
		if fb ?= b as-number
			fa == fb
	as json-string sa
		if sb ?= b as-string
			sa == sb
	as json-list aa
		if ab ?= b as-list
			aa == ab
	as json-object oa
		if ob ?= b as-object
			oa == ob

+is-null bool(a json) bare
	match a
	as json-null
		true
	as json-bool _
		false
	as json-number _
		false
	as json-string _
		false
	as json-list _
		false
	as json-object _
		false

# If `a` is a boolean, returns that, else returns an empty option.
+as-bool bool?(a json) bare
	match a
	as json-null
		()
	as json-bool b
		b,
	as json-number _
		()
	as json-string _
		()
	as json-list _
		()
	as json-object _
		()
# If `a` is a number, returns that, else returns an empty option.
+as-number float64?(a json) bare
	match a
	as json-null
		()
	as json-bool _
		()
	as json-number n
		n,
	as json-string _
		()
	as json-list _
		()
	as json-object _
		()
###
If `a` is a string, returns that, else returns an empty option.

This does not render as JSON; `to::string` does that.
###
+as-string string?(a json) bare
	match a
	as json-null
		()
	as json-bool _
		()
	as json-number _
		()
	as json-string s
		s,
	as json-list _
		()
	as json-object _
		()
+as-symbol symbol?(a json)
	if x ?= a.as-string
		x.to,
# If `a` is a list, returns that, else returns an empty option.
+as-list json[]?(a json) bare
	match a
	as json-null
		()
	as json-bool _
		()
	as json-number _
		()
	as json-string _
		()
	as json-list x
		x,
	as json-object _
		()
# If `a` is an object, returns that, else returns an empty option.
+as-object json[symbol]?(a json) bare
	match a
	as json-null
		()
	as json-bool _
		()
	as json-number _
		()
	as json-string _
		()
	as json-list _
		()
	as json-object o
		o,

+as-bool-allow-null bool?(a json)
	if a is-null
		false,
	else
		a as-bool

+as-list-allow-null json[]?(a json)
	if a is-null
		(),
	else
		a as-list

+as-string-allow-null string?(a json)
	if a is-null
		"",
	else
		a as-string

###
If `a` is an `object` containing the key `key`, returns the associated value.
Else, returns null.
###
+subscript json(a json, key symbol)
	if o ?= a as-object
		o[key] ?? json-null

+json json grammar()
	spaces ~~ json-inner ~~ spaces
-json-inner json grammar()
	with : lazy
		(json-object map x => x.json-object) / (json-list map x => x.json-list) / json-primitive
-json-object json[symbol] grammar()
	quoted-symbol symbol grammar = quoted-string map s => s.to
	pair (symbol, json) grammar = quoted-symbol ~~ spaces ~~ ":" ~~ spaces ~~ json
	pairs (symbol, json)[] grammar = pair separated-by "," ~~ spaces
	pairs2 json[symbol] grammar = pairs map x => x to
	"\{" ~~ spaces ~~ pairs2 ~~ spaces ~~ "}"
-json-list json[] grammar()
	"[" ~~ spaces ~~ (json separated-by "," ~~ spaces) ~~ spaces ~~ "]"
-json-primitive json grammar()
	literal json grammar = (bool map x => x to) / ("null" exact null)
	(quoted-string map x => x.to) / (float map x => x.to) / literal

# Renders a json value to JSON.
+to string(a json)
	match a
	as json-null
		"null"
	as json-bool b
		"{b}"
	as json-number f
		"{f}"
	as json-string s
		s quote
	as json-list xs
		parts = "," join for x : xs; "{x}"
		"[{parts}]"
	as json-object o
		parts = "," join for k, v : o
			"{k.to quote}:{v}"
		"\{{parts}}"

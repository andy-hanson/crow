no-std
import
	./bool: !, ==, bool, false, true
	./col/arr: arr, arr-equal, is-empty
	./col/arr-util: each
	./col/dict: dict, dict-equal, each, is-empty
	./col/mut-dict: move-to-dict!, mut-dict, set-subscript
	./col/mut-arr: ~=, move-to-arr!, mut-arr
	./hash: hash-mix
	./misc: ->, void
	./number: ==, float64
	./opt: none, opt, some
	./reader:
		reader, skip-whitespace!, try-take-char, take-float!, take-quoted-str!, try-take-str, with-reader
	./str: ==, <=>, str
	./test: is
	./writer: ~=, backup!, move-to-str!, writer, write-quoted-str!

json union
	json-bool bool
	json-number float64
	json-str str
	json-arr json[]
	json-object json[str]

== bool(a json, b json)
	match a
	as json-bool ba
		if bb ?= b as-bool
			ba == bb
		else
			false
	as json-number fa
		if fb ?= b as-number
			fa == fb
		else
			false
	as json-str sa
		if sb ?= b as-str
			sa == sb
		else
			false
	as json-arr aa
		if ab ?= b as-arr
			aa arr-equal ab, (x, y) =>
				x == y
		else
			false
	as json-object oa
		if ob ?= b as-object
			oa dict-equal ob
		else
			false

# TODO: opt equality should be generic
== bool(a json?, b json?)
	if va ?= a
		if vb ?= b
			va == vb
		else
			false
	else
		false

as-bool bool?(a json) noctx
	match a
	as json-bool b
		b some
	as json-number _
		none
	as json-str _
		none
	as json-arr _
		none
	as json-object _
		none
as-number float64?(a json) noctx
	match a
	as json-bool _
		none
	as json-number n
		n some
	as json-str _
		none
	as json-arr _
		none
	as json-object _
		none
as-str str?(a json) noctx
	match a
	as json-bool _
		none
	as json-number _
		none
	as json-str s
		s some
	as json-arr _
		none
	as json-object _
		none
as-arr json[]?(a json) noctx
	match a
	as json-bool _
		none
	as json-number _
		none
	as json-str _
		none
	as json-arr arr
		arr some
	as json-object _
		none
as-object json[str]?(a json) noctx
	match a
	as json-bool _
		none
	as json-number _
		none
	as json-str _
		none
	as json-arr _
		none
	as json-object o
		o some

parse-json json?(a str)
	a with-reader r => r take-json!

to-str str(a json)
	res = writer
	res to-str-recur! a
	res move-to-str!

.to-str-recur! void(out writer, a json)
	match a
	as json-bool b
		out ~= b
	as json-number f
		out ~= f
	as json-str s
		out write-quoted-str! s
	as json-arr xs
		out ~= "["
		xs each x =>
			out to-str-recur! x
			out ~= ","
		if !xs.is-empty
			out backup!
		out ~= "]"
	as json-object o
		out ~= "\{"
		o each (key, value) =>
			out write-quoted-str! key
			out ~= ":"
			out to-str-recur! value
			out ~= ","
		if !o.is-empty
			out backup!
		out ~= "}"

take-json! json?(a reader)
	a skip-whitespace!
	if f ?= a take-float!
		f.json-number some
	elif a try-take-str "true"
		true.json-bool some
	elif a try-take-str "false"
		false.json-bool some
	elif s ?= a take-quoted-str!
		s.json-str some
	elif a try-take-char "["
		a skip-whitespace!
		if a try-take-char "]"
			[].json-arr some
		else
			a take-arr-recur! mut-arr
	elif a try-take-char "\{"
		a skip-whitespace!
		if a try-take-char "}"
			dict.json-object some
		else
			a take-object-recur! mut-dict

.take-arr-recur! json?(a reader, res json mut[])
	if j ?= a take-json!
		res ~= j
		a skip-whitespace!
		if a try-take-char ","
			a skip-whitespace!
			a take-arr-recur! res
		elif a try-take-char "]"
			res.move-to-arr!.json-arr some

.take-object-recur! json?(a reader, res json mut[str])
	if key ?= a take-quoted-str!
		a skip-whitespace!
		if a try-take-char ":"
			if j ?= a take-json!
				res[key] := j
				a skip-whitespace!
				if a try-take-char ","
					a skip-whitespace!
					a take-object-recur! res
				elif a try-take-char "}"
					res.move-to-dict!.json-object some
				else
					a take-object-recur! res

.verify void(a json, s str)
	s.parse-json is a.some
	a.to-str is s

test
	true.json-bool verify "true"
	false.json-bool verify "false"
	-3.0.json-number verify "-3"
	1.5.json-number verify "1.5"
	-1.5.json-number verify "-1.5"
	"j".json-str verify "\"j\""
	"a\nb".json-str verify "\"a\\nb\""

	[].json-arr verify "[]"
	[1.0.json-number].json-arr verify "[1]"
	[1.0.json-number, true.json-bool].json-arr verify "[1,true]"

	dict.json-object verify "\{}"
	["a" -> 1.0.json-number].dict.json-object verify "\{\"a\":1}"
	["a" -> 1.0.json-number, "x\ny" -> true.json-bool].dict.json-object verify "\{\"a\":1,\"x\\ny\":true}"

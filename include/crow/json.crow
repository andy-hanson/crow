no-std
import
	./bool: ==, bool, false, new, true
	./col/array: array
	./col/dict: dict, dict-equal, for-loop, new, subscript, to-dict
	./col/list: for-loop, list, list-equal, new, to-list
	./col/mut-dict: move-to-dict, mut-dict, new, set-subscript
	./col/mut-list: ~=, move-to-list, mut-list, new
	./misc: void
	./number: ==, float64, int64, nat64, to-float64
	./opt: new, opt
	./reader:
		reader, skip-whitespace, try-take-char, take-float, take-quoted-str, try-take-str, with-reader
	./str: ==, <=>, ~~, hash-mix, literal, str
	./str-conv: to-str
	./str-util: join, quote
	./test-util: is
	./tuple: new, pair

###
JSON data.

This can be the result of parsing or the input to `to-str`.
###
json union
	json-bool bool
	json-number float64
	json-str str
	json-list json[]
	json-object json[str]

new json(...pairs array (str, json))
	pairs.to-list.to-dict json-object

json<a> spec
	json json(a a)

json json(a bool)
	a.json-bool
json json(a nat64)
	a.to-float64 json
json json(a int64)
	a.to-float64 json
json json(a float64)
	a json-number
json json(a str)
	a json-str
json<a> json(a a[]) json<a>
	(for x : a; x json) json-list

###
True iff the two values are deeply equal.

This is equivalent to `a.to-str == b.to-str`.
###
== bool(a json, b json)
	match a
	as json-bool ba
		if bb ?= b as-bool
			ba == bb
	as json-number fa
		if fb ?= b as-number
			fa == fb
	as json-str sa
		if sb ?= b as-str
			sa == sb
	as json-list aa
		if ab ?= b as-list
			aa list-equal ab
	as json-object oa
		if ob ?= b as-object
			oa dict-equal ob

# TODO: opt equality should be generic
== bool(a json?, b json?) no-doc
	if va ?= a
		if vb ?= b
			va == vb

# If `a` is a boolean, returns that, else returns an empty option.
as-bool bool?(a json) noctx
	match a
	as json-bool b
		b,
	as json-number _
		()
	as json-str _
		()
	as json-list _
		()
	as json-object _
		()
# If `a` is a number, returns that, else returns an empty option.
as-number float64?(a json) noctx
	match a
	as json-bool _
		()
	as json-number n
		n,
	as json-str _
		()
	as json-list _
		()
	as json-object _
		()
###
If `a` is a string, returns that, else returns an empty option.

This does not render as JSON; `to-str` does that.
###
as-str str?(a json) noctx
	match a
	as json-bool _
		()
	as json-number _
		()
	as json-str s
		s,
	as json-list _
		()
	as json-object _
		()
# If `a` is a list, returns that, else returns an empty option.
as-list json[]?(a json) noctx
	match a
	as json-bool _
		()
	as json-number _
		()
	as json-str _
		()
	as json-list x
		x,
	as json-object _
		()
# If `a` is an object, returns that, else returns an empty option.
as-object json[str]?(a json) noctx
	match a
	as json-bool _
		()
	as json-number _
		()
	as json-str _
		()
	as json-list _
		()
	as json-object o
		o,

###
If `a` is an `object` containing the key `key`, returns the associated value.
Else, returns an empty option.
###
subscript json?(a json, key str)
	if o ?= a.as-object
		o[key]

###
Parse a JSON string.

The parser is strict and does not support trailing commas, comments, keys without quotes, etc.
###
parse-json json?(a str)
	a with-reader r =>
		res = r take-json
		r skip-whitespace
		res

# Renders a json value to JSON.
to-str str(a json)
	match a
	as json-bool b
		"{b}"
	as json-number f
		"{f}"
	as json-str s
		s quote
	as json-list xs
		parts = "," join for x : xs; "{x}"
		"[{parts}]"
	as json-object o
		parts = "," join for k, v : o
			"{k quote}:{v}"
		"\{{parts}}"

###
Takes a JSON value from the start of a reader.

If there is a parse error, this will leave the reader at the location of the parse error.

This skips leading but not trailing whitespace.
###
take-json json?(a reader)
	a skip-whitespace
	if f ?= a take-float
		f.json-number,
	elif a try-take-str "true"
		true.json-bool,
	elif a try-take-str "false"
		false.json-bool,
	elif s ?= a take-quoted-str
		s.json-str,
	elif a try-take-char "["
		a skip-whitespace
		if a try-take-char "]"
			().json-list,
		else
			a take-list-recur ()
	elif a try-take-char "\{"
		a skip-whitespace
		if a try-take-char "}"
			().json-object,
		else
			a take-object-recur ()

.take-list-recur json?(a reader, res json mut[])
	if j ?= a take-json
		res ~= j
		a skip-whitespace
		if a try-take-char ","
			a skip-whitespace
			a take-list-recur res
		elif a try-take-char "]"
			res.move-to-list.json-list,

.take-object-recur json?(a reader, res json mut[str])
	if key ?= a take-quoted-str
		a skip-whitespace
		if a try-take-char ":"
			if j ?= a take-json
				res[key] := j
				a skip-whitespace
				if a try-take-char ","
					a skip-whitespace
					a take-object-recur res
				elif a try-take-char "}"
					res.move-to-dict.json-object,
				else
					a take-object-recur res

.verify void(a json, s str)
	s.parse-json is (a,)
	a.to-str is s

test
	true.json-bool verify "true"
	false.json-bool verify "false"
	-3.0.json-number verify "-3"
	1.5.json-number verify "1.5"
	-1.5.json-number verify "-1.5"
	"j".json-str verify "\"j\""
	"a\nb".json-str verify "\"a\\nb\""
	"a\\nb".json-str verify "\"a\\\\nb\""

	().json-list verify "[]"
	(1.0.json-number,).json-list verify "[1]"
	(1.0.json-number, true.json-bool).json-list verify "[1,true]"

	().json-object verify "\{}"
	(("a", 1.0.json-number),).json-object verify "\{\"a\":1}"
	(("a", 1.0.json-number), ("x\ny", true.json-bool)).json-object verify "\{\"a\":1,\"x\\ny\":true}"

no-std
import
	../bool: ||, bool, false, true
	../compare: !=, <, <=, compare, comparison, equal
	../fun-util: subscript
	../number: ==, <=>, +, -, nat64
	../option: new, option
	../private/bootstrap: new
	../private/range-low-level: ..
	../pointer: ==, +, *, const-pointer
	../tuple: a, b, new, tuple2
	./collection: .., build, end, sequence-compare, sequence-equal, subscript, with-block
export
	../private/bootstrap: array, begin-pointer, size
	./private/array-low-level:
		~=, ~~=, array-builder, array-cast, array-reference-equal, as-array, build, end-pointer,
		iterate, pointers, size, subscript

# Create an array with the given elements.
+new[t] t array(...a t array) noctx
	a

# `true` iff `a.size == 0`.
+is-empty[t] bool(a t array) noctx
	a.size == 0

###
Prepend an element to an array.
This is O(n).
###
+~[t] t array(a t, b t array)
	(a,) ~~ b

###
Append an element to an array.
This is O(n).
###
+~[t] t array(a t array, b t)
	a ~~ (b,)

###
Concatenates two arrays.
This is O(n).

If you need concatenate many arrays, use a `mut[]` to accumulate elements, then call `move-to-array`.
###
+~~[t] t array(a t array, b t array)
	if a is-empty
		b
	elif b is-empty
		a
	else
		with out : a.size + b.size build
			out ~~= a
			out ~~= b

+==[t] bool(a t array, b t array) noctx, t equal
	(trusted a array-reference-equal b) || a sequence-equal b

+<=>[t] comparison(a t array, b t array) noctx, t compare
	if trusted a array-reference-equal b
		equal
	else
		a sequence-compare b


# region basic array operations

###
Returns a new array like `a` but where `a[index]` is `new-value`.
This is O(n).

`index` must be a valid index into `a`. This can't be used to add a value to the end.
###
+update-at[t] t array(a t array, index nat64, new-value t)
	assert index < a.size : "index out of bounds"
	# TODO:PERF (only concat once)
	a[0 .. index] ~ new-value ~~ a[index + 1 .. end]

###
Inserts an element at index `index`, all elements there and after to the right.
Unlike for `update-at`, `index` can be `a.size`, though it still can't be higher.
###
+insert-at[t] t array(a t array, index nat64, value t)
	assert index <= a.size : "index out of bounds"
	# TODO:PERF (only concat once)
	a[0 .. index] ~ value ~~ a[index .. end]

# Removes the element at index `index`, shifting all later elements to the left.
+remove-at[t] t array(a t array, index nat64)
	assert index < a.size : "index out of bounds"
	a[0 .. index] ~~ a[index + 1 .. end]

###
Returns a pointer to the first element equal to `value`.
Returns an empty option iff `value` is not in the array.
###
pointer-of[t] t*?(a t array, value t) noctx, unsafe, t equal
	cur mut = a begin-pointer
	end = a end-pointer
	loop
		if cur == end
			break
		elif *cur == value
			break cur,
		else
			cur +:= 1
			continue

region spec impls (see collection.crow)

###
Equivalent to calling `f[a[0], 0]`, `f[a[1], 1]`, etc.

Calls `f` for each element in `a`, also providing the index.
###
+iterate[t] bool(a t array, f act bool(nat64, t))
	iter mut = a begin
	loop
		if pair ?= iter next
			if f[iter.next-index, pair.a]
				break true
			else
				iter := pair b
				continue
		else
			break false

subregion iterator

+array-iterator[t] record by-val
	collection t array
	next-index nat64

+==[t] bool(a t array-iterator, b t array-iterator) t equal
	assert a.collection == b.collection : "can't compare iterators from different arrays"
	a.next-index == b.next-index
+<=>[t] comparison(a t array-iterator, b t array-iterator) t equal
	assert a.collection == b.collection : "can't compare iterators from different arrays"
	a.next-index <=> b.next-index


+-[t] t array-iterator(a t array-iterator, n nat64) noctx
	a.collection, a.next-index - n

+-[t] nat64(a t array-iterator, b t array-iterator) noctx
	a.next-index - b.next-index

+ +[t] t array-iterator(a t array-iterator, n nat64) noctx
	new-index = a.next-index + n
	assert new-index <= a.collection.size
	a.collection, new-index

+begin[t] t array-iterator(a t array) noctx
	a, 0

+end[t] t array-iterator(a t array) noctx
	a, a.size

+prev[t] (t array-iterator, t)?(a t array-iterator) noctx
	if a.next-index != 0
		new-index = a.next-index - 1
		assert new-index < a.collection.size
		value = trusted *(a.collection.begin-pointer + new-index)
		rest t array-iterator = a.collection, new-index
		(rest, value),

+next[t] (t, t array-iterator)?(a t array-iterator) noctx
	if a.next-index != a.collection.size
		assert a.next-index < a.collection.size
		value = trusted *(a.collection.begin-pointer + a.next-index)
		rest t array-iterator = a.collection, a.next-index + 1
		(value, rest),

+slice[t] t array(begin t array-iterator, end t array-iterator) noctx
	assert begin.next-index <= end.next-index
	assert end.next-index <= begin.collection.size : "slice out of bounds"
	trusted end.next-index - begin.next-index, begin.collection.begin-pointer + begin.next-index

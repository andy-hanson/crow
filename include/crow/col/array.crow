no-std
import
	../bool: ||, bool
	../compare: !=, <, <=, compare, comparison, equal
	../js: as-js-any, as-t, call-property, get
	../number: ==, <=>, +, -, float64, nat64, to
	../option: new, option
	../private/bootstrap: array-size, new-array, todo
	../private/range-low-level: ..
	../pointer: +, subscript
	../range: high, low, range, size
	../tuple: new
	./collection:
		.., build, end, index-too-big, iterator-not-comparable, sequence-compare, sequence-equal,
		subscript, with-block
export
	../private/bootstrap: array
	./private/array-low-level:
		~=, ~~=, array-builder, array-cast, array-reference-equal, as-array, begin-pointer, build,
		end-pointer, iterate, pointers, size, subscript

# Create an array with the given elements.
+new[t] t array(...a t array) bare
	a

+size[t] nat64(a t array) bare
	a array-size

# `true` iff `a.size == 0`.
+is-empty[t] bool(a t array) bare
	a.size == 0

+subscript[t] t(a t array, index nat64) bare, trusted
	assert index < a.size : index index-too-big a.size
	if extern native
		a.begin-pointer[index]
	elif extern js
		a.as-js-any get index as-t
	else
		todo
+subscript[t] t array(a t array, indices nat64 range) bare
	assert indices.high <= a.size : indices.high index-too-big a.size
	trusted if extern native
		indices.size new-array a.begin-pointer + indices.low
	elif extern js
		a.as-js-any call-property "slice", indices.low.to::float64, indices.high.to::float64 as-t
	else
		todo

###
Prepend an element to an array.
This is O(n).
###
+~[t] t array(a t, b t array)
	(a,) ~~ b

###
Append an element to an array.
This is O(n).
###
+~[t] t array(a t array, b t)
	a ~~ (b,)

###
Concatenates two arrays.
This is O(n).

If you need concatenate many arrays, use a `mut[]` to accumulate elements,
then call `move-to-array`.
###
+~~[t] t array(a t array, b t array)
	if a is-empty
		b
	elif b is-empty
		a
	else
		with out : a.size + b.size build
			out ~~= a
			out ~~= b

+==[t] bool(a t array, b t array) bare, t equal
	(trusted a array-reference-equal b) || a sequence-equal b

+<=>[t] comparison(a t array, b t array) bare, t compare
	if trusted a array-reference-equal b
		equal
	else
		a sequence-compare b


# region basic array operations

###
Returns a new array like `a` but where `a[index]` is `new-value`.
This is O(n).

`index` must be a valid index into `a`. This can't be used to add a value to the end.
###
+update-at[t] t array(a t array, index nat64, new-value t)
	assert index < a.size : index index-too-big a.size
	# TODO:PERF (only concat once)
	a[0 .. index] ~ new-value ~~ a[index + 1 .. end]

###
Inserts an element at index `index`, all elements there and after to the right.
Unlike for `update-at`, `index` can be `a.size`, though it still can't be higher.
###
+insert-at[t] t array(a t array, index nat64, value t)
	assert index <= a.size : index index-too-big a.size
	# TODO:PERF (only concat once)
	a[0 .. index] ~ value ~~ a[index .. end]

# Removes the element at index `index`, shifting all later elements to the left.
+remove-at[t] t array(a t array, index nat64)
	assert index < a.size : index index-too-big a.size
	a[0 .. index] ~~ a[index + 1 .. end]

region spec impls (see collection.crow)

+array-iterator[t] record(collection t array, next-index nat64) by-val

+==[t] bool(a t array-iterator, b t array-iterator) t equal
	assert a.collection == b.collection : iterator-not-comparable
	a.next-index == b.next-index
+<=>[t] comparison(a t array-iterator, b t array-iterator) t equal
	assert a.collection == b.collection : iterator-not-comparable
	a.next-index <=> b.next-index


+-[t] t array-iterator(a t array-iterator, n nat64) bare
	a.collection, a.next-index - n

+-[t] nat64(a t array-iterator, b t array-iterator) bare
	a.next-index - b.next-index

+ +[t] t array-iterator(a t array-iterator, n nat64) bare
	new-index = a.next-index + n
	assert new-index <= a.collection.size
	a.collection, new-index

+begin[t] t array-iterator(a t array) bare
	a, 0

+end[t] t array-iterator(a t array) bare
	a, a.size

+prev[t] (t array-iterator, t)?(a t array-iterator) bare
	guard a.next-index != 0
	new-index = a.next-index - 1
	assert new-index < a.collection.size
	value = a.collection[new-index]
	rest t array-iterator = a.collection, new-index
	(rest, value),

+next[t] (t, t array-iterator)?(a t array-iterator) bare
	guard a.next-index != a.collection.size
	assert a.next-index < a.collection.size
	value = a.collection[a next-index]
	rest t array-iterator = a.collection, a.next-index + 1
	(value, rest),

+slice[t] t array(begin t array-iterator, end t array-iterator) bare
	begin.collection[begin.next-index .. end.next-index]

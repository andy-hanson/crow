no-std
import
	../bool: !, bool, false, true
	../compare: compare
	../fun: subscript
	../misc: ->, data, from, void
	../number: nat64
	../opt: is-empty
	./arr: arr
	./arr-util: each, map
	./mut-dict:
		each, empty!, filter, filter!, fold, in, is-empty, map, map!, move-to-arr!, mut-dict,
		remove-key!, set-subscript, size, subscript
	./set: set

###
Mutable sorted set of unique values.
This is like a `set` but mutable, or like a `mut-dict` with no values.
Unlike `mut-list`, values are in sorted order, not insertion order,
and it never stores two of the same value.
###
mut-set<a> record mut
	# TODO:PRIVATE
	ignore void
	inner mut-dict<a, void>

# New empty `mut-set`.
mut-set<a> mut-set a() data<a> compare<a>
	mut-set: void, mut-dict

###
Copies the arr to a new mut-set.
Result won't include any duplicated elements.
###
mut-set<a> mut-set a(a a[]) data<a> compare<a>
	mut-set: void, a map (x => x -> void) mut-dict

# True iff the set has no elements.
is-empty<a> bool(a mut-set a) data<a> compare<a>
	a.inner is-empty

# Removes all elements.
empty!<a> void(a mut-set a) data<a> compare<a>
	a.inner empty!

# Number of values in the set.
size<a> nat64(a mut-set a) data<a> compare<a>
	a.inner size

# True iff the value is in the set.
subscript<a> bool(a mut-set a, value a) data<a> compare<a>
	value in a

in<a> bool(value a, a mut-set a) data<a> compare<a>
	!a.inner[value].is-empty

###
Adds a value to the set.
Does nothing if the value is already in the set.
###
~= <a> void(a mut-set a, value a) data<a> compare<a>
	a.inner[value] := void

# Adds multiple values to the set.
~= <a> void(a mut-set a, values a[]) data<a> compare<a>
	values each value =>
		a ~= value

try-add!<a> bool(a mut-set a, value a) data<a> compare<a>
	# TODO:PERF do it without two lookups
	if value in a.inner
		false
	else
		a.inner[value] := void
		true

###
Removes a value from the set.
If the value was present, removes it and returns `true`.
If the value was not present, does nothing and returns `false`.
###
remove!<a> bool(a mut-set a, value a) data<a> compare<a>
	!(a.inner remove-key! value is-empty)

# Convert to an `arr`, clearing the original `mut-set` in the process.
move-to-arr!<a> a[](a mut-set a) data<a> compare<a>
	a.inner.move-to-arr! map pair => pair from

# Convert to a `set`, clearning the original `mut-set` in the process.
move-to-set!<a> set a(a mut-set a) data<a> compare<a>
	set: a.move-to-arr!

region iteration

each<a> void(a mut-set a, f act void(a)) data<a> compare<a>
	a.inner each (k, v) => f[k]

fold<a, b> a(acc a, a mut-set b, f act a(a, b)) data<b> compare<b>
	acc fold a.inner, (cur, k, v) => f[cur, k]

filter<a> mut-set a(a mut-set a, f act bool(a)) data<a> compare<a>
	mut-set: void, a.inner filter (k, v) => f[k]

map<out, in> mut-set out(a mut-set in, f act out(in)) data<in> compare<in> data<out> compare<out>
	mut-set: void, a.inner map (k, v) => f[k] -> void

region mutating iteration

filter!<a> void(a mut-set a, f act bool(a)) data<a> compare<a>
	a.inner filter! (k, v) => f[k]

map!<a> void(a mut-set a, f act a(a)) data<a> compare<a>
	a.inner map! (k, v) => f[k] -> void

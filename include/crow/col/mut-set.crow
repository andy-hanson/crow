no-std
import
	../bool: !, bool, false, true
	../compare: compare
	../hash: hash-mix
	../misc: is-data, void
	../opt: is-empty
	../tuple: new
	./arr: arr
	./arr-util: map
	./mut-dict: ~=, mut-dict, in, to-mut-dict, try-remove-key!

mut-set<a> record mut
	.inner void mut[a]

new<a> mut-set a(...a a[]) is-data<a> compare<a> hash-mix<a>
	(a map (x => x, void)).to-mut-dict,

~= <a> void(a mut-set a, value a) is-data<a> compare<a> hash-mix<a>
	a.inner ~= (value, void)

in<a> bool(value a, a mut-set a) is-data<a> compare<a> hash-mix<a>
	value in a.inner

try-add!<a> bool(a mut-set a, value a) is-data<a> compare<a> hash-mix<a>
	# TODO:PERF do it without two lookups
	if value in a
		false
	else
		a ~= value
		true

try-remove!<a> bool(a mut-set a, value a) is-data<a> compare<a> hash-mix<a>
	!(a.inner try-remove-key! value is-empty)

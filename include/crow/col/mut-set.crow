no-std
import
	../bool: bool, new, not, true
	../fun-util: subscript
	../misc: key, new, void
	../option: is-empty
	../tuple: a, new
	./array: array, iterate, size
	./collection: for-loop
	./list: ~=, build, iterate, list, size
	./mut-dict: ~=, clear, iterate, move-to, mut-dict, in, to, try-remove
	./set: iterate, set, to

###
Mutable unordered set.
###
+mut-set[t] record mut
	-inner void mut[t]

# New set with the given elements (with duplicates removed).
+new[t] t mut-set(...a t array) t key
	pairs (t, void)[] = for x : a; (x, ())
	# TODO: build the mut-dict directly
	pairs.to,

# Copies an immutable set to a mutable set.
+to[t] t mut-set(a t set) t key
	res t mut-set = ()
	for x : a
		res ~= x
	res

# Removes all elements.
+clear[t] void(a t mut-set) t key
	a.inner clear

# Copies elements to a list, and clears the `a`.
+move-to[t] t[](a t mut-set) t key
	for x : a.inner.move-to::(t, void)[]
		x a

# Copies elements to an immuttable set, and clears `a`.
+move-to[t] t set(a t mut-set) t key
	a.move-to::t[] to

###
Adds an element to the set.
Does nothing if `value` is already in the set.
###
+~=[t] void(a t mut-set, value t) t key
	a.inner ~= (value, ())

# TODO: take any iterable
###
Adds many elements to the set.
Ignores values already in the set.
###
+~~=[t] void(a t mut-set, values t[]) t key
	for x : values
		a ~= x

# `true` iff `value` is a value in the set.
+in[t] bool(value t, a t mut-set) t key
	value in a.inner

###
If `value` is already in the set, returns `false`.
Else, adds it and returns `true`.
###
+try-add[t] bool(a t mut-set, value t) t key
	# TODO:PERF do it without two lookups
	unless value in a
		a ~= value
		true

###
If `value` is in the set, return `false`.
Else, remove it and return `true`.
###
+try-remove[t] bool(a t mut-set, value t) t key
	!(a.inner try-remove value is-empty)

# Calls `f` for every element in the set.
+for-loop[t] void(a t mut-set, f act void(t)) t key
	for k, _ : a inner
		f[k]

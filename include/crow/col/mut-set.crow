no-std
import
	../bool: !, bool, new, true
	../compare: compare
	../hash: hash-mix
	../misc: is-data, new, void
	../opt: is-empty
	../tuple: a, new, pair
	./array: array
	./list: for-loop, list, to-list
	./mut-dict: ~=, clear, each-key, move-to-list, mut-dict, in, try-remove, to-mut-dict
	./set: for-loop, set, to-set

###
Mutable unordered set.

This is unordered, so functions like `to-array` and `each` provide elements in arbitrary order.
###
mut-set<a> record mut
	.inner void mut[a]

# New set with the given elements (with duplicates removed).
new<a> mut-set a(...a array a) is-data<a> compare<a> hash-mix<a>
	# TODO: should not need type annotation
	(for x : a.to-list; (x, ()))::(a, void)[].to-mut-dict,

# Copies an immutable set to a mutable set.
to-mut-set<a> mut-set a(a set a) is-data<a> compare<a> hash-mix<a>
	res mut-set a = ()
	for x : a
		res ~= x
	res

# Removes all elements.
clear<a> void(a mut-set a) is-data<a> compare<a> hash-mix<a>
	a.inner clear

# Copies elements to a list, and clears the `a`.
move-to-list<a> a[](a mut-set a) is-data<a> compare<a> hash-mix<a>
	for x : a.inner move-to-list
		x a

# Copies elements to an immuttable set, and clears `a`.
move-to-set<a> set a(a mut-set a) is-data<a> compare<a> hash-mix<a>
	a.move-to-list to-set

###
Adds an element to the set.
Does nothing if `value` is already in the set.
###
~= <a> void(a mut-set a, value a) is-data<a> compare<a> hash-mix<a>
	a.inner ~= (value, ())

###
Adds many elements to the set.
Ignores values already in the set.
###
~~= <a> void(a mut-set a, values a[]) is-data<a> compare<a> hash-mix<a>
	for x : values
		a ~= x

# `true` iff `value` is a value in the set.
in<a> bool(value a, a mut-set a) is-data<a> compare<a> hash-mix<a>
	value in a.inner

###
If `value` is already in the set, returns `false`.
Else, adds it and returns `true`.
###
try-add<a> bool(a mut-set a, value a) is-data<a> compare<a> hash-mix<a>
	# TODO:PERF do it without two lookups
	unless value in a
		a ~= value
		true

###
If `value` is in the set, return `false`.
Else, remove it and return `true`.
###
try-remove<a> bool(a mut-set a, value a) is-data<a> compare<a> hash-mix<a>
	!(a.inner try-remove value is-empty)

# Calls `f` for every element in the set.
for-loop<a> void(a mut-set a, f act void(a)) is-data<a> compare<a> hash-mix<a>
	a.inner each-key f

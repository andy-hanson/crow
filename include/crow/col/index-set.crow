no-std
import
	../bits:
		&, <<, >>, add-bit, has-bit, count-ones, fold-one-bits, high-n-bits, low-n-bits, sub-bit
	../bool: !, &&, ||, ==, bool, false, true
	../compare: !=, <, >, >=, min
	../exception: assert
	../fun: subscript
	../log: info, log
	../misc: as, drop, void
	../opt: is-empty, none, opt, or-default, some
	../ptr: ==, +, *, const-ptr, ptr-to, set-deref
	../range: .., each
	../str: ==, str
	../str-conv: to-hex, to-str
	../test: is
	../writer: ~=, backup!, move-to-str!, new, writer
	../private/bootstrap: hard-assert, hard-unreachable
	../private/number-low-level:
		==, <=>, max-nat64, nat64, unsafe-div, unsafe-mod, wrap-add, wrap-mul, wrap-sub
	./arr: ==, arr, begin-ptr, end-ptr, size, subscript
	./arr-util: fold, fold-with-index
	./fix-arr: begin-ptr, cast-immutable, end-ptr, uninitialized-fix-arr

index-set record
	by-ref
	# This is one more than the highest number that would currently fit in the tree.
	capacity nat64
	root node

.node union
	inner inner-node
	leaf leaf-node
	empty
# TODO: could save space by having separate types for inner node of inner nodes and inner node of leaf-node?
.inner-node record
	by-ref
	a node
	b node
	c node
	d node
.leaf-node record
	by-ref
	a nat64
	b nat64
	c nat64
	d nat64

.values nat64[](a leaf-node) trusted
	a.a.ptr-to.as<nat64*>[0 .. 4]
.bits-in-leaf-node nat64()
	# 64 * 4
	256

new index-set()
	0, empty

index-set index-set(a nat64[])
	() fold a, (acc, x) => acc ~ x

is-empty bool(a index-set)
	a.capacity == 0
.is-empty bool(a node)
	match a
	as inner _
		false
	as leaf _
		false
	as empty
		true

# O(n).
size nat64(a index-set)
	0 size-recur a.root
.size-recur nat64(acc nat64, a node)
	match a
	as inner i
		acc size-recur i.a size-recur i.b size-recur i.c size-recur i.d
	as leaf l
		acc wrap-add l.a.count-ones wrap-add l.b.count-ones wrap-add l.c.count-ones wrap-add l.d.count-ones
	as empty
		acc

arr nat64[](a index-set)
	a map-to-arr (x => x)

in bool(index nat64, a index-set) trusted
	index < a.capacity && index in a.root, a.capacity
# n = capacity of this node
.in bool(index nat64, a node, n nat64) unsafe
	hard-assert: index < n
	match a
	as inner i
		hard-assert: n > bits-in-leaf-node
		half = n unsafe-div 2
		quarter = half unsafe-div 2
		if index < half
			if index < quarter
				index in i.a, quarter
			else
				index wrap-sub quarter in i.b, quarter
		else
			index2 = index wrap-sub half
			if index2 < quarter
				index2 in i.c, quarter
			else
				index2 wrap-sub quarter in i.d, quarter
	as leaf l
		hard-assert: n == bits-in-leaf-node
		l.values[index word-index] has-bit index.bit-index
	as empty
		false

~ index-set(a index-set, index nat64)
	a try-add index or-default a

.quadruple-capacity index-set(a index-set)
	if a.capacity == 0
		bits-in-leaf-node, empty-leaf-node.leaf
	else
		(a.capacity wrap-mul 4), (a.root, empty, empty, empty).inner

.empty-inner-node inner-node()
	empty, empty, empty, empty
.empty-leaf-node leaf-node()
	0, 0, 0, 0

try-add index-set?(a index-set, index nat64) trusted
	if index >= a.capacity
		a.quadruple-capacity try-add index
	elif res ?= a.root try-add index, a.capacity
		(a.capacity, res) some
.try-add node?(a node, index nat64, n nat64) unsafe
	hard-assert: index < n
	match a
	as inner i
		hard-assert: n > bits-in-leaf-node
		half = n unsafe-div 2
		quarter = half unsafe-div 2
		if index < half
			if index < quarter
				if res ?= i.a try-add index, quarter
					(i with-a res).inner some
			else
				if res ?= i.b try-add (index wrap-sub quarter), quarter
					(i with-b res).inner some
		else
			index2 = index wrap-sub half
			if index2 < quarter
				if res ?= i.c try-add index2, quarter
					(i with-c res).inner some
			else
				if res ?= i.d try-add (index2 wrap-sub quarter), quarter
					(i with-d res).inner some
	as leaf l
		hard-assert: n == bits-in-leaf-node
		word-index = index word-index
		bit-index = index bit-index
		word = l.values[word-index]
		new-word = word add-bit bit-index
		if new-word != word
			(l update-leaf word-index, new-word).leaf some
	as empty
		new-node = if n == bits-in-leaf-node
			empty-leaf-node leaf
		else
			empty-inner-node inner
		new-node try-add index, n

~ index-set(a index-set, indices nat64[])
	a fold indices, (cur, index) => cur ~ index

- index-set(a index-set, index nat64)
	a try-remove index or-default a

try-remove index-set?(a index-set, index nat64) trusted
	if index < a.capacity
		if removed ?= a.root try-remove index, a.capacity
			removed simplify-after-remove-or-filter a.capacity some
.try-remove node?(a node, index nat64, n nat64) unsafe
	hard-assert: index < n
	match a
	as inner i
		assert: n > bits-in-leaf-node
		half = n unsafe-div 2
		quarter = half unsafe-div 2
		opt-new-node = if index < half
			if index < quarter
				if res ?= i.a try-remove index, quarter
					i with-a res some
			else
				if res ?= i.b try-remove (index wrap-sub quarter), quarter
					i with-b res some
		else
			index2 = index wrap-sub half
			if index2 < quarter
				if res ?= i.c try-remove index2, quarter
					i with-c res some
			else
				if res ?= i.d try-remove (index2 wrap-sub quarter), quarter
					i with-d res some
		if new-node ?= opt-new-node
			some: if new-node is-all-empty
				empty
			else
				new-node inner
	as leaf l
		assert: n == bits-in-leaf-node
		word-index = index word-index
		bit-index = index bit-index
		word = l.values[word-index]
		new-word = word sub-bit bit-index
		if new-word != word
			if new-word == 0
				empty some
			else
				(l update-leaf word-index, new-word).leaf some
	as empty
		none
.simplify-after-remove-or-filter index-set(node node, capacity nat64) unsafe
	match node
	as inner i
		if i.b.is-empty && i.c.is-empty && i.d.is-empty
			hard-assert: !i.a.is-empty
			i.a simplify-after-remove-or-filter (capacity unsafe-div 4)
		else
			capacity, i.inner
	as leaf l
		hard-assert: capacity == bits-in-leaf-node
		hard-assert: l.a != 0 || l.b != 0 || l.c != 0 || l.d != 0
		capacity, l.leaf
	as empty
		0, empty

.is-all-empty bool(a inner-node)
	a.a.is-empty && a.b.is-empty && a.c.is-empty && a.d.is-empty

# TODO:MOVE
.with-a inner-node(a inner-node, new-a node)
	new-a, a.b, a.c, a.d
.with-b inner-node(a inner-node, new-b node)
	a.a, new-b, a.c, a.d
.with-c inner-node(a inner-node, new-c node)
	a.a, a.b, new-c, a.d
.with-d inner-node(a inner-node, new-d node)
	a.a, a.b, a.c, new-d

.update-leaf leaf-node(a leaf-node, word-index nat64, new-word nat64) unsafe
	if word-index == 0
		new-word, a.b, a.c, a.d
	elif word-index == 1
		a.a, new-word, a.c, a.d
	elif word-index == 2
		a.a, a.b, new-word, a.d
	elif word-index == 3
		a.a, a.b, a.c, new-word
	else
		hard-unreachable

###
# TODO: ~ index-set(a index-set, b index-set)

intersect index-set(a index-set, b index-set)
	strip-trailing-zeroes: a.values zip-smaller b.values, (x, y) =>
		x & y

- index-set(a index-set, b index-set)
	strip-trailing-zeroes: a.values zip-larger b.values, (x, y) =>
		x or-default 0 bits-diff: y or-default 0

.strip-trailing-zeroes index-set(a nat64[])
	index-set: void, a.strip-trailing-zeroes
.strip-trailing-zeroes nat64[](a nat64[])
	if last ?= a last
		if last == 0
			a.rtail strip-trailing-zeroes
		else
			a
	else
		[]
###

# hi exclusive
# TODO: use 'range' type
count-range nat64(a index-set, low nat64, high nat64) trusted
	if high < low
		0
	else
		a.root count-range a.capacity, low, (high wrap-sub low)
.count-range nat64(a node, n nat64, low nat64, len nat64) unsafe
	if low > n
		0
	else
		match a
		as inner i
			hard-assert: n > bits-in-leaf-node
			half = n unsafe-div 2
			quarter = half unsafe-div 2
			three-quarters = quarter wrap-add half
			# If low < quarter, wrap-sub will give an impossibly high value and the recursive call will return 0.
			ca = i.a count-range quarter, low, len
			cb = i.b count-range quarter, (low wrap-sub quarter), len
			cc = i.c count-range quarter, (low wrap-sub half), len
			cd = i.d count-range quarter, (low wrap-sub three-quarters), len
			ca wrap-add cb wrap-add cc wrap-add cd
		as leaf l
			hard-assert: n == bits-in-leaf-node
			high = low wrap-add len min (bits-in-leaf-node wrap-sub 1)
			low-word-index = low word-index
			high-word-index = high word-index
			low-bit-index = low bit-index
			high-bit-index = high bit-index
			values = l values
			if low-word-index == high-word-index
				values[low-word-index] count-range-in-nat64 low-bit-index, high-bit-index
			else
				first-word = values[low-word-index] count-gte-in-nat64 low-bit-index
				mid-words = values[(low-word-index wrap-add 1) .. high-word-index] count-ones-in-arr
				last-word = values[high-word-index] count-less-in-nat64 high-bit-index
				first-word wrap-add mid-words wrap-add last-word
		as empty
			0

count-less nat64(a index-set, n nat64)
	a count-range 0, n

count-greater-or-equal nat64(a index-set, n nat64)
	a count-range n, max-nat64

.count-range-in-nat64 nat64(a nat64, lo-bit-index nat64, hi-bit-index nat64)
	a >> lo-bit-index count-less-in-nat64 (hi-bit-index wrap-sub lo-bit-index)

.count-less-in-nat64 nat64(a nat64, bit-index nat64)
	a << (64 wrap-sub bit-index) count-ones

.count-gte-in-nat64 nat64(a nat64, bit-index nat64)
	a >> bit-index count-ones

.count-ones-in-arr nat64(a nat64[]) trusted
	0 count-ones-in-arr-recur a.begin-ptr, a.end-ptr
.count-ones-in-arr-recur nat64(acc nat64, cur nat64*, end nat64*) unsafe
	if cur == end
		acc
	else
		acc wrap-add (*cur).count-ones count-ones-in-arr-recur cur + 1, end

# Gets the set with only values < limit
filter-less index-set(a index-set, limit nat64) trusted
	if limit < a.capacity
		filtered = a.root filter-less-recur a.capacity, limit
		filtered simplify-after-remove-or-filter a.capacity
	else
		a
.filter-less-recur node(a node, n nat64, limit nat64) unsafe
	match a
	as inner i
		hard-assert: n > bits-in-leaf-node
		half = n unsafe-div 2
		quarter = half unsafe-div 2
		new-a = i.a filter-less-recur quarter, limit, 0
		new-b = i.b filter-less-recur quarter, limit, 0x40
		new-c = i.c filter-less-recur quarter, limit, 0x80
		new-d = i.c filter-less-recur quarter, limit, 0xc0
		new-node = new-a, new-b, new-c, new-d
		if new-node is-all-empty
			empty
		else
			new-node inner
	as leaf l
		hard-assert: n == bits-in-leaf-node
		new-a = l.a filter-less-word limit, 0
		new-b = l.b filter-less-word limit, 0x40
		new-c = l.c filter-less-word limit, 0x80
		new-d = l.d filter-less-word limit, 0xc0
		(new-a, new-b, new-c, new-d) leaf
	as empty
		empty
.filter-less-recur node(a node, n nat64, limit nat64, offset nat64) unsafe
	if limit < offset
		empty
	elif limit > (offset wrap-add n)
		a
	else
		a filter-less-recur n, (limit wrap-sub offset)

.filter-less-word nat64(a nat64, limit nat64, offset nat64)
	if limit < offset
		0
	elif limit > (offset wrap-add 64)
		a
	else
		a & (limit wrap-sub offset low-n-bits)

.word-index nat64(a nat64) trusted
	a unsafe-div 64
.bit-index nat64(a nat64) trusted
	a unsafe-mod 64

to-str str(a index-set)
	out writer = ()
	out ~= "["
	a each x =>
		out ~= x to-str
		out ~= ", "
	if !a.is-empty
		out backup! 2
	out ~= "]"
	out move-to-str!

region iteration

each void(a index-set, f act void(nat64))
	void fold a, (ignore, x) => f[x]

fold<a> a(acc a, a index-set, f act a(a, nat64)) trusted
	acc fold a.root, 0, a.capacity, f
# offset: how much to add to indices in this node
.fold<a> a(acc a, node node, offset nat64, n nat64, f act a(a, nat64)) unsafe
	match node
	as inner i
		half = n unsafe-div 2
		quarter = half unsafe-div 2
		three-quarters = half wrap-add quarter
		acc-a = acc fold i.a, offset, quarter, f
		acc-b = acc-a fold i.b, (offset wrap-add quarter), quarter, f
		acc-c = acc-b fold i.c, (offset wrap-add half), quarter, f
		acc-c fold i.d, (offset wrap-add three-quarters), quarter, f
	as leaf l
		acc fold-with-index l.values, (cur, value, word-index) =>
			bit-index-offset = offset wrap-add (word-index wrap-mul 64)
			cur fold-one-bits value, (inner-acc, bit-index) =>
				f[inner-acc, bit-index-offset wrap-add bit-index]
	as empty
		acc

###
TODO
filter index-set(a index-set, f act bool(nat64))
	strip-trailing-zeroes: a.values map-with-index (value, nat64-index) =>
		bit-index-offset = nat64-index wrap-mul 64
		value filter-bits bit-index =>
			f[bit-index-offset wrap-add bit-index]
###

map index-set(a index-set, f act nat64(nat64))
	a map-to-arr f index-set

map-to-arr<a> a[](a index-set, f act a(nat64)) trusted
	res = a.size uninitialized-fix-arr<a>
	end = res.begin-ptr fold a, (cur, x) =>
		*cur := f[x]
		cur + 1
	hard-assert: end == res.end-ptr
	res cast-immutable

.dbg str(a index-set)
	out writer = ()
	out dbg-recur! a.root
	out move-to-str!

.dbg-recur! void(out writer, a node)
	match a
	as inner i
		out ~= "("
		out dbg-recur! i.a
		out ~= " "
		out dbg-recur! i.b
		out ~= " "
		out dbg-recur! i.c
		out ~= " "
		out dbg-recur! i.d
		out ~= ")"
	as leaf l
		out ~= "["
		out ~= l.a.to-hex
		out ~= " "
		out ~= l.b.to-hex
		out ~= " "
		out ~= l.c.to-hex
		out ~= " "
		out ~= l.d.to-hex
		out ~= "]"
	as empty
		out ~= "_"

# TODO:PRIVATE
verify void(a index-set, expected str, expected-arr nat64[])
	actual = a.dbg
	if actual != expected
		info log "a.dbg is"
		info log a.dbg
		info log "but expected"
		info log expected
		a.dbg is expected
	actual is expected
	r = a arr
	r is expected-arr
	drop: 0 fold a, (prev, cur) =>
		prev .. cur each x =>
			x in a is false
		cur in a is true
		cur wrap-add 1
	a.size is r.size

test
	a index-set = ()
	a verify "_", []
	3 in a is false

	b = a ~ 8
	b verify "[100 0 0 0]", [8]

	b count-less 8 is 0
	b count-greater-or-equal 8 is 1
	b count-range 4, 8 is 0
	b count-range 8, 9 is 1

	c = b ~ [4, 9]
	c verify "[310 0 0 0]", [4, 8, 9]

	# TODO: 'is none'
	(c try-remove 7).is-empty is true
	(c try-add 8).is-empty is true

	d = c - 8
	d verify "[210 0 0 0]", [4, 9]

	e = c filter-less 9
	e verify "[110 0 0 0]", [4, 8]

	folded = 1 fold d, (cur, x) => cur wrap-add x
	folded is 14

	# TODO
	# filtered = c filter it => it != 8
	# filtered verify "[x210]", [4, 9]

	mapped = c map it => 10 wrap-sub it
	mapped verify "[46 0 0 0]", [1, 2, 6]

test
	a = [100] index-set
	a verify "[0 1000000000 0 0]", [100]
	b = a ~ 1000
	b verify "([0 1000000000 0 0] _ _ [0 0 0 10000000000])", [100, 1000]
	c = b ~ 5000
	cv = "((([0 1000000000 0 0] _ _ [0 0 0 10000000000]) _ _ _) ((_ _ _ [0 0 100 0]) _ _ _) _ _)"
	c verify cv, [100, 1000, 5000]
	d = c - 1000
	d verify "((([0 1000000000 0 0] _ _ _) _ _ _) ((_ _ _ [0 0 100 0]) _ _ _) _ _)", [100, 5000]
	e = c - 5000
	e verify "([0 1000000000 0 0] _ _ [0 0 0 10000000000])", [100, 1000]

# TODO: these belong in bits.crow

test
	0.high-n-bits is 0
	1.high-n-bits is 0b1000000000000000000000000000000000000000000000000000000000000000
	13.high-n-bits is 0b1111111111111000000000000000000000000000000000000000000000000000
	63.high-n-bits is 0b1111111111111111111111111111111111111111111111111111111111111110
	64.high-n-bits is 0b1111111111111111111111111111111111111111111111111111111111111111

test
	0.low-n-bits is 0
	1.low-n-bits is 1
	13.low-n-bits is 0b1111111111111
	63.low-n-bits is 0b111111111111111111111111111111111111111111111111111111111111111
	64.low-n-bits is 0b1111111111111111111111111111111111111111111111111111111111111111

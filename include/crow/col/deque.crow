no-std
import
	../bool: &&, ==, bool, true
	../exception: assert
	../fun-util: subscript
	../misc: void
	../opt: !, is-empty, new, opt
	../ptr: ==, +, -, set-deref
	../range: ..
	../str: ==, str
	../str-conv: to-str
	../test-util: is
	../writer: ~=, backup, move-to-str, new, writer
	../private/bootstrap: hard-assert
	../private/number-low-level: ==, <=>, is-even, nat64, wrap-add
	./arr: ==, arr, is-empty, new, size
	./arr-util: each, first, fold, last, rtail, tail
	./fix-arr: begin-ptr, cast-immutable, end-ptr, fix-arr, subscript, uninitialized-fix-arr
	./stack:
		~, each, each-reverse, is-empty, fold, fold-reverse, new, pop, rest, size, stack, to-arr,
		to-arr-reverse, value

# Immutable double-ended queue.
deque<a> record
	# NOTE: This is in reverse (top of the stack furthest left)
	.left stack a
	.mid a[]
	.right stack a

###
Deque containing the given elements.
###
new<a> deque a(...a a[])
	a to-deque

###
Convert an array to a deque. 
This is O(1).
###
to-deque<a> deque a(a a[])
	()::stack<a>, a, ()

# Copy elements to an array.
to-arr<a> a[](a deque a) trusted
	res fix-arr a = a.size uninitialized-fix-arr
	end = res.begin-ptr fold a, (out, x) =>
		*out := x
		out + 1
	hard-assert: end == res.end-ptr
	res cast-immutable

###
`true` iff `a.size == 0`.
This is O(1).
###
is-empty<a> bool(a deque a)
	a.left.is-empty && a.mid.is-empty && a.right.is-empty

###
Number of elements in the deque.
This is O(n).
###
size<a> nat64(a deque a)
	a.left.size wrap-add a.mid.size wrap-add a.right.size

# Pushes an element on the right.
~ <a> deque a(a deque a, value a)
	a.left, a.mid, a.right ~ value

# Pushes an element on the left.
~ <a> deque a(value a, a deque a)
	a.left ~ value, a.mid, a.right

# Result of popping (left or right): The value popped and remaining values.
popped<a> record
	value a
	rest deque a

###
Remove a value from the left.
Returns an empty option iff `a` is empty.
###
pop-left<a> popped<a>?(a deque a)
	if popped ?= a.left pop
		(popped.value, (popped.rest, a.mid, a.right)),
	elif first ?= a.mid first
		(first, (()::stack<a>, a.mid.tail, a.right)),
	else
		right-arr = a.right to-arr
		if first ?= right-arr first
			(first, right-arr.tail.to-deque),

###
Remove a value from the right.
Returns an empty option iff `a` is empty.
###
pop-right<a> popped<a>?(a deque a)
	if popped ?= a.right pop
		(popped.value, (a.left, a.mid, popped.rest)),
	elif last ?= a.mid last
		(last, (a.left, a.mid.rtail, ())),
	else
		left-arr = a.left to-arr-reverse
		if last ?= left-arr last
			(last, left-arr.rtail.to-deque),

region iteration

each<a> void(a deque a, f act void(a))
	a.left each-reverse f
	a.mid each f
	a.right each f

fold<a, b> a(acc a, a deque b, f act a(a, b))
	acc fold-reverse a.left, f fold a.mid, f fold a.right, f

filter<a> deque a(a deque a, f act bool(a)) trusted
	res fix-arr a = a.size uninitialized-fix-arr
	end = res.begin-ptr fold a, (out, x) =>
		if f[x]
			*out := x
			out + 1
		else
			out
	res[0 .. end - res.begin-ptr].cast-immutable to-deque

map<out, in> deque out(a deque in, f act out(in)) trusted
	res fix-arr out = a.size uninitialized-fix-arr
	end = res.begin-ptr fold a, (out, x) =>
		*out := f[x]
		out + 1
	hard-assert: end == res.end-ptr
	res.cast-immutable to-deque

.dbg str(a deque nat64)
	out writer = ()
	a.left each-reverse x =>
		out ~= x
		out ~= " "
	out ~= "["
	if a.mid is-empty
		out ~= "]"
	else
		a.mid each x =>
			out ~= x to-str
			out ~= " "
		out backup
		out ~= "]"
	a.right each x =>
		out ~= " "
		out ~= x
	out move-to-str

test
	a deque nat64 = ()
	assert: a is-empty
	a.dbg is "[]"
	a.to-arr is ()
	# TODO: 'a.pop-left is ()'
	a.pop-left.is-empty is true
	a.pop-right.is-empty is true

	bl = 1 ~ a
	bl.dbg is "1 []"
	bl.to-arr is (1,)
	bl-pop-left = bl.pop-left!
	bl-pop-left.value is 1
	# TODO: 'is deque'
	bl-pop-left.rest.to-arr is ()
	bl-pop-right = bl.pop-right!
	bl-pop-right.value is 1
	bl-pop-right.rest.to-arr is ()

	br = a ~ 1
	br.dbg is "[] 1"
	br.to-arr is bl.to-arr
	br-pop-left = br.pop-left!
	br-pop-left.value is 1
	br-pop-left.rest.to-arr is ()
	br-pop-right = br.pop-right!
	br-pop-right.value is 1
	br-pop-right.rest.to-arr is ()

	c = bl ~ 2 ~ 3
	c.dbg is "1 [] 2 3"
	c-pop = c.pop-left!
	c-pop.value is 1

	# Forces it to convert to an array
	d = c-pop rest
	d.dbg is "[] 2 3"
	d-pop-left = d.pop-left!
	d-pop-left.value is 2
	d-pop-left.rest.to-arr is (3,)

	d-pop = d.pop-left!
	d-pop.value is 2
	d-pop.rest.dbg is "[3]"

	# Test converting right stack to array
	x = 1 ~ (2 ~ (3 ~ ()))
	x.to-arr is (1, 2, 3)
	x.dbg is "1 2 3 []"
	x-pop = x.pop-right!
	x-pop.value is 3
	x-pop.rest.dbg is "[1 2]"

	six = 1 ~ (2 ~ (3, 4)) ~ 5 ~ 6
	six.dbg is "1 2 [3 4] 5 6"
	folded = 10 fold six, (x, y) => x wrap-add y
	folded is 31
	(six filter it => it is-even).to-arr is (2, 4, 6)
	(six map it => it wrap-add 10).to-arr is (11, 12, 13, 14, 15, 16)

no-std
import
	../bool: &&, ||, ==, bool, not, true
	../json: json
	../number: ==, +, nat64
	../option: force, is-empty, new, option
	../string: ==, ~~, literal, new, string, to-string
	../test-util: is
	../tuple: a, b, new, pair
	./array: +, -, array, begin, end, is-empty, iterate, next, size, slice
	./collection: .., -, end, for-loop, join, reverse, subscript
	./list: ==, ~=, build, iterate, list, new, to-array, to-list
	./stack:
		~, end, is-empty, iterate, iterate-reverse, new, prev, pop, size, stack,
		to-array-reverse, to-list

# Immutable double-ended queue.
!deque[t] record
	# NOTE: This is in reverse (top of the stack furthest left)
	.left t stack
	.mid t array
	.right t stack

###
Deque containing the given elements.
###
!new[t] t deque(...a t array)
	a.to-list to-deque

###
Convert a list to a deque. 
This is O(1).
###
!to-deque[t] t deque(a t[])
	# TODO: should not need type annotation
	()::(t stack), a.to-array, ()

# Copy elements to a list.
!to-list[t] t[](a t deque)
	for x : a
		x

###
`true` iff `a.size == 0`.
This is O(1).
###
!is-empty[t] bool(a t deque)
	a.left.is-empty && a.mid.is-empty && a.right.is-empty

###
Number of elements in the deque.
This is O(n).
###
!size[t] nat64(a t deque)
	a.left.size + a.mid.size + a.right.size

# Pushes an element on the right.
!~[t] t deque(a t deque, value t)
	a.left, a.mid, a.right ~ value

# Pushes an element on the left.
!~[t] t deque(value t, a t deque)
	a.left ~ value, a.mid, a.right

###
Remove a value from the left.
Returns an empty option iff `a` is empty.
###
!pop-left[t] (t, t deque)?(a t deque)
	if popped ?= a.left pop
		(popped.b, (popped.a, a.mid, a.right)),
	elif !a.mid.is-empty
		# TODO: should not need type annotation
		(a.mid[0], (()::(t stack), a.mid[1 .. end], a.right)),
	else
		right-arr = a.right.to-list to-array
		unless right-arr is-empty
			(right-arr[0], right-arr[1 .. end].to-list.to-deque),

###
Remove a value from the right.
Returns an empty option iff `a` is empty.
###
!pop-right[t] (t deque, t)?(a t deque)
	if popped ?= a.right pop
		((a.left, a.mid, popped.a), popped.b),
	elif !a.mid.is-empty
		((a.left, a.mid[0 .. end - 1], ()), a.mid[end - 1]),
	else
		left-arr = a.left to-array-reverse
		unless left-arr is-empty
			(left-arr[0 .. end - 1].to-list.to-deque, left-arr[end - 1]),

region spec impls (see collection.crow)

!iterate[t] bool(a t deque, f act bool(t))
	a.left iterate-reverse f || a.mid iterate f || a.right iterate f

region test

.dbg string(a nat64 deque)
	left = "" join for x : a.left reverse; "{x} "
	mid = " " join for x : a mid; "{x}"
	right = "" join for x : a right; " {x}"
	"{left}[{mid}]{right}"

test
	a nat64 deque = ()
	assert a is-empty
	a.dbg is "[]"
	a.to-list is ()
	# TODO: 'a.pop-left is ()'
	a.pop-left.is-empty is true
	a.pop-right.is-empty is true

	bl = 1 ~ a
	bl.dbg is "1 []"
	bl.to-list is (1,)
	bl-pop-left = bl.pop-left!
	bl-pop-left.a is 1
	# TODO: 'is deque'
	bl-pop-left.b.to-list is ()
	bl-pop-right = bl.pop-right!
	bl-pop-right.b is 1
	bl-pop-right.a.to-list is ()

	br = a ~ 1
	br.dbg is "[] 1"
	br.to-list is bl.to-list
	br-pop-left = br.pop-left!
	br-pop-left.a is 1
	br-pop-left.b.to-list is ()
	br-pop-right = br.pop-right!
	br-pop-right.b is 1
	br-pop-right.a.to-list is ()

	c = bl ~ 2 ~ 3
	c.dbg is "1 [] 2 3"
	c-pop = c.pop-left!
	c-pop.a is 1

	# Forces it to convert to an array
	d = c-pop b
	d.dbg is "[] 2 3"
	d-pop-left = d.pop-left!
	d-pop-left.a is 2
	d-pop-left.b.to-list is (3,)

	d-pop = d.pop-left!
	d-pop.a is 2
	d-pop.b.dbg is "[3]"

	# Test converting right stack to array
	e = 1 ~ (2 ~ (3 ~ ()))
	e.to-list is (1, 2, 3)
	e.dbg is "1 2 3 []"
	e-pop = e.pop-right!
	e-pop.b is 3
	e-pop.a.dbg is "[1 2]"

	six nat64 deque = 1 ~ (2 ~ (3, 4)) ~ 5 ~ 6
	six.dbg is "1 2 [3 4] 5 6"
	(for x : six; x + 10)::nat64[] is (11, 12, 13, 14, 15, 16)

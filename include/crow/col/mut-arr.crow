no-std
import
	string: memcpy, memmove
	../bool: !, bool
	../compare: <, <=, >, >=, equal
	../fun: subscript
	../misc: drop, void
	../number: +, -, *, nat64
	../opt: opt, some
	../ptr:
		==, +, -, *, as-any-const-ptr, as-any-mut-ptr, as-const, by-val, const-ptr, mut-ptr,
		set-deref, set-subscript, size-of, subscript, zeroed
	../private/alloc:
		alloc-uninitialized, copy-data-from!, set-zero-range, unmanaged-alloc-zeroed-elements
	../private/bootstrap: hard-assert, todo
	../private/exception-low-level: assert
	../private/number-low-level: ==, <=>, wrap-add, wrap-sub
	../private/range-low-level: ..
	./arr: arr
	./arr-util: each, each-with-index, exists, find-index, fold, fold-reverse, in, index-of
	./fix-arr:
		begin-ptr, cast-immutable, each, fill-fix-arr, map!, make-fix-arr,
		fix-arr, reverse!, set-zero-elements, size, subscript, temp-as-arr, uninitialized-fix-arr

###
Mutable array type that can change in size.
This is represented as a reference to a `fix-arr` with extra capacity.
Appending (or removing) elements to the end is amortized O(1),
but appending (or removing) from the beginning is always O(N).
###
mut-arr<a> record mut
	# TODO:PRIVATE
	# backing.size is the capacity
	# For the GC's sake, unused parts of backing are filled with 'zeroed'
	backing mut fix-arr a
	# TODO:PRIVATE (getter public)
	size mut nat64

###
Pointer to the first element.
Since `mut-arr` changes its underlying data occasionally,
it's UB if this is used after the size of `a` changes.
###
begin-ptr<a> a mut*(a a mut[]) noctx unsafe
	a.backing begin-ptr

end-ptr<a> a mut*(a a mut[]) noctx unsafe
	a.begin-ptr + a.size

is-at-capacity<a> bool(a a mut[]) noctx unsafe
	a.capacity == a.size

capacity<a> nat64(a a mut[]) noctx unsafe
	a.backing size

mut-arr-by-val<a> by-val a mut[]() noctx trusted
	fix-arr mut-arr<a> 0

mut-arr-by-val-with-capacity-from-unmanaged-memory<a> by-val<a mut[]>(capacity nat64) noctx unsafe
	backing = capacity fix-arr<a> capacity.unmanaged-alloc-zeroed-elements<a>
	backing mut-arr<a> 0

###
mut-arr where every element is `value`.
Equivalent to `mut-arr: [value, value, ...]`.
###
fill-mut-arr<a> a mut[](size nat64, value a)
	size fill-fix-arr value mut-arr size

# New empty `mut-arr`.
mut-arr<a> a mut[]()
	fix-arr mut-arr 0

###
Copies an `arr` to a `mut-arr`.
Writes to the `mut-arr` won't affect the `arr`.
###
mut-arr<a> a mut[](a a[])
	res = mut-arr<a>
	res ~= a
	res

# TODO: use an 'each' spec to combine these functions
###
Copies a `fix-arr` to a `mut-arr`.
Writes to the `mut-arr` won't affect the `fix-arr`.
###
mut-arr<a> a mut[](a fix-arr a)
	res = mut-arr<a>
	res ~= a
	res

empty!<a> void(a a mut[])
	a pop-n! a.size

###
Copies the `mut-arr`.
Writes to the original won't affect the copy.
###
copy<a> a mut[](a a mut[]) trusted
	a.temp-as-arr mut-arr

###
Copies a `mut-arr` to an `arr`.
Writes to the `mut-arr` won't affect the `arr`.
###
arr<a> a[](a a mut[])
	a.copy move-to-arr!

###
Convert to a `dict`, clearning the original `mut-arr` in the process.
(This avoids copying but still ensures that the result is immutable.)
###
move-to-arr!<a> a[](a a mut[]) noctx trusted
	a.move-to-fix-arr! cast-immutable

move-to-fix-arr!<a> fix-arr a(a a mut[]) noctx trusted
	res = a.size fix-arr a.begin-ptr
	a.backing := fix-arr
	a.size := 0
	res

swap!<a> void(a a mut[], b a mut[])
	a-backing = a backing
	a-size = a size
	a.backing := b backing
	a.size := b size
	b.backing := a-backing
	b.size := a-size

###
Gets the element at the index.
Throws if `index >= a.size`.
###
subscript<a> a(a a mut[], index nat64) trusted
	assert: index < a.size
	a.begin-ptr[index]

first<a> a?(a a mut[])
	if !a.is-empty
		a[0] some

last<a> a?(a a mut[])
	if !a.is-empty
		a[a.size - 1] some

###
Sets the last element.
Throws if the list is empty.
###
set-last<a> void(a a mut[], value a)
	a[a.size - 1] := value

###
Converts to an `fix-arr`.
"Temp" because it's UB if the result is used after ths size of `a` changes.
###
temp-as-fix-arr<a> fix-arr a(a a mut[]) noctx unsafe
	a.size fix-arr a.begin-ptr

###
Converts to an `arr`.
"Temp" because it's UB if the result is used after `a` is written to.
###
temp-as-arr<a> a[](a a mut[]) noctx unsafe
	a.temp-as-fix-arr temp-as-arr

# True iff `a.size == 0`.
is-empty<a> bool(a a mut[]) noctx
	a.size == 0

###
Sets the element at the index.
Throws if `index >= a.size`.
###
set-subscript<a> void(a a mut[], index nat64, value a) trusted
	assert: index < a.size
	a.begin-ptr[index] := value

###
True iff `a[i] == value` for some `i`.
###
in<a> bool(value a, a a mut[]) noctx trusted equal<a>
	value in a.temp-as-arr

copy-range-to-arr<a> a[](a a mut[], begin nat64, size nat64) trusted
	assert: begin + size <= a.size
	res = alloc-uninitialized<a>: size
	src = a.begin-ptr + begin
	drop: res.as-any-mut-ptr memcpy src.as-any-const-ptr, size * size-of<a>
	size arr res.as-const

###
Removes the first `n` elements and returns them as an array.
This is O(a.size - n) because of the cost of copying, and all remaining elements must be shifted.
Throws if `n > a.size`.
###
pop-n-from-start!<a> a[](a a mut[], n nat64) trusted
	assert: n <= a.size
	res = a copy-range-to-arr 0, n
	dest = a.begin-ptr as-any-mut-ptr
	src = a.begin-ptr + n as-any-const-ptr
	new-size = a.size - n
	drop: dest memmove src, new-size * size-of<a>
	a.size := new-size
	res

###
Removes the last element and returns it.
Returns `none` if `a` is empty.
###
pop!<a> a?(a a mut[]) trusted
	if !a.is-empty
		new-size = a.size wrap-sub 1
		res = a[new-size]
		# Ensure GC doesn't hold on to the memory there
		a[new-size] := zeroed
		a.size := new-size
		res some

###
Pops `n` times, discarding the result.
Throws if `n > a.size`.
###
pop-n!<a> void(a a mut[], n nat64) trusted
	assert: n <= a.size
	new-size = a.size - n
	a.begin-ptr + new-size set-zero-range n
	a.size := new-size

# Push a value onto the end of the list.
~= <a> void(a a mut[], value a) trusted
	a incr-capacity!
	a.size < a.capacity assert
	a.begin-ptr[a size] := value
	a.size := a.size + 1

# TODO: Use an 'each' spec..
# Push multiple values onto the end of the list.
~= <a> void(a a mut[], values a[])
	values each x => a ~= x
~= <a> void(a a mut[], values fix-arr a)
	values each x => a ~= x
~= <a> void(a a mut[], values a mut[])
	values each x => a ~= x

.incr-capacity!<a> void(a a mut[]) unsafe
	a ensure-capacity (a.size + 1 round-up-to-power-of-two)

push-capacity-must-be-sufficient!<a> void(a a mut[], value a) noctx unsafe
	hard-assert: a.size < a.capacity
	a.begin-ptr[a size] := value
	a.size := a.size wrap-add 1

.increase-capacity-to!<a> void(a a mut[], new-capacity nat64) unsafe
	assert: new-capacity > a.capacity
	old-begin = a begin-ptr
	a.backing := new-capacity uninitialized-fix-arr<a>
	a.begin-ptr copy-data-from! old-begin.as-const, a.size
	a.backing[a.size + 1 .. a.backing.size] set-zero-elements

.ensure-capacity<a> void(a a mut[], min-capacity nat64) unsafe
	if a.capacity < min-capacity
		a increase-capacity-to! min-capacity

###
Ensure that the mut-arr can grow to a size of `reserved` without reallocating.
Does nothing if the capacity is already sufficient.
This may reserve more space than requested, so calling `reserve` repeatedly for slowly increasing sizes
doesn't reallocate every time, and is no worse than pushing repeatedly.
###
.reserve<a> void(a a mut[], reserved nat64) unsafe
	a ensure-capacity reserved.round-up-to-power-of-two

###
Removes `a[index]`, replaces it with the last value, and returns the old `a[index]`.
If `a[index]` is the last value, simply pops it.
This is more efficient than `a remove-at! index`,
which has to shift all values past `index` to the left.
Throws if `index >= a.size`.
###
remove-unordered-at!<a> a(a a mut[], index nat64) trusted
	assert: index < a.size
	a noctx-remove-unordered-at! index

noctx-remove-unordered-at!<a> a(a a mut[], index nat64) noctx unsafe
	hard-assert: index < a.size
	res = a.begin-ptr[index]
	new-size = a.size wrap-sub 1
	a.begin-ptr[index] := a.begin-ptr[new-size]
	a.size := new-size
	res

noctx-must-remove-unordered!<a> void(a a mut[], value a) noctx unsafe equal<a>
	a noctx-must-remove-unordered-recur! 0, value
.noctx-must-remove-unordered-recur!<a> void(a a mut[], index nat64, value a) noctx unsafe equal<a>
	if index == a.size
		todo
	elif a.begin-ptr[index] == value
		a noctx-remove-unordered-at! index drop
	else
		a noctx-must-remove-unordered-recur! (index wrap-add 1), value

###
Directly sets the `size` without touching the data.
Unsafe because if this increases the size, it exposes uninitialized data.
If this decreases the size, it doesn't zero out the rest of the data, so the garbage collector will keep it alive.
###
unsafe-set-size!<a> void(a a mut[], new-size nat64) unsafe
	a reserve new-size
	a.size := new-size

###
Pops elements until the size is <= `new-size`.
Does nothing if `a.size <= new-size` already.
###
reduce-size-if-more-than!<a> void(a a mut[], new-size nat64)
	if new-size < a.size
		a.pop! drop
		a reduce-size-if-more-than! new-size

# TODO:MOVE
.round-up-to-power-of-two nat64(n nat64)
	1 round-up-to-power-of-two-recur n
.round-up-to-power-of-two-recur nat64(acc nat64, n nat64)
	if acc >= n
		acc
	else
		acc * 2 round-up-to-power-of-two-recur n

# Returns the first index where `a[i] == value`, or returns `none`.
index-of<a> nat64?(a a mut[], value a) equal<a> trusted
	a.temp-as-arr index-of value

###
Sets `a[index] := value`, but first shifts all elements from `index` onwards to the right to make room.
Increases the size by 1.
This is O(a.size - index) due to having to move other elements.
Throws if `index > a.size`.
###
insert-at!<a> void(a a mut[], index nat64, value a) trusted
	assert: index <= a.size
	a incr-capacity!
	dest = a.begin-ptr + index + 1
	src = a.begin-ptr + index
	n = a.size - index
	drop: dest.as-any-mut-ptr memmove src.as-any-const-ptr, n * size-of<a>
	a.size := a.size + 1
	a[index] := value
	assert: a.size <= a.capacity

insert-at!<a> void(a a mut[], ptr a mut*, value a) unsafe
	a insert-at! ptr - a.begin-ptr, value

###
Removes `a[index]`, and shifts all values from `index` onwards to the left to fill the hole.
Returns the old `a[index]`.
Decreases the size by 1.
This is O(a.size - index) due to having to move other elements.
Throws if `index >= a.size`.
###
remove-at!<a> a(a a mut[], index nat64) trusted
	assert: index < a.size
	res = a[index]
	dest = a.begin-ptr + index
	src = a.begin-ptr + index + 1
	n = a.size - index - 1
	drop: dest.as-any-mut-ptr memmove src.as-any-const-ptr, n * size-of<a>
	a.size := a.size - 1
	res

remove-at!<a> a(a a mut[], ptr a mut*) unsafe
	a remove-at! ptr - a.begin-ptr

reverse!<a> void(a a mut[]) trusted
	a.temp-as-fix-arr reverse!

region iteration

# TODO: What if it's mutated while searching ?
find-index<a> nat64?(a a mut[], f act bool(a)) trusted
	a.temp-as-arr find-index f

# Calls `f` for each element in `a`.
each<a> void(a a mut[], f act void(a)) trusted
	a.temp-as-arr each f

each-with-index<a> void(a a mut[], f act void(a, nat64)) trusted
	a.temp-as-arr each-with-index f

exists<a> bool(a a mut[], f act bool(a)) trusted
	a.temp-as-arr exists f

fold<a, b> a(acc a, a b mut[], f act a(a, b)) trusted
	acc fold a.temp-as-arr, f

fold-reverse<a, b> a(acc a, a b mut[], f act a(a, b)) trusted
	acc fold-reverse a.temp-as-arr, f

filter<a> a mut[](a a mut[], f act bool(a)) trusted
	res = a copy
	res filter! f
	res

map<out, in> out mut[](a in mut[], f act out(in)) trusted
	a map-to-fix-arr f as-mut-arr

map-to-arr<out, in> out[](a in mut[], f act out(in)) trusted
	a map-to-fix-arr f cast-immutable

map-to-fix-arr<out, in> fix-arr out(a in mut[], f act out(in))
	a.size make-fix-arr i => f[a[i]]

map-opt<out, in> out mut[](a in mut[], f act out?(in)) trusted
	a map-opt-to-fix-arr f as-mut-arr

# TODO: this works on anything supporting 'fold' .. don't want to repeat for every collection
map-opt-to-fix-arr<out, in> fix-arr out(a in mut[], f act out?(in)) trusted
	out = a.size uninitialized-fix-arr<out>
	end = out.begin-ptr fold a, (cur, x) =>
		if fx ?= f[x]
			*cur := fx
			cur + 1
		else
			cur
	out[0 .. end - out.begin-ptr]

.as-mut-arr<a> a mut[](a fix-arr a) unsafe
	a mut-arr a.size

region mutating iteration

filter!<a> void(a a mut[], f act bool(a)) trusted
	new-end = a.begin-ptr filter-recur! a.begin-ptr.as-const, a.end-ptr.as-const, f
	new-size = new-end - a.begin-ptr
	a.backing[new-size .. a.size] set-zero-elements
	a.size := new-size
.filter-recur!<a> a mut*(out a mut*, in a*, end a*, f act bool(a)) unsafe
	if in == end
		out
	else
		new-out = if f[*in]
			*out := *in
			out + 1
		else
			out
		new-out filter-recur! in + 1, end, f

map!<a> void(a a mut[], f act a(a)) trusted
	a.temp-as-fix-arr map! f

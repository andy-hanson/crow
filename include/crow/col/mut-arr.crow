no-std
import
	string: memcpy, memmove
	../bool: bool
	../compare: <, <=, >, equal
	../fun-util: subscript
	../misc: new, void
	../number: ==, <=>, +, -, *, nat64
	../opt: new, opt
	../ptr:
		==, +, -, *, as-any-const-ptr, as-any-mut-ptr, as-const, by-val, const-ptr, mut-ptr,
		set-deref, set-subscript, size-of, subscript, zeroed
	../private/alloc:
		alloc-uninitialized, copy-data-from, set-zero-range, unmanaged-alloc-zeroed-elements
	../private/number-low-level: round-up-to-power-of-two
	../range: .., for-loop, reverse
	./arr: arr, for-loop
	./arr-util: each-with-index, exists, find-index, fold, in, index-of
	./fix-arr:
		begin-ptr, cast-immutable, empty-fix-arr, fill-fix-arr, fix-arr, for-loop,
		set-map, set-reverse, set-zero-elements, size, subscript, temp-as-arr, uninitialized-fix-arr
	./list: for-loop, list, to-list
	./private/arr-low-level: arr-from-begin-size

###
Mutable array type that can change in size.
This is represented as a reference to a `fix-arr` with extra capacity.
Appending (or removing) elements to the end is amortized O(1),
but appending (or removing) from the beginning is always O(N).
###
mut-arr<a> record mut
	# backing.size is the capacity
	# For the GC's sake, unused parts of backing are filled with 'zeroed'
	.backing .mut fix-arr a
	size .mut nat64

###
Pointer to the first element.
Since `mut-arr` changes its underlying data occasionally,
it's UB if this is used after the size of `a` changes.
###
begin-ptr<a> a mut*(a a mut[]) no-doc noctx unsafe
	a.backing begin-ptr

end-ptr<a> a mut*(a a mut[]) no-doc noctx unsafe
	a.begin-ptr + a.size

is-at-capacity<a> bool(a a mut[]) no-doc noctx unsafe
	a.capacity == a.size

capacity<a> nat64(a a mut[]) no-doc noctx unsafe
	a.backing size

mut-arr-by-val<a> by-val a mut[]() no-doc noctx trusted
	empty-fix-arr, 0

mut-arr-by-val-with-capacity-from-unmanaged-memory<a> by-val<a mut[]>(capacity nat64) no-doc noctx unsafe
	backing a mut* = capacity unmanaged-alloc-zeroed-elements
	backing[0 .. capacity], 0

###
mut-arr where every element is `value`.
###
fill-mut-arr<a> a mut[](size nat64, value a)
	(size fill-fix-arr value), size

###
Copies an `arr` to a `mut-arr`.
Writes to the `mut-arr` won't affect the `arr`.
###
new<a> a mut[](...a arr a)
	a.to-list to-mut-arr

to-mut-arr<a> a mut[](a list a)
	backing fix-arr a = empty-fix-arr
	res a mut[] = backing, 0
	res ~~= a
	res

clear<a> void(a a mut[]) noctx trusted
	a.begin-ptr set-zero-range a.size
	a.size := 0

###
Copies the `mut-arr`.
Writes to the original won't affect the copy.
###
copy<a> a mut[](a a mut[]) trusted
	a.temp-as-array.to-list to-mut-arr

###
Copies a `mut-arr` to a `list`.
Writes to the `mut-arr` won't affect the `list`.
###
to-list<a> list a(a a mut[])
	a.copy move-to-list

###
Convert to a `dict`, clearning the original `mut-arr` in the process.
(This avoids copying but still ensures that the result is immutable.)
###
move-to-list<a> list a(a a mut[]) noctx trusted
	a.move-to-array to-list

move-to-array<a> arr a(a a mut[]) noctx trusted
	a.move-to-fix-arr.cast-immutable

move-to-fix-arr<a> fix-arr a(a a mut[]) noctx trusted
	res = a.begin-ptr[0 .. a.size]
	a.backing := empty-fix-arr
	a.size := 0
	res

swap<a> void(a a mut[], b a mut[])
	a-backing = a backing
	a-size = a size
	a.backing := b backing
	a.size := b size
	b.backing := a-backing
	b.size := a-size

.check-index<a> void(a a mut[], index nat64) noctx
	assert index < a.size : "index out of bounds"

###
Gets the element at the index.
Throws if `index >= a.size`.
###
subscript<a> a(a a mut[], index nat64) noctx trusted
	a check-index index
	a.begin-ptr[index]

first<a> a?(a a mut[])
	unless a is-empty
		a[0],

last<a> a?(a a mut[])
	unless a is-empty
		a[a.size - 1],

###
Sets the last element.
Throws if the list is empty.
###
set-last<a> void(a a mut[], value a)
	a[a.size - 1] := value

###
Converts to an `fix-arr`.
"Temp" because it's UB if the result is used after ths size of `a` changes.
###
temp-as-fix-arr<a> fix-arr a(a a mut[]) no-doc noctx unsafe
	a.begin-ptr[0 .. a.size]

###
Converts to an `array`.
"Temp" because it's UB if the result is used after `a` is written to.
###
temp-as-array<a> arr a(a a mut[]) no-doc noctx unsafe
	a.temp-as-fix-arr temp-as-arr

# True iff `a.size == 0`.
is-empty<a> bool(a a mut[]) noctx
	a.size == 0

###
Sets the element at the index.
Throws if `index >= a.size`.
###
set-subscript<a> void(a a mut[], index nat64, value a) noctx trusted
	a check-index index
	a.begin-ptr[index] := value

###
True iff `a[i] == value` for some `i`.
###
in<a> bool(value a, a a mut[]) noctx trusted equal<a>
	value in a.temp-as-array

copy-range-to-arr<a> arr a(a a mut[], begin nat64, size nat64) trusted
	assert begin + size <= a.size : "range out of bounds"
	res a mut* = size alloc-uninitialized
	src = a.begin-ptr + begin
	_ = res.as-any-mut-ptr memcpy src.as-any-const-ptr, size * size-of@<a>
	res.as-const arr-from-begin-size size

###
Removes the first `n` elements and returns them as an array.
This is O(a.size - n) because of the cost of copying, and all remaining elements must be shifted.
Throws if `n > a.size`.
###
pop-n-from-start<a> list a(a a mut[], n nat64) trusted
	assert n <= a.size : "can't pop more than size of array"
	res = a copy-range-to-arr 0, n
	dest = a.begin-ptr as-any-mut-ptr
	src = a.begin-ptr + n as-any-const-ptr
	new-size = a.size - n
	_ = dest memmove src, new-size * size-of@<a>
	a.size := new-size
	res to-list

###
Removes the last element and returns it.
Returns `none` if `a` is empty.
###
pop<a> a?(a a mut[]) trusted
	unless a is-empty
		new-size = a.size - 1
		res = a[new-size]
		# Ensure GC doesn't hold on to the memory there
		a[new-size] := zeroed
		a.size := new-size
		res,

###
Pops `n` times, discarding the result.
Throws if `n > a.size`.
###
pop-n<a> void(a a mut[], n nat64) trusted
	assert n <= a.size : "can't pop more than size of array"
	new-size = a.size - n
	a.begin-ptr + new-size set-zero-range n
	a.size := new-size

# Push a value onto the end of the list.
~= <a> void(a a mut[], value a) trusted
	a incr-capacity
	assert a.size < a.capacity
	a.begin-ptr[a size] := value
	a.size := a.size + 1

# TODO: Use an 'each' spec..
# Push multiple values onto the end of the list.
~~= <a> void(a a mut[], values arr a)
	for x : values
		a ~= x
~~= <a> void(a a mut[], values list a)
	for x : values
		a ~= x
~~= <a> void(a a mut[], values fix-arr a)
	for x : values
		a ~= x
~~= <a> void(a a mut[], values a mut[])
	for x : values
		a ~= x

.incr-capacity<a> void(a a mut[]) unsafe
	a ensure-capacity (a.size + 1 round-up-to-power-of-two)

push-capacity-must-be-sufficient<a> void(a a mut[], value a) no-doc noctx unsafe
	assert a.size < a.capacity
	a.begin-ptr[a size] := value
	a.size := a.size + 1

.increase-capacity-to<a> void(a a mut[], new-capacity nat64) unsafe
	assert new-capacity > a.capacity
	old-begin = a begin-ptr
	a.backing := new-capacity uninitialized-fix-arr
	a.begin-ptr copy-data-from old-begin.as-const, a.size
	a.backing[a.size + 1 .. a.backing.size] set-zero-elements

.ensure-capacity<a> void(a a mut[], min-capacity nat64) unsafe
	if a.capacity < min-capacity
		a increase-capacity-to min-capacity

###
Ensure that the mut-arr can grow to a size of `reserved` without reallocating.
Does nothing if the capacity is already sufficient.
This may reserve more space than requested, so calling `reserve` repeatedly for slowly increasing sizes
doesn't reallocate every time, and is no worse than pushing repeatedly.
###
.reserve<a> void(a a mut[], reserved nat64) unsafe
	a ensure-capacity reserved.round-up-to-power-of-two

###
Removes `a[index]`, replaces it with the last value, and returns the old `a[index]`.
If `a[index]` is the last value, simply pops it.
This is more efficient than `a remove-at index`,
which has to shift all values past `index` to the left.
Throws if `index >= a.size`.
###
remove-unordered-at<a> a(a a mut[], index nat64) no-doc noctx trusted
	a check-index index
	res = a.begin-ptr[index]
	new-size = a.size - 1
	a.begin-ptr[index] := a.begin-ptr[new-size]
	a.size := new-size
	res

uninitialized-mut-arr<a> a mut[](size nat64) unsafe
	res a mut[] = ()
	res unsafe-set-size size
	res

###
Directly sets the `size` without touching the data.
Unsafe because if this increases the size, it exposes uninitialized data.
If this decreases the size, it doesn't zero out the rest of the data, so the garbage collector will keep it alive.
###
unsafe-set-size<a> void(a a mut[], new-size nat64) unsafe
	a reserve new-size
	a.size := new-size

###
Pops elements until the size is <= `new-size`.
Does nothing if `a.size <= new-size` already.
###
reduce-size-if-more-than<a> void(a a mut[], new-size nat64)
	if new-size < a.size
		_ = a.pop
		a reduce-size-if-more-than new-size

# Returns the first index where `a[i] == value`, or returns `none`.
index-of<a> nat64?(a a mut[], value a) equal<a> noctx trusted
	a.temp-as-array index-of value

###
Sets `a[index] := value`, but first shifts all elements from `index` onwards to the right to make room.
Increases the size by 1.
This is O(a.size - index) due to having to move other elements.
Throws if `index > a.size`.
###
insert-at<a> void(a a mut[], index nat64, value a) trusted
	assert index <= a.size : "index out of bounds"
	a incr-capacity
	dest = a.begin-ptr + index + 1
	src = a.begin-ptr + index
	n = a.size - index
	_ = dest.as-any-mut-ptr memmove src.as-any-const-ptr, n * size-of@<a>
	a.size := a.size + 1
	a[index] := value
	assert a.size <= a.capacity

insert-at<a> void(a a mut[], ptr a mut*, value a) unsafe
	a insert-at ptr - a.begin-ptr, value

###
Removes `a[index]`, and shifts all values from `index` onwards to the left to fill the hole.
Returns the old `a[index]`.
Decreases the size by 1.
This is O(a.size - index) due to having to move other elements.
Throws if `index >= a.size`.
###
remove-at<a> a(a a mut[], index nat64) trusted
	a check-index index
	res = a[index]
	dest = a.begin-ptr + index
	src = a.begin-ptr + index + 1
	n = a.size - index - 1
	_ = dest.as-any-mut-ptr memmove src.as-any-const-ptr, n * size-of@<a>
	a.size := a.size - 1
	res

remove-at<a> a(a a mut[], ptr a mut*) unsafe
	a remove-at ptr - a.begin-ptr

set-reverse<a> void(a a mut[]) trusted
	a.temp-as-fix-arr set-reverse

region iteration

# TODO: What if it's mutated while searching ?
find-index<a> nat64?(a a mut[], f act bool(a)) trusted
	a.temp-as-array find-index f

# Calls `f` for each element in `a`.
for-loop<a> void(a a mut[], f act void(a)) trusted
	a.temp-as-array for-loop f

each-with-index<a> void(a a mut[], f act void(a, nat64)) trusted
	a.temp-as-array each-with-index f

exists<a> bool(a a mut[], f act bool(a)) trusted
	a.temp-as-array exists f

fold<a, b> a(acc a, a b mut[], f act a(a, b)) trusted
	acc fold a.temp-as-array, f

reversed-mut-arr<a> record mut
	.inner a mut[]
reversed<a> reversed-mut-arr a(a a mut[])
	a,
for-loop<a> void(a reversed-mut-arr a, f act void(a))
	m = a inner
	for i : 0 .. m.size reverse
		f[m[i]]

filter<a> a mut[](a a mut[], f act bool(a)) trusted
	res = a copy
	res set-filter f
	res

for-loop<out, in> out mut[](a in mut[], f act out(in)) trusted
	a map-to-fix-arr f as-mut-arr

for-loop<out, in> list out(a in mut[], f act out(in)) trusted
	(a map-to-fix-arr f).cast-immutable to-list

.map-to-fix-arr<out, in> fix-arr out(a in mut[], f act out(in))
	for x : a.backing[0 .. a.size]
		f[x]

map-opt<out, in> out mut[](a in mut[], f act out?(in)) trusted
	a map-opt-to-fix-arr f as-mut-arr

# TODO: this works on anything supporting 'fold' .. don't want to repeat for every collection
map-opt-to-fix-arr<out, in> fix-arr out(a in mut[], f act out?(in)) trusted
	out fix-arr out = a.size uninitialized-fix-arr
	end = out.begin-ptr fold a, (cur, x) =>
		if fx ?= f[x]
			*cur := fx
			cur + 1
		else
			cur
	out[0 .. end - out.begin-ptr]

.as-mut-arr<a> a mut[](a fix-arr a) unsafe
	a, a.size

region mutating iteration

# TODO: what happens if data accessed during filtering?
###
Removes every element `x` where `!f[x]`.
This can be written as `a.filter := f`.
###
set-filter<a> void(a a mut[], f act bool(a)) trusted
	new-end = a.begin-ptr set-filter-recur a.begin-ptr.as-const, a.end-ptr.as-const, f
	new-size = new-end - a.begin-ptr
	a.backing[new-size .. a.size] set-zero-elements
	a.size := new-size
.set-filter-recur<a> a mut*(out a mut*, in a*, end a*, f act bool(a)) unsafe
	if in == end
		out
	else
		new-out = if f[*in]
			*out := *in
			out + 1
		else
			out
		new-out set-filter-recur in + 1, end, f

###
Overwrites every element `x` with `f[x]`.
This can be written as `a.map := f`.
###
set-map<a> void(a a mut[], f act a(a)) trusted
	a.temp-as-fix-arr set-map f

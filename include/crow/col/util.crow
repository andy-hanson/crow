no-std
import
	../compare: !=, equal, min
	../fun-util: subscript
	../misc: new
	../number: ==, <=>, +, *, /, nat64
	../private/range-low-level: subtract-to-nat
	./array: ~=, array, build, iterate
	./collection:
		begin-end, for-loop, iterate, next, size, skip-next, slice, try-split-once, with-block
	./private/build: build

# AKA 'flat-map'
+and-concat[col] record(inner col) nominal
+for-loop[out-elem, in-col, in-elem] out-elem[](
	a in-col and-concat,
	f out-elem[] mut(elem in-elem),
) (in-col, in-elem) iterate
	with out : build
		for x : a inner
			# TODO: Use '~~=' (which may be more efficient)
			for y : f[x]
				out ~= y

+split[col, iter, elem] col[](
	a col,
	b col,
) (iter, col) begin-end, (elem, iter) next, (col, iter) slice, elem equal
	with out : build
		cur mut = a
		loop
			if l, r ?= cur try-split-once b
				out ~= l
				# TODO: just reuse the iterator instead of getting a slice of the rest
				cur := r
				continue
			else
				out ~= cur
				break

+groupable[col, iter] spec (iter, col) begin-end,
	iter subtract-to-nat,
	iter skip-next,
	(col, iter) slice,
	col size
+groups-of[col, iter] col[](a col, group-size nat64) (col, iter) groupable
	div = a.size / group-size
	out-size = div * group-size == a.size ? div : div + 1
	iter mut = a begin
	with out : out-size build
		loop
			diff = a.end - iter
			guard diff != 0 : break
			next-iter = iter + (diff min group-size)
			out ~= iter slice next-iter
			iter := next-iter
			continue

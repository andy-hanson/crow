no-std
import
	../bool: !, &&, ||, bool
	../compare: >, >=, compare
	../exception: assert, forbid
	../fun-util: subscript
	../hash: hash, hash-mix
	../misc: drop, is-data, new, void
	../opt: ==, is-empty, new, opt
	../ptr: ==, +, *, mut-ptr, set-deref
	../str: ==, str
	../str-conv: finish, interp, to-str, with-str, with-value
	../test-util: is
	../tuple: from, new, pair, to
	../writer: ~=, backup, move-to-str, new, writer
	../private/number-low-level: ==, <=>, nat64, unsafe-mod, wrap-add, wrap-mul, wrap-sub
	./arr: ==, arr, new, size
	./arr-util: each, map
	./dict: dict, to-dict
	./fix-arr:
		begin-ptr, cast-immutable, each, end-ptr, fill, fill-fix-arr, fix-arr, fold, is-empty,
		map, new, set-subscript, size, subscript, uninitialized-fix-arr
	./mut-arr:
		~=, copy, each, find-index, fold, is-at-capacity, is-empty, mut-arr, new,
		remove-unordered-at, set-filter, set-map, set-subscript, size, subscript

mut-dict<k, v> record mut
	.entries .mut fix-arr entry<k, v>
	.total-size .mut nat64

.entry<k, v> union mut
	none
	one pair<k, v>
	many pair<k, v> mut[]

new<k, v> v mut[k](...a pair<k, v>[]) is-data<k> compare<k> hash-mix<k>
	a to-mut-dict

to-mut-dict<k, v> v mut[k](a pair<k, v>[]) is-data<k> compare<k> hash-mix<k>
	res v mut[k] = a.size mut-dict-with-capacity
	a each pair =>
		res[pair from] := pair to
	res

###
New dict with `capacity` empty entries.
WARN: Due to hash conflicts, this doesn't guarantee that allocations won't be needed.
###
mut-dict-with-capacity<k, v> v mut[k](capacity nat64) is-data<k> compare<k> hash-mix<k>
	# TODO: should not need type annotation
	(capacity fill-fix-arr none)::fix-arr<entry<k, v>>, 0

arr<k, v> pair<k, v>[](a v mut[k]) is-data<k> compare<k> hash-mix<k>
	a map-to-arr (key, value) => key, value

move-to-arr<k, v> pair<k, v>[](a v mut[k]) is-data<k> compare<k> hash-mix<k>
	res = a arr
	a clear
	res

copy<k, v> v mut[k](a v mut[k]) is-data<k> compare<k> hash-mix<k>
	entries fix-arr entry<k, v> = a.entries map entry =>
		match entry
		as none
			none
		as one ar
			ar one
		as many m
			m.copy many
	entries, a.total-size
test
	a str mut[nat64] = (1, "1"), (2, "2"), (5, "5")
	a verify "_ (1 -> 1) [2 -> 2, 5 -> 5]"

	b = a copy
	b verify "_ (1 -> 1) [2 -> 2, 5 -> 5]"

	a[6] := "6"
	a verify "(6 -> 6) (1 -> 1) [2 -> 2, 5 -> 5]"
	b verify "_ (1 -> 1) [2 -> 2, 5 -> 5]"

is-empty<k, v> bool(a v mut[k]) is-data<k> compare<k> hash-mix<k>
	a.size == 0

size<k, v> nat64(a v mut[k]) is-data<k> compare<k> hash-mix<k>
	a total-size

subscript<k, v> v?(a v mut[k], key k) trusted is-data<k> compare<k> hash-mix<k>
	unless a is-empty
		match a.entries[key.hash unsafe-mod a.entries.size]
		as none
			()
		as one ar
			ar.from == key ? ar.to,
		as many m
			if index ?= m find-index pair => pair.from == key
				m[index].to,

in<k, v> bool(key k, a v mut[k]) is-data<k> compare<k> hash-mix<k>
	!a[key].is-empty

set-subscript<k, v> void(a v mut[k], key k, value v) is-data<k> compare<k> hash-mix<k>
	drop: a update key, (value,)

clear<k, v> void(a v mut[k]) is-data<k> compare<k> hash-mix<k>
	a.entries fill none
	a.total-size := 0

swap<k, v> void(a v mut[k], b v mut[k]) is-data<k> compare<k> hash-mix<k>
	temp-entries = a.entries
	a.entries := b.entries
	b.entries := temp-entries
	temp-size = a.total-size
	a.total-size := b.total-size
	b.total-size := temp-size

remove-key<k, v> void(a v mut[k], key k) is-data<k> compare<k> hash-mix<k>
	drop: a try-remove-key key

try-remove-key<k, v> v?(a v mut[k], key k) is-data<k> compare<k> hash-mix<k>
	a update key, ()

###
f: Takes the value (if it exists), returns the new value (or none to remove).
Returns the old value (if it exists).
###
.update<k, v> v?(a v mut[k], key k, new-value v?) trusted is-data<k> compare<k> hash-mix<k>
	if a.entries is-empty
		if value ?= new-value
			a.entries := (key, value).one,
			a.total-size := 1
		()
	else
		entry-index = key.hash unsafe-mod a.entries.size
		match a.entries[entry-index]
		as none
			if value ?= new-value
				a.entries[entry-index] := (key, value) one
				a.total-size := a.total-size wrap-add 1
			()
		as one ar
			if ar.from == key
				a.entries[entry-index] := if value ?= new-value
					(key, value) one
				else
					a.total-size := a.total-size wrap-sub 1
					none
				ar.to,
			else
				if value ?= new-value
					if a should-expand
						a expand
						a[key] := value
					else
						a.entries[entry-index] := (ar, (key, value)) many
						a.total-size := a.total-size wrap-add 1
				()
		as many m
			if index ?= m find-index pair => pair.from == key
				old-value = m[index] to
				if value ?= new-value
					m[index] := key, value
				else
					drop: m remove-unordered-at index
					if m is-empty
						a.entries[entry-index] := none
					elif m.size == 1
						# TODO: should not need a local
						z = m[0]
						a.entries[entry-index] := z one
					a.total-size := a.total-size wrap-sub 1
				old-value,
			else
				if value ?= new-value
					if m.is-at-capacity && a.should-expand
						a expand
						a[key] := value
					else
						m ~= (key, value)
						a.total-size := a.total-size wrap-add 1
				()

~= <k, v> void(a v mut[k], b pair<k, v>) is-data<k> compare<k> hash-mix<k>
	a[b from] := b to

~= <k, v> void(a v mut[k], b pair<k, v>[]) is-data<k> compare<k> hash-mix<k>
	b each pair =>
		a ~= pair

# Called when we're about to allocate a bigger bucket -- maybe we should expand the table instead
.should-expand<k, v> bool(a v mut[k])
	a.total-size >= a.entries.size

.expand<k, v> void(a v mut[k]) is-data<k> compare<k> hash-mix<k>
	forbid: a.entries.size == 0
	new-size = a.entries.size wrap-mul 2
	bigger v mut[k] = new-size mut-dict-with-capacity
	a each (key, value) =>
		bigger[key] := value
	a swap bigger
	assert: a.entries.size == new-size

region iteration

each<k, v> void(a v mut[k], f act void(k, v)) is-data<k> compare<k> hash-mix<k>
	() fold a, (ignore, key, value) => f[key, value]

fold<a, k, v> a(acc a, a v mut[k], f act a(a, k, v)) is-data<k> compare<k> hash-mix<k>
	acc fold a.entries, (cur, entry) =>
		match entry
		as none
			cur
		as one ar
			f[cur, ar.from, ar.to]
		as many m
			cur fold m, (cur2, pair) => f[cur2, pair.from, pair.to]

set-filter<k, v> void(a v mut[k], f act bool(k, v)) trusted is-data<k> compare<k> hash-mix<k>
	a.entries.begin-ptr set-filter-recur a.entries.end-ptr, f
.set-filter-recur<k, v> void(entry-ptr entry<k, v> mut*, entry-end entry<k, v> mut*, f act bool(k, v)) unsafe
	unless entry-ptr == entry-end
		match *entry-ptr
		as none
			()
		as one ar
			unless f[ar.from, ar.to]
				*entry-ptr := none
		as many m
			m set-filter pair => f[pair.from, pair.to]
			if m is-empty
				*entry-ptr := none
			elif m.size == 1
				# TODO: should not need a local
				z = m[0]
				*entry-ptr := z one
		entry-ptr + 1 set-filter-recur entry-end, f


map-to-arr<out, k, v> out[](a v mut[k], f act out(k, v)) trusted is-data<k> compare<k> hash-mix<k>
	out fix-arr out = a.size uninitialized-fix-arr
	end = out.begin-ptr fold a, (cur, key, value) =>
		*cur := f[key, value]
		cur + 1
	assert: end == out.end-ptr
	out cast-immutable

move-to-dict<k, v> v[k](a v mut[k]) is-data<k> compare<k> hash-mix<k>
	res = a map-to-arr ((k, v) => k, v) to-dict
	a clear
	res

set-map-values<k, v> void(a v mut[k], f act v(k, v)) trusted is-data<k> compare<k> hash-mix<k>
	a.entries.begin-ptr set-map-values-recur a.entries.end-ptr, f
.set-map-values-recur<k, v> void(entry-ptr entry<k, v> mut*, entry-end entry<k, v> mut*, f act v(k, v)) unsafe
	unless entry-ptr == entry-end
		match *entry-ptr
		as none
			()
		as one ar
			*entry-ptr := (ar.from, f[ar.from, ar.to]) one
		as many m
			m set-map pair => pair.from, f[pair.from, pair.to]
		entry-ptr + 1 set-map-values-recur entry-end, f

.dbg str(a str mut[nat64])
	out writer = ()
	a.entries each entry =>
		match entry
		as none
			out ~= "_"
		as one ar
			out ~= "("
			out ~= ar.from to-str
			out ~= " -> "
			out ~= ar to
			out ~= ")"
		as many m
			out ~= "["
			m each pair =>
				out ~= pair.from to-str
				out ~= " -> "
				out ~= pair to
				out ~= ", "
			out backup 2
			out ~= "]"
		out ~= " "
	out backup
	out move-to-str

.verify void(a str mut[nat64], expected str)
	a.dbg is expected

test
	a str mut[nat64] = ()

	a[6] := "6"
	a[5] is ()
	a[6] is ("6",)
	a.size is 1
	# TODO: a.arr is ((6, "6"),)
	a.arr map (pair => pair from) is (6,)
	a.arr map (pair => pair to) is ("6",)

	a verify "(6 -> 6)"

	a[6] := "six"
	a verify "(6 -> six)"

	a[3] := "3"
	a verify "(6 -> six) (3 -> 3)"

	a[4] := "4"
	a verify "(4 -> 4) _ (6 -> six) (3 -> 3)"

	a[8] := "8"
	a verify "[4 -> 4, 8 -> 8] _ (6 -> six) (3 -> 3)"

	a[4] is ("4",)
	a[8] is ("8",)
	a[5] is ()

	# TODO: a.arr is ((4, "4"), (8, "8"), (6, "six"), (3, "3"))
	a.arr map (pair => pair from) is (4, 8, 6, 3)
	a.arr map (pair => pair to) is ("4", "8", "six", "3")

	a[12] := "12"
	a verify "(8 -> 8) _ _ (3 -> 3) [4 -> 4, 12 -> 12] _ (6 -> six) _"

	a try-remove-key 5 is ()
	a try-remove-key 4 is ("4",)

	a verify "(8 -> 8) _ _ (3 -> 3) (12 -> 12) _ (6 -> six) _"

	a[11] := "11"
	a verify "(8 -> 8) _ _ [3 -> 3, 11 -> 11] (12 -> 12) _ (6 -> six) _"

	a set-filter (key, value) => key > 10 || value == "six"
	a verify "_ _ _ (11 -> 11) (12 -> 12) _ (6 -> six) _"

	a set-map-values (key, value) => "{key}-{value}"
	a verify "_ _ _ (11 -> 11-11) (12 -> 12-12) _ (6 -> 6-six) _"

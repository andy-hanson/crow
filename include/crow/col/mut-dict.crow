no-std
import
	../bool: !, &&, ||, bool
	../compare: >, >=
	../fun-util: subscript
	../hash: hash, hash-mix
	../json: json
	../misc: key, new, void
	../number: ==, <=>, +, -, *, %, nat64
	../option: ==, is-empty, new, option
	../string: ==, ~~, join, literal, string, to-string
	../test-util: is
	../tuple: from, new, pair, to
	./array: array
	./dict: dict, to-dict
	./mut-array:
		fill, fill-mut-array, mut-array, for-loop, is-empty, new, set-map, set-subscript, size,
		subscript, to-array
	./list: ==, ~=, build, for-loop, list, new, size, to-list, with-block
	./mut-list:
		~=, copy, find-index, for-loop, is-at-capacity, is-empty, mut-list, new,
		remove-unordered-at, set-filter, set-map, set-subscript, size, subscript

###
Mutable unordered dictionary.

Unordered means that iteration functions like `each` reach each entry in arbitrary order.
###
mut-dict[k, v] record mut
	.entries .mut (k, v) entry mut-array
	.total-size .mut nat64

.entry[k, v] union mut
	none
	one (k, v)
	many (k, v) mut[]

###
New dictionary containing the given pairs.

Later pairs overwrite earlier pairs with the same key.
###
new[k, v] v mut[k](...a (k, v) array) k key
	a.to-list to-mut-dict

###
Convert a list of pairs to a dictionary.

Later pairs overwrite earlier pairs with the same key.
###
to-mut-dict[k, v] v mut[k](a (k, v)[]) k key
	res v mut[k] = a.size mut-dict-with-capacity
	for pair : a
		res[pair from] := pair to
	res

###
New empty dictionary with space for about `capacity` entries.
This can have a small performance benefit if you know that much space will be needed.

Since hash conflicts are possible, this makes no guarantees about whether more allocations will be needed.
###
mut-dict-with-capacity[k, v] v mut[k](capacity nat64) k key
	# TODO: should not need type annotation
	(capacity fill-mut-array none)::((k, v) entry mut-array), 0

# Copy pairs to a list.
to-list[k, v] (k, v)[](a v mut[k]) k key
	for k, v : a
		k, v

# Copy pairs to a list and clear the dictionary.
move-to-list[k, v] (k, v)[](a v mut[k]) k key
	res = a to-list
	a clear
	res

# Copy pairs to a new dictionary.
copy[k, v] v mut[k](a v mut[k]) k key
	entries (k, v) entry mut-array = for entry : a entries
		match entry
		as none
			none
		as one ar
			ar one
		as many m
			m.copy many
	entries, a.total-size
test
	a string mut[nat64] = (1, "1"), (2, "2"), (5, "5")
	a verify "_ (1 -> 1) [2 -> 2, 5 -> 5]"

	b = a copy
	b verify "_ (1 -> 1) [2 -> 2, 5 -> 5]"

	a[6] := "6"
	a verify "(6 -> 6) (1 -> 1) [2 -> 2, 5 -> 5]"
	b verify "_ (1 -> 1) [2 -> 2, 5 -> 5]"

# `true` iff `a.size == 0`.
is-empty[k, v] bool(a v mut[k]) k key
	a.size == 0

# Number of unique keys in the dictionary.
size[k, v] nat64(a v mut[k]) k key
	a total-size

###
Gets the value associated with a key.

Returns an empty option if the key is not in the dictionary.
###
subscript[k, v] v?(a v mut[k], key k) k key
	unless a is-empty
		match a.entries[key.hash % a.entries.size]
		as none
			()
		as one ar
			ar.from == key ? ar.to,
		as many m
			if index ?= m find-index pair => pair.from == key
				m[index].to,

# `true` iff the key is in the dictinoary.
in[k, v] bool(key k, a v mut[k]) k key
	!a[key].is-empty

###
Sets the key to the given value, so that `a[key]` will return `value`.

If the key is already in the dictionary, this overwrites the previous value.
###
set-subscript[k, v] void(a v mut[k], key k, value v) k key
	_ = a update key, (value,)
	()

# Remove all keys, leaving the dictionary empty.
clear[k, v] void(a v mut[k]) k key
	a.entries fill none
	a.total-size := 0

# Set the contents of `a` to the contents of `b` and vice versa.
swap[k, v] void(a v mut[k], b v mut[k]) k key
	temp-entries = a.entries
	a.entries := b.entries
	b.entries := temp-entries
	temp-size = a.total-size
	a.total-size := b.total-size
	b.total-size := temp-size

###
If the key was in the dictionary, remove it and return the old value.

Returns an empty option if the key was not in the dictionary.
###
try-remove[k, v] v?(a v mut[k], key k) k key
	a update key, ()

###
f: Takes the value (if it exists), returns the new value (or none to remove).
Returns the old value (if it exists).
###
.update[k, v] v?(a v mut[k], key k, new-value v?) k key
	if a.entries is-empty
		if value ?= new-value
			a.entries := (key, value).one,
			a.total-size := 1
		()
	else
		entry-index = key.hash % a.entries.size
		match a.entries[entry-index]
		as none
			if value ?= new-value
				a.entries[entry-index] := (key, value) one
				a.total-size := a.total-size + 1
			()
		as one ar
			if ar.from == key
				a.entries[entry-index] := if value ?= new-value
					(key, value) one
				else
					a.total-size := a.total-size - 1
					none
				ar.to,
			else
				if value ?= new-value
					if a should-expand
						a expand
						a[key] := value
					else
						a.entries[entry-index] := (ar, (key, value)) many
						a.total-size := a.total-size + 1
				()
		as many m
			if index ?= m find-index pair => pair.from == key
				old-value = m[index] to
				if value ?= new-value
					m[index] := key, value
				else
					_ = m remove-unordered-at index
					if m is-empty
						a.entries[entry-index] := none
					elif m.size == 1
						# TODO: should not need a local
						z = m[0]
						a.entries[entry-index] := z one
					a.total-size := a.total-size - 1
				old-value,
			else
				if value ?= new-value
					if (trusted m is-at-capacity) && a.should-expand
						a expand
						a[key] := value
					else
						m ~= (key, value)
						a.total-size := a.total-size + 1
				()

# This is the same as calling `a[b a] := b b`.
~=[k, v] void(a v mut[k], b (k, v)) k key
	a[b from] := b to

# This is the same as calling `a ~= x` for every `x` in `b`.
~~=[k, v] void(a v mut[k], b (k, v)[]) k key
	for pair : b
		a ~= pair

# Called when we're about to allocate a bigger bucket -- maybe we should expand the table instead
.should-expand[k, v] bool(a v mut[k])
	a.total-size >= a.entries.size

.expand[k, v] void(a v mut[k]) k key
	forbid a.entries.size == 0
	new-size = a.entries.size * 2
	bigger v mut[k] = new-size mut-dict-with-capacity
	for key, value : a
		bigger[key] := value
	a swap bigger
	assert a.entries.size == new-size

region iteration

# Calls `f` for every key and value in the dictionary.
for-loop[k, v] void(a v mut[k], f act void(k, v)) k key
	for entry : a entries
		match entry
		as none
			()
		as one pair
			f[pair from, pair to]
		as many m
			for pair : m
				f[pair from, pair to]

###
Calls `f` on every key and value and returns a list of the results.
###
for-loop[out, k, v] out[](a v mut[k], f act out(k, v)) k key
	with out : a.size build
		for key, value : a
			out ~= f[key, value]

for-loop[k-out, v-out, k, v] v-out[k-out](a v mut[k], f act (k-out, v-out)(k, v)) k key, k-out key
	(a for-loop f)::(k-out, v-out)[] to-dict

###
Filters the dictionary in place.

Calls `f` on every key and value and removes the key if `f` returns false.
###
set-filter[k, v] void(a v mut[k], f act bool(k, v)) k key
	a.entries set-map entry =>
		match entry
		as none
			none
		as one ar
			if f[ar.from, ar.to]
				ar one
			else
				none
		as many m
			m set-filter pair => f[pair.from, pair.to]
			if m is-empty
				none
			elif m.size == 1
				m[0] one
			else
				m many

to-dict[k, v] v[k](a v mut[k]) k key
	(for k, v : a; k, v)::(k, v)[] to-dict

###
Calls `f` on every key and value, and replaces the value with the new value returned by `f`.
###
set-map-values[k, v] void(a v mut[k], f act v(k, v)) k key
	a.entries set-map entry =>
		match entry
		as none
			none
		as one ar
			(ar.from, f[ar.from, ar.to]) one
		as many m
			m set-map pair => pair.from, f[pair.from, pair.to]
			m many

.dbg[k, v] string(a v mut[k]) k to-string, v to-string
	" " join for entry : a.entries.to-array.to-list
		match entry
		as none
			"_"
		as one ar
			"({ar dbg})"
		as many m
			"[{", " join for pair : m; pair dbg}]"
.dbg[k, v] string(a (k, v)) k to-string, v to-string
	"{a from} -> {a to}"

.verify void(a string mut[nat64], expected string)
	a.dbg is expected

test
	a string mut[nat64] = ()

	a[6] := "6"
	a[5] is ()
	a[6] is ("6",)
	a.size is 1
	# TODO: a.arr is ((6, "6"),)
	(for pair : a to-list; pair from)::nat64[] is (6,)
	(for pair : a to-list; pair to)::string[] is ("6",)

	a verify "(6 -> 6)"

	a[6] := "six"
	a verify "(6 -> six)"

	a[3] := "3"
	a verify "(6 -> six) (3 -> 3)"

	a[4] := "4"
	a verify "(4 -> 4) _ (6 -> six) (3 -> 3)"

	a[8] := "8"
	a verify "[4 -> 4, 8 -> 8] _ (6 -> six) (3 -> 3)"

	a[4] is ("4",)
	a[8] is ("8",)
	a[5] is ()

	# TODO: a.to-list is ((4, "4"), (8, "8"), (6, "six"), (3, "3"))
	(for pair : a to-list; pair from)::nat64[] is (4, 8, 6, 3)
	(for pair : a to-list; pair to)::string[] is ("4", "8", "six", "3")

	a[12] := "12"
	a verify "(8 -> 8) _ _ (3 -> 3) [4 -> 4, 12 -> 12] _ (6 -> six) _"

	a try-remove 5 is ()
	a try-remove 4 is ("4",)

	a verify "(8 -> 8) _ _ (3 -> 3) (12 -> 12) _ (6 -> six) _"

	a[11] := "11"
	a verify "(8 -> 8) _ _ [3 -> 3, 11 -> 11] (12 -> 12) _ (6 -> six) _"

	a set-filter (key, value) => key > 10 || value == "six"
	a verify "_ _ _ (11 -> 11) (12 -> 12) _ (6 -> six) _"

	a set-map-values (key, value) => "{key}-{value}"
	a verify "_ _ _ (11 -> 11-11) (12 -> 12-12) _ (6 -> 6-six) _"

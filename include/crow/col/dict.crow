no-std
import
	../bits: &, unsafe-bit-shift-right
	../bool: !, &&, ==, bool, false, true
	../compare: !=, <, <=, >=, compare, equal, max
	../exception: assert, unreachable
	../fun-util: subscript
	../hash: hash, hash-mix
	../misc: is-data, new, void
	../opt: ==, force, is-empty, new, opt
	../ptr: ==, +, set-deref
	../range: ..
	../str: ==, ~, str
	../str-conv: to-str
	../test-util: is
	../tuple: from, new, pair, to
	../writer: ~=, backup!, move-to-str!, new, writer
	../private/bootstrap: hard-assert, todo
	../private/number-low-level: ==, <=>, nat64, wrap-add, wrap-sub
	./arr: ~, arr, arr-equal, is-empty, new, size, subscript
	./arr-util:
		each, each-with-index, every, find-index, fold, fold-with-index,
		remove-at, rtail, tail, update, update-with-default
	./fix-arr:
		begin-ptr, cast-immutable, copy-from!, end-ptr, fill-fix-arr, fix-arr, set-subscript, size,
		subscript, uninitialized-fix-arr
	./sort: sort-by

dict<k, v> record
	by-val
	.root node<k, v>

# TODO: comparison should be generic
dict-equal<k, v> bool(a v[k], b v[k]) is-data<k> compare<k> hash-mix<k> equal<v>
	# TODO:PERF
	a.arr-sorted arr-equal b.arr-sorted, (x, y) =>
		x.from == y.from && x.to == y.to

node<k, v> union
	inner-node node<k, v>[]
	leaf-node pair<k, v>[]

.empty-leaf-node<k, v> node<k, v>()
	() leaf-node

.low-bits nat64(a nat64)
	a & 0b111

.inner-node-n-bits nat64()
	3

.leaf-max-size nat64()
	8

new<k, v> v[k](...a pair<k, v>[]) is-data<k> compare<k> hash-mix<k>
	a to-dict

to-dict<k, v> v[k](a pair<k, v>[]) is-data<k> compare<k> hash-mix<k>
	if a.size <= 4 && a.no-duplicate-keys
		a.leaf-node,
	else
		# TODO: shuld be able to write this inline
		empty node<k, v> = empty-leaf-node
		(empty,) fold a, (cur, x) => cur ~ x

arr<k, v> pair<k, v>[](a v[k]) is-data<k> compare<k> hash-mix<k>
	a map-to-arr (k, v) => k, v

arr-sorted<k, v> pair<k, v>[](a v[k]) is-data<k> compare<k> hash-mix<k>
	a.arr sort-by pair => pair.from

.no-duplicate-keys<k, v> bool(a pair<k, v>[]) compare<k>
	if a.size <= 1
		true
	else
		key = a[0] from
		a.tail every (it => it.from != key) && a.tail.no-duplicate-keys

is-empty<k, v> bool(a v[k]) is-data<k> compare<k> hash-mix<k>
	a.root node-is-empty
.node-is-empty<k, v> bool(a node<k, v>)
	match a
	as inner-node _
		false
	as leaf-node l
		l is-empty

size<k, v> nat64(a v[k]) is-data<k> compare<k> hash-mix<k>
	0 size-recur a.root
.size-recur<k, v> nat64(acc nat64, a node<k, v>)
	match a
	as inner-node i
		acc fold i, (cur, child) => cur size-recur child
	as leaf-node l
		acc wrap-add l.size

subscript<k, v> v?(a v[k], key k) is-data<k> compare<k> hash-mix<k>
	match a root
	as inner-node _
		hash = key hash
		a.root subscript-recur key, hash
	as leaf-node l
		l subscript-leaf-recur key
.subscript-recur<k, v> v?(a node<k, v>, key k, remaining-hash nat64) trusted is-data<k> compare<k> hash-mix<k>
	match a
	as inner-node i
		which = remaining-hash low-bits
		if which < i.size
			i[which] subscript-recur key, (remaining-hash unsafe-bit-shift-right inner-node-n-bits)
	as leaf-node l
		l subscript-leaf-recur key
.subscript-leaf-recur<k, v> v?(a pair<k, v>[], key k) compare<k>
	if a is-empty
		()
	elif a[0].from == key
		a[0].to,
	else
		a.tail subscript-leaf-recur key

in<k, v> bool(key k, a v[k]) is-data<k> compare<k> hash-mix<k>
	!a[key].is-empty

~ <k, v> v[k](a v[k], pair pair<k, v>) is-data<k> compare<k> hash-mix<k>
	res = a get-or-update pair.from, old-value =>
		pair.to insert
	if node ?= res new-node
		node,
	else
		a

~ <k, v> v[k](a v[k], pairs pair<k, v>[]) is-data<k> compare<k> hash-mix<k>
	a fold pairs, (cur, pair) => cur ~ pair

try-add-result<k, v> union
	already-has-key v
	added v[k]

already-has-key<v> record
	value v

# Adds a value if the key doesn't already exist
try-add<k, v> try-add-result<k, v>(a v[k], key k, get-value act v()) is-data<k> compare<k> hash-mix<k>
	res = a get-or-update key, old-value =>
		if old-value is-empty
			get-value[] insert
		else
			no-change
	if value ?= res old-value
		value already-has-key
	else
		(res.new-node.force,) added

- <k, v> v[k](a v[k], key k) is-data<k> compare<k> hash-mix<k>
	if res ?= a try-remove key
		res new-dict
	else
		a

try-remove-result<k, v> record
	by-val
	old-value v
	new-dict v[k]

try-remove<k, v> try-remove-result<k, v>?(a v[k], key k) is-data<k> compare<k> hash-mix<k>
	res = a get-or-update key, old-value => remove
	if value ?= res old-value
		(value, (res.new-node.force,)),

.get-or-update-result<k, v> record
	by-val
	# If none, don't update anything
	new-node node<k, v>?
	old-value v?

.get-or-update-action<v> union
	no-change
	remove
	insert v

###
`f` takes the old value and returns the new value, or 'none' to choose to preserve the old value.
###
.get-or-update<k, v> get-or-update-result<k, v>
	a v[k]
	key k
	f act get-or-update-action v(v?)
spec
	compare<k>
	hash-mix<k>
body
	hash = key hash
	match a root
	as inner-node _
		a.root get-or-update-recur key, hash, 0, f
	as leaf-node l
		l get-or-update-leaf key, hash, 0, f

.get-or-update-recur<k, v> get-or-update-result<k, v>
	a node<k, v>
	key k
	remaining-hash nat64
	hash-shift nat64
	f act get-or-update-action v(v?)
spec
	trusted
	compare<k>
	hash-mix<k>
body
	match a
	as inner-node i
		which = remaining-hash low-bits
		if which < i.size
			next-hash = remaining-hash unsafe-bit-shift-right 3
			child-res = i[which] get-or-update-recur key, next-hash, (hash-shift wrap-add 3), f
			if node ?= child-res new-node
				new-inner = i update-child which, node
				(new-inner,), child-res.old-value
			else
				child-res
		else
			match f[()]
			as no-change
				(), ()
			as remove
				(), ()
			as insert ins
				# TODO: type annotation should not be necessary
				new-leaf node<k, v> = ((key, ins),) leaf-node
				# TODO: type annotation should not be necessary
				new-node node<k, v> = i update-with-default which, new-leaf, empty-leaf-node inner-node
				(new-node,), ()
	as leaf-node l
		l get-or-update-leaf key, remaining-hash, hash-shift, f

.update-child<k, v> node<k, v>(a node<k, v>[], which nat64, new-child node<k, v>)
	if leaf ?= a inner-node-to-leaf which, new-child
		leaf
	elif new-child node-is-empty
		if which == (a.size wrap-sub 1)
			new-children = a rtail
			if new-children.size == 1
				new-children[0]
			else
				new-children inner-node
		else
			new-children = a update which, new-child
			if child ?= new-children find-only-non-empty-child
				child
			else
				new-children inner-node
	else
		a update which, new-child inner-node

# Returns 'some' if we should change this to a leaf.
.inner-node-to-leaf<k, v> node<k, v>?(a node<k, v>[], which nat64, new-child node<k, v>) trusted
	total-size = 0 fold-with-index a, (cur, child, child-index) =>
		new-child-here = if child-index == which
			new-child
		else
			child
		match new-child-here
		as inner-node _
			99
		as leaf-node l
			cur wrap-add l.size
	if total-size <= leaf-max-size
		# TODO: if only one non-empty leaf, don't copy..
		out fix-arr pair<k, v> = total-size uninitialized-fix-arr
		end = 0 fold-with-index a, (out-index, child, child-index) =>
			new-child-here = if child-index == which
				new-child
			else
				child
			match new-child-here
			as inner-node _
				unreachable
			as leaf-node l
				new-out-index = out-index wrap-add l.size
				out[out-index .. new-out-index] copy-from! l
				new-out-index
		assert: end == out.size
		out.cast-immutable.leaf-node,

.find-only-non-empty-child<k, v> node<k, v>?(children node<k, v>[])
	first-non-empty-index = force: children find-index it => !it.node-is-empty
	if children[(first-non-empty-index wrap-add 1) .. children.size] every it => it node-is-empty
		children[first-non-empty-index],

.get-or-update-leaf<k, v> get-or-update-result<k, v>
	a pair<k, v>[]
	key k
	remaining-hash nat64
	hash-shift nat64
	f act get-or-update-action v(v?)
spec
	compare<k>
	hash-mix<k>
body
	if index ?= a find-index it => it.from == key
		old-value = a[index] to
		new-node node<k, v>? = match f[(old-value,)]
		as no-change
			()
		as remove
			(a remove-at index leaf-node),
		as insert ins
			(a update index, (key, ins) leaf-node),
		new-node, (old-value,)
	else
		new-node node<k, v>? = match f[()]
		as no-change
			()
		as remove
			()
		as insert ins
			if a.size >= leaf-max-size
				if hash-shift >= 64
					# We've exhausted the hash.
					# TODO: fall back to a sorted dict ?
					todo
				# If we get here, it's guaranteed that we don't need to recursively create leaves.
				# Just group by hash.
				(a new-inner-node key, ins, remaining-hash, hash-shift),
			else
				(a ~ ((key, ins),) leaf-node),
		new-node, ()

# In order to get the hash, we need to know the shift amount
.new-inner-node<k, v> node<k, v>
	a pair<k, v>[]
	key k
	value v
	hash nat64
	hash-shift nat64
spec
	trusted
	hash-mix<k>
body
	key-hash = hash low-bits
	max-hash = key-hash fold a, (cur, pair) =>
		cur max (pair.from.hash unsafe-bit-shift-right hash-shift low-bits)
	res fix-arr node<k, v> = max-hash wrap-add 1 fill-fix-arr empty-leaf-node
	# TODO: avoid allocating the same leaf twice...
	res[key-hash] := ((key, value),) leaf-node
	a each pair =>
		x = pair.from.hash unsafe-bit-shift-right hash-shift low-bits
		res[x] := match res[x]
		as inner-node _
			unreachable
		as leaf-node l
			l ~ (pair,) leaf-node
	res.cast-immutable inner-node

region iteration

each<k, v> void(a v[k], f act void(k, v)) is-data<k> compare<k> hash-mix<k>
	() fold a, (ignore, key, value) => f[key, value]

each-key<k, v> void(a v[k], f act void(k)) is-data<k> compare<k> hash-mix<k>
	() fold-keys a, (ignore, key) => f[key]

fold<a, k, v> a(acc a, a v[k], f act a(a, k, v)) is-data<k> compare<k> hash-mix<k>
	acc fold-recur a.root, f
.fold-recur<a, k, v> a(acc a, a node<k, v>, f act a(a, k, v))
	match a
	as inner-node i
		acc fold i, (cur, child) => cur fold-recur child, f
	as leaf-node l
		acc fold l, (cur, pair) => f[cur, pair.from, pair.to]

fold-keys<a, k, v> a(acc a, a v[k], f act a(a, k)) is-data<k> compare<k> hash-mix<k>
	acc fold a, (cur, key, value) => f[cur, key]

# TODO: map
# TODO: map-values

keys<k, v> k[](a v[k]) is-data<k> compare<k> hash-mix<k>
	a map-to-arr (k, ignore) => k

values<k, v> v[](a v[k]) is-data<k> compare<k> hash-mix<k>
	a map-to-arr (ignore, v) => v

map-to-arr<a, k, v> a[](a v[k], f act a(k, v)) trusted is-data<k> compare<k> hash-mix<k>
	res fix-arr a = a.size uninitialized-fix-arr
	end = res.begin-ptr fold a, (cur, k, v) =>
		*cur := f[k, v]
		cur + 1
	hard-assert: end == res.end-ptr
	res cast-immutable

.dbg str(a str[nat64])
	res writer = ()
	res dbg-recur a.root, ""
	res move-to-str!

.dbg-recur void(out writer, a node<nat64, str>, path str)
	match a
	as inner-node i
		i each-with-index (child, index) =>
			if !child.node-is-empty
				out dbg-recur child, path ~ index.to-str
				out ~= " "
		out backup!
	as leaf-node l
		out ~= path
		out ~= "["
		l each pair =>
			out ~= pair from
			out ~= " -> "
			out ~= pair to
			out ~= ", "
		if l is-empty
			out ~= "]"
		else
			out backup! 2
			out ~= "]"

.dbg-recur void(out writer, a node<nat64, void>, path str)
	match a
	as inner-node i
		i each-with-index (child, index) =>
			if !child.node-is-empty
				out dbg-recur child, path ~ index.to-str
				out ~= " "
		out backup!
	as leaf-node l
		out ~= path
		out ~= "["
		l each pair =>
			out ~= pair from
			out ~= ", "
		if l is-empty
			out ~= "]"
		else
			out backup! 2
			out ~= "]"

verify void(a str[nat64], expected str)
	a.dbg is expected

test
	l0 str[nat64] = ()
	l0.is-empty is true
	l0.size is 0
	l0 verify "[]"
	l0[0] is ()

	l1 = l0 ~ (5, "5")
	l1.is-empty is false
	l1.size is 1
	l1 verify "[5 -> 5]"
	
	# TODO: should not need type annotation
	l2 = l1 ~ ((1, "1"), (3, "3"), (9, "9")) :: pair<nat64, str>[]
	l2 verify "[5 -> 5, 1 -> 1, 3 -> 3, 9 -> 9]"

	l3 = l2 ~ (13, "13")
	l3 verify "[5 -> 5, 1 -> 1, 3 -> 3, 9 -> 9, 13 -> 13]"
	#l3 verify "1[1 -> 1, 9 -> 9] 3[3 -> 3] 5[13 -> 13, 5 -> 5]"

	#l3[3] is ("3",)
	#l3[4] is ()

	#l3 - 3 verify "[1 -> 1, 9 -> 9, 13 -> 13, 5 -> 5]"

	# TODO: lots more tests. Be sure to test removal can remove inner nodes.

no-std
import
	../bits: &, unsafe-bit-shift-right
	../bool: !, &&, ==, bool, false, new, true
	../compare: !=, <, <=, >=, compare, equal, max
	../exception: unreachable
	../fun-util: subscript
	../hash: hash, hash-mix
	../misc: is-data, new, void
	../number: ==, <=>, +, -, nat64
	../opt: !, is-empty, new, opt, opt-equal
	../ptr: ==, +, set-deref
	../range: .., for-loop
	../str: ==, ~~, literal, str
	../str-conv: to-str
	../str-util: join
	../test-util: is
	../tuple: from, new, pair, to
	../private/bootstrap: todo
	./array:
		~, array, every, find-index, fold, for-loop, is-empty, new, remove-at, rtail, size,
		subscript, tail, update-at
	./mut-array:
		begin-ptr, cast-immutable, copy-from, end-ptr, fill-mut-array, mut-array, set-subscript, size,
		subscript, uninitialized-mut-array
	./list: every, flatten, first, fold, for-loop, list, new, size, tail, to-array, to-list

###
Immutable unordered dictionary type.
A dictionary is logically a collection of key-value pairs (`(k, v)`).
A key can appear at most once, and given a key, you can access the associated value in O(1).

There should be `==`, `<=>`, and `hash-mix` functions defined for the key type `k`.

This is unordered;
functions dealing with multiple elements (like `to-list` or `for-loop`) work in arbitrary order.
###
dict<k, v> record by-val
	.root node<k, v>

# TODO: comparison should be generic

# True if the dictionaries have equal keys and values.
dict-equal<k, v> bool(a v[k], b v[k]) no-doc is-data<k> compare<k> hash-mix<k> equal<v>
	# TODO:PERF `a every` nto `a.to-list every`
	a.size == b.size && a.to-list every pair =>
		if bv ?= b[pair from]
			bv == pair.to

.node<k, v> union
	inner-node array node<k, v>
	leaf-node array<(k, v)>

.empty-leaf-node<k, v> node<k, v>() noctx
	() leaf-node

.low-bits nat64(a nat64)
	a & 0b111

.inner-node-n-bits nat64()
	3

.leaf-max-size nat64()
	8

empty-dict<k, v> v[k]() no-doc noctx
	# TODO: should not need type annotation
	empty-leaf-node@<k, v>,

###
Creates a new dict from the given key-value pairs.

Later pairs overwrite earlier pairs with the same key.
###
new<k, v> v[k](...a array (k, v)) is-data<k> compare<k> hash-mix<k>
	a.to-list to-dict

###
Converts a list of pairs to a dictionary.
Later pairs overwrite earlier pairs with the same key.
###
to-dict<k, v> v[k](a (k, v)[]) is-data<k> compare<k> hash-mix<k>
	if a.size <= 4 && a.no-duplicate-keys
		a.to-array.leaf-node,
	else
		# TODO: should be able to write this inline
		empty node<k, v> = empty-leaf-node
		(empty,) fold a, (cur, x) => cur ~ x

# Returns all pairs in the dictionary.
to-list<k, v> (k, v)[](a v[k]) is-data<k> compare<k> hash-mix<k>
	for k, v : a; k, v

.no-duplicate-keys<k, v> bool(a (k, v)[]) compare<k>
	# O(n^2) but it doesn't matter since n <= 4
	if a.size <= 1
		true
	else
		key = a.first! from
		a.tail every (it => it.from != key) && a.tail.no-duplicate-keys

# True iff the dict has no entries.
is-empty<k, v> bool(a v[k]) is-data<k> compare<k> hash-mix<k>
	a.root node-is-empty
.node-is-empty<k, v> bool(a node<k, v>)
	match a
	as inner-node _
		false
	as leaf-node l
		l is-empty

# Number of pairs.
size<k, v> nat64(a v[k]) is-data<k> compare<k> hash-mix<k>
	0 size-recur a.root
.size-recur<k, v> nat64(acc nat64, a node<k, v>)
	match a
	as inner-node i
		acc fold i, (cur, child) => cur size-recur child
	as leaf-node l
		acc + l.size

###
Gets the value associated with a key.
Returns an empty option if the key is not in `a`.
###
subscript<k, v> v?(a v[k], key k) is-data<k> compare<k> hash-mix<k>
	match a root
	as inner-node _
		hash = key hash
		a.root subscript-recur key, hash
	as leaf-node l
		l subscript-leaf-recur key
.subscript-recur<k, v> v?(a node<k, v>, key k, remaining-hash nat64) trusted is-data<k> compare<k> hash-mix<k>
	match a
	as inner-node i
		which = remaining-hash low-bits
		if which < i.size
			i[which] subscript-recur key, (remaining-hash unsafe-bit-shift-right inner-node-n-bits)
	as leaf-node l
		l subscript-leaf-recur key
.subscript-leaf-recur<k, v> v?(a array (k, v), key k) compare<k>
	if a is-empty
		()
	elif a[0].from == key
		a[0].to,
	else
		a.tail subscript-leaf-recur key

# `true` iff the key is in the dictionary.
in<k, v> bool(key k, a v[k]) is-data<k> compare<k> hash-mix<k>
	!a[key].is-empty

###
Associates the key `pair.a` with the value `pair.b`.
This may overwrite the key if it's already in `a`, or add a new entry.
###
~ <k, v> v[k](a v[k], pair (k, v)) is-data<k> compare<k> hash-mix<k>
	res = a get-or-update pair.from, _ =>
		pair.to insert
	if node ?= res new-node
		node,
	else
		a

###
Adds/updates many entries to `a`.
###
~~ <k, v> v[k](a v[k], pairs array (k, v)) is-data<k> compare<k> hash-mix<k>
	a fold pairs, (cur, pair) => cur ~ pair

got-or-added<k, v> union
	got v
	added (v[k], v)

###
If `key` is already in `a`, return `already-has-key` with the old value.
Else, add a new pair `key, get-value[]` return `added`.
###
get-or-add<k, v> got-or-added<k, v>(a v[k], key k, get-value act v()) is-data<k> compare<k> hash-mix<k>
	res = a get-or-update key, old-value =>
		if old-value is-empty
			get-value[] insert
		else
			no-change
	if v ?= res old-value
		v got
	else
		((res.new-node!,), res.new-value!) added

###
Removes a key and its associated value.

If the key is not in the dictionary, returns `a` unmodified.
(To distinguish that case, and to get the removed value, use `try-remove`.)
###
- <k, v> v[k](a v[k], key k) is-data<k> compare<k> hash-mix<k>
	if res ?= a try-remove key
		res rest
	else
		a

# Value removed from the dictionary, and the new dictionary.
try-remove-result<k, v> record by-val
	value v
	rest v[k]

###
Removes a key and its associated value, and returns the value and the new dictionary.

If the key is not in the dictionary, returns an empty option.
###
try-remove<k, v> try-remove-result<k, v>?(a v[k], key k) is-data<k> compare<k> hash-mix<k>
	res = a get-or-update key, _ => remove
	if value ?= res old-value
		(value, (res.new-node!,)),

.get-or-update-result<k, v> record by-val
	# If none, don't update anything
	new-node node<k, v>?
	old-value v?
	new-value v?

.get-or-update-action<v> union
	no-change
	remove
	insert v

###
`f` takes the old value and returns the new value, or 'none' to choose to preserve the old value.
###
.get-or-update<k, v> get-or-update-result<k, v>(
	a v[k],
	key k,
	f act get-or-update-action v(v?),
) compare<k> hash-mix<k>
	hash = key hash
	match a root
	as inner-node _
		a.root get-or-update-recur key, hash, 0, f
	as leaf-node l
		l get-or-update-leaf key, hash, 0, f

.get-or-update-recur<k, v> get-or-update-result<k, v>(
	a node<k, v>,
	key k,
	remaining-hash nat64,
	hash-shift nat64,
	f act get-or-update-action v(v?),
) trusted compare<k> hash-mix<k>
	match a
	as inner-node i
		which = remaining-hash low-bits
		if which < i.size
			next-hash = remaining-hash unsafe-bit-shift-right 3
			child-res = i[which] get-or-update-recur key, next-hash, hash-shift + 3, f
			if node ?= child-res new-node
				new-inner = i update-child which, node
				(new-inner,), child-res.old-value, child-res.new-value
			else
				child-res
		else
			match f[()]
			as no-change
				(), (), ()
			as remove
				(), (), ()
			as insert ins
				# TODO: type annotation should not be necessary
				new-leaf node<k, v> = ((key, ins),) leaf-node
				# TODO: type annotation should not be necessary
				new-node node<k, v> = i update-at-with-default which, new-leaf, empty-leaf-node inner-node
				(new-node,), (), (ins,)
	as leaf-node l
		l get-or-update-leaf key, remaining-hash, hash-shift, f

###
Unlike `update-at`, `index` doesn't need to be a valid index.
If `index > a.size`, entries between the and of `a` and the new entries will be `default`.
###
.update-at-with-default<a> array a(a array a, index nat64, new-value a, default a) no-doc
	if index < a.size
		a update-at index, new-value
	else
		for i : 0 .. index + 1
			if i < a.size
				a[i]
			elif i == index
				new-value
			else
				default

.update-child<k, v> node<k, v>(a array node<k, v>, which nat64, new-child node<k, v>)
	if leaf ?= a inner-node-to-leaf which, new-child
		leaf
	elif new-child node-is-empty
		if which == a.size - 1
			new-children = a rtail
			new-children.size == 1 ? new-children[0] : new-children.inner-node
		else
			new-children = a update-at which, new-child
			if child ?= new-children find-only-non-empty-child
				child
			else
				new-children inner-node
	else
		a update-at which, new-child inner-node

# Returns 'some' if we should change this to a leaf.
.inner-node-to-leaf<k, v> node<k, v>?(a array node<k, v>, which nat64, new-child node<k, v>) trusted
	total-size = 0 fold a, (cur, child, child-index) =>
		new-child-here = if child-index == which
			new-child
		else
			child
		match new-child-here
		as inner-node _
			99
		as leaf-node l
			cur + l.size
	if total-size <= leaf-max-size
		# TODO: if only one non-empty leaf, don't copy..
		out mut-array (k, v) = total-size uninitialized-mut-array
		end = 0 fold a, (out-index, child, child-index) =>
			new-child-here = if child-index == which
				new-child
			else
				child
			match new-child-here
			as inner-node _
				unreachable
			as leaf-node l
				new-out-index = out-index + l.size
				out[out-index .. new-out-index] copy-from l
				new-out-index
		assert end == out.size
		out.cast-immutable.leaf-node,

.find-only-non-empty-child<k, v> node<k, v>?(children array node<k, v>)
	first-non-empty-index = (children find-index it => !it.node-is-empty)!
	if children[first-non-empty-index + 1 .. children.size] every it => it node-is-empty
		children[first-non-empty-index],

.get-or-update-leaf<k, v> get-or-update-result<k, v>(
	a array (k, v),
	key k,
	remaining-hash nat64,
	hash-shift nat64,
	f act get-or-update-action v(v?),
) compare<k> hash-mix<k>
	if index ?= a find-index it => it.from == key
		old-value = a[index] to
		match f[(old-value,)]
		as no-change
			(), (old-value,), ()
		as remove
			((a remove-at index leaf-node),), (old-value,), ()
		as insert ins
			new-node node<k, v> = a update-at index, (key, ins) leaf-node
			(new-node,), (old-value,), (ins,)
	else
		match f[()]
		as no-change
			(), (), ()
		as remove
			(), (), ()
		as insert ins
			new-node node<k, v> = if a.size >= leaf-max-size
				if hash-shift >= 64
					# We've exhausted the hash.
					# TODO: fall back to a sorted dict ?
					todo
				# If we get here, it's guaranteed that we don't need to recursively create leaves.
				# Just group by hash.
				a new-inner-node key, ins, remaining-hash, hash-shift
			else
				a ~ (key, ins) leaf-node
			(new-node,), (), (ins,)

# In order to get the hash, we need to know the shift amount
.new-inner-node<k, v> node<k, v>(
	a array (k, v),
	key k,
	value v,
	hash nat64,
	hash-shift nat64,
) trusted hash-mix<k>
	key-hash = hash low-bits
	max-hash = key-hash fold a, (cur, pair) =>
		cur max (pair.from.hash unsafe-bit-shift-right hash-shift low-bits)
	res mut-array node<k, v> = max-hash + 1 fill-mut-array empty-leaf-node
	# TODO: avoid allocating the same leaf twice...
	res[key-hash] := ((key, value),) leaf-node
	for pair : a
		x = pair.from.hash unsafe-bit-shift-right hash-shift low-bits
		res[x] := match res[x]
		as inner-node _
			unreachable
		as leaf-node l
			l ~ pair leaf-node
	res.cast-immutable inner-node

region iteration

fold<a, k, v> a(acc a, a v[k], f act a(a, k, v)) is-data<k> compare<k> hash-mix<k>
	acc fold-recur a.root, f
.fold-recur<a, k, v> a(acc a, a node<k, v>, f act a(a, k, v))
	match a
	as inner-node i
		acc fold i, (cur, child) => cur fold-recur child, f
	as leaf-node l
		acc fold l, (cur, pair) => f[cur, pair.from, pair.to]

# TODO: map
# TODO: map-values

# List of every key in the dictionary.
keys<k, v> k[](a v[k]) is-data<k> compare<k> hash-mix<k>
	for k, _ : a
		k

# List of every value in the dictionary.
values<k, v> v[](a v[k]) is-data<k> compare<k> hash-mix<k>
	for _, v : a
		v

for-loop<k, v> void(a v[k], f act void(k, v)) is-data<k> compare<k> hash-mix<k>
	() fold a, (_, key, value) => f[key, value]

# Calls `f` on every pair in the dictionary and returns an array of the results.
for-loop<out, k, v> out[](a v[k], f act out(k, v)) trusted is-data<k> compare<k> hash-mix<k>
	res mut-array out = a.size uninitialized-mut-array
	end = res.begin-ptr fold a, (cur, k, v) =>
		*cur := f[k, v]
		cur + 1
	assert end == res.end-ptr
	res.cast-immutable to-list

.dbg<k, v> str(a v[k]) to-str<k> to-str<v>
	a.root dbg ""

.dbg<k, v> str(a node<k, v>, path str) to-str<k> to-str<v>
	match a
	as inner-node node
		parts str[][] = for index : 0 .. node.size
			child = node[index]
			unless child node-is-empty
				(child dbg "{path}{index}"),
		" " join parts.flatten
	as leaf-node l
		parts = ", " join for pair : l.to-list
			"{pair from} -> {pair to}"
		"{path}[{parts}]"

verify void(a str[nat64], expected str)
	a.dbg is expected

.== bool(a str?, b str?)
	a opt-equal b

test
	l0 str[nat64] = ()
	l0.is-empty is true
	l0.size is 0
	l0 verify "[]"
	l0[0] is ()

	l1 = l0 ~ (5, "5")
	l1.is-empty is false
	l1.size is 1
	l1 verify "[5 -> 5]"

	l2 = l1 ~~ ((1, "1"), (3, "3"), (9, "9"))
	l2 verify "[5 -> 5, 1 -> 1, 3 -> 3, 9 -> 9]"

	l3 = l2 ~ (13, "13")
	l3 verify "[5 -> 5, 1 -> 1, 3 -> 3, 9 -> 9, 13 -> 13]"
	#l3 verify "1[1 -> 1, 9 -> 9] 3[3 -> 3] 5[13 -> 13, 5 -> 5]"

	#l3[3] is ("3",)
	#l3[4] is ()

	#l3 - 3 verify "[1 -> 1, 9 -> 9, 13 -> 13, 5 -> 5]"

	# TODO: lots more tests. Be sure to test removal can remove inner nodes.

no-std
import
	../bool: &&, ==, bool, false, true
	../compare: <, compare
	../misc: is-data, new, void
	../number: ==, <=>, +, nat64
	../opt: !, is-empty, new, opt
	../ptr: +, -, mut-ptr, set-deref
	../str: ==, literal, str
	../test-util: is
	../tuple: from, new, pair, pair-equal, to
	../writer: ~=, ~~=, backup, move-to-str, new, writer
	./arr: new, arr, arr-equal
	./fix-arr: begin-ptr, cast-immutable, copy, fix-arr, set-reverse, uninitialized-fix-arr
	./mut-arr:
		~=, ~~=, begin-ptr, clear, each-with-index, fold, fold-reverse, for-loop, is-empty, mut-arr,
		new, pop, size, subscript, to-mut-arr
	./sort: set-sort-by, set-sort-by-reverse
	./private/sort-utils: binary-search-insert-ptr

###
Mutable priority queue.

Elements are key-value pairs. Pairs are sorted by key.
Popping removes the pair with the lowest key.

If two pairs have the same key, the second pair added will be popped second.
###
mut-priority-queue<k, v> record mut by-ref
	# TODO: Use by-val
	# The smallest value goes on the right
	.mins pair<k, v> mut[]
	# This may be shorter than mins -- buckets on the right considered missing.
	.buckets pair<k, v> mut[] mut[]

# New priority queue containing the given pairs.
new<k, v> mut-priority-queue<k, v>(...a pair<k, v>[]) is-data<k> compare<k>
	a to-mut-priority-queue

# Copies an array to a new priority queue.
to-mut-priority-queue<k, v> mut-priority-queue<k, v>(a pair<k, v>[]) is-data<k> compare<k>
	mins = a to-mut-arr
	mins.sort-by-reverse := pair => pair from
	mins, ()

# Removes all pairs from the queue.
clear<k, v> void(a mut-priority-queue<k, v>) is-data<k> compare<k>
	a.mins clear
	a.buckets clear

# True iff `a.size == 0`.
is-empty<k, v> bool(a mut-priority-queue<k, v>) is-data<k> compare<k>
	a.mins is-empty

###
Number of pairs in the queue.
This is O(n).
###
size<k, v> nat64(a mut-priority-queue<k, v>) is-data<k> compare<k>
	a.mins.size fold a.buckets, (acc, b) =>
		acc + b.size

###
Adds a pair to the queue.
This is O(log n).
###
~= <k, v> void(a mut-priority-queue<k, v>, pair pair<k, v>) trusted is-data<k> compare<k>
	# Highest min is on the right, so comparing in reverse
	ptr = a.mins binary-search-insert-ptr it => it.from <=> pair.from
	index = ptr - a.mins.begin-ptr
	if index == a.mins.size
		a.mins ~= pair
	else
		a.buckets add-to-bucket index, pair

###
Removes and returns the pair with the lowest key.

Returns an empty option iff the queue was empty (before calling `pop`).

This is amortized O(log n).
###
pop<k, v> pair<k, v>?(a mut-priority-queue<k, v>) is-data<k> compare<k>
	res = a.mins pop
	if a.mins.size < a.buckets.size
		assert a.mins.size + 1 == a.buckets.size
		bucket = a.buckets.pop!
		# Mins are popped off from the right.
		# This preserves insertion order: 'sort-by' doesn't change that,
		# then we reverse, then popping from the right reverses it again.
		bucket.sort-by-reverse := it => it from
		a.mins ~~= bucket
	res

# Like `pop`, but discards the key.
pop-value<k, v> v?(a mut-priority-queue<k, v>) is-data<k> compare<k>
	if pair ?= a pop
		pair.to,

###
Copy pairs to a new priority queue.
This is O(n).
###
copy<k, v> mut-priority-queue<k, v>(a mut-priority-queue<k, v>) is-data<k> compare<k>
	mins = a spread-all-buckets
	a.mins clear
	a.mins ~~= mins
	a.buckets clear
	mins.mut-arr, ()

# Copy pairs to an array.
to-arr<k, v> pair<k, v>[](a mut-priority-queue<k, v>) trusted is-data<k> compare<k>
	a.to-fix-arr cast-immutable

to-fix-arr<k, v> fix-arr pair<k, v>(a mut-priority-queue<k, v>) no-doc is-data<k> compare<k>
	mins = a spread-all-buckets
	a.mins clear
	a.mins ~~= mins
	a.buckets clear
	res = mins copy
	res set-reverse
	res

# Output is high-to-low
.spread-all-buckets<k, v> fix-arr pair<k, v>(a mut-priority-queue<k, v>) trusted is-data<k> compare<k>
	new-mins fix-arr pair<k, v> = a.size uninitialized-fix-arr
	new-mins.begin-ptr spread-all-buckets-recur a, 0
	new-mins
.spread-all-buckets-recur<k, v> void(
	out pair<k, v> mut*,
	a mut-priority-queue<k, v>,
	index nat64,
) unsafe compare<k>
	if index < a.mins.size
		mid = if index < a.buckets.size
			a.buckets[index].sort-by := it => it from
			out fold-reverse a.buckets[index], (cur, x) =>
				*cur := x
				cur + 1
		else
			out
		*mid := a.mins[index]
		mid + 1 spread-all-buckets-recur a, index + 1

.add-to-bucket<k, v> void(buckets pair<k, v> mut[] mut[], index nat64, pair pair<k, v>)
	if index < buckets.size
		buckets[index] ~= pair
	else
		buckets ~= ()
		buckets add-to-bucket index, pair

.dbg str(a mut-priority-queue<nat64, str>)
	out writer = ()
	a.mins each-with-index (min, index) =>
		out write-pair min
		if index < a.buckets.size
			bucket = a.buckets[index]
			unless bucket is-empty
				out ~~= " ["
				for pair : bucket
					out write-pair pair
					out ~~= ", "
				out backup 2
				out ~= "]"
		out ~~= ", "
	unless a.mins is-empty
		out backup 2
	out move-to-str

.write-pair void(out writer, pair pair<nat64, str>)
	out ~~= pair from
	out ~~= " -> "
	out ~~= pair to

.verify void(a mut-priority-queue<nat64, str>, expected str)
	a.dbg is expected

test
	a mut-priority-queue<nat64, str> = ()
	a.is-empty is true
	a.pop is ()
	a verify ""

	a ~= (5, "5")
	a.is-empty is false
	a verify "5 -> 5"

	a ~= (6, "6")
	a verify "5 -> 5 [6 -> 6]"

	a ~= (2, "2")
	a verify "5 -> 5 [6 -> 6], 2 -> 2"

	a ~= (3, "3a")
	a verify "5 -> 5 [6 -> 6], 2 -> 2 [3 -> 3a]"

	a ~= (4, "4")
	a ~= (3, "3b")
	a verify "5 -> 5 [6 -> 6], 2 -> 2 [3 -> 3a, 4 -> 4, 3 -> 3b]"

	a.pop is ((2, "2"),)
	a verify "5 -> 5 [6 -> 6], 4 -> 4, 3 -> 3b, 3 -> 3a"

	a ~= (4, "4b")
	a verify "5 -> 5 [6 -> 6], 4 -> 4 [4 -> 4b], 3 -> 3b, 3 -> 3a"

	a.pop is ((3, "3a"),)
	a.pop is ((3, "3b"),)
	a verify "5 -> 5 [6 -> 6], 4 -> 4 [4 -> 4b]"
	a.pop is ((4, "4"),)
	a verify "5 -> 5 [6 -> 6], 4 -> 4b"

	a.to-arr is ((4, "4b"), (5, "5"), (6, "6"))
	a verify "6 -> 6, 5 -> 5, 4 -> 4b"
	a is ((4, "4b"), (5, "5"), (6, "6"))

test
	a mut-priority-queue<nat64, str> = ()
	a ~= (5, "5")
	a ~= (5, "five")
	a.pop is ((5, "5"),)
	a.pop is ((5, "five"),)
	a.is-empty is true

# TODO: opt should have generic ==
.== bool(a pair<nat64, str>?, b pair<nat64, str>?)
	if va ?= a
		if vb ?= b
			va.from == vb.from && va.to == vb.to
		else
			false
	else
		b is-empty

.== bool(a mut-priority-queue<nat64, str>, b mut-priority-queue<nat64, str>)
	a.to-arr == b.to-arr

.== bool(a pair<nat64, str>[], b pair<nat64, str>[])
	a arr-equal b

.== bool(a pair<nat64, str>, b pair<nat64, str>)
	a pair-equal b

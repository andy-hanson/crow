no-std
import
	../bool: ==, bool, false, true
	../compare: ==, <=>, <, compare-reverse
	../fun-util: subscript
	../json: to
	../misc: new, to, void
	../number: ==, <=>, +, nat64
	../option: ==, force, new, option
	../string: ==, interpolate, join, new, string, to
	../test-util: is
	../tuple: ==, new
	./array: +, array, begin, iterate, next, size
	./collection:
		build-options, for-loop, is-at-end, reverse, set-reverse, subscript, with-index
	./list: ==, ~=, build, list, list-builder, new, to
	./mut-list:
		~=, ~~=, +, -, begin, clear, copy, end, is-empty, iterate, move-to, mut-list, new, next,
		next-index, peek, pop, prev, set-next, set-prev, size, temp-as-array, to
	./priority-queue: priority
	./sort: sort=
	./private/sort-utils: binary-search-insert

###
Mutable priority queue.

Elements are key-value pairs. Pairs are sorted by key.
Popping removes the pair with the lowest key.

If two pairs have the same key, the second pair added will be popped second.
###
+mut-priority-queue[k, v] record by-ref, mut
	# TODO: Use by-val
	# The smallest value goes on the right
	-mins (k, v) mut[]
	# This may be shorter than mins -- buckets on the right considered missing.
	-buckets (k, v) mut[] mut[]

# New priority queue containing the given pairs.
+new[k, v] (k, v) mut-priority-queue(...a (k, v) array) k priority
	a.to to

# Copies a list to a new priority queue.
+to[k, v] (k, v) mut-priority-queue(a (k, v)[]) k priority
	mins (k, v) mut[] = a to
	mins sort= (k, _) => k compare-reverse
	mins, ()

# Removes all pairs from the queue.
+clear[k, v] void(a (k, v) mut-priority-queue) k priority
	a.mins clear
	a.buckets clear

# True iff `a.size == 0`.
+is-empty[k, v] bool(a (k, v) mut-priority-queue) k priority
	a.mins is-empty

###
Number of pairs in the queue.
This is O(n).
###
+size[k, v] nat64(a (k, v) mut-priority-queue) k priority
	res mut = a.mins size
	for b : a.buckets
		res +:= b size
	res

###
Adds a pair to the queue.
This is O(log n).
###
+~=[k, v] void(a (k, v) mut-priority-queue, (key k, value v)) k priority
	# Highest min is on the right, so comparing in reverse
	insert = a.mins binary-search-insert (k, _) => k <=> key
	if insert is-at-end
		a.mins ~= (key, value)
	else
		a.buckets add-to-bucket insert.next-index, (key, value)

###
Removes and returns the pair with the lowest key.

Returns an empty option iff the queue was empty (before calling `pop`).

This is amortized O(log n).
###
+pop[k, v] (k, v)?(a (k, v) mut-priority-queue) k priority
	res = a.mins pop
	if a.mins.size < a.buckets.size
		assert a.mins.size + 1 == a.buckets.size
		bucket = a.buckets.pop!
		# Mins are popped off from the right.
		# This preserves insertion order: 'sort' doesn't change that,
		# then we reverse, then popping from the right reverses it again.
		# Note: Handling equal keys is why we can't just use a reversed comparer
		bucket sort= (k, _) => k
		bucket set-reverse
		a.mins ~~= bucket
	res

+pop-if[k, v] (k, v)?(a (k, v) mut-priority-queue, f bool mut(key k, value v)) k priority
	if res ?= a.mins peek
		if f[res]
			a pop

# Like `pop`, but discards the key.
+pop-value[k, v] v?(a (k, v) mut-priority-queue) k priority
	if _, v ?= a pop
		v,

###
Copy pairs to a new priority queue.
This is O(n).
###
+copy[k, v] (k, v) mut-priority-queue(a (k, v) mut-priority-queue) k priority
	a spread-all-buckets
	a.mins.copy, ()

+to[k, v] (k, v)[](a (k, v) mut-priority-queue) k priority
	a spread-all-buckets
	for x : a.mins reverse; x

-spread-all-buckets[k, v] void(a (k, v) mut-priority-queue) k priority
	old-mins (k, v) array = a.mins move-to
	for index, old-min : old-mins with-index
		if index < a.buckets.size
			bucket = a.buckets[index]
			bucket sort= (k, _) => k
			for x : bucket reverse
				a.mins ~= x
		a.mins ~= old-min
	a.buckets clear

-add-to-bucket[k, v] void(buckets (k, v) mut[] mut[], index nat64, pair (k, v))
	if index < buckets.size
		buckets[index] ~= pair
	else
		buckets ~= ()
		buckets add-to-bucket index, pair

-dbg[k, v] string(a (k, v) mut-priority-queue) (string, k) to, (string, v) to
	# TODO: should be able to infer type arguments
	trusted
		mins = a.mins temp-as-array
		buckets = a.buckets temp-as-array
		", " join for i, min : mins with-index
			show-bucket string = if i < buckets.size
				bucket = buckets[i]
				unless bucket is-empty
					parts = ", " join for pair : bucket; pair dbg
					" [{parts}]"
			"{min dbg}{show-bucket}"

-dbg[k, v] string((k k, v v)) (string, k) to, (string, v) to
	"{k} -> {v}"

-verify void(a (nat64, string) mut-priority-queue, expected string)
	a.dbg is expected

region build

+mut-priority-queue-builder[k, v] record mut
	-inner (k, v) list-builder
+build[k, v] (k, v) mut-priority-queue(
	a build-options,
	f void mut(out (k, v) mut-priority-queue-builder),
) k priority
	a build (out => f[out,]) to
+~=[k, v] void(a (k, v) mut-priority-queue-builder, value (k, v)) k priority
	a.inner ~= value

test
	a (nat64, string) mut-priority-queue = ()
	a.is-empty is true
	a.pop is ()
	a verify ""

	a ~= (5, "5")
	a.is-empty is false
	a verify "5 -> 5"

	a ~= (6, "6")
	a verify "5 -> 5 [6 -> 6]"

	a ~= (2, "2")
	a verify "5 -> 5 [6 -> 6], 2 -> 2"

	a ~= (3, "3a")
	a verify "5 -> 5 [6 -> 6], 2 -> 2 [3 -> 3a]"

	a ~= (4, "4")
	a ~= (3, "3b")
	a verify "5 -> 5 [6 -> 6], 2 -> 2 [3 -> 3a, 4 -> 4, 3 -> 3b]"

	a.pop is ((2, "2"),)
	a verify "5 -> 5 [6 -> 6], 4 -> 4, 3 -> 3b, 3 -> 3a"

	a ~= (4, "4b")
	a verify "5 -> 5 [6 -> 6], 4 -> 4 [4 -> 4b], 3 -> 3b, 3 -> 3a"

	a.pop is ((3, "3a"),)
	a.pop is ((3, "3b"),)
	a verify "5 -> 5 [6 -> 6], 4 -> 4 [4 -> 4b]"
	a.pop is ((4, "4"),)
	a verify "5 -> 5 [6 -> 6], 4 -> 4b"

	a.to::(nat64, string)[] is ((4, "4b"), (5, "5"), (6, "6"))
	a verify "6 -> 6, 5 -> 5, 4 -> 4b"

test
	a (nat64, string) mut-priority-queue = ()
	a ~= (5, "5")
	a ~= (5, "five")
	a.pop is ((5, "5"),)
	a.pop is ((5, "five"),)
	a.is-empty is true

no-std
import
	../bool: &&, bool
	../compare: <
	../exception: assert
	../fun-util: subscript
	../log: info, log
	../misc: new, void
	../number: *
	../ptr: ==, +, *, as-const, const-ptr, mut-ptr, set-deref
	../private/number-low-level: ==, <=>, nat64, wrap-add, wrap-mul
	../range: ..
	../str: ==, str
	../str-conv: interp, finish, to-str, with-str, with-value
	../test-util: is
	../writer: ~=, backup, move-to-str, new, write, writer
	./fix-arr:
		begin-ptr, copy, each, end-ptr, exists, fix-arr, fold, is-empty, new, set-map,
		set-subscript, size, subscript, uninitialized-fix-arr

###
Mutable grid (matrix) type.
This is intended for data that happens to fall in a grid; it may not be ideal for linear algebra.

This is row-major, meaning rows are stored contiguously.
So, iteration functions typically start with the top row left-to-right,
then the second row left-to-right, etc.

Grid elements are mutable, but changing the width or height is not supported.
###
mut-grid<a> record mut
	.elements fix-arr a
	width nat64
	height nat64

###
Coordinate in a grid.

`x` is the column index. The leftmost column is 0; the rightmost column is `width - 1`.
`y` is the row index. The top row is 0; the bottom row is `height - 1`.
###
coord record
	x nat64
	y nat64

# Same as `0, 0`.
new coord()
	0, 0

== bool(a coord, b coord)
	a.x == b.x && a.y == b.y

# `"<x, y>"`
to-str str(a coord)
	"<{a.x}, {a.y}>"

# `true` if `coord` is a valid coordinate (within the width and height of the grid).
has-coord<a> bool(a mut-grid a, coord coord)
	coord.x < a.width && coord.y < a.height

###
Returns the entire row `y`.
This is O(1).
Throws if `y` is out of range.
###
row<a> fix-arr a(a mut-grid a, y nat64)
	assert: y < a.height
	begin = y wrap-mul a.width
	a.elements[begin .. (begin wrap-add a.width)]

# New empty grid with width and height 0.
new<a> mut-grid a()
	(), 0, 0

# Number of elements in the grid (width * height).
size<a> nat64(a mut-grid a)
	a.elements size

# Creates a new grid with the given width and height, setting every element to `value`.
fill-mut-grid<a> mut-grid a(width nat64, height nat64, value a)
	width make-mut-grid height, (ignore, ignore2) => value

# Creates a new grid with the given width and height, setting every element to `f[x, y]`.
make-mut-grid<a> mut-grid a(width nat64, height nat64, f act a(nat64, nat64)) trusted
	res mut-grid a = (width * height).uninitialized-fix-arr, width, height
	res set-map-with-coords (ignore, coord) => f[coord.x, coord.y]
	res

# Copy elements to a new grid.
copy<a> mut-grid a(a mut-grid a)
	a.elements.copy, a.width, a.height

###
Gets the element in the `x`th column and `y`th row.

Throws if either `x` or `y` is out of bounds.
###
subscript<a> a(a mut-grid a, x nat64, y nat64)
	index = a index-for x, y
	a.elements[index]

# Same as the other `subscript`, but takes a `coord`.
subscript<a> a(a mut-grid a, coord coord)
	a[coord.x, coord.y]

###
Sets the element in the `x`th column and `y`th row.

Throws if either `x` or `y` is out of bounds.
###
set-subscript<a> void(a mut-grid a, x nat64, y nat64, value a)
	index = a index-for x, y
	a.elements[index] := value

# Same as the other `set-subscript`, but takes a `coord`.
set-subscript<a> void(a mut-grid a, coord coord, value a)
	a[coord.x, coord.y] := value

.index-for<a> nat64(a mut-grid a, x nat64, y nat64)
	assert: x < a.width
	assert: y < a.height
	res = y wrap-mul a.width wrap-add x
	assert: res < a.elements.size
	res

###
Returns a string with one line for each row.
Each row will have a space in between columns.

This makes no attempt to add padding to ensure columns line up. (TODO?)
###
to-str<a> str(a mut-grid a) write<a>
	res writer = ()
	a each-row row =>
		row each value =>
			res ~= value
			res ~= " "
		unless row is-empty
			res backup
		res ~= "\n"
	unless a.height == 0
		res backup
	res move-to-str

region iteration

each<a> void(a mut-grid a, f act void(a))
	() fold a, (ignore, value) => f[value]

each-row<a> void(a mut-grid a, f act void(fix-arr a))
	() fold-rows a, (ignore, row) => f[row]

fold-rows<a, b> a(acc a, a mut-grid b, f act a(a, fix-arr b))
	acc fold-rows-recur a, 0, f
.fold-rows-recur<a, b> a(acc a, a mut-grid b, y nat64, f act a(a, fix-arr b))
	if y == a.height
		acc
	else
		f[acc, a row y] fold-rows-recur a, (y wrap-add 1), f

fold<a, b> a(acc a, a mut-grid b, f act a(a, b))
	acc fold a.elements, f

fold-with-coords<a, b> a(acc a, a mut-grid b, f act a(a, b, coord)) trusted
	acc fold-with-coords-recur a.elements.begin-ptr.as-const, a.elements.end-ptr.as-const, (), a.width, f
.fold-with-coords-recur<a, b> a
	acc a
	cur b*
	end b*
	coord coord
	width nat64
	f act a(a, b, coord)
spec
	unsafe
body
	if cur == end
		acc
	else
		f[acc, *cur, coord] fold-with-coords-recur cur + 1, end, (coord next-coord width), width, f

exists<a> bool(a mut-grid a, f act bool(a))
	a.elements exists f

set-map<a> void(a mut-grid a, f act a(a))
	a.elements set-map f

set-map-with-coords<a> void(a mut-grid a, f act a(a, coord)) trusted
	a.elements.begin-ptr set-map-with-coords-recur a.elements.end-ptr, (), a.width, f
.set-map-with-coords-recur<a> void(cur a mut*, end a mut*, coord coord, width nat64, f act a(a, coord)) unsafe
	unless cur == end
		*cur := f[*cur, coord]
		cur + 1 set-map-with-coords-recur end, (coord next-coord width), width, f

.next-coord coord(a coord, width nat64)
	new-x = a.x wrap-add 1
	if new-x == width
		0, (a.y wrap-add 1)
	else
		new-x, a.y

test
	info log "START THE TEST"

	a = 3 make-mut-grid 2, (x, y) => "{x}|{y}"
	a.to-str is "0|0 1|0 2|0\n0|1 1|1 2|1"

	folded = "S" fold-with-coords a, (acc, value, coord) => "{acc} {value}/{coord}"
	folded is "S 0|0/<0, 0> 1|0/<1, 0> 2|0/<2, 0> 0|1/<0, 1> 1|1/<1, 1> 2|1/<2, 1>"

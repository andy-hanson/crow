no-std
import
	../bool: bool
	../hash: hash-mix
	../json: to
	../misc: key
	../number: ==, <=>, +, nat64
	../option: ??
	../test-util: is
	../tuple: new
	./array: array
	./collection: for-loop
	./list: iterate, list, to
	./map: ~, iterate, map, subscript
	./mut-map: mut-map, new, set-subscript, subscript, to

+counter[k] record
	-inner nat64[k]

+new[k] k counter(...a k array) k key
	a.to to

+to[k] k counter(values k[]) k key
	res nat64 mut[k] = ()
	for x : values
		res[x] := (res[x] ?? 0) + 1
	res.to,

+to[k] nat64[k](a k counter) k key
	a inner

+subscript[k] nat64(a k counter, value k) k key
	a.inner[value] ?? 0

+~[k] k counter(a k counter, value k) k key
	a.inner ~ (value, a[value] + 1),

region spec impls (see collection.crow)

+iterate[k] bool(a k counter, f bool mut(key k, count nat64)) k key
	a.inner iterate f

test
	a nat64 counter = ()
	a[1] is 0
	b = a ~ 3
	b[3] is 1
	c = b ~ 3
	c[3] is 2

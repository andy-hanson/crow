no-std
import
	../compare: compare
	../hash: hash-mix
	../json: json
	../misc: is-data, void
	../number: ==, <=>, +, nat64
	../option: ??
	../test-util: is
	../tuple: new
	./array: array
	./dict: ~, dict, for-loop, subscript
	./list: for-loop, list, to-list
	./mut-dict: mut-dict, new, set-subscript, subscript, to-dict

counter[k] record
	.inner nat64[k]

new[k] k counter(...a k array) k is-data, k compare, k hash-mix
	a.to-list to-counter

to-counter[k] k counter(values k[]) k is-data, k compare, k hash-mix
	res nat64 mut[k] = ()
	for x : values
		res[x] := (res[x] ?? 0) + 1
	res.to-dict,

to-dict[k] nat64[k](a k counter) k is-data, k compare, k hash-mix
	a inner

subscript[k] nat64(a k counter, value k) k is-data, k compare, k hash-mix
	a.inner[value] ?? 0

~[k] k counter(a k counter, value k) k is-data, k compare, k hash-mix
	a.inner ~ (value, a[value] + 1),

for-loop[k] void(a k counter, f act void(k, nat64)) k is-data, k compare, k hash-mix
	a.inner for-loop f

test
	a nat64 counter = ()
	a[1] is 0
	b = a ~ 3
	b[3] is 1
	c = b ~ 3
	c[3] is 2

no-std
import
	../../bool: !, &&, ==, bool, false, true
	../../compare: <, <=, >=, compare, max, min
	../../exception: unreachable
	../../fun-util: subscript
	../../misc: is-data, new, void
	../../number: ==, <=>, +, -, is-even, nat64
	../../opt: ==, ||, is-empty, new, opt
	../../ptr: ==, <=>, +, -, *, const-ptr, mut-ptr, ref-eq, set-deref
	../../range: ..
	../../str: ==, chars, is-empty, size-bytes, str
	../../str-conv: interp, finish, to-str, with-str, with-value
	../../test-util: is
	../../tuple: from, new, pair, to
	../../writer: ~=, ~~=, backup, move-to-str, new, writer
	../../private/alloc: mem-copy
	../../private/bootstrap: hard-assert
	../../private/number-low-level: wrap-add
	../arr: arr, is-empty, new, size, subscript
	../arr-util: each, filter, fold, map, tail
	../fix-arr:
		begin-ptr, cast-immutable, is-empty, fold, fix-arr, set-subscript, size, subscript, tail,
		uninitialized-fix-arr
	../sort: sort-by
	../private/arr-low-level: begin-ptr, end-ptr
	../private/sort-utils: binary-search-key

compact-sorted-dict<k, v> record
	by-val
	.impl impl<k, v>

.impl<k, v> union
	overlay overlay<k, v>
	end-node pair<k, v>[]

.overlay<k, v> record
	by-ref
	# TODO: consider tracking the number of keys that are new, or change a value, or remove a value.
	# We should merge more frequently if removing keys, less frequently if adding keys.
	# never empty
	pairs pair<k, v?>[]
	prev impl<k, v>

new<k, v> compact-sorted-dict<k, v>(...a pair<k, v>[]) is-data<k> compare<k>
	a to-compact-sorted-dict

to-compact-sorted-dict<k, v> compact-sorted-dict<k, v>(a pair<k, v>[]) is-data<k> compare<k>
	(a sort-by (pair => pair from) end-node),

is-empty<k, v> bool(a compact-sorted-dict<k, v>) is-data<k> compare<k>
	match a impl
	as overlay _
		false
	as end-node e
		e is-empty

###
Number of pairs.
This is O(n).
###
size<k, v> nat64(a compact-sorted-dict<k, v>) is-data<k> compare<k>
	0 fold a, (acc, k, v) => acc + 1

to-arr<k, v> pair<k, v>[](a compact-sorted-dict<k, v>) is-data<k> compare<k>
	# TODO:PERF Just use 'fold'?
	match a.compact.impl
	as overlay _
		unreachable
	as end-node e
		e

~ <k, v> compact-sorted-dict<k, v>(a compact-sorted-dict<k, v>, pair pair<k, v>) is-data<k> compare<k>
	(a.impl add-or-remove pair.from, (pair.to,)),

~~ <k, v> compact-sorted-dict<k, v>(a compact-sorted-dict<k, v>, b pair<k, v>[]) is-data<k> compare<k>
	if b is-empty
		a
	elif a is-empty
		b to-compact-sorted-dict
	else
		# TODO: 'pair<k, v?>[]' should be unnecessary
		pairs pair<k, v?>[] = b map (x => x.from, (x.to,)) sort-by it => it from
		# TODO: should not need type annotation
		(pairs, a.impl)::overlay<k, v>.merge-as-needed,

- <k, v> compact-sorted-dict<k, v>(a compact-sorted-dict<k, v>, key k) is-data<k> compare<k>
	if key in a
		(a.impl add-or-remove key, ()),
	else
		a

- <k, v> compact-sorted-dict<k, v>(a compact-sorted-dict<k, v>, keys k[]) is-data<k> compare<k>
	a fold keys, (cur, key) =>
		cur - key

subscript<k, v> v?(a compact-sorted-dict<k, v>, key k) is-data<k> compare<k>
	a.impl subscript-recur key
.subscript-recur<k, v> v?(a impl<k, v>, key k) is-data<k> compare<k>
	match a
	as overlay o
		if v ?= o.pairs binary-search-key key
			v
		else
			o.prev subscript-recur key
	as end-node e
		if v ?= e binary-search-key key
			v,

in<k, v> bool(key k, a compact-sorted-dict<k, v>) is-data<k> compare<k>
	!a[key].is-empty

.add-or-remove<k, v> impl<k, v>(a impl<k, v>, key k, value v?) is-data<k> compare<k>
	(((key, value),), a) merge-as-needed

.merge-as-needed<k, v> impl<k, v>(a overlay<k, v>) is-data<k> compare<k>
	match a prev
	as overlay o
		if o.pairs.size should-merge a.pairs.size
			new-pairs = o.pairs merge-overlays a.pairs
			(new-pairs, o.prev) merge-as-needed
		else
			a overlay
	as end-node e
		if e.size should-merge a.pairs.size
			e merge-to-end a.pairs end-node
		else
			a overlay

.merge-unconditionally<k, v> pair<k, v>[](a overlay<k, v>) is-data<k> compare<k>
	match a prev
	as overlay o
		((o.pairs merge-overlays a.pairs), o.prev) merge-unconditionally
	as end-node e
		e merge-to-end a.pairs

.should-merge bool(prev-size nat64, overlay-size nat64)
	prev-size <= (overlay-size max 3)

.merge-overlays<k, v> pair<k, v?>[](l pair<k, v?>[], r pair<k, v?>[]) trusted is-data<k> compare<k>
	res fix-arr pair<k, v?> = l.size + r.size uninitialized-fix-arr
	end = res.begin-ptr merge-keep-right l.begin-ptr, l.end-ptr, r.begin-ptr, r.end-ptr
	res[0 .. end - res.begin-ptr] cast-immutable

.merge-keep-right<k, v> pair<k, v> mut*
	out pair<k, v> mut*
	l pair<k, v>*
	l-end pair<k, v>*
	r pair<k, v>*
	r-end pair<k, v>*
spec
	noctx
	unsafe
	compare<k>
body
	hard-assert: l < l-end
	hard-assert: r < r-end
	match l->from <=> r->from
	as less
		*out := *l
		if l + 1 == l-end
			out + 1 finish-rest r, r-end
		else
			out + 1 merge-keep-right l + 1, l-end, r, r-end
	as equal
		*out := *r
		if l + 1 == l-end
			out + 1 finish-rest r + 1, r-end
		elif r + 1 == r-end
			out + 1 finish-rest l + 1, l-end
		else
			out + 1 merge-keep-right l + 1, l-end, r + 1, r-end
	as greater
		*out := *r
		if r + 1 == r-end
			out + 1 finish-rest l, l-end
		else
			out + 1 merge-keep-right l, l-end, r + 1, r-end

.merge-to-end<k, v> pair<k, v>[](l pair<k, v>[], r pair<k, v?>[]) trusted is-data<k> compare<k>
	res fix-arr pair<k, v> = l.size + r.size uninitialized-fix-arr
	end = if l is-empty
		res.begin-ptr finish-rest-ignore-none r.begin-ptr, r.end-ptr
	else
		res.begin-ptr merge-to-end-recur l.begin-ptr, l.end-ptr, r.begin-ptr, r.end-ptr
	res[0 .. end - res.begin-ptr] cast-immutable

.merge-to-end-recur<k, v> pair<k, v> mut*
	out pair<k, v> mut*
	l pair<k, v>*
	l-end pair<k, v>*
	r pair<k, v?>*
	r-end pair<k, v?>*
spec
	unsafe
	noctx
	is-data<k>
	compare<k>
body
	hard-assert: l < l-end
	hard-assert: r < r-end
	match l->from <=> r->from
	as less
		*out := *l
		if l + 1 == l-end
			out + 1 finish-rest-ignore-none r, r-end
		else
			out + 1 merge-to-end-recur l + 1, l-end, r, r-end
	as equal
		new-out = if r-value ?= *r to
			*out := r->from, r-value
			out + 1
		else
			out

		if l + 1 == l-end
			new-out finish-rest-ignore-none r + 1, r-end
		elif r + 1 == r-end
			new-out finish-rest l + 1, l-end
		else
			new-out merge-to-end-recur l + 1, l-end, r + 1, r-end
	as greater
		new-out = if r-value ?= *r to
			*out := r->from, r-value
			out + 1
		else
			out

		if r + 1 == r-end
			new-out finish-rest l, l-end
		else
			new-out merge-to-end-recur l, l-end, r + 1, r-end

.finish-rest<a> a mut*(out a mut*, cur a*, end a*) unsafe noctx
	rest-size = end - cur
	out mem-copy cur, rest-size
	out + rest-size

.finish-rest-ignore-none<k, v> pair<k, v> mut*
	out pair<k, v> mut*
	r pair<k, v?>*
	r-end pair<k, v?>*
spec
	unsafe
	noctx
body
	if r == r-end
		out
	else
		new-out = if r-value ?= *r to
			*out := r->from, r-value
			out + 1
		else
			out
		new-out finish-rest-ignore-none r + 1, r-end

# Returns an equal dictionary that takes up less space.
compact<k, v> compact-sorted-dict<k, v>(a compact-sorted-dict<k, v>) is-data<k> compare<k>
	new: match a.impl
	as overlay o
		o.merge-unconditionally end-node
	as end-node e
		e end-node

region iteration

each<k, v> void(a compact-sorted-dict<k, v>, f act void(k, v)) is-data<k> compare<k>
	() fold a, (ignore, k, v) =>
		f[k, v]

fold<a, k, v> a(acc a, a compact-sorted-dict<k, v>, f act a(a, k, v)) is-data<k> compare<k>
	iters = a init-iters
	acc fold-recur iters.end-pairs, iters.overlays, f

.fold-recur<a, k, v> a
	acc a
	end-node pair<k, v>[]
	overlays fix-arr pair<k, v?>[]
	f act a(a, k, v)
spec
	is-data<k>
	compare<k>
body
	if overlays is-empty
		acc fold end-node, (cur, pair) => f[cur, pair.from, pair.to]
	else
		least-key = if end-node is-empty
			overlays[0][0].from find-least-key overlays.tail
		else
			end-node[0].from find-least-key overlays
		take-from-end-node = !end-node.is-empty && least-key == end-node[0].from
		# TODO: should not need 'v?'
		val-from-end-node v? = if take-from-end-node
			end-node[0].to,
		new-end-node = if take-from-end-node
			end-node tail
		else
			end-node
		took-from-overlays = overlays take-key least-key
		new-acc = if val ?= took-from-overlays.rightmost-value || val-from-end-node
			f[acc, least-key, val]
		else
			acc
		new-acc fold-recur new-end-node, took-from-overlays.overlays, f

.find-least-key<k, v> k(current-least-key k, overlays fix-arr pair<k, v>[]) is-data<k> compare<k>
	current-least-key fold overlays, (cur, overlay) =>
		cur min overlay[0].from

.took-key<k, v> record mut
	rightmost-value v?
	overlays fix-arr pair<k, v?>[]

###
Takes the key from the front of every overlay that has it.
Removes rightmost overlays from the fix-arr (by returning a new, smaller fix-arr).
Returns the rightmost value associated with that key.
###
.take-key<k, v> took-key<k, v>(overlays fix-arr pair<k, v?>[], key k) is-data<k> compare<k>
	overlays take-key-recur key, 0, ()
.take-key-recur<k, v> took-key<k, v>
	overlays fix-arr pair<k, v?>[]
	key k
	index nat64
	rightmost-value v?
spec
	is-data<k>
	compare<k>
body
	# Index can overshoot due to removing overlays
	if index >= overlays.size
		rightmost-value, overlays
	elif overlays[index][0].from == key
		new-rightmost-value = overlays[index][0] to
		new-overlay = overlays[index] tail
		if new-overlay is-empty
			overlays[index] := overlays[overlays.size - 1]
			overlays[0 .. overlays.size - 1] take-key-recur key, index + 1, new-rightmost-value
		else
			overlays[index] := new-overlay
			overlays take-key-recur key, index + 1, new-rightmost-value
	else
		overlays take-key-recur key, index + 1, rightmost-value

.get-end<k, v> pair<k, v>[](a impl<k, v>)
	match a
	as overlay o
		o.prev get-end
	as end-node e
		e

.iters<k, v> record mut
	end-pairs pair<k, v>[]
	overlays fix-arr pair<k, v?>[]

.init-iters<k, v> iters<k, v>(a compact-sorted-dict<k, v>) trusted
	overlay-iters fix-arr pair<k, v?>[] = 0 overlay-count a.impl uninitialized-fix-arr
	end-pairs = overlay-iters.begin-ptr init-overlay-iters-recur a.impl
	end-pairs, overlay-iters

.overlay-count<k, v> nat64(acc nat64, a impl<k, v>) noctx
	match a
	as overlay o
		acc wrap-add 1 overlay-count o.prev
	as end-node _
		acc

# incidentally returns the end node pairs
.init-overlay-iters-recur<k, v> pair<k, v>[](out pair<k, v?>[] mut*, a impl<k, v>) noctx unsafe
	match a
	as overlay o
		*out := o pairs
		out + 1 init-overlay-iters-recur o.prev
	as end-node e
		e

filter<k, v> compact-sorted-dict<k, v>(a compact-sorted-dict<k, v>, f act bool(k, v)) is-data<k> compare<k>
	# No need to re-sort
	(a.to-arr filter (pair => f[pair.from, pair.to]) end-node),

map<k-out, v-out, k-in, v-in> compact-sorted-dict<k-out, v-out>
	a compact-sorted-dict<k-in, v-in>
	f act pair<k-out, v-out>(k-in, v-in)
spec
	is-data<k-in>
	compare<k-in>
	is-data<k-out>
	compare<k-out>
body
	a map-to-arr f to-compact-sorted-dict

keys<k, v> k[](a compact-sorted-dict<k, v>) is-data<k> compare<k>
	a map-to-arr (k, v) => k

map-to-arr<out, k, v> out[](a compact-sorted-dict<k, v>, f act out(k, v)) is-data<k> compare<k>
	a.to-arr map pair => f[pair.from, pair.to]

map-values<v-out, k, v-in> compact-sorted-dict<k, v-out>
	a compact-sorted-dict<k, v-in>
	f act v-out(k, v-in)
spec
	is-data<k>
	compare<k>
body
	# No need to re-sort
	((a.to-arr map pair => pair.from, f[pair.from, pair.to]) end-node),

# TODO:PRIVATE
dbg<k, v> str(a compact-sorted-dict<k, v>) to-str<k> to-str<v>
	out writer = ()
	out dbg-recur a.impl
	out move-to-str

.dbg-recur<k, v> void(out writer, a impl<k, v>) to-str<k> to-str<v>
	match a
	as overlay o
		out dbg-recur o.prev
		out ~~= ", ["
		o.pairs each pair =>
			out ~~= pair.from to-str
			out ~~= " -> "
			out ~~= if t ?= pair.to
				t to-str
			else
				"_"
			out ~~= ", "
		unless o.pairs is-empty
			out backup 2
		out ~= "]"
	as end-node e
		out ~= "["
		e each pair =>
			out ~~= pair.from to-str
			out ~~= " -> "
			out ~~= pair.to to-str
			out ~~= ", "
		if e is-empty
			out ~= "]"
		else
			out backup 2
			out ~= "]"

verify void(a compact-sorted-dict<nat64, str>, expected str)
	a.dbg is expected

.arr-ref-eq<a> bool(a a[], b a[]) unsafe
	a.begin-ptr == b.begin-ptr && a.size == b.size

.exact-eq<k, v> bool(a compact-sorted-dict<k, v>, b compact-sorted-dict<k, v>) unsafe
	match a impl
	as overlay oa
		match b impl
		as overlay ob
			oa ref-eq ob
		as end-node _
			false
	as end-node ea
		match b impl
		as overlay _
			false
		as end-node eb
			ea arr-ref-eq eb

test
	a compact-sorted-dict<nat64, str> = ()
	a.is-empty is true
	a.size is 0
	a verify "[]"
	a[10] is ()

	b = a ~ (10, "10")
	b verify "[10 -> 10]"
	b[10] is ("10",)

	c = b ~~ ((15, "15"), (5, "5"), (20, "20"))
	c verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20]"

	d = c ~ (11, "11")
	d verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20], [11 -> 11]"

	e = d - 15
	e verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20], [11 -> 11, 15 -> _]"

	e - 15 exact-eq e is true
	e - 16 exact-eq e is true

	f = e - 10
	f verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20], [10 -> _, 11 -> 11, 15 -> _]"

	g = f ~ (10, "10b")
	g verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20], [10 -> 10b, 11 -> 11, 15 -> _]"

	# TODO: type annotation should be unnecessary
	h = g - (11, 12)::nat64[]
	# Unfortunately we leave an unnecessary '11 -> _',
	# because we don't keep track of what a removal removes from, and it might be removing from the leftmost node.
	h verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20], [10 -> 10b, 11 -> _, 15 -> _]"

	i = h ~~ ((11, "11"), (25, "25"))
	i verify "[5 -> 5, 10 -> 10b, 11 -> 11, 20 -> 20, 25 -> 25]"

	h-folded = "" fold h, (cur, key, value) =>
		pair = "{key} -> {value}"
		cur.is-empty ? pair : "{cur}, {pair}"
	h-folded is "5 -> 5, 10 -> 10b, 15 -> 15, 20 -> 20"

	h-filtered = h filter (k, v) =>
		k is-even
	h-filtered verify "[10 -> 10b, 20 -> 20]"

	h-mapped = h map-values (k, v) =>
		v.chars[v.size-bytes - 1 .. v.size-bytes] str
	h-mapped verify "[5 -> 5, 10 -> b, 20 -> 0]"

test
	a compact-sorted-dict<nat64, str> = (84, "84"),
	b = a ~ (84, "84b")
	b verify "[84 -> 84b]"

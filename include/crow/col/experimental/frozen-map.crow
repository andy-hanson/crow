no-std
import
	../../bool: &&, ==, bool, not, true
	../../compare: <=
	../../fun-util: subscript
	../../hash: hash, hash-mix
	../../json: to
	../../misc: key, new, void
	../../number: ==, <=>, +, -, /, %, nat64
	../../option: ==, is-empty, new, option
	../../pointer: ==, <=>, +, -, *, const-pointer, mut-pointer, swap
	../../range: ..
	../../string: ==, literal, string
	../../test-util: is
	../../tuple: a, b, new
	../array:
		~=, +, -, array, array-cast, as-array, begin, begin-pointer, build, end, end-pointer,
		is-empty, iterate, new, next, size, slice
	../collection:
		.., build, build-options, end, exists, fill, for-loop, n-of, set-subscript, subscript, with-block,
		with-index
	../mut-array:
		~=, +, begin-pointer, begin, build, cast-immutable, end-pointer, iterate, mut-array,
		mut-array-builder, next, set-next, size, temp-as-array
	../list: ==, ~=, build, list, new, to

###
Immutable map that is not efficient to update.
However, this is more compact than `map` and has faster lookups.
###
frozen-map[k, v] record by-val
	-pairs (k, v) array
	-bucket-starts (k, v)* array

new[k, v] (k, v) frozen-map(...a (k, v) array) k key
	a.to to

to[k, v] (k, v) frozen-map(a (k, v)[]) k key
	trusted a.to as-frozen-map

# This is O(1).
to[k, v] (k, v) array(a (k, v) frozen-map) bare
	a pairs
to[k, v] (k, v)[](a (k, v) frozen-map) bare
	a.to::((k, v) array) to

# TODO:INTERNAL
begin-pointer[k, v] (k, v)*(a (k, v) frozen-map) unsafe
	a.pairs begin-pointer

end-pointer[k, v] (k, v)*(a (k, v) frozen-map) unsafe
	a.pairs end-pointer

is-empty[k, v] bool(a (k, v) frozen-map)
	a.pairs is-empty

size[k, v] nat64(a (k, v) frozen-map)
	a.pairs size

subscript[k, v] v?(a (k, v) frozen-map, key k) k key
	trusted if pointer ?= a find-pointer key
		pointer->b,

in[k, v] bool(key k, a (k, v) frozen-map) k key
	!(a try-get-unordered-index key is-empty)

try-get-unordered-index[k, v] nat64?(a (k, v) frozen-map, key k) k key
	trusted if pointer ?= a find-pointer key
		pointer - a.pairs.begin-pointer,

-find-pointer[k, v] (k, v)*?(a (k, v) frozen-map, key k) unsafe, k key
	bucket = if a.bucket-starts is-empty
		a pairs
	else
		bucket-index = key.hash % a.bucket-starts.size
		bucket-start = a.bucket-starts[bucket-index]
		bucket-end = if bucket-index == a.bucket-starts.size - 1
			a.pairs end-pointer
		else
			a.bucket-starts[bucket-index + 1]
		bucket-start .. bucket-end as-array

	bucket.begin-pointer find-pointer bucket.end-pointer, key

find-index[k, v] nat64?(pairs (k, v) array, key k) unsafe, k key
	if pointer ?= pairs.begin-pointer find-pointer pairs.end-pointer, key
		pointer - pairs.begin-pointer,

find-pointer[k, v] (k, v)*?(cur (k, v)*, end (k, v)*, key k) unsafe, k key
	if cur == end
		()
	elif cur->a == key
		cur,
	else
		cur + 1 find-pointer end, key

-as-frozen-map[k, v] (k, v) frozen-map(a (k, v) mut-array) unsafe, k key
	a.mut-array-to-frozen-map-promise-no-duplicates remove-duplicates

mut-array-to-frozen-map-promise-no-duplicates[k, v] (k, v) frozen-map(
	a (k, v) mut-array,
)unsafe, k key
	if a.size <= 4
		a.cast-immutable, ()
	else
		n-buckets = a.size / 2
		bucket-counts = a get-bucket-counts n-buckets
		bucket-starts = a.begin-pointer running-sum bucket-counts.temp-as-array
		bucket-counts fill 0
		cur mut = a begin-pointer
		until cur == a.end-pointer
			bucket-index = cur->a get-bucket-index bucket-counts.size
			bucket-count = bucket-counts[bucket-index]
			bucket-start = bucket-starts[bucket-index]
			bucket-cur-end = bucket-start + bucket-count
			if bucket-start <= cur && cur <= bucket-cur-end
				if cur == bucket-cur-end
					bucket-counts[bucket-index] := bucket-count + 1
				cur +:= 1
			else
				bucket-counts[bucket-index] := bucket-count + 1
				cur swap bucket-cur-end
		a.cast-immutable, bucket-starts.array-cast

-remove-duplicates[k, v] (k, v) frozen-map(a (k, v) frozen-map) unsafe, k key
	if a has-duplicates
		# Write out pairs from each bucket to a mut-array, omitting a pair if its key appears later in the same bucket.
		# Then call mut-array-to-frozen-map-promise-no-duplicates 
		xs (k, v) mut-array = with out : a.size build
			out write-without-duplicates a
		xs mut-array-to-frozen-map-promise-no-duplicates
	else
		a

-write-without-duplicates[k, v] void(out (k, v) mut-array-builder, a (k, v) frozen-map) k key
	if a.bucket-starts is-empty
		out write-bucket-without-duplicates a.pairs
	else
		for i, bucket-start : a.bucket-starts with-index
			trusted
				bucket-end = if i == a.bucket-starts.size - 1
					a.pairs end-pointer
				else
					a.bucket-starts[i + 1]
				out write-bucket-without-duplicates (bucket-start .. bucket-end).as-array

-write-bucket-without-duplicates[k, v] void(out (k, v) mut-array-builder, pairs (k, v) array) k key
	for i, pair : pairs with-index
		unless pair.a key-in-range pairs[i + 1 .. end]
			out ~= pair

-has-duplicates[k, v] bool(a (k, v) frozen-map) k key
	if a.bucket-starts is-empty
		a.pairs bucket-has-duplicates
	else
		a.bucket-starts.with-index exists (i, bucket-start) =>
			trusted
				bucket-end = if i == a.bucket-starts.size - 1
					a.pairs end-pointer
				else
					a.bucket-starts[i + 1]
				(bucket-start .. bucket-end).as-array bucket-has-duplicates

-bucket-has-duplicates[k, v] bool(pairs (k, v) array) k key
	pairs.with-index exists (i, (k, _)) =>
		k key-in-range pairs[i + 1 .. end]

-key-in-range[k, v] bool(key k, pairs (k, v) array) k key
	pairs exists (k, _) => k == key

-get-bucket-counts[k, v] nat64 mut-array(a (k, v) mut-array, n-buckets nat64) unsafe, k key
	res nat64 mut-array = n-buckets n-of 0
	for k, _ : a
		res[k get-bucket-index n-buckets] +:= 1
	res

-get-bucket-index[k] nat64(key k, n-buckets nat64) k key
	key.hash % n-buckets

-running-sum[k, v] (k, v) mut* array(initial (k, v) mut*, offsets nat64 array) unsafe
	with out : offsets.size build
		acc mut = initial
		for offset : offsets
			out ~= acc
			acc +:= offset

region spec impls (see collection.crow)

iterate[k, v] bool(a (k, v) frozen-map, f act bool(k, v))
	a.pairs iterate f

subregion build

frozen-map-builder[k, v] record mut
	-inner (k, v) mut-array-builder
build[k, v] (k, v) frozen-map(a build-options, f act void((k, v) frozen-map-builder)) k key
	trusted (a build out => f[out,]) as-frozen-map
~ ~=[k, v] void(a(k, v) frozen-map-builder, pair (k, v))
	a.inner ~= pair

region test

-verify void(a (nat64, string) frozen-map, keys-order nat64[], bucket-starts nat64[]) unsafe
	(for k, _ : a pairs; k)::nat64[] is keys-order
	(for pointer : a bucket-starts; pointer - a.pairs.begin-pointer)::nat64[] is bucket-starts

test
	a (nat64, string) frozen-map = ()
	a.is-empty is true
	a.size is 0
	a verify (), ()
	a[0] is ()
	
	b (nat64, string) frozen-map = (3, "3"), (1, "1"), (5, "5"), (2, "2")
	b verify (3, 1, 5, 2), ()
	b[0] is ()
	b[1] is ("1",)
	b[2] is ("2",)
	b[3] is ("3",)
	b[4] is ()
	b[5] is ("5",)
	b[6] is ()

	c (nat64, string) frozen-map = (3, "3"), (1, "1"), (5, "5"), (2, "2"), (8, "8")
	c verify (2, 8, 3, 5, 1), (0, 2)
	c[0] is ()
	c[1] is ("1",)
	c[2] is ("2",)
	c[3] is ("3",)
	c[4] is ()
	c[5] is ("5",)
	c[6] is ()
	c[7] is ()
	c[8] is ("8",)
	c[9] is ()

test
	a (nat64, string) frozen-map = (1, "1"), (1, "2")
	a.size is 1
	a verify (1,), ()
	a[1] is ("2",)

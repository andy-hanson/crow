no-std
import
	../../bool: !, &&, bool, false, true
	../../compare: !=, <, <=, >, compare
	../../exception: assert, forbid, unreachable
	../../fun: subscript
	../../misc: ->, as, data, drop, void
	../../opt: none, opt, some
	../../ptr: ==, <=>, +, -, *, const-ptr, mut-ptr, set-deref
	../../str: ==, <=>, chars, str
	../../str-conv: interp, finish, to-str, with-str, with-value
	../../str-util: starts-with
	../../test: is
	../../writer: ~=, backup!, move-to-str!, writer
	../../private/number-low-level: ==, <=>, nat64, unsafe-div, wrap-add, wrap-sub
	../arr: arr, begin-ptr, end-ptr, is-empty, size, subscript
	../arr-util: each, fold, insert, last, rtail, tail, try-remove
	../mut-arr: begin-ptr, cast-immutable, end-ptr, subscript, uninitialized-mut-arr
	../mut-stack: ~=, mut-stack, last, pop!
	../sort: sort-unique, sort-unique!
	../private/sort-utils: binary-search-has, binary-search-insert-ptr

###
Set of unique values.
Unlike `arr`, the values are always in sorted order, and there are never two of the same value.
###
tree-set<a> record
	# TODO: PRIVATE
	root node a
	total-size nat64

.node<a> union
	# TODO: SYNTAX should not require <>
	inner-node<a>
	arr<a>

.inner-node<a> record
	by-ref
	value a
	left node a
	right node a

# True iff the set is empty.
is-empty<a> bool(a tree-set a) data<a> compare<a>
	a.total-size == 0

# Number of values in the set.
size<a> nat64(a tree-set a) data<a> compare<a>
	a total-size

# Empty `tree-set`.
tree-set<a> tree-set a()
	root = [] as<a[]>
	tree-set: root, 0

# Copy an `arr` to a `tree-set`.
tree-set<a> tree-set a(a a[]) data<a> compare<a>
	values = a sort-unique
	tree-set: values, values.size

###
Array of all values in the set, in sorted order.
This is O(a size).
###
arr<a> a[](a tree-set a) data<a> compare<a>
	match a.root
	as inner-node i
		i tree-to-arr a.size
	as arr arr
		arr

# True iff the value is in the set.
in<a> bool(value a, a tree-set a) data<a> compare<a>
	a.root has value
.has<a> bool(a node a, value a) trusted compare<a>
	match a
	as inner-node i
		match value <=> i.value
		as less
			i.left has value
		as equal
			true
		as greater
			i.right has value
	as arr arr
		arr binary-search-has value

###
Add a value to the set.
No effect if the value is already in the set.
This is O(a.size ln)
###
~ <a> tree-set a(a tree-set a, value a) data<a> compare<a>
	new-size = a.size wrap-add 1
	match a.root add-recur value, new-size.get-max-height
	as none
		a
	as inserted i
		tree-set: i.node, a.size wrap-add 1
	as find-scapegoat
		unreachable

###
Add many values to the set.
This is O(a.size + b.size).
###
~ <a> tree-set a(a tree-set a, b a[]) data<a> compare<a>
	a ~ b.tree-set

###
Union of two sets.
This is O(a.size + b.size).
###
~ <a> tree-set a(a tree-set a, b tree-set a) trusted data<a> compare<a>
	out = a.size wrap-add b.size uninitialized-mut-arr<a>
	b-iter = b iter
	end = out.begin-ptr fold a, (cur, value) =>
		cur walk-iter-union! value, b-iter
	end2 = end fold-iter b-iter, (cur, value) =>
		*cur := value
		cur + 1
	tree-set: out[0 -> end2 - out.begin-ptr] cast-immutable

.walk-iter-union!<a> a mut*(out a mut*, value a, a iter a) unsafe data<a> compare<a>
	if peek ?= a peek
		match value <=> peek
		as less
			*out := value
			out + 1
		as equal
			*out := value
			a.next! drop
			out + 1
		as greater
			*out := peek
			a.next! drop
			out + 1 walk-iter-union! value, a
	else
		*out := value
		out + 1

intersect<a> tree-set a(a tree-set a, b tree-set a) trusted data<a> compare<a>
	b-iter = b iter
	a filter x => b-iter walk-iter-has x

.walk-iter-has<a> bool(a iter a, value a) unsafe data<a> compare<a>
	if peek ?= a peek
		match value <=> peek
		as less
			false
		as equal
			a.next! drop
			true
		as greater
			a.next! drop
			a walk-iter-has value
	else
		false

###
Returns a set that does not contain 'b'.
If 'b' is not in the set, returns it unmodified.
This is O(a.size ln).
###
- <a> tree-set a(a tree-set a, b a) data<a> compare<a>
	if res ?= a try-remove b
		res
	else
		a

###
If 'b' is in the set, returns `none~.
Else, returns a set with 'b' removed.
This is O(a.size ln).
###
try-remove<a> tree-set<a>?(a tree-set a, b a) data<a> compare<a>
	if node ?= a.root try-remove-recur b
		some: tree-set: node, a.size wrap-sub 1

.try-remove-recur<a> node<a>?(a node a, b a) compare<a>
	match a
	as inner-node i
		match b <=> i.value
		as less
			if new-left ?= i.left try-remove-recur b
				some: inner-node: i.value, new-left, i.right
		as equal
			some: if i.right node-is-empty
				i left
			else
				# Remove the base of the tree -- making one of the sides take over.
				if popped ?= i.left pop-right
					inner-node: popped.value, popped.rest, i.right
				else
					i right
		as greater
			if new-right ?= i.right try-remove-recur b
				some: inner-node: i.value, i.left, new-right
	as arr arr
		# TODO: use a binary search (try-remove uses linear search since it's for arbitrary arr)
		if arr2 ?= arr try-remove b
			arr2.as<node a> some

.node-is-empty<a> bool(a node a)
	match a
	as inner-node
		false
	as arr r
		r is-empty

.popped<a> record
	value a
	rest node a

.pop-right<a> popped<a>?(a node a)
	match a
	as inner-node i
		if popped ?= i.right pop-right
			some: popped: popped.value, inner-node: i.value, i.left, popped.rest
		else
			# Then this is rightmost
			some: popped: i.value, i.left
	as arr arr
		if last ?= arr last
			last popped arr.rtail some

- <a> tree-set a(a tree-set a, b tree-set a) trusted data<a> compare<a>
	b-iter = b iter
	a filter x => !(b-iter walk-iter-has x)

.iter<a> record mut
	cur mut a[]
	# If a node is on the stack, we have yet to write out the middle and right.
	# TODO:PERF use a mut-arr, initialized to the tree's height
	stack mut-stack inner-node a

.iter<a> iter a(a tree-set a) trusted
	stack = mut-stack<inner-node a>
	cur = stack init-iter-recur! a.root
	iter: cur, stack
.init-iter-recur!<a> a[](stack mut-stack inner-node a, node node a)
	match node
	as inner-node i
		stack ~= i
		stack init-iter-recur! i.left
	as arr arr
		arr
.peek<a> a?(a iter a)
	if a.cur is-empty
		if last ?= a.stack last
			last.value some
	else
		a.cur[0] some
.next!<a> a?(a iter a) trusted
	if a.cur is-empty
		if node ?= a.stack pop!
			res = node value
			match node right
			as inner-node i
				a.stack ~= i
			as arr arr
				a.cur := arr
			res some
	else
		res = a.cur[0]
		a.cur := a.cur tail
		res some

# Folds the remaining elements from the iter
.fold-iter<a, b> a(acc a, a iter b, f act a(a, b))
	mid = acc fold a.cur, f
	mid fold-iter-recur a.stack, f
.fold-iter-recur<a, b> a(acc a, stack mut-stack inner-node b, f act a(a, b))
	if popped ?= stack pop!
		mid = acc fold-recur-inner-node popped, f
		mid fold-iter-recur stack, f
	else
		acc

.inserted<a> record
	by-val
	node node a

.find-scapegoat record
	# size of this subtree (including the new value)
	size nat64
	# height of this subtree
	height nat64

.add-result<a> union
	none
	# TODO: SYNTAX should not require <>
	inserted<a>
	find-scapegoat

.add-recur<a> add-result a(a node a, value a, max-height nat64) compare<a>
	match a
	as inner-node i
		i add-to-inner value, max-height
	as arr arr
		arr add-to-arr value, max-height

.add-to-inner<a> add-result a(a inner-node a, value a, max-height nat64) compare<a>
	match value <=> a.value
	as less
		match a.left add-recur: value, max-height wrap-sub 1
		as none
			none
		as inserted new-left
			inserted: inner-node: a.value, new-left.node, a.right
		as find-scapegoat f
			a handle-scapegoat value, a.right, f
	as equal
		none
	as greater
		match a.right add-recur: value, max-height wrap-sub 1
		as none
			none
		as inserted new-right
			inserted: inner-node: a.value, a.left, new-right.node
		as find-scapegoat f
			a handle-scapegoat value, a.left, f

.add-to-arr<a> add-result a(a a[], value a, max-height nat64) trusted compare<a>
	insert-ptr = a binary-search-insert-ptr value
	if insert-ptr != a.end-ptr && *insert-ptr == value
		none
	elif a.size < 4
		inserted: a insert insert-ptr, value
	elif max-height == 0
		# Can't add new nodes
		a.size wrap-add 1 find-scapegoat 1
	else
		a break-up-arr value, insert-ptr, max-height

.break-up-arr<a> add-result a(a a[], value a, insert-ptr a*, max-height nat64) unsafe compare<a>
	assert: a.begin-ptr <= insert-ptr
	assert: insert-ptr <= a.end-ptr
	# Break it up into nodes, adding to height
	mid-ptr = a.begin-ptr +: (a.end-ptr - a.begin-ptr) unsafe-div 2
	mid-index = mid-ptr - a.begin-ptr
	if insert-ptr == mid-ptr
		inserted: inner-node: value, a[0 -> mid-index], a[mid-index -> a.size]
	else
		mid = *mid-ptr
		assert: mid-index < a.size
		left-arr = a[0 -> mid-index]
		right-arr = a[(mid-index wrap-add 1) -> a.size]
		forbid: left-arr is-empty
		forbid: right-arr is-empty
		if insert-ptr < mid-ptr
			# TODO:PERF: This redundantly finds insert-ptr again
			match left-arr add-to-arr: value, max-height wrap-sub 1
			as none
				unreachable
			as inserted i
				inserted: inner-node: mid, i.node, right-arr.as<node a>
			as find-scapegoat f
				a.size wrap-add 1 find-scapegoat: f.height wrap-add 1
		else
			match right-arr add-to-arr: value, max-height wrap-sub 1
			as none
				unreachable
			as inserted i
				inserted: inner-node: mid, left-arr, i.node
			as find-scapegoat f
				a.size wrap-add 1 find-scapegoat: f.height wrap-add 1

.handle-scapegoat<a> add-result a(a inner-node a, value a, other-subtree node a, f find-scapegoat) compare<a>
	size-here = f.size wrap-add 1 wrap-add other-subtree.walk-size
	height-here = f.height wrap-add 1
	if height-here > size-here.get-max-height
		inserted: a tree-to-arr value, size-here
	else
		find-scapegoat: size-here, height-here

.walk-size<a> nat64(a node a)
	match a
	as inner-node i
		i.left.walk-size wrap-add 1 wrap-add i.right.walk-size
	as arr arr
		arr.size

.tree-to-arr<a> a[](a inner-node a, value a, size nat64) trusted compare<a>
	out = size uninitialized-mut-arr<a>
	end = out.begin-ptr tree-to-arr-recur! a, value
	assert: end == out.end-ptr
	out cast-immutable
.tree-to-arr<a> a[](a inner-node a, size nat64) trusted compare<a>
	out = size uninitialized-mut-arr<a>
	end = out.begin-ptr tree-to-arr-recur! a
	assert: end == out.end-ptr
	out cast-immutable
.tree-to-arr-recur!<a> a mut*(out a mut*, a node a, value a) compare<a> unsafe
	match a
	as inner-node i
		match value <=> i.value
		as less
			mid = out tree-to-arr-recur! i.left, value
			*mid := i.value
			mid + 1 tree-to-arr-recur! i.right
		as equal
			unreachable
		as greater
			mid = out tree-to-arr-recur! i.left
			*mid := i.value
			mid + 1 tree-to-arr-recur! i.right, value
	as arr arr
		# Find first x > value, insert it before there
		index = (arr binary-search-insert-ptr value) - arr.begin-ptr
		mid = out copy-out! arr[0 -> index]
		*mid := value
		mid + 1 copy-out! arr[index -> arr.size]
# Version where we know we don't have to insert value
.tree-to-arr-recur!<a> a mut*(out a mut*, a node a) unsafe
	match a
	as inner-node i
		mid = out tree-to-arr-recur! i.left
		*mid := i.value
		mid + 1 tree-to-arr-recur! i.right
	as arr arr
		out copy-out! arr

# TODO:PERF (use memcpy)
.copy-out!<a> a mut*(out a mut*, a a[]) unsafe
	out fold a, (cur, x) =>
		*cur := x
		cur + 1

# TODO:PERF
.get-max-height nat64(size nat64) trusted
	if size < 4
		0
	else
		(size unsafe-div 2).get-max-height wrap-add 1

region iteration

each<a> void(a tree-set a, f act void(a)) data<a> compare<a>
	a.root each-recur f
.each-recur<a> void(a node a, f act void(a))
	match a
	as inner-node i
		i.left each-recur f
		f[i.value]
		i.right each-recur f
	as arr arr
		arr each f

fold<a, b> a(acc a, a tree-set b, f act a(a, b)) data<b> compare<b>
	acc fold-recur a.root, f
.fold-recur<a, b> a(acc a, a node b, f act a(a, b))
	match a
	as inner-node i
		acc fold-recur-inner-node i, f
	as arr arr
		acc fold arr, f
.fold-recur-inner-node<a, b> a(acc a, a inner-node b, f act a(a, b))
	left-value = acc fold-recur a.left, f
	f[left-value, a.value] fold-recur a.right, f

filter<a> tree-set a(a tree-set a, f act bool(a)) trusted data<a> compare<a>
	out = a.size uninitialized-mut-arr<a>
	end = out.begin-ptr fold a, (cur, value) =>
		if f[value]
			*cur := value
			cur + 1
		else
			cur
	tree-set: out[0 -> end - out.begin-ptr] cast-immutable

# TODO: first-some

map<out, in> tree-set out(a tree-set in, f act out(in)) data<in> compare<in> data<out> compare<out> trusted
	out = a.size uninitialized-mut-arr<out>
	end = out.begin-ptr fold a, (cur, value) =>
		*cur := f[value]
		cur + 1
	assert: end == out.end-ptr
	tree-set: out[0 -> end - out.begin-ptr].sort-unique! cast-immutable

# TODO:PRIVATE
dbg<a> str(a tree-set a) to-str<a>
	res = writer
	res dbg-recur! a.root
	res move-to-str!
.dbg-recur!<a> void(res writer, a node a) to-str<a>
	match a
	as inner-node i
		res ~= "("
		res dbg-recur! i.left
		res ~= " "
		res ~= i.value to-str
		res ~= " "
		res dbg-recur! i.right
		res ~= ")"
	as arr arr
		if arr is-empty
			res ~= "[]"
		else
			res ~= "["
			arr each x =>
				res ~= x to-str
				res ~= " "
			res backup!
			res ~= "]"

.verify void(a tree-set str, expected str)
	a.size is a.root.walk-size
	a.dbg is expected

test
	s = tree-set: ["a", "c", "e", "g"]
	s ~ "d" verify "([a c] d [e g])"

test
	s0 = tree-set<str>
	s0 verify "[]"

	s1 = s0 ~ "h"
	s1 verify "[h]"

	s2 = s1 ~ "k"
	s2 verify "[h k]"

	s3 = s2 ~ "i"
	s3 verify "[h i k]"

	s4 = s3 ~ "j"
	s4 verify "[h i j k]"

	assert: "h" in s4
	s4 ~ "i" verify "[h i j k]"

	s5 = s4 ~ "l"
	s5 verify "([h i] j [k l])"

	(s5 - "i") verify "([h] j [k l])"
	(s5 - "j") verify "([h] i [k l])"
	(s5 - "k") verify "([h i] j [l])"
	s6 = s5 ~ "jj"
	s6 verify "([h i] j [jj k l])"

	s7 = s6 ~ "ji"
	s7 verify "([h i] j [ji jj k l])"

	s8 = s7 ~ "jk"
	s8 verify "([h i] j ([ji jj] jk [k l]))"

	s8-k = s8 - "k"
	s8-k verify "([h i] j ([ji jj] jk [l]))"
	s8-k-l = s8-k - "l"
	s8-k-l verify "([h i] j ([ji jj] jk []))"
	s8-k-l - "jk" verify "([h i] j [ji jj])"

	s9 = s8 ~ "m"
	s9 verify "([h i] j ([ji jj] jk [k l m]))"
	s10 = s9 ~ "n"
	s10 verify "([h i] j ([ji jj] jk [k l m n]))"
	s11 = s10 ~ "o"
	s11 verify "[h i j ji jj jk k l m n o]"

	s8 ~ ["a", "jii", "z"].tree-set verify "[a h i j ji jii jj jk k l z]"
	s8 - s4 verify "[ji jj jk l]"
	s8-k-l intersect s3 verify "[h i]"

	folded = "s" fold s8, (x, y) => "{x}-{y}"
	folded is "s-h-i-j-ji-jj-jk-k-l"

	filtered = s8 filter x => !(x starts-with "j")
	filtered verify "[h i k l]"

	mapped = s8 map x => x.chars[0 -> 1] str
	mapped verify "[h i j k l]"

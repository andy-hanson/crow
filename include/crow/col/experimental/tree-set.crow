no-std
import
	../../bool: !, &&, bool, false, new, true
	../../compare: !=, <, <=, >, >=, compare
	../../exception: assert, forbid, unreachable
	../../fun-util: subscript
	../../misc: drop, is-data, void
	../../opt: new, opt
	../../ptr: ==, <=>, +, -, *, const-ptr, mut-ptr, set-deref
	../../range: ..
	../../str: ==, <=>, chars, str
	../../str-conv: interp, finish, to-str, with-str, with-value
	../../str-util: starts-with
	../../test-util: is
	../../writer: ~=, backup, move-to-str, new, writer
	../../private/bootstrap: hard-assert
	../../private/number-low-level: ==, <=>, nat64, new, unsafe-div, wrap-add, wrap-sub
	../arr: arr, is-empty, size, subscript
	../arr-util: each, fold, insert-at-ptr, last, rtail, tail, try-remove
	../fix-arr: begin-ptr, cast-immutable, end-ptr, fix-arr, subscript, uninitialized-fix-arr
	../mut-stack: ~=, mut-stack, new, peek, pop
	../sort: sort-unique, set-sort-unique
	../private/arr-low-level: begin-ptr, end-ptr
	../private/sort-utils: binary-search-has, binary-search-insert-ptr

###
Set of unique values.
Unlike `arr`, the values are always in sorted order, and there are never two of the same value.
###
tree-set<a> record
	.root node a
	.total-size nat64

.node<a> union
	inner inner-node a
	leaf a[]

.inner-node<a> record
	by-ref
	value a
	left node a
	right node a

# True iff the set is empty.
is-empty<a> bool(a tree-set a) is-data<a> compare<a>
	a.total-size == 0

# Number of values in the set.
size<a> nat64(a tree-set a) is-data<a> compare<a>
	a total-size

# Empty `tree-set`.
new<a> tree-set a(...a a[]) is-data<a> compare<a>
	a to-tree-set

# Copy an `arr` to a `tree-set`.
to-tree-set<a> tree-set a(a a[]) is-data<a> compare<a>
	values = a sort-unique
	values.leaf, values.size

###
Array of all values in the set, in sorted order.
This is O(n).
###
to-arr<a> a[](a tree-set a) is-data<a> compare<a>
	match a.root
	as inner i
		i tree-to-arr a.size
	as leaf l
		l

# True iff the value is in the set.
in<a> bool(value a, a tree-set a) is-data<a> compare<a>
	a.root has value
.has<a> bool(a node a, value a) trusted compare<a>
	match a
	as inner i
		match value <=> i.value
		as less
			i.left has value
		as equal
			true
		as greater
			i.right has value
	as leaf l
		l binary-search-has value

###
Add a value to the set.
No effect if the value is already in the set.
This is O(a.size ln)
###
~ <a> tree-set a(a tree-set a, value a) is-data<a> compare<a>
	new-size = a.size wrap-add 1
	match a.root add-recur value, new-size.get-max-height
	as none
		a
	as inserted i
		i, (a.size wrap-add 1)
	as find-scapegoat _
		unreachable

###
Add many values to the set.
This is O(a.size + b.size).
###
~ <a> tree-set a(a tree-set a, b a[]) is-data<a> compare<a>
	a ~ b.to-tree-set

###
Union of two sets.
This is O(a.size + b.size).
###
~ <a> tree-set a(a tree-set a, b tree-set a) trusted is-data<a> compare<a>
	out fix-arr a = a.size wrap-add b.size uninitialized-fix-arr
	b-iter = b iter
	end = out.begin-ptr fold a, (cur, value) =>
		cur walk-iter-union value, b-iter
	end2 = end fold-iter b-iter, (cur, value) =>
		*cur := value
		cur + 1
	out[0 .. end2 - out.begin-ptr].cast-immutable to-tree-set

.walk-iter-union<a> a mut*(out a mut*, value a, a iter a) unsafe is-data<a> compare<a>
	if peek ?= a peek
		match value <=> peek
		as less
			*out := value
			out + 1
		as equal
			*out := value
			a.next drop
			out + 1
		as greater
			*out := peek
			a.next drop
			out + 1 walk-iter-union value, a
	else
		*out := value
		out + 1

intersect<a> tree-set a(a tree-set a, b tree-set a) trusted is-data<a> compare<a>
	b-iter = b iter
	a filter x => b-iter walk-iter-has x

.walk-iter-has<a> bool(a iter a, value a) unsafe is-data<a> compare<a>
	if peek ?= a peek
		match value <=> peek
		as less
			false
		as equal
			a.next drop
			true
		as greater
			a.next drop
			a walk-iter-has value

###
Returns a set that does not contain 'b'.
If 'b' is not in the set, returns it unmodified.
This is O(a.size ln).
###
- <a> tree-set a(a tree-set a, b a) is-data<a> compare<a>
	if res ?= a try-remove b
		res
	else
		a

###
If 'b' is in the set, returns `none~.
Else, returns a set with 'b' removed.
This is O(a.size ln).
###
try-remove<a> tree-set<a>?(a tree-set a, b a) is-data<a> compare<a>
	if node ?= a.root try-remove-recur b
		(node, (a.size wrap-sub 1)),

.try-remove-recur<a> node<a>?(a node a, b a) compare<a>
	match a
	as inner i
		match b <=> i.value
		as less
			if new-left ?= i.left try-remove-recur b
				(i.value, new-left, i.right).inner,
		as equal
			if i.right node-is-empty
				i.left,
			else
				# Remove the base of the tree -- making one of the sides take over.
				if popped ?= i.left pop-right
					(popped.value, popped.rest, i.right).inner,
				else
					i.right,
		as greater
			if new-right ?= i.right try-remove-recur b
				(i.value, i.left, new-right).inner,
	as leaf l
		# TODO: use a binary search (try-remove uses linear search since it's for arbitrary arr)
		if l2 ?= l try-remove b
			l2.leaf,

.node-is-empty<a> bool(a node a)
	match a
	as inner _
		false
	as leaf l
		l is-empty

.popped<a> record
	value a
	rest node a

.pop-right<a> popped<a>?(a node a)
	match a
	as inner i
		if popped ?= i.right pop-right
			(popped.value, (i.value, i.left, popped.rest).inner),
		else
			# Then this is rightmost
			(i.value, i.left),
	as leaf l
		if last ?= l last
			(last, l.rtail.leaf),

- <a> tree-set a(a tree-set a, b tree-set a) trusted is-data<a> compare<a>
	b-iter = b iter
	a filter x => !(b-iter walk-iter-has x)

.iter<a> record mut
	cur mut a[]
	# If a node is on the stack, we have yet to write out the middle and right.
	# TODO:PERF use a fix-arr, initialized to the tree's height
	stack mut-stack inner-node a

.iter<a> iter a(a tree-set a) trusted
	stack mut-stack inner-node a = ()
	cur = stack init-iter-recur a.root
	cur, stack
.init-iter-recur<a> a[](stack mut-stack inner-node a, node node a)
	match node
	as inner i
		stack ~= i
		stack init-iter-recur i.left
	as leaf l
		l
.peek<a> a?(a iter a)
	if a.cur is-empty
		if x ?= a.stack peek
			x.value,
	else
		a.cur[0],
.next<a> a?(a iter a) trusted
	if a.cur is-empty
		if node ?= a.stack pop
			res = node value
			match node right
			as inner i
				a.stack ~= i
			as leaf l
				a.cur := l
			res,
	else
		res = a.cur[0]
		a.cur := a.cur tail
		res,

# Folds the remaining elements from the iter
.fold-iter<a, b> a(acc a, a iter b, f act a(a, b))
	mid = acc fold a.cur, f
	mid fold-iter-recur a.stack, f
.fold-iter-recur<a, b> a(acc a, stack mut-stack inner-node b, f act a(a, b))
	if popped ?= stack pop
		mid = acc fold-recur-inner-node popped, f
		mid fold-iter-recur stack, f
	else
		acc

.find-scapegoat record
	# size of this subtree (including the new value)
	size nat64
	# height of this subtree
	height nat64

.add-result<a> union
	none
	inserted node a
	find-scapegoat find-scapegoat

.add-recur<a> add-result a(a node a, value a, max-height nat64) compare<a>
	match a
	as inner i
		i add-to-inner value, max-height
	as leaf l
		l add-to-arr value, max-height

.add-to-inner<a> add-result a(a inner-node a, value a, max-height nat64) compare<a>
	match value <=> a.value
	as less
		match a.left add-recur value, (max-height wrap-sub 1)
		as none
			none
		as inserted new-left
			(a.value, new-left, a.right).inner inserted
		as find-scapegoat f
			a handle-scapegoat value, a.right, f
	as equal
		none
	as greater
		match a.right add-recur value, (max-height wrap-sub 1)
		as none
			none
		as inserted new-right
			(a.value, a.left, new-right).inner inserted
		as find-scapegoat f
			a handle-scapegoat value, a.left, f

.add-to-arr<a> add-result a(a a[], value a, max-height nat64) trusted compare<a>
	insert-ptr = a binary-search-insert-ptr value
	if insert-ptr != a.end-ptr && *insert-ptr == value
		none
	elif a.size < 4
		(a insert-at-ptr insert-ptr, value).leaf inserted
	elif max-height == 0
		# Can't add new nodes
		((a.size wrap-add 1), 1) find-scapegoat
	else
		a break-up-arr value, insert-ptr, max-height

.break-up-arr<a> add-result a(a a[], value a, insert-ptr a*, max-height nat64) unsafe compare<a>
	hard-assert: a.begin-ptr <= insert-ptr
	hard-assert: insert-ptr <= a.end-ptr
	# Break it up into nodes, adding to height
	mid-ptr = a.begin-ptr + ((a.end-ptr - a.begin-ptr) unsafe-div 2)
	mid-index = mid-ptr - a.begin-ptr
	if insert-ptr == mid-ptr
		(value, a[0 .. mid-index].leaf, a[mid-index .. a.size].leaf).inner inserted
	else
		mid = *mid-ptr
		hard-assert: mid-index < a.size
		left-arr = a[0 .. mid-index]
		right-arr = a[(mid-index wrap-add 1) .. a.size]
		forbid: left-arr is-empty
		forbid: right-arr is-empty
		if insert-ptr < mid-ptr
			# TODO:PERF: This redundantly finds insert-ptr again
			match left-arr add-to-arr value, (max-height wrap-sub 1)
			as none
				unreachable
			as inserted i
				(mid, i, right-arr.leaf).inner inserted
			as find-scapegoat f
				((a.size wrap-add 1), (f.height wrap-add 1)) find-scapegoat
		else
			match right-arr add-to-arr value, (max-height wrap-sub 1)
			as none
				unreachable
			as inserted i
				(mid, left-arr.leaf, i).inner inserted
			as find-scapegoat f
				((a.size wrap-add 1), (f.height wrap-add 1)) find-scapegoat

.handle-scapegoat<a> add-result a(a inner-node a, value a, other-subtree node a, f find-scapegoat) compare<a>
	size-here = f.size wrap-add 1 wrap-add other-subtree.walk-size
	height-here = f.height wrap-add 1
	if height-here > size-here.get-max-height
		(a tree-to-arr value, size-here).leaf inserted
	else
		(size-here, height-here) find-scapegoat

.walk-size<a> nat64(a node a)
	match a
	as inner i
		i.left.walk-size wrap-add 1 wrap-add i.right.walk-size
	as leaf l
		l size

.tree-to-arr<a> a[](a inner-node a, value a, size nat64) trusted compare<a>
	out fix-arr a = size uninitialized-fix-arr
	end = out.begin-ptr tree-to-arr-recur a.inner, value
	hard-assert: end == out.end-ptr
	out cast-immutable
.tree-to-arr<a> a[](a inner-node a, size nat64) trusted compare<a>
	out fix-arr a = size uninitialized-fix-arr
	end = out.begin-ptr tree-to-arr-recur a.inner
	hard-assert: end == out.end-ptr
	out cast-immutable
.tree-to-arr-recur<a> a mut*(out a mut*, a node a, value a) compare<a> unsafe
	match a
	as inner i
		match value <=> i.value
		as less
			mid = out tree-to-arr-recur i.left, value
			*mid := i.value
			mid + 1 tree-to-arr-recur i.right
		as equal
			unreachable
		as greater
			mid = out tree-to-arr-recur i.left
			*mid := i.value
			mid + 1 tree-to-arr-recur i.right, value
	as leaf l
		# Find first x > value, insert it before there
		index = (l binary-search-insert-ptr value) - l.begin-ptr
		mid = out copy-out l[0 .. index]
		*mid := value
		mid + 1 copy-out l[index .. l.size]
# Version where we know we don't have to insert value
.tree-to-arr-recur<a> a mut*(out a mut*, a node a) unsafe
	match a
	as inner i
		mid = out tree-to-arr-recur i.left
		*mid := i.value
		mid + 1 tree-to-arr-recur i.right
	as leaf l
		out copy-out l

# TODO:PERF (use memcpy)
.copy-out<a> a mut*(out a mut*, a a[]) unsafe
	out fold a, (cur, x) =>
		*cur := x
		cur + 1

# TODO:PERF
.get-max-height nat64(size nat64) trusted
	if size >= 4
		(size unsafe-div 2).get-max-height wrap-add 1

region iteration

each<a> void(a tree-set a, f act void(a)) is-data<a> compare<a>
	a.root each-recur f
.each-recur<a> void(a node a, f act void(a))
	match a
	as inner i
		i.left each-recur f
		f[i.value]
		i.right each-recur f
	as leaf l
		l each f

fold<a, b> a(acc a, a tree-set b, f act a(a, b)) is-data<b> compare<b>
	acc fold-recur a.root, f
.fold-recur<a, b> a(acc a, a node b, f act a(a, b))
	match a
	as inner i
		acc fold-recur-inner-node i, f
	as leaf l
		acc fold l, f
.fold-recur-inner-node<a, b> a(acc a, a inner-node b, f act a(a, b))
	left-value = acc fold-recur a.left, f
	f[left-value, a.value] fold-recur a.right, f

filter<a> tree-set a(a tree-set a, f act bool(a)) trusted is-data<a> compare<a>
	out fix-arr a = a.size uninitialized-fix-arr
	end = out.begin-ptr fold a, (cur, value) =>
		if f[value]
			*cur := value
			cur + 1
		else
			cur
	out[0 .. end - out.begin-ptr].cast-immutable to-tree-set

# TODO: find-and-get

map<out, in> tree-set out(a tree-set in, f act out(in)) is-data<in> compare<in> is-data<out> compare<out> trusted
	out fix-arr out = a.size uninitialized-fix-arr
	end = out.begin-ptr fold a, (cur, value) =>
		*cur := f[value]
		cur + 1
	hard-assert: end == out.end-ptr
	out[0 .. end - out.begin-ptr].set-sort-unique.cast-immutable to-tree-set

.dbg<a> str(a tree-set a) to-str<a>
	res writer = ()
	res dbg-recur a.root
	res move-to-str
.dbg-recur<a> void(res writer, a node a) to-str<a>
	match a
	as inner i
		res ~= "("
		res dbg-recur i.left
		res ~= " "
		res ~= i.value to-str
		res ~= " "
		res dbg-recur i.right
		res ~= ")"
	as leaf l
		if l is-empty
			res ~= "[]"
		else
			res ~= "["
			l each x =>
				res ~= x to-str
				res ~= " "
			res backup
			res ~= "]"

.verify void(a tree-set str, expected str)
	a.size is a.root.walk-size
	a.dbg is expected

test
	s tree-set str = "a", "c", "e", "g"
	s ~ "d" verify "([a c] d [e g])"

test
	s0 tree-set str = new
	s0 verify "[]"

	s1 = s0 ~ "h"
	s1 verify "[h]"

	s2 = s1 ~ "k"
	s2 verify "[h k]"

	s3 = s2 ~ "i"
	s3 verify "[h i k]"

	s4 = s3 ~ "j"
	s4 verify "[h i j k]"

	assert: "h" in s4
	s4 ~ "i" verify "[h i j k]"

	s5 = s4 ~ "l"
	s5 verify "([h i] j [k l])"

	(s5 - "i") verify "([h] j [k l])"
	(s5 - "j") verify "([h] i [k l])"
	(s5 - "k") verify "([h i] j [l])"
	s6 = s5 ~ "jj"
	s6 verify "([h i] j [jj k l])"

	s7 = s6 ~ "ji"
	s7 verify "([h i] j [ji jj k l])"

	s8 = s7 ~ "jk"
	s8 verify "([h i] j ([ji jj] jk [k l]))"

	s8-k = s8 - "k"
	s8-k verify "([h i] j ([ji jj] jk [l]))"
	s8-k-l = s8-k - "l"
	s8-k-l verify "([h i] j ([ji jj] jk []))"
	s8-k-l - "jk" verify "([h i] j [ji jj])"

	s9 = s8 ~ "m"
	s9 verify "([h i] j ([ji jj] jk [k l m]))"
	s10 = s9 ~ "n"
	s10 verify "([h i] j ([ji jj] jk [k l m n]))"
	s11 = s10 ~ "o"
	s11 verify "[h i j ji jj jk k l m n o]"

	s8 ~ ("a", "jii", "z") verify "[a h i j ji jii jj jk k l z]"
	s8 - s4 verify "[ji jj jk l]"
	s8-k-l intersect s3 verify "[h i]"

	folded = "s" fold s8, (x, y) => "{x}-{y}"
	folded is "s-h-i-j-ji-jj-jk-k-l"

	filtered = s8 filter x => !(x starts-with "j")
	filtered verify "[h i k l]"

	mapped = s8 map x => x.chars[0 .. 1] str
	mapped verify "[h i j k l]"

no-std
import
	../../../bool: ==, true
	../../../hash: hash-mix
	../../../json: to
	../../../misc: void
	../../../number: ==, <=>, nat64
	../../../option: ==, new
	../../../string: ==, literal, string
	../../../test-util: is
	../../../tuple: new
	../../array: ==, array, iterate, new, size
	../../collection: for-loop
	../../list: ==, ~=, build, list, new
	../frozen-map: bucket-starts, frozen-map, is-empty, new, pairs, size, subscript

dummy-frozen-map-tests nat64()
	0

-verify void(a (nat64, string) frozen-map, keys-order nat64[], bucket-starts nat64 array)
	(for k, _ : a pairs; k)::nat64[] is keys-order
	a.bucket-starts is bucket-starts

test
	a (nat64, string) frozen-map = ()
	a.is-empty is true
	a.size is 0
	a verify (), ()
	a[0] is ()

	b (nat64, string) frozen-map = (3, "3"), (1, "1"), (5, "5"), (2, "2")
	b verify (3, 1, 5, 2), ()
	b[0] is ()
	b[1] is ("1",)
	b[2] is ("2",)
	b[3] is ("3",)
	b[4] is ()
	b[5] is ("5",)
	b[6] is ()

	c (nat64, string) frozen-map = (3, "3"), (1, "1"), (5, "5"), (2, "2"), (8, "8")
	c verify (2, 8, 3, 5, 1), (0, 2)
	c[0] is ()
	c[1] is ("1",)
	c[2] is ("2",)
	c[3] is ("3",)
	c[4] is ()
	c[5] is ("5",)
	c[6] is ()
	c[7] is ()
	c[8] is ("8",)
	c[9] is ()

test
	a (nat64, string) frozen-map = (1, "1"), (1, "2")
	a.size is 1
	a verify (1,), ()
	a[1] is ("2",)

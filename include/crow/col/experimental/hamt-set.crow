no-std
import
	../../bool: !, bool
	../../compare: compare
	../../hash: hash-mix
	../../misc: is-data, new, void
	../../number: nat64
	../../opt: is-empty, new, opt
	../../tuple: a, new
	../arr: arr, for-loop
	../dict:
		dict, each-key, fold-keys, get-or-add, is-empty, new, rest, size, subscript, to-dict,
		try-remove

hamt-set<a> record
	.inner void[a]

new<a> hamt-set a() is-data<a> compare<a> hash-mix<a>
	(),

hamt-set<a> hamt-set a(a a[]) is-data<a> compare<a> hash-mix<a>
	((for x : a; x, ()) to-dict),

is-empty<a> bool(a hamt-set a) is-data<a> compare<a> hash-mix<a>
	a.inner is-empty

size<a> nat64(a hamt-set a) is-data<a> compare<a> hash-mix<a>
	a.inner size

in<a> bool(value a, a hamt-set a) is-data<a> compare<a> hash-mix<a>
	!a.inner[value].is-empty

~ <a> hamt-set a(a hamt-set a, value a) is-data<a> compare<a> hash-mix<a>
	if res ?= a try-add value
		res
	else
		a

try-add<a> hamt-set<a>?(a hamt-set a, value a) is-data<a> compare<a> hash-mix<a>
	match a.inner get-or-add value, () => ()
	as got _
		()
	as added res
		(res.a,),

- <a> hamt-set a(a hamt-set a, value a) is-data<a> compare<a> hash-mix<a>
	if res ?= a try-remove value
		res
	else
		a

try-remove<a> hamt-set<a>?(a hamt-set a, value a) is-data<a> compare<a> hash-mix<a>
	if res ?= a.inner try-remove value
		(res.rest,),

region iteration

each<a> void(a hamt-set a, f act void(a)) is-data<a> compare<a> hash-mix<a>
	a.inner each-key f

fold<a, b> a(acc a, a hamt-set b, f act a(a, b)) is-data<b> compare<b> hash-mix<b>
	acc fold-keys a.inner, f

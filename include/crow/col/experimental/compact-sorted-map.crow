import
	../mut-priority-queue: ~=, build, mut-priority-queue, pop, pop-if
	../private/sort-utils: binary-search-key

+compact-sorted-map[k, v] record by-val
	-impl (k, v) impl

-impl[k, v] union(overlay (k, v) overlay, end-node (k, v)[])

# TODO: consider tracking the number of keys that are new, or change a value, or remove a value.
# We should merge more frequently if removing keys, less frequently if adding keys.
-overlay[k, v] record by-ref
	# never empty
	pairs (k, v?)[]
	prev (k, v) impl

+==[k, v] bool(a (k, v) compact-sorted-map, b (k, v) compact-sorted-map) k key, v equal
	a.to-sorted-pairs == b.to-sorted-pairs
-to-sorted-pairs[k, v] (k, v)[](a (k, v) compact-sorted-map) k key
	a.to sort (k, _) => k

+to[k, v] json(a (k, v) compact-sorted-map) k key, (json, k) to, (json, v) to
	a.to-sorted-pairs to

+new[k, v] (k, v) compact-sorted-map(...a (k, v)[]) k key
	a to

+to[k, v] (k, v) compact-sorted-map(a (k, v)[]) k key
	(a sort (k, _) => k).end-node,

+is-empty[k, v] bool(a (k, v) compact-sorted-map) k key
	match a impl
	as overlay _
		false
	as end-node e
		e is-empty

###
Number of pairs.
This is O(n).
###
size[k, v] nat64(a (k, v) compact-sorted-map) k key
	res mut nat64 = 0
	for _ : a
		res +:= 1
	res

to[k, v] (k, v)[](a (k, v) compact-sorted-map) k key
	match a.compact impl
	as overlay _
		unreachable
	as end-node e
		e

~ ~[k, v] (k, v) compact-sorted-map(a (k, v) compact-sorted-map, (key k, value v)) k key
	(a.impl add-or-remove key, (value,)),

~ ~~[k, v] (k, v) compact-sorted-map(a (k, v) compact-sorted-map, b (k, v)[]) k key
	if b is-empty
		a
	elif a is-empty
		b to
	else
		pairs (k, v?)[] = (for k, v : b; k, (v,)) sort (k, _) => k
		(pairs, a.impl).merge-as-needed,

~ -[k, v] (k, v) compact-sorted-map(a (k, v) compact-sorted-map, key k) k key
	if key in a
		(a.impl add-or-remove key, ()),
	else
		a

+subscript[k, v] v?(a (k, v) compact-sorted-map, key k) k key
	cur mut = a impl
	loop
		match cur
		as overlay o
			if v ?= o.pairs binary-search-key key
				break v
			else
				cur := o prev
				continue
		as end-node e
			break e binary-search-key key

+in[k, v] bool(key k, a (k, v) compact-sorted-map) k key
	!a[key].is-empty

-add-or-remove[k, v] (k, v) impl(a (k, v) impl, key k, value v?) k key
	(((key, value),), a) merge-as-needed

-merge-as-needed[k, v] (k, v) impl(a (k, v) overlay) k key
	match a prev
	as overlay o
		if o.pairs.size should-merge a.pairs.size
			new-pairs = o.pairs merge-overlays a.pairs
			(new-pairs, o.prev) merge-as-needed
		else
			a overlay
	as end-node e
		if e.size should-merge a.pairs.size
			e merge-to-end a.pairs end-node
		else
			a overlay

-merge-unconditionally[k, v] (k, v)[](a (k, v) overlay) k key
	match a prev
	as overlay o
		((o.pairs merge-overlays a.pairs), o.prev) merge-unconditionally
	as end-node e
		e merge-to-end a.pairs

-should-merge bool(prev-size nat64, overlay-size nat64)
	prev-size <= (overlay-size max 3)

-merge-overlays[k, v] (k, v?)[](left (k, v?)[], right (k, v?)[]) k key
	with out : left.size + right.size build
		l mut = left begin
		r mut = right begin
		loop
			if (lk, lv), lnext ?= l next
				if (rk, rv), rnext ?= r next
					match lk <=> rk
					as less
						out ~= (lk, lv)
						l := lnext
					as equal
						out ~= (rk, rv)
						l := lnext
						r := rnext
					as greater
						out ~= (rk, rv)
						r := rnext
					continue
				else
					out ~~= l slice-right
					break
			else
				out ~~= r slice-right
				break

-merge-to-end[k, v] (k, v)[](left (k, v)[], right (k, v?)[]) k key
	with out : left.size + right.size build
		l mut = left begin
		r mut = right begin
		loop
			if (lk, lv), lnext ?= l next
				if (rk, rv), rnext ?= r next
					match lk <=> rk
					as less
						out ~= (lk, lv)
						l := lnext
					as equal
						out add-if-has-value (rk, rv)
						l := lnext
						r := rnext
					as greater
						out add-if-has-value (rk, rv)
						r := rnext
					continue
				else
					out ~~= l slice-right
					break
			else
				for pair : r slice-right
					out add-if-has-value pair
				break
-add-if-has-value[k, v] void(out (k, v) array-builder, (k k, v-opt v?))
	if v ?= v-opt
		out ~= (k, v)

# Returns an equal map that takes up less space.
compact[k, v] (k, v) compact-sorted-map(a (k, v) compact-sorted-map) k key
	node = match a.impl
	as overlay o
		o.merge-unconditionally end-node
	as end-node e
		e end-node
	node,

region spec impls (see collection.crow)

+iterate[k, v] bool(a (k, v) compact-sorted-map, f bool mut(key k, value v)) k key
	end-node mut (k, v)[] = ()
	# Key has an index because overlays with a lower index (rightmost) should come first
	overlays ((k, nat64), (k, v?)[]) mut-priority-queue = with out : build
		cur mut = a impl
		overlay-index mut nat64 = 0
		end-node := loop
			match cur
			as overlay o
				k, _ = o.pairs[0]
				out ~= ((k, overlay-index), o pairs)
				cur := o prev
				overlay-index +:= 1
				continue
			as end-node e
				break e
	res = overlays iterate-overlays (k, opt-v) =>
		res bool = loop
			if end-node is-empty
				break false
			else
				ek, ev = end-node[0]
				match ek <=> k
				as less
					if f[ek, ev]
						break true
					else
						end-node := end-node[1 .. end]
						continue
				as equal
					end-node := end-node[1 .. end]
					break false
				as greater
					break false
		if res
			true
		elif v ?= opt-v
			f[k, v]
	res || end-node iterate f

-iterate-overlays[k, v] bool(
	overlays ((k, nat64), (k, v?)[]) mut-priority-queue,
	f bool mut(key k, value v?),
) k key
	loop
		guard popped ?= overlays pop : break false
		(key, _), rest = popped
		overlays drop-overlays-with-key key
		overlays maybe-add-back popped
		guard !rest.is-empty : continue
		if f[key, rest[0] b]
			break true
		else
			continue

-maybe-add-back[k, v] void(
	overlays ((k, nat64), (k, v?)[]) mut-priority-queue,
	last-popped ((k, nat64), (k, v?)[]),
) k key
	(_, order), rest = last-popped
	if rest.size > 1
		overlays ~= ((rest[1].a, order), rest[1 .. end])

-drop-overlays-with-key[k, v] void(
	overlays ((k, nat64), (k, v?)[]) mut-priority-queue,
	key k,
) k key
	# TODO: use 'drop-while'
	while popped2 ?= overlays pop-if pair => pair.a.a == key
		overlays maybe-add-back popped2

-get-end[k, v] (k, v)[](a (k, v) impl)
	match a
	as overlay o
		o.prev get-end
	as end-node e
		e

region build

+compact-sorted-map-builder[k, v] record mut
	-inner (k, v) array-builder
+build[k, v] (k, v) compact-sorted-map(
	a build-options,
	f void mut(out (k, v) compact-sorted-map-builder),
) k key
	a build (out => f[out,]) to
+ ~=[k, v] void(a (k, v) compact-sorted-map-builder, value (k, v)) k key
	a.inner ~= value

region test

-dbg[k, v] string(a (k, v) compact-sorted-map) k show, v show
	a.impl dbg
-dbg[k, v] string(a (k, v) impl) k show, v show
	match a
	as overlay o
		pairs = ", " join for k, v : o pairs
			"{k} -> {v?.show ?? "_"}"
		"{o.prev dbg}, [{pairs}]"
	as end-node e
		pairs = ", " join for k, v : e
			"{k} -> {v}"
		"[{pairs}]"

-verify void(a (nat64, string) compact-sorted-map, expected string)
	a.dbg is expected

test
	a (nat64, string) compact-sorted-map = ()
	a.is-empty is true
	a.size is 0
	a verify "[]"
	a[10] is ()

	b = a ~ (10, "10")
	b verify "[10 -> 10]"
	b[10] is ("10",)

	c = b ~~ ((15, "15"), (5, "5"), (20, "20"))
	c verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20]"

	d = c ~ (11, "11")
	d verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20], [11 -> 11]"

	e = d - 15
	e verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20], [11 -> 11, 15 -> _]"

	e - 15 is e
	e - 16 is e

	f = e - 10
	f verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20], [10 -> _, 11 -> 11, 15 -> _]"

	g = f ~ (10, "10b")
	g verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20], [10 -> 10b, 11 -> 11, 15 -> _]"

	h = g - 11 - 12
	# Unfortunately we leave an unnecessary '11 -> _',
	# because we don't keep track of what a removal removes from,
	# and it might be removing from the leftmost node.
	h verify "[5 -> 5, 10 -> 10, 15 -> 15, 20 -> 20], [10 -> 10b, 11 -> _, 15 -> _]"

	i = h ~~ ((11, "11"), (25, "25"))
	i verify "[5 -> 5, 10 -> 10b, 11 -> 11, 20 -> 20, 25 -> 25]"

	", " join (for k, v : h; "{k} -> {v}") is "5 -> 5, 10 -> 10b, 20 -> 20"

	h-mapped (nat64, string) compact-sorted-map = for k, v : h
		k, "{v reverse}"
	h-mapped verify "[5 -> 5, 10 -> b01, 20 -> 02]"

test
	a (nat64, string) compact-sorted-map = (84, "84"),
	b = a ~ (84, "84b")
	b verify "[84 -> 84b]"

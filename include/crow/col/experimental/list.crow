import
	../collection: sequence-compare, sequence-equal
	../private/array-low-level: array-reference-equal

###
Immutable list type.

This type is designed so concatenation (`~` and `~~`) will be efficient.
It also is efficient to split from an iterator.

It does not support efficient access by an index, so iterators should be used instead.
###
+list[t] record by-val
	~root t l1

-l1[t] record(node (t[], t l2) node) by-val
-l2[t] record(node (t array2d, t l3) node) by-val
-l3[t] record(nodes t array3d) by-val
-node[leaf, lower] union(leaf leaf, branch (leaf, lower) branch)
###
'left', 'down', and 'right' should all be non-empty.
(Else, this layer should be a leaf. See `branch-or-leaf`.)
###
-branch[leaf, lower] record(left leaf, down lower, right leaf) by-ref
-array2d[t] record(total-size nat64, arrays t[][]) by-val
-array3d[t] record(total-size nat64, arrays t array2d[]) by-val

-list-reference-equal[t] bool(a t list, b t list) unsafe
	match a.root node
	as leaf la
		match b.root node
		as leaf lb
			la array-reference-equal lb
		as branch _
			false
	as branch ba
		match b.root node
		as leaf _
			false
		as branch bb
			ba reference-equal bb

+list-builder[t] record mut
	-inner t array-builder
+build[t] t list(a build-options, f void mut(out t list-builder))
	inner t[] = a build out => f[out,]
	(inner.leaf,),
+~=[t] void(a t list-builder, value t)
	a.inner ~= value
+~~=[t] void(a t list-builder, values t list)
	broke = values iterate-chunks chunk =>
		a.inner ~~= chunk
		false
	forbid broke

-iterate-chunks[t] bool(a t list, f bool mut(chunk t[]))
	a.root iterate-l1 f

-iterate-l1[t] bool(a t l1, f bool mut(chunk t[]))
	match a node
	as leaf l
		f[l]
	as branch b
		f[b left] || b.down iterate-l2 f || f[b right]

-iterate-l2[t] bool(a t l2, f bool mut(chunk t[]))
	match a node
	as leaf l
		l.arrays iterate f
	as branch b
		b.left.arrays iterate f || b.down iterate-l3 f || b.right.arrays iterate f

-iterate-l3[t] bool(a t l3, f bool mut(chunk t[]))
	a.nodes.arrays iterate nodes =>
		nodes.arrays iterate f

-new[t] t array2d() bare
	0, ()
-new[t] t array2d(a t[])
	a.size, (a,)
-is-empty[t] bool(a t array2d) bare
	a.arrays is-empty
-~~[t] t array2d(a t array2d, b t array2d)
	a.total-size + b.total-size, a.arrays ~~ b.arrays
-subscript[t] t[](a t array2d, index nat64) bare
	a.arrays[index]
-subscript[t] t[](a t array2d, index index-relative-to-end) bare
	a.arrays[index]
-subscript[t] t array2d(a t array2d, indices nat64 range) bare
	a.arrays[indices] recompute-total-size
-subscript[t] t array2d(a t array2d, indices range-relative-to-end) bare
	a.arrays[indices] recompute-total-size
-recompute-total-size[t] t array2d(a t[][]) bare
	a.compute-total-size, a
-compute-total-size[t] nat64(a t[][]) bare
	total-size mut nat64 = 0
	iter mut = a begin
	while x, next ?= iter next
		total-size +:= x size
		iter := next
	total-size
-new[t] t array3d() bare
	0, ()
-new[t] t array3d(a t array2d)
	a.total-size, (a,)
-is-empty[t] bool(a t array3d) bare
	a.arrays is-empty
-~~[t] t array3d(a t array3d, b t array3d)
	a.total-size + b.total-size, a.arrays ~~ b.arrays
-subscript[t] t array2d(a t array3d, index nat64) bare
	a.arrays[index]
-subscript[t] t array2d(a t array3d, index index-relative-to-end) bare
	a.arrays[index]
-subscript[t] t array3d(a t array3d, indices nat64 range) bare
	a.arrays[indices] recompute-total-size
-subscript[t] t array3d(a t array3d, indices range-relative-to-end) bare
	a.arrays[indices] recompute-total-size
-recompute-total-size[t] t array3d(a t array2d[]) bare
	a.compute-total-size, a
-compute-total-size[t] nat64(a t array2d[]) bare
	total-size mut nat64 = 0
	iter mut = a begin
	while x, next ?= iter next
		total-size +:= x total-size
		iter := next
	total-size

-new[leaf, lower] (leaf, lower) node() leaf new
	() leaf

-new[t] t l2()
	(),
-new[t] t l3()
	(),

-is-empty[t] bool(a t l2)
	match a node
	as leaf xs
		xs is-empty
	as branch _
		false

-is-empty[t] bool(a t l3)
	a.nodes is-empty

-depth[t] nat64(a t list)
	match a.root.node
	as leaf _
		0
	as branch b
		b.down depth-l2

-depth-l2[t] nat64(a t l2)
	match a node
	as leaf _
		1
	as branch b
		b.down depth-l3

-depth-l3[t] nat64(_ t l3)
	2

-as-branch[leaf, lower] (leaf, lower) branch(a (leaf, lower) node) bare
	match a
	as leaf _
		unreachable
	as branch b
		b

-try-as-l1-leaf[t] t[]?(a t list) bare
	match a.root node
	as leaf xs
		xs,
	as branch _
		()

-get-l1-branch[t] (t[], t l2) branch(a t list) bare
	a.root.node as-branch

-try-get-l2[t] t l2?(a t list) bare
	match a.root node
	as leaf _
		()
	as branch b
		b.down,

-get-l2[t] t l2(a t list) bare
	a.try-get-l2!

-get-l2-branch[t] (t array2d, t l3) branch(a t list) bare
	a.get-l1-branch.down.node as-branch

-get-l3[t] t l3(a t list) bare
	a.get-l2-branch down

# List containing the given elements.
+new[t] t list(...a t[])
	a to

+subscript[t] t(a t list, index nat64) bare
	assert index < a.size : index index-too-big a.size
	(a.begin + index).next!.a
+subscript[t] t list(a t list, indices nat64 range)
	a.begin + indices.low slice a.begin + indices.high

###
Convert an array to a list.
This is O(1).
###
+to[t] t list(a t[])
	l t l1 = a.leaf,
	l,

+to[t] t list(a t?)
	if x ?= a
		x,

###
Convert a list to an array.
This is O(n).
This is O(1) if the list was converted from an array, meaning a round trip is free.
###
+to[t] t[](a t list)
	a.try-as-l1-leaf ?? for x : a; x

+==[t] bool(a t list, b t list) t equal
	(trusted a list-reference-equal b) || a sequence-equal b

+<=>[t] comparison(a t list, b t list) t compare
	if trusted a list-reference-equal b
		equal
	else
		a sequence-compare b

###
`true` iff `a.size == 0`.
This is O(1).
###
+is-empty[t] bool(a t list) bare
	match a.root node
	as leaf xs
		xs is-empty
	as branch _
		false

###
Concatenate two lists.
This is O(log n), where `n` is the size of the smaller list.
###
+~~[t] t list(a t list, b t list)
	guard !a.is-empty : b
	guard !b.is-empty : a
	# Concatenate the smaller list onto the bigger one.
	match a.depth <=> b.depth
	as less
		(a.root cat-left-node-l1 b.root),
	as equal
		if a.size < b.size
			(a.root cat-left-node-l1 b.root),
		else
			(a.root cat-right-node-l1 b.root),
	as greater
		(a.root cat-right-node-l1 b.root),

###
Prepend an element to a list.
This is O(log n), amortized O(1).
###
+~[t] t list(a t, b t list)
	((a,) cat-left-array-l1 b.root),

###
Append an element to a list.
This is O(log n), amortized O(1).
###
+~[t] t list(a t list, b t)
	(a.root cat-right-array-l1 (b,)),

# 'r' is bigger, add 'l' to the left
-cat-left-node-level[leaf, lower] (leaf, lower) node(
	l (leaf, lower) node,
	r (leaf, lower) node,
	cat-left-array-lower lower mut(left leaf, right lower),
	cat-left-node-lower lower mut(left lower, right lower),
) leaf concatenate, leaf size-bytes, lower new
	match l
	as leaf xs
		xs cat-left-array-level r, cat-left-array-lower
	as branch bl
		match r
		as leaf _
			# 'r' should be bigger
			unreachable
		as branch br
			down1 = cat-left-array-lower[bl.right ~~ br.left, br.down]
			down2 = cat-left-node-lower[bl.down, down1]
			(bl.left, down2, br.right) branch

# 'l' is bigger, add 'r' to right
-cat-right-node-level[leaf, lower] (leaf, lower) node(
	l (leaf, lower) node,
	r (leaf, lower) node,
	cat-right-array-lower lower mut(left lower, right leaf),
	cat-right-node-lower lower mut(left lower, right lower),
) leaf concatenate, leaf size-bytes, lower new
	match r
	as leaf xs
		l cat-right-array-level xs, cat-right-array-lower
	as branch br
		match l
		as leaf _
			# 'l' should be bigger
			unreachable
		as branch bl
			down1 = cat-right-array-lower[bl.down, bl.right ~~ br.left]
			down2 = cat-right-node-lower[down1, br.down]
			(bl.left, down2, br.right) branch

# 'r' is bigger
-cat-left-array-level[leaf, lower] (leaf, lower) node(
	l leaf,
	r (leaf, lower) node,
	cat-left-lower lower mut(left leaf, right lower),
) leaf concatenate, leaf size-bytes, lower new
	match r
	as leaf xs
		if l.size-bytes + xs.size-bytes <= max-leaf-bytes
			l ~~ xs leaf
		else
			(l, (), xs) branch
	as branch br
		if l.size-bytes + br.left.size-bytes <= max-leaf-bytes
			(l ~~ br.left, br.down, br.right) branch
		else
			(l, cat-left-lower[br.left, br.down], br.right) branch

-cat-right-array-level[leaf, lower] (leaf, lower) node(
	l (leaf, lower) node,
	r leaf,
	cat-right-lower lower mut(left lower, right leaf),
) leaf concatenate, leaf size-bytes, lower new
	match l
	as leaf xs
		if xs.size-bytes + r.size-bytes <= max-leaf-bytes
			xs ~~ r leaf
		else
			(xs, (), r) branch
	as branch br
		if br.right.size-bytes + r.size-bytes <= max-leaf-bytes
			(br.left, br.down, br.right ~~ r) branch
		else
			(br.left, cat-right-lower[br.down, br.right], r) branch

-cat-left-node-l1[t] t l1(l t l1, r t l1)
	node = l.node cat-left-node-level r.node,
		((xs, lower) => (xs,) cat-left-array-l2 lower),
		(x, y) => x cat-left-node-l2 y
	node,

-cat-right-node-l1[t] t l1(l t l1, r t l1)
	node = l.node cat-right-node-level r.node,
		((lower, xs) => lower cat-right-array-l2 (xs,)),
		((x, y) => x cat-right-node-l2 y)
	node,

-cat-left-array-l1[t] t l1(l t[], r t l1)
	(l cat-left-array-level r.node, (xs, lower) => (xs,) cat-left-array-l2 lower),

-cat-right-array-l1[t] t l1(l t l1, r t[])
	(l.node cat-right-array-level r, (lower, xs) => lower cat-right-array-l2 (xs,)),

-cat-left-node-l2[t] t l2(l t l2, r t l2)
	node = l.node cat-left-node-level r.node,
		((xs, lower) => (xs,) cat-left-array-l3 lower),
		((x, y) => x cat-left-node-l3 y)
	node,

-cat-right-node-l2[t] t l2(l t l2, r t l2)
	node = l.node cat-right-node-level r.node,
		((lower, xs) => lower cat-right-array-l3 (xs,)),
		((x, y) => x cat-right-node-l3 y)
	node,

-cat-left-array-l2[t] t l2(l t array2d, r t l2)
	(l cat-left-array-level r.node, (xs, lower) => (xs,) cat-left-array-l3 lower),

-cat-right-array-l2[t] t l2(l t l2, r t array2d)
	(l.node cat-right-array-level r, (lower, xs) => lower cat-right-array-l3 (xs,)),

-cat-left-node-l3[t] t l3(l t l3, r t l3)
	l.nodes ~~ r.nodes,

-cat-right-node-l3[t] t l3(l t l3, r t l3)
	l.nodes ~~ r.nodes,

-cat-left-array-l3[t] t l3(l t array3d, r t l3)
	l ~~ r.nodes,

-cat-right-array-l3[t] t l3(l t l3, r t array3d)
	l.nodes ~~ r,

# Leaves are allowed to be arbitrarily long,
# this is just the limit when we would normally make a branch
-max-leaf-bytes nat64()
	64

-size-bytes[t] spec
	size-bytes nat64(a t)
# 'trusted' since we are just using it to guide branch sizes
# (which should have no observable effect)
-size-bytes[t] nat64(a t[])
	a.size * trusted extern native ? size-of@t : 8
-size-bytes[t] nat64(a t array2d)
	a.arrays size-bytes

region spec impls (see collection.crow)

###
Number of elements in the list.
This is O(n).
###
+size[t] nat64(a t list) bare
	a.end - a.begin

+iterate[t] bool(a t list, f bool mut(elem t))
	a iterate-chunks chunk =>
		chunk iterate f

+list-iterator[t] record by-val
	-list t list
	# Always non-empty
	-cur-chunk t[]
	# Always be a valid index
	-next-index-in-chunk nat64
	# Identifies where cur-chunk is from
	-pos t position

-position[t] union
	l1-leaf
	l1-left
	l1-right
	l2-leaf t array-2d-iterator
	l2-left t array-2d-iterator
	l2-right t array-2d-iterator
	l3-leaf t array-3d-iterator

+==[t] bool(a t list-iterator, b t list-iterator) t equal
	assert a.list == b.list : iterator-not-comparable
	if trusted a.list list-reference-equal b.list
		# No need to test position since that determines cur-chunk
		same-chunk = trusted a.cur-chunk array-reference-equal b.cur-chunk
		same-chunk && a.next-index-in-chunk == b.next-index-in-chunk
	else
		a.next-index == b.next-index
+<=>[t] comparison(a t list-iterator, b t list-iterator) t equal
	assert a.list == b.list : iterator-not-comparable
	a.next-index <=> b.next-index

-level[t] t level(a t position) bare
	a.level-and-side a

-side[t] side(a t position) bare
	a.level-and-side b

-level-and-side[t] (t level, side)(a t position) bare
	match a
	as l1-leaf
		l1, leaf
	as l1-left
		l1, left
	as l1-right
		l1, right
	as l2-leaf i
		i l2, leaf
	as l2-left i
		i l2, left
	as l2-right i
		i l2, right
	as l3-leaf i
		i l3, leaf

-level[t] union
	l1
	l2 t array-2d-iterator
	l3 t array-3d-iterator

-side union(left, leaf, right)
-== bool(a side, b side)
-<=> comparison(a side, b side)

+next-index[t] nat64(a t list-iterator) bare
	match a pos
	as l1-leaf
		a next-index-in-chunk
	as l1-left
		a next-index-in-chunk
	as l1-right
		b = a.list get-l1-branch
		b.left.size + b.down.total-size + a.next-index-in-chunk
	as l2-leaf i
		a.list.get-l1-branch.left.size + (a next-index-2d i)
	as l2-left i
		a.list.get-l1-branch.left.size + (a next-index-2d i)
	as l2-right i
		b = a.list get-l2-branch
		a.list.get-l1-branch.left.size + b.left.total-size + b.down.total-size + (a next-index-2d i)
	as l3-leaf i
		a.list.get-l1-branch.left.size + a.list.get-l2-branch.left.total-size + (a next-index-3d i)
-total-size[t] spec
	total-size nat64(a t)
-total-size[t] nat64(a t l2) bare
	a.node total-size
-total-size[t] nat64(a t l3) bare
	a.nodes total-size
-total-size[leaf, lower] nat64(a (leaf, lower) node) leaf total-size, lower total-size, bare
	match a
	as leaf xs
		xs total-size
	as branch b
		b.left.total-size + b.down.total-size + b.right.total-size
-next-index-2d[t] nat64(a t list-iterator, i t array-2d-iterator) bare
	i.slice-left.total-size + a.next-index-in-chunk
-next-index-3d[t] nat64(a t list-iterator, i t array-3d-iterator) bare
	left, cur = i slice-left
	left.total-size + cur.total-size + a.next-index-in-chunk

+begin[t] t list-iterator(a t list) bare
	match a.root node
	as leaf xs
		a, xs, 0, l1-leaf
	as branch b
		a, b.left, 0, l1-left

+end[t] t list-iterator(a t list) bare
	match a.root node
	as leaf xs
		a, xs, xs.size, l1-leaf
	as branch b
		a, b.right, b.right.size, l1-right

+collection[t] t list(a t list-iterator) bare
	a list

+ +[t] t list-iterator(a t list-iterator, n nat64) bare
	# TODO:PERF
	cur mut = a
	i mut nat64 = 0
	loop
		guard i != n : break cur
		_, next = cur.next ?? throw iterator-out-of-bounds
		cur := next
		i +:= 1
		continue

+ -[t] t list-iterator(a t list-iterator, n nat64) bare
	# TODO:PERF
	cur mut = a
	i mut nat64 = 0
	until i == n
		prev, _ = cur.prev ?? throw iterator-out-of-bounds
		cur := prev
		i +:= 1
	cur

+ -[t] nat64(a t list-iterator, b t list-iterator) bare
	# TODO:PERF
	a.next-index - b.next-index

+next[t] (t, t list-iterator)?(a t list-iterator) bare
	if a.next-index-in-chunk < a.cur-chunk.size
		right t list-iterator = a.list, a.cur-chunk, a.next-index-in-chunk + 1, a.pos
		(a.cur-chunk[a next-index-in-chunk], right),
	else
		match a pos
		as l1-leaf
			()
		as l1-left
			a next-to-l2-left
		as l1-right
			()
		as l2-leaf i
			if iter ?= i move-right
				a next-set-chunk *iter, iter.l2-leaf
			else
				a next-to-l1-right
		as l2-left i
			if iter ?= i move-right
				a next-set-chunk *iter, iter.l2-left
			else
				a next-to-l3
		as l2-right i
			if iter ?= i move-right
				a next-set-chunk *iter, iter.l2-right
			else
				a next-to-l1-right
		as l3-leaf i
			if iter ?= i move-right
				a next-set-chunk *iter, iter.l3-leaf
			else
				a next-to-l2-right


+prev[t] (t list-iterator, t)?(a t list-iterator) bare
	if a.next-index-in-chunk != 0
		left t list-iterator = a.list, a.cur-chunk, a.next-index-in-chunk - 1, a.pos
		(left, a.cur-chunk[a.next-index-in-chunk - 1]),
	else
		match a pos
		as l1-leaf
			()
		as l1-left
			()
		as l1-right
			a prev-to-l2-right
		as l2-leaf i
			if iter ?= i move-left
				a prev-set-chunk *iter, iter.l2-leaf
			else
				a prev-to-l1-left
		as l2-left i
			if iter ?= i move-left
				a prev-set-chunk *iter, iter.l2-left
			else
				a prev-to-l1-left
		as l2-right i
			if iter ?= i move-left
				a prev-set-chunk *iter, iter.l2-right
			else
				a prev-to-l3
		as l3-leaf i
			if iter ?= i move-left
				a prev-set-chunk *iter, iter.l3-leaf
			else
				a prev-to-l2-left

-next-set-chunk[t] (t, t list-iterator)?(a t list-iterator, chunk t[], pos t position) bare
	(chunk[0], (a.list, chunk, 1, pos)),

-prev-set-chunk[t] (t list-iterator, t)?(a t list-iterator, chunk t[], pos t position) bare
	((a.list, chunk, chunk.size - 1, pos), chunk[end - 1]),

-next-to-l1-right[t] (t, t list-iterator)?(a t list-iterator) bare
	a next-set-chunk a.list.get-l1-branch.right, l1-right

-prev-to-l1-left[t] (t list-iterator, t)?(a t list-iterator) bare
	a prev-set-chunk a.list.get-l1-branch.left, l1-left

-next-to-l2-left[t] (t, t list-iterator)?(a t list-iterator) bare
	match a.list.get-l2 node
	as leaf xs
		if xs is-empty
			a next-to-l1-right
		else
			a next-set-chunk xs[0], xs.begin.l2-leaf
	as branch b
		a next-set-chunk b.left[0], b.left.begin.l2-left

-prev-to-l2-left[t] (t list-iterator, t)?(a t list-iterator) bare
	iter2d = a.list.get-l2-branch.left end
	a prev-set-chunk *iter2d, iter2d.l2-left

-next-to-l2-right[t] (t, t list-iterator)?(a t list-iterator) bare
	iter2d = a.list.get-l2-branch.right begin
	a next-set-chunk *iter2d, iter2d.l2-right

-prev-to-l2-right[t] (t list-iterator, t)?(a t list-iterator) bare
	match a.list.get-l2 node
	as leaf xs
		if xs is-empty
			a prev-to-l1-left
		else
			a prev-set-chunk xs[end - 1], xs.end.l2-leaf
	as branch b
		a prev-set-chunk b.right[end - 1], b.right.end.l2-right

-next-to-l3[t] (t, t list-iterator)?(a t list-iterator) bare
	nodes = a.list.get-l3 nodes
	if nodes is-empty
		a next-to-l2-right
	else
		a next-set-chunk nodes[0][0], nodes.begin.l3-leaf

-prev-to-l3[t] (t list-iterator, t)?(a t list-iterator) bare
	nodes = a.list.get-l3 nodes
	if nodes is-empty
		a prev-to-l2-left
	else
		a prev-set-chunk nodes[end - 1][end - 1], nodes.end.l3-leaf

+slice[t] t list(begin t list-iterator, end t list-iterator)
	end-of-same-list = if trusted begin.list list-reference-equal end.list
		end
	else
		begin.list.begin + end.next-index
	begin slice-same-list end-of-same-list

-slice-same-list[t] t list(a t list-iterator, b t list-iterator)
	a-level = a.pos level
	b-level = b.pos level
	a-side = a.pos side
	b-side = b.pos side
	match a-level
	as l1
		match b-level
		as l1
			match a-side <=> b-side
			as less
				a.slice-right-cur-chunk make-l1 a.list.get-l2, b.slice-left-cur-chunk
			as equal
				a slice-same-array1d b
			as greater
				throw slice-right-to-left
		as l2 bi
			if a-side == left
				l2 = if b-side == right
					branch = a.list get-l2-branch
					branch.left make-l2 branch.down, bi.slice-left
				else
					(bi.slice-left.leaf,)
				a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk
		as l3 bi
			assert a-side == left : slice-right-to-left
			branch = a.list get-l2-branch
			left, cur = bi slice-left
			l2 = branch.left make-l2 (left,), cur
			a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk
	as l2 ai
		match b.pos level
		as l1
			if b-side == right
				if a-side == left
					branch = a.list get-l2-branch
					l2 = ai.slice-right make-l2 branch.down, branch.right
					a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk
				else
					down t l2 = ai.slice-right.leaf,
					a.slice-right-cur-chunk make-l1 down, b.slice-left-cur-chunk
		as l2 bi
			match a-side <=> b-side
			as less
				assert a-side == left && b-side == right
				l2 = ai.slice-right make-l2 a.list.get-l3, bi.slice-left
				a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk
			as equal
				a slice-same-array2d ai, b, bi
			as greater
				throw slice-right-to-left
		as l3 bi
			assert a-side == left : slice-right-to-left
			left, cur = bi slice-left
			l2 = ai.slice-right make-l2 (left,), cur
			a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk
	as l3 ai
		match b.pos level
		as l1
			assert b-side == right : slice-right-to-left
			branch = a.list get-l2-branch
			cur, right = ai slice-right
			l2 = cur make-l2 (right,), branch.right
			a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk
		as l2 bi
			assert b-side == right : slice-right-to-left
			cur, right = ai slice-right
			l2 t l2 = cur make-l2 (right,), bi.slice-left
			a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk
		as l3 bi
			a slice-both-l3 ai, b, bi

-slice-left-cur-chunk[t] t[](a t list-iterator)
	a.cur-chunk[0 .. a.next-index-in-chunk]
-slice-right-cur-chunk[t] t[](a t list-iterator)
	a.cur-chunk[a.next-index-in-chunk .. end]

-slice-same-array1d[t] t list(a t list-iterator, b t list-iterator)
	assert trusted a.cur-chunk array-reference-equal b.cur-chunk
	assert a.next-index-in-chunk <= b.next-index-in-chunk : slice-right-to-left
	a.cur-chunk[a.next-index-in-chunk .. b.next-index-in-chunk].to

-slice-same-array2d[t] t list(
	a t list-iterator,
	ai t array-2d-iterator,
	b t list-iterator,
	bi t array-2d-iterator,
)
	arrays = ai arrays
	assert trusted bi.arrays.arrays array-reference-equal arrays.arrays
	match ai.index-2d <=> bi.index-2d
	as less
		l2 t l2 = arrays[ai.index-2d + 1 .. bi.index-2d].leaf,
		a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk
	as equal
		a slice-same-array1d b
	as greater
		throw slice-right-to-left

-slice-both-l3[t] t list(
	a t list-iterator,
	ai t array-3d-iterator,
	b t list-iterator,
	bi t array-3d-iterator,
)
	arrays = ai arrays
	assert trusted bi.arrays.arrays array-reference-equal arrays.arrays
	match ai.index-3d <=> bi.index-3d
	as less
		l3 t l3 = (arrays[ai.index-3d + 1 .. bi.index-3d],)
		l2l = arrays[ai index-3d][ai.index-2d + 1 .. end]
		l2r = arrays[bi index-3d][0 .. bi.index-2d]
		l2 = l2l make-l2 l3, l2r
		a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk
	as equal
		array2d = arrays[ai index-3d]
		a slice-same-array2d (array2d, ai.index-2d), b, (array2d, bi.index-2d)
	as greater
		throw slice-right-to-left

-level[l, leaf] spec
	is-empty bool(level l)
	pop-left (leaf, l)(level l)
	pop-right (l, leaf)(level l)

-make-level-generic[leaf, lower] (leaf, lower) node(
	left leaf,
	down lower,
	right leaf,
) leaf concatenate, leaf is-empty, (lower, leaf) level
	if down is-empty
		left ~~ right leaf
	else
		if left is-empty
			if right is-empty
				pair0 = down pop-left
				if pair0.b is-empty
					pair0.a leaf
				else
					pair1 = pair0.b pop-right
					(pair0.a, pair1.a, pair1.b) branch
			else
				down-left, down-down = down pop-left
				if down-down is-empty
					down-left ~~ right leaf
				else
					(down-left, down-down, right) branch
		elif right is-empty
			down-down, down-right = down pop-right
			if down-down is-empty
				left ~~ down-right leaf
			else
				(left, down-down, down-right) branch
		else
			(left, down, right) branch

-make-l1[t] t list(left t[], down t l2, right t[])
	l1 t l1 = (left make-level-generic down, right),
	l1,

-make-l2[t] t l2(left t array2d, down t l3, right t array2d)
	(left make-level-generic down, right),

-pop-left[t] (t[], t l2)(a t l2)
	match a node
	as leaf xs
		xs[0], (xs[1 .. end].leaf,)
	as branch b
		bl t array2d = b left
		popped = bl[0]
		forbid b.left.arrays is-empty
		rest t l2 = if b.left.arrays.size == 1
			if b.down is-empty
				b.right.leaf,
			else
				left, cur = b.down pop-left
				(left, cur, b.right).branch,
		else
			(b.left[1 .. end], b.down, b.right).branch,
		popped, rest

-pop-right[t] (t l2, t[])(a t l2)
	match a node
	as leaf xs
		(xs[0 .. end - 1].leaf,), xs[end - 1]
	as branch b
		popped t[] = b.right[end - 1]
		forbid b.right.arrays is-empty
		rest t l2 = if b.right.arrays.size == 1
			if b.down is-empty
				b.left.leaf,
			else
				cur, right = b.down pop-right
				(b.left, cur, right).branch,
		else
			(b.left, b.down, b.right[0 .. end - 1]).branch,
		rest, popped

-pop-left[t] (t array2d, t l3)(a t l3)
	a.nodes[0], (a.nodes[1 .. end],)

-pop-right[t] (t l3, t array2d)(a t l3)
	(a.nodes[0 .. end - 1],), a.nodes[end - 1]

-array-2d-iterator[t] record by-val
	arrays t array2d
	# arrays[index-2d] is the current chunk
	index-2d nat64

-begin[t] t array-2d-iterator(a t array2d) bare
	a, 0

-end[t] t array-2d-iterator(a t array2d) bare
	a, a.arrays.size - 1

-*[t] t[](a t array-2d-iterator) bare
	a.arrays[a index-2d]

-move-left[t] t array-2d-iterator?(a t array-2d-iterator) bare
	if a.index-2d > 0
		(a.arrays, a.index-2d - 1),

-move-right[t] t array-2d-iterator?(a t array-2d-iterator) bare
	if a.index-2d < a.arrays.arrays.size - 1
		(a.arrays, a.index-2d + 1),

-slice-left[t] t array2d(a t array-2d-iterator) bare
	a.arrays[0 .. a.index-2d]

-slice-right[t] t array2d(a t array-2d-iterator) bare
	a.arrays[a.index-2d + 1 .. end]

-array-3d-iterator[t] record by-val
	arrays t array3d
	index-3d nat64
	index-2d nat64

-begin[t] t array-3d-iterator(a t array3d) bare
	a, 0, 0

-end[t] t array-3d-iterator(a t array3d) bare
	a, a.arrays.size - 1, a[end - 1].arrays.size - 1

-*[t] t[](a t array-3d-iterator) bare
	a.arrays[a.index-3d][a.index-2d]

-move-left[t] t array-3d-iterator?(a t array-3d-iterator) bare
	if a.index-2d > 0
		(a.arrays, a.index-3d, a.index-2d - 1),
	elif a.index-3d > 0
		(a.arrays, a.index-3d - 1, a.arrays[a.index-3d - 1].arrays.size - 1),

-move-right[t] t array-3d-iterator?(a t array-3d-iterator) bare
	if a.index-2d < a.arrays[a.index-3d].arrays.size - 1
		(a.arrays, a.index-3d, a.index-2d + 1),
	elif a.index-3d < a.arrays.arrays.size - 1
		(a.arrays, a.index-3d + 1, 0),

-slice-left[t] (t array3d, t array2d)(a t array-3d-iterator) bare
	a2d t array-2d-iterator = a.arrays[a index-3d], a.index-2d
	a.arrays[0 .. a.index-3d], a2d.slice-left

-slice-right[t] (t array2d, t array3d)(a t array-3d-iterator) bare
	a2d t array-2d-iterator = a.arrays[a index-3d], a.index-2d
	a2d.slice-right, a.arrays[a.index-3d + 1 .. end]


region test

-verify[t] void(a t list, expected string) t equal, (json, t) to, t show
	a.dbg is expected
	a.size is a.root.check-structure

	(for x : a; x)::(t list) is a

	a-array t[] = a to

	iter mut = a begin
	for index : 0::nat64 .. a.size
		iter.next-index is index
		a.begin slice iter is a-array[0 .. index].to
		iter slice a.end is a-array[index .. end].to
		next-pair = iter.next!
		next-pair.a is a[index]
		iter := next-pair b
	iter.next-index is a.size
	assert iter.next is-empty

	iter := a end
	for index : 0::nat64 .. a.size reversed
		prev-pair = iter.prev!
		iter := prev-pair a
		prev-pair.b is a[index]
		iter.next-index is index
		a.begin slice iter is a-array[0 .. iter.next-index].to
		iter slice a.end is a-array[iter.next-index .. end].to
	iter.next-index is 0
	assert iter.prev is-empty

	for i : 0::nat64 .. a.size
		for j : i .. a.size
			a[i .. j] is a-array[i .. j].to

-to[t] json(a t list) (json, t) to
	(for x : a; x to) list

-dbg[t] spec
	dbg string(a t)
-dbg[t] string(a t list) t show
	a.root.node dbg-node
-dbg[t] string(a t l2) t show
	a.node dbg-node
-dbg[t] string(a t l3) t show
	a.nodes dbg
-dbg-node[leaf, lower] string(a (leaf, lower) node) leaf dbg, lower dbg
	match a
	as leaf l
		l dbg
	as branch b
		"({b.left dbg} {b.down dbg} {b.right dbg})"
-dbg[t] string(a t[]) t show
	parts = " " join for x : a; "{x}"
	"[{parts}]"
-dbg[t] string(a t array2d) t show
	parts = " " join for x : a arrays; x dbg
	"[{parts}]"
-dbg[t] string(a t array3d) t show
	parts = " " join for x : a arrays; x dbg
	"[{parts}]"

-check-structure[t] nat64(a t l1)
	match a node
	as leaf xs
		xs size
	as branch b
		forbid b.left is-empty
		forbid b.right is-empty
		b.left.size + b.down.check-structure + b.right.size

-check-structure[t] nat64(a t l2)
	match a node
	as leaf xs
		xs check-structure
	as branch b
		b.left.check-structure + b.down.nodes.check-structure + b.right.check-structure

-check-structure[t] nat64(a t array2d)
	acc mut nat64 = 0
	for a1d : a arrays
		forbid a1d is-empty
		acc +:= a1d size
	assert acc == a.total-size
	acc

-check-structure[t] nat64(a t array3d)
	# TODO: check total-size is accurate
	acc mut nat64 = 0
	for a2d : a arrays
		forbid a2d.arrays is-empty
		acc +:= a2d check-structure
	assert acc == a.total-size
	acc

test
	a nat64 list = ()
	b nat64 list = 1 ~ a
	b verify "[1]"

test
	a big-nat list = 1.big, 2.big, 3.big, 4.big
	a verify "[1 2 3 4]"
	a ~~ () verify "[1 2 3 4]"
	()::(big-nat list) ~~ a verify "[1 2 3 4]"

test
	a nat64 list = 1, 2, 3, 4, 5, 6, 7, 8
	a verify "[1 2 3 4 5 6 7 8]"
	b nat64 list = 1 ~ a
	b verify "([1] [] [1 2 3 4 5 6 7 8])"
	c nat64 list = (8, 7, 6, 5, 4, 3, 2) ~~ b
	c verify "([8 7 6 5 4 3 2 1] [] [1 2 3 4 5 6 7 8])"
	d nat64 list = 9 ~ c
	d verify "([9] [[8 7 6 5 4 3 2 1]] [1 2 3 4 5 6 7 8])"
	e = d ~~ (1, 2, 3, 4, 5)
	e verify "([9] [[8 7 6 5 4 3 2 1] [1 2 3 4 5 6 7 8]] [1 2 3 4 5])"

test
	a nat64 list = 1, 2, 3, 4, 5
	a verify "[1 2 3 4 5]"
	b = a ~~ (9, 8, 7, 6)
	b verify "([1 2 3 4 5] [] [9 8 7 6])"
	c = b ~~ b
	s string = "[9 8 7 6 1 2 3 4 5]"
	c verify "([1 2 3 4 5] [{s}] [9 8 7 6])"
	d = c ~~ c
	d verify "([1 2 3 4 5] [{s} {s} {s}] [9 8 7 6])"
	e = d ~~ d
	e verify if trusted extern native
		"([1 2 3 4 5] ([{s} {s} {s} {s}] [] [{s} {s} {s}]) [9 8 7 6])"
	else
		"([1 2 3 4 5] [{s} {s} {s} {s} {s} {s} {s}] [9 8 7 6])"

# use a big type to force smaller leaves for easier testing
-big-nat record(a nat64, b nat64, c nat64) by-val

-== bool(a big-nat, b big-nat)
	a.a == b.a && a.b == b.b && a.c == b.c

-big big-nat(a nat64)
	a, a, a

-to json(a big-nat)
	a.a to

-show string(a big-nat)
	"{a a}"

test
	js bool = trusted extern js
	trusted if extern native
		size-of@big-nat is 24
	a big-nat list = 5.big, 6.big
	b big-nat list = 4.big ~ a
	b verify (js ? "[4 5 6]" : "([4] [] [5 6])")

	b-split = (b try-split-once (5.big,))!
	b-split.a verify "[4]"
	b-split.b verify "[6]"

	c big-nat list = b ~ 7.big
	c verify (js ? "[4 5 6 7]" : "([4] [[5 6]] [7])")

	c-split = (c try-split-once (5.big,))!
	c-split.a verify "[4]"
	c-split.b verify "[6 7]"

	d big-nat list = c ~ 8.big ~ 9.big ~ 10.big ~ 11.big
	d verify (js ? "[4 5 6 7 8 9 10 11]" : "([4] [[5 6] [7 8] [9 10]] [11])")

	d-split = (d try-split-once (6.big, 7.big))!
	d-split.a verify "[4 5]"
	d-split.b verify (js ? "[8 9 10 11]" : "([8] [[9 10]] [11])")

	e big-nat list = 0.big ~ (1.big ~ (2.big ~ (3.big ~ d)))
	e verify if js
		"([0 1 2 3] [] [4 5 6 7 8 9 10 11])"
	else
		"([0] ([[1 2]] [] [[3 4] [5 6] [7 8] [9 10]]) [11])"
	f big-nat list = e ~ 12.big ~ 13.big
	f verify if js
		"([0 1 2 3] [[4 5 6 7 8 9 10 11]] [12 13])"
	else
		"([0] ([[1 2]] [[[3 4] [5 6] [7 8] [9 10]]] [[11 12]]) [13])"

	f-split = (f try-split-once (4.big, 5.big))!
	f-split.a verify (js ? "[0 1 2 3]" : "([0] [[1 2]] [3])")
	f-split.b verify (js ? "[6 7 8 9 10 11 12 13]" : "([6] [[7 8] [9 10] [11 12]] [13])")

test
	a nat64 list = 1, 2, 3, 4, 5, 6, 7
	a groups-of 3 is ((1, 2, 3), (4, 5, 6), (7,))


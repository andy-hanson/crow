no-std
import
	../../bool: &&, bool, new, not, true
	../../compare: !=, <, >, <=
	../../fun-util: subscript
	../../hash: hash-mix
	../../json: json
	../../misc: key, new, void
	../../number: ==, <=>, +, -, *, nat64
	../../option: ==, force, is-empty, new, option, size
	../../string: ==, ~~, +, begin, literal, new, next, string, to-string
	../../test-util: is
	../../tuple: a, b, new
	../array: array
	../collection: -, build-options, end, for-loop, join, map=, set-subscript, subscript
	../mut-list:
		~=, +, -, begin, clear, end, filter=, is-empty, iterate, mut-list, mut-list-iterator,
		new, next, next-index, prev, remove-at, set-next, set-prev, size
	../list: ~=, build, iterate, list, list-builder, new, to-list
	../sort: sort=
	../private/sort-utils:
		binary-search-exact, binary-search-insert, assert-comparison-not-equal, merge-no-duplicates

###
Mutable sorted dictionary.

This works like `mut-dict`, but iterates in sorted order.
###
mut-sorted-dict[k, v] record mut by-ref
	# TODO: by-val
	# Values are none if they have been deleted.
	-pairs (k, v?) mut[]
	# Number of pairs in this node that are not `none`.
	# Does not include sizes of other nodes.
	-node-size .mut nat64
	-next .mut (k, v) mut-sorted-dict?

###
New dictionary containing the given pairs.

Later pairs overwrite earlier pairs with the same key.
###
new[k, v] (k, v) mut-sorted-dict(...a (k, v) array) k key
	a.to-list to-mut-sorted-dict

# Copies pairs to a new dictionary.
to-mut-sorted-dict[k, v] (k, v) mut-sorted-dict(a (k, v)[]) k key
	res (k, v) mut-sorted-dict = ()::(k, v?) mut[], 0, ()
	for k, v : a
		res[k] := v
	res

# `true` iff the `a.size == 0`.
is-empty[k, v] bool(a (k, v) mut-sorted-dict)
	a.pairs is-empty

# Removes every pair.
clear[k, v] void(a (k, v) mut-sorted-dict)
	a.next := ()
	a.pairs clear

###
Number of pairs in the dictionary.
This is O(n).
###
size[k, v] nat64(a (k, v) mut-sorted-dict)
	acc mut = 0
	cur mut = a
	loop
		acc +:= cur node-size
		if next ?= cur next
			cur := next
			continue
		else
			break acc

###
Find the value associated with the key.

Returns an empty option iff the key is not in the dictionary.
This is O(log n).
###
subscript[k, v] v?(a (k, v) mut-sorted-dict, key k) k key
	if iter ?= a find-exact key
		(_, v), _ = iter.next!
		v

# Adds a key-value pair, replacing any existing one with that key.
set-subscript[k, v] void(a (k, v) mut-sorted-dict, key k, value v) k key
	unless a insert-into-key-match-or-empty-slot key, value
		a add-pair key, value

in[k, v] bool(key k, a (k, v) mut-sorted-dict) k key
	!a[key].is-empty

###
Adds many key-value pairs, replacing existing ones with the same keys.
Equivalent to adding each element of `b` separately.
###
~ ~~=[k, v] void(a (k, v) mut-sorted-dict, b (k, v)[]) k key
	for k, v : b
		a[k] := v

###
Traverses nodes left-to-right looking for the key.
If that fails, traverses back right-to-left and inserts into an empty slot if possible.
Returns true if it succeeded.
###
-insert-into-key-match-or-empty-slot[k, v] bool(a (k, v) mut-sorted-dict, key k, value v) k key
	insert = a.pairs binary-search-insert (k, _) => key <=> k
	next-pair (k, v?)? = if x, _ ?= insert.next
		x,
	can-insert = !next-pair.is-empty
	if can-insert && next-pair!.a == key
		if next-pair!.b is-empty
			a.node-size +:= 1
		insert.next := key, (value,)
		true
	else
		inserted = if next ?= a next
			next insert-into-key-match-or-empty-slot key, value

		if inserted
			true
		elif can-insert && next-pair!.b is-empty
			assert key < next-pair!.a
			a.node-size +:= 1
			insert.next := key, (value,)
			true
		elif can-insert && insert.next-index != 0 && insert.prev!.b.b is-empty
			assert key < next-pair!.a
			# overwrite empty slot even though key doesn't match
			a.node-size +:= 1
			insert.prev := key, (value,)
			true

# Returns the new physical size of this node and all nodes to the right
-add-pair[k, v] void(a (k, v) mut-sorted-dict, key k, value v) k key
	if a.node-size < 4
		if a.pairs is-empty
			a.pairs ~= (key, (value,))
		else
			# List has a small absolute size, so even if we can't insert near the end,
			# there's an empty slot somewhere so we don't have to do much moving.
			a.pairs insert-linear 0, key, value
		a.node-size +:= 1
	elif key > a.pairs[end - 4].a
		# We can insert it near the end
		a.pairs insert-linear a.pairs.size - 4, key, value
		a.node-size +:= 1
	else
		if next ?= a next
			next add-pair key, value
			a compact-if-needed
		else
			new-pairs (k, v?) mut[] = ()
			new-pairs ~= (key, (value,))
			a.next := (new-pairs, 1, ()),

# Insert at the last place where the key is < that value.
-insert-linear[k, v] void(a (k, v?) mut[], index nat64, key k, value v) k key
	if key < a[index].a
		a move-right index
		a[index] := key, (value,)
	elif index == a.size - 1
		a ~= (key, (value,))
	else
		a insert-linear index + 1, key, value

# If there's something here, move it so something else can be inserted.
-move-right[k, v] void(a (k, v?) mut[], index nat64)
	unless a[index].b is-empty
		# If this is the last value, push it
		if index == a.size - 1
			a ~= a[index]
		else
			a move-right index + 1
			a[index + 1] := a[index]

# Convert to an `array`, clearning the original `mut-sorted-dict` in the process.
move-to-list[k, v] (k, v)[](a (k, v) mut-sorted-dict) k key
	res (k, v)[] = for x : a; x
	a clear
	res

# TODO: use the same `try-remove` interface that mut-dict uses.
###
If the key is in the dictionary, removes it and returns the value that was associated with it.
Else, returns an empty option.
###
remove-key[k, v] v?(a (k, v) mut-sorted-dict, key k) k key
	if iter ?= a find-exact key
		res = if a.pairs.end - iter < 4
			_, v = a.pairs remove-at iter.next-index
			v
		else
			(_, old-value), _ = iter.next!
			iter.next := key, ()
			old-value
		unless res is-empty
			a.node-size -:= 1
		a compact-if-needed
		res
	elif next ?= a next
		next remove-key key

-compact-if-needed[k, v] void(a (k, v) mut-sorted-dict) k key
	physical-size = a total-pairs-size
	if a.node-size * 2 <= physical-size
		a compact
		assert a.node-size == a.total-pairs-size

-total-pairs-size[k, v] nat64(a (k, v) mut-sorted-dict)
	acc mut = 0
	cur mut = a
	loop
		acc +:= cur.pairs size
		if next ?= cur next
			cur := next
			continue
		else
			break acc

-compact[k, v] void(a (k, v) mut-sorted-dict) k key
	if next ?= a next
		next compact
		a.pairs filter= (_, v) => !v.is-empty
		a.pairs merge-no-duplicates next.pairs, ((k0, _), (k1, _)) =>
			k0 <=> k1 assert-comparison-not-equal
		a.next := ()
		a.node-size := a.pairs size

-find-exact[k, v] (k, v?) mut-list-iterator?(a (k, v) mut-sorted-dict, key k) k key
	a.pairs binary-search-exact (k, _) => key <=> k

region mutating iteration

filter=[k, v] void(a (k, v) mut-sorted-dict, f act bool(k, v)) k key
	a compact
	a.pairs filter= (k, v) =>
		f[k, v!]

map=[k, v] void(a (k, v) mut-sorted-dict, f act (k, v)(k, v)) k key
	a compact
	a.pairs map= (k, v) =>
		k-out, v-out = f[k, v!]
		k-out, (v-out,)
	a.pairs sort= (k, _) => k

test
	a (nat64, string) mut-sorted-dict = (3, "30"), (6, "60")
	a verify "[3 -> 30, 6 -> 60]"
	a map= (k, v) =>
		10 - k, "{v[0]}"
	a verify "[4 -> 6, 7 -> 3]"

map-values=[k, v] void(a (k, v) mut-sorted-dict, f act v(k, v)) k key
	a map= (k, v) => k, f[k, v]

region spec impls (see collection.crow)

iterate[k, v] bool(a (k, v) mut-sorted-dict, f act bool(k, v)) k key
	a compact
	a.pairs iterate (k, v) =>
		f[k, v!]

subregion build

mut-sorted-dict-builder[k, v] record mut
	-inner (k, v) list-builder

build[k, v] (k, v) mut-sorted-dict(a build-options, f act void((k, v) mut-sorted-dict-builder)) k key
	a build (out => f[out,]) to-mut-sorted-dict

~ ~=[k, v] void(a (k, v) mut-sorted-dict-builder, pair (k, v)) k key
	a.inner ~= pair

region test

-dbg[k, v] string(a (k, v) mut-sorted-dict) k to-string, v to-string
	pairs = ", " join for k, v-opt : a pairs
		vs = if v ?= v-opt
			"{v}"
		else
			"_"
		"{k} -> {vs}"
	if next ?= a next
		"[{pairs}], {next dbg}"
	else
		"[{pairs}]"

-verify void(a (nat64, string) mut-sorted-dict, expected string)
	a.dbg is expected
	a verify-node-size

-verify-node-size[k, v] void(a (k, v) mut-sorted-dict)
	res mut = 0
	for _, v : a pairs
		res +:= v size
	a.node-size is res
	if next ?= a next
		next verify-node-size

test
	a (nat64, string) mut-sorted-dict = (3, "3"), (5, "5"), (7, "7"), (8, "8"), (9, "9"), (10, "10")
	a verify "[3 -> 3, 5 -> 5, 7 -> 7, 8 -> 8, 9 -> 9, 10 -> 10]"

	# Insert into the previous slot
	a remove-key 5 is ("5",)
	a verify "[3 -> 3, 5 -> _, 7 -> 7, 8 -> 8, 9 -> 9, 10 -> 10]"
	a[6] := "6"
	a verify "[3 -> 3, 6 -> 6, 7 -> 7, 8 -> 8, 9 -> 9, 10 -> 10]"

	# Insert into the particular slot
	a remove-key 6 is ("6",)
	a verify "[3 -> 3, 6 -> _, 7 -> 7, 8 -> 8, 9 -> 9, 10 -> 10]"
	a[5] := "5"
	a verify "[3 -> 3, 5 -> 5, 7 -> 7, 8 -> 8, 9 -> 9, 10 -> 10]"

test
	a (nat64, string) mut-sorted-dict = ()
	a verify "[]"

	a[5] := "5"
	a verify "[5 -> 5]"
	a[5] is ("5",)

	a[8] := "8"
	a verify "[5 -> 5, 8 -> 8]"

	a[11] := "11"
	a[10] := "10"
	a verify "[5 -> 5, 8 -> 8, 10 -> 10, 11 -> 11]"

	a[2] := "2"
	a verify "[5 -> 5, 8 -> 8, 10 -> 10, 11 -> 11], [2 -> 2]"

	# Pushes near the end of a node if possible, even if that node is big
	a[7] := "7"
	a verify "[5 -> 5, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11], [2 -> 2]"

	a[0] := "0"
	a[6] := "6"
	a[1] := "1"
	a verify "[5 -> 5, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11], [0 -> 0, 1 -> 1, 2 -> 2, 6 -> 6]"
	a[1] := "one"
	a verify "[5 -> 5, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11], [0 -> 0, 1 -> one, 2 -> 2, 6 -> 6]"

	# If near end, removes completely
	a remove-key 1 is ("one",)
	a verify "[5 -> 5, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11], [0 -> 0, 2 -> 2, 6 -> 6]"
	a remove-key 1 is ()

	# Adding some more values so removals can't fully remove
	a ~~= ((13, "13"), (15, "15"), (17, "17"))
	a verify "[5 -> 5, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17], [0 -> 0, 2 -> 2, 6 -> 6]"

	a remove-key 5 is ("5",)
	a verify "[5 -> _, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17], [0 -> 0, 2 -> 2, 6 -> 6]"
	a remove-key 5 is ()

	a remove-key 8 is ("8",)
	a verify "[5 -> _, 7 -> 7, 8 -> _, 10 -> 10, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17], [0 -> 0, 2 -> 2, 6 -> 6]"

	# Setting near a deleted value re-uses the slot
	a[9] := "9"
	a verify "[5 -> _, 7 -> 7, 9 -> 9, 10 -> 10, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17], [0 -> 0, 2 -> 2, 6 -> 6]"

	# Removing enough values makes us compact
	a remove-key 9 is ("9",)
	a verify "[5 -> _, 7 -> 7, 9 -> _, 10 -> 10, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17], [0 -> 0, 2 -> 2, 6 -> 6]"

	# Before, physical sizes are 8 and 3, and first logical size size is 6.
	# After the removal, first node size is 5 and total physical size is 10, so we compact.
	a remove-key 10 is ("10",)
	a verify "[0 -> 0, 2 -> 2, 6 -> 6, 7 -> 7, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17]"

	# Now test compaction for another reason -- enough items are inserted on the right

	# First get 'a' down to size
	a remove-key 7 is ("7",)
	a remove-key 13 is ("13",)
	a remove-key 15 is ("15",)
	a verify "[0 -> 0, 2 -> 2, 6 -> 6, 7 -> _, 11 -> 11, 17 -> 17]"

	# Now physical size of a is 6, logical size is 5.
	a ~~= ((1, "1"), (5, "5"), (3, "3"))
	a verify "[0 -> 0, 2 -> 2, 6 -> 6, 7 -> _, 11 -> 11, 17 -> 17], [1 -> 1, 3 -> 3, 5 -> 5]"

	a[4] := "4"
	a verify "[0 -> 0, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 11 -> 11, 17 -> 17]"

no-std
import
	../../bool: !, &&, bool, new, true
	../../compare: !=, <, >, <=, compare
	../../fun-util: subscript
	../../misc: is-data, new, void
	../../number: ==, <=>, +, -, *, nat64
	../../option: !, is-empty, new, option, option-equal, size
	../../pointer: ==, -, *, mut-pointer, set-deref
	../../string: ==, ~~, iter, join, literal, next, slice-left, string, to-string
	../../test-util: is
	../../tuple: from, new, pair, to
	../array: array
	../iter: rest
	../mut-list:
		~=, begin-pointer, clear, end-pointer, filter, fold, for-loop, is-empty, mut-list, new, remove-at,
		set-filter, set-map, set-subscript, size, subscript, to-list
	../list: for-loop, list, new, to-list
	../sort: set-sort-by
	../private/sort-utils:
		binary-search-exact-pointer, binary-search-insert-pointer, assert-comparison-not-equal,
		merge-no-duplicates

###
Mutable sorted dictionary.

This works like `mut-dict`, but iterates in sorted order.
###
mut-sorted-dict<k, v> record mut by-ref
	# TODO: by-val
	# Values are none if they have been deleted.
	.pairs (k, v?) mut[]
	# Number of pairs in this node that are not `none`.
	# Does not include sizes of other nodes.
	.node-size .mut nat64
	.next .mut mut-sorted-dict<k, v>?

###
New dictionary containing the given pairs.

Later pairs overwrite earlier pairs with the same key.
###
new<k, v> mut-sorted-dict<k, v>(...a array (k, v)) is-data<k> compare<k>
	a.to-list to-mut-sorted-dict

# Copies pairs to a new dictionary.
to-mut-sorted-dict<k, v> mut-sorted-dict<k, v>(a (k, v)[]) is-data<k> compare<k>
	res mut-sorted-dict<k, v> = ()::(k, v?) mut[], 0, ()
	for pair : a
		res[pair from] := pair to
	res

# `true` iff the `a.size == 0`.
is-empty<k, v> bool(a mut-sorted-dict<k, v>)
	a.pairs is-empty

# Removes every pair.
clear<k, v> void(a mut-sorted-dict<k, v>)
	a.next := ()
	a.pairs clear

###
Number of pairs in the dictionary.
This is O(n).
###
size<k, v> nat64(a mut-sorted-dict<k, v>)
	0 size-recur a
.size-recur<k, v> nat64(acc nat64, a mut-sorted-dict<k, v>)
	mid = acc + a.node-size
	if next ?= a next
		mid size-recur next
	else
		mid

###
Find the value associated with the key.

Returns an empty option iff the key is not in the dictionary.
This is O(log n).
###
subscript<k, v> v?(a mut-sorted-dict<k, v>, key k) trusted is-data<k> compare<k>
	if pointer ?= a find-exact-pointer key
		*pointer to

# Adds a key-value pair, replacing any existing one with that key.
set-subscript<k, v> void(a mut-sorted-dict<k, v>, key k, value v) is-data<k> compare<k>
	unless a insert-into-key-match-or-empty-slot key, value
		a add-pair key, value

in<k, v> bool(key k, a mut-sorted-dict<k, v>) trusted is-data<k> compare<k>
	!(a find-exact-pointer key is-empty)

###
Adds many key-value pairs, replacing existing ones with the same keys.
Equivalent to adding each element of `b` separately.
###
~~= <k, v> void(a mut-sorted-dict<k, v>, b (k, v)[]) is-data<k> compare<k>
	for pair : b
		a[pair from] := pair to

###
Traverses nodes left-to-right looking for the key.
If that fails, traverses back right-to-left and inserts into an empty slot if possible.
Returns true if it succeeded.
###
.insert-into-key-match-or-empty-slot<k, v> bool(a mut-sorted-dict<k, v>, key k, value v) trusted is-data<k> compare<k>
	insert-pointer = a find-insert-pointer key
	can-insert = insert-pointer != a.pairs.end-pointer
	if can-insert && insert-pointer->from == key
		if insert-pointer->to is-empty
			a.node-size := a.node-size + 1
		*insert-pointer := key, (value,)
		true
	else
		inserted = if next ?= a next
			next insert-into-key-match-or-empty-slot key, value

		if inserted
			true
		elif can-insert && insert-pointer->to.is-empty
			assert key < insert-pointer->from
			a.node-size := a.node-size + 1
			*insert-pointer := key, (value,)
			true
		elif can-insert && insert-pointer != a.pairs.begin-pointer && (insert-pointer - 1)->to.is-empty
			assert key < insert-pointer->from
			# overwrite empty slot even though key doesn't match
			a.node-size := a.node-size + 1
			*(insert-pointer - 1) := key, (value,)
			true

# Returns the new physical size of this node and all nodes to the right
.add-pair<k, v> void(a mut-sorted-dict<k, v>, key k, value v) is-data<k> compare<k>
	if a.node-size < 4
		if a.pairs is-empty
			a.pairs ~= (key, (value,))
		else
			# List has a small absolute size, so even if we can't insert near the end,
			# there's an empty slot somewhere so we don't have to do much moving.
			a.pairs insert-linear 0, key, value
		a.node-size := a.node-size + 1
	elif key > a.pairs[a.pairs.size - 4].from
		# We can insert it near the end
		a.pairs insert-linear a.pairs.size - 4, key, value
		a.node-size := a.node-size + 1
	else
		if next ?= a next
			next add-pair key, value
			a compact-if-needed
		else
			new-pairs (k, v?) mut[] = ()
			new-pairs ~= (key, (value,))
			a.next := (new-pairs, 1, ()),

# Insert at the last place where the key is < that value.
.insert-linear<k, v> void(a (k, v?) mut[], index nat64, key k, value v) is-data<k> compare<k>
	if key < a[index].from
		a move-right index
		a[index] := key, (value,)
	elif index == a.size - 1
		a ~= (key, (value,))
	else
		a insert-linear index + 1, key, value

# If there's something here, move it so something else can be inserted.
.move-right<k, v> void(a (k, v?) mut[], index nat64)
	unless a[index].to is-empty
		# If this is the last value, push it
		if index == a.size - 1
			a ~= a[index]
		else
			a move-right index + 1
			a[index + 1] := a[index]

# Convert to an `array`, clearning the original `mut-sorted-dict` in the process.
move-to-list<k, v> (k, v)[](a mut-sorted-dict<k, v>) is-data<k> compare<k>
	res (k, v)[] = for k, v : a
		k, v
	a clear
	res

# TODO: use the same `try-remove` interface that mut-dict uses.
###
If the key is in the dictionary, removes it and returns the value that was associated with it.
Else, returns an empty option.
###
remove-key<k, v> v?(a mut-sorted-dict<k, v>, key k) trusted is-data<k> compare<k>
	if pointer ?= a find-exact-pointer key
		res = if a.pairs.end-pointer - pointer < 4
			a.pairs remove-at pointer to
		else
			old-value = *pointer to
			*pointer := key, ()
			old-value
		unless res is-empty
			a.node-size := a.node-size - 1
		a compact-if-needed
		res
	elif next ?= a next
		next remove-key key

.compact-if-needed<k, v> void(a mut-sorted-dict<k, v>) is-data<k> compare<k>
	physical-size = a total-pairs-size
	if a.node-size * 2 <= physical-size
		a compact
		assert a.node-size == a.total-pairs-size

.total-pairs-size<k, v> nat64(a mut-sorted-dict<k, v>)
	0 total-pairs-size-recur a
.total-pairs-size-recur<k, v> nat64(acc nat64, a mut-sorted-dict<k, v>)
	mid = acc + a.pairs.size
	if next ?= a next
		mid total-pairs-size-recur next
	else
		mid

.compact<k, v> void(a mut-sorted-dict<k, v>) trusted is-data<k> compare<k>
	if next ?= a next
		next compact
		a.pairs set-filter pair => !pair.to.is-empty
		a.pairs merge-no-duplicates next.pairs, (x, y) =>
			x.from <=> y.from assert-comparison-not-equal
		a.next := ()
		a.node-size := a.pairs.size

.find-exact-pointer<k, v> (k, v?) mut*?(a mut-sorted-dict<k, v>, key k) is-data<k> compare<k> unsafe
	a.pairs binary-search-exact-pointer pair => key <=> pair.from

.find-insert-pointer<k, v> (k, v?) mut*(a mut-sorted-dict<k, v>, key k) is-data<k> compare<k> unsafe
	a.pairs binary-search-insert-pointer pair => key <=> pair.from

region iteration

fold<a, k, v> a(acc a, a mut-sorted-dict<k, v>, f act a(a, k, v)) is-data<k> compare<k>
	a compact
	acc fold a.pairs, (cur, pair) =>
		f[cur, pair.from, pair.to!]

filter<k, v> mut-sorted-dict<k, v>(a mut-sorted-dict<k, v>, f act bool(k, v)) is-data<k> compare<k>
	a compact
	(a.pairs filter pair => f[pair.from, pair.to!]) from-sorted-pairs

for-loop<k, v> void(a mut-sorted-dict<k, v>, f act void(k, v)) is-data<k> compare<k>
	() fold a, (_, k, v) =>
		f[k, v]

for-loop<k-out, v-out, k-in, v-in> mut-sorted-dict<k-out, v-out>(
	a mut-sorted-dict<k-in, v-in>,
	f act (k-out, v-out)(k-in, v-in),
) is-data<k-in> compare<k-in> is-data<k-out> compare<k-out>
	a for-loop f to-mut-sorted-dict

map-values<v-out, k, v-in> mut-sorted-dict<k, v-out>(
	a mut-sorted-dict<k, v-in>,
	f act v-out(k, v-in),
) is-data<k> compare<k>
	a compact
	pairs (k, v-out?) mut[] = for pair : a pairs
		# TODO: 'as' should be unnecessary
		pair.from, (f[pair.from, pair.to!],)
	pairs from-sorted-pairs

.from-sorted-pairs<k, v> mut-sorted-dict<k, v>(a (k, v?) mut[])
	a, a.size, ()

for-loop<out, k, v> out[](a mut-sorted-dict<k, v>, f act out(k, v)) is-data<k> compare<k>
	a compact
	for pair : a.pairs to-list
		f[pair.from, pair.to!]

region mutating iteration

set-filter<k, v> void(a mut-sorted-dict<k, v>, f act bool(k, v)) is-data<k> compare<k>
	a compact
	a.pairs set-filter pair =>
		f[pair.from, pair.to!]

set-map<k, v> void(a mut-sorted-dict<k, v>, f act (k, v)(k, v)) is-data<k> compare<k>
	a compact
	a.pairs set-map pair =>
		new-pair = f[pair.from, pair.to!]
		new-pair.from, (new-pair.to,)
	a.pairs set-sort-by pair => pair from

test
	a mut-sorted-dict<nat64, string> = (3, "30"), (6, "60")
	a verify "[3 -> 30, 6 -> 60]"
	a set-map (k, v) =>
		10 - k, v.iter.next!.rest.slice-left
	a verify "[4 -> 6, 7 -> 3]"

set-map-values<k, v> void(a mut-sorted-dict<k, v>, f act v(k, v)) is-data<k> compare<k>
	a compact
	a.pairs set-map pair =>
		pair.from, (f[pair.from, pair.to!],)

.dbg<k, v> string(a mut-sorted-dict<k, v>) to-string<k> to-string<v>
	pairs = ", " join for pair : a pairs
		to = if v ?= pair to
			"{v}"
		else
			"_"
		"{pair from} -> {to}"
	if next ?= a next
		"[{pairs}], {next dbg}"
	else
		"[{pairs}]"

.verify void(a mut-sorted-dict<nat64, string>, expected string)
	a.dbg is expected
	a verify-node-size

.verify-node-size<k, v> void(a mut-sorted-dict<k, v>)
	actual = 0 fold a.pairs, (acc, x) =>
		acc + x.to.size
	a.node-size is actual
	if next ?= a next
		next verify-node-size

test
	a mut-sorted-dict<nat64, string> = (3, "3"), (5, "5"), (7, "7"), (8, "8"), (9, "9"), (10, "10")
	a verify "[3 -> 3, 5 -> 5, 7 -> 7, 8 -> 8, 9 -> 9, 10 -> 10]"

	# Insert into the previous slot
	a remove-key 5 is ("5",)
	a verify "[3 -> 3, 5 -> _, 7 -> 7, 8 -> 8, 9 -> 9, 10 -> 10]"
	a[6] := "6"
	a verify "[3 -> 3, 6 -> 6, 7 -> 7, 8 -> 8, 9 -> 9, 10 -> 10]"

	# Insert into the particular slot
	a remove-key 6 is ("6",)
	a verify "[3 -> 3, 6 -> _, 7 -> 7, 8 -> 8, 9 -> 9, 10 -> 10]"
	a[5] := "5"
	a verify "[3 -> 3, 5 -> 5, 7 -> 7, 8 -> 8, 9 -> 9, 10 -> 10]"

test
	a mut-sorted-dict<nat64, string> = ()
	a verify "[]"

	a[5] := "5"
	a verify "[5 -> 5]"
	a[5] is ("5",)

	a[8] := "8"
	a verify "[5 -> 5, 8 -> 8]"

	a[11] := "11"
	a[10] := "10"
	a verify "[5 -> 5, 8 -> 8, 10 -> 10, 11 -> 11]"

	a[2] := "2"
	a verify "[5 -> 5, 8 -> 8, 10 -> 10, 11 -> 11], [2 -> 2]"

	# Pushes near the end of a node if possible, even if that node is big
	a[7] := "7"
	a verify "[5 -> 5, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11], [2 -> 2]"

	a[0] := "0"
	a[6] := "6"
	a[1] := "1"
	a verify "[5 -> 5, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11], [0 -> 0, 1 -> 1, 2 -> 2, 6 -> 6]"
	a[1] := "one"
	a verify "[5 -> 5, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11], [0 -> 0, 1 -> one, 2 -> 2, 6 -> 6]"

	# If near end, removes completely
	a remove-key 1 is ("one",)
	a verify "[5 -> 5, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11], [0 -> 0, 2 -> 2, 6 -> 6]"
	a remove-key 1 is ()

	# Adding some more values so removals can't fully remove
	a ~~= ((13, "13"), (15, "15"), (17, "17"))
	a verify "[5 -> 5, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17], [0 -> 0, 2 -> 2, 6 -> 6]"

	a remove-key 5 is ("5",)
	a verify "[5 -> _, 7 -> 7, 8 -> 8, 10 -> 10, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17], [0 -> 0, 2 -> 2, 6 -> 6]"
	a remove-key 5 is ()

	a remove-key 8 is ("8",)
	a verify "[5 -> _, 7 -> 7, 8 -> _, 10 -> 10, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17], [0 -> 0, 2 -> 2, 6 -> 6]"

	# Setting near a deleted value re-uses the slot
	a[9] := "9"
	a verify "[5 -> _, 7 -> 7, 9 -> 9, 10 -> 10, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17], [0 -> 0, 2 -> 2, 6 -> 6]"

	# Removing enough values makes us compact
	a remove-key 9 is ("9",)
	a verify "[5 -> _, 7 -> 7, 9 -> _, 10 -> 10, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17], [0 -> 0, 2 -> 2, 6 -> 6]"

	# Before, physical sizes are 8 and 3, and first logical size size is 6.
	# After the removal, first node size is 5 and total physical size is 10, so we compact.
	a remove-key 10 is ("10",)
	a verify "[0 -> 0, 2 -> 2, 6 -> 6, 7 -> 7, 11 -> 11, 13 -> 13, 15 -> 15, 17 -> 17]"

	# Now test compaction for another reason -- enough items are inserted on the right

	# First get 'a' down to size
	a remove-key 7 is ("7",)
	a remove-key 13 is ("13",)
	a remove-key 15 is ("15",)
	a verify "[0 -> 0, 2 -> 2, 6 -> 6, 7 -> _, 11 -> 11, 17 -> 17]"

	# Now physical size of a is 6, logical size is 5.
	a ~~= ((1, "1"), (5, "5"), (3, "3"))
	a verify "[0 -> 0, 2 -> 2, 6 -> 6, 7 -> _, 11 -> 11, 17 -> 17], [1 -> 1, 3 -> 3, 5 -> 5]"

	a[4] := "4"
	a verify "[0 -> 0, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 11 -> 11, 17 -> 17]"

.== bool(a string?, b string?)
	a option-equal b

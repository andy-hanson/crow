no-std
import
	../../bool: &&, ==, bool, false, new, not, true
	../../compare: <, <=, >, >=
	../../exception: unreachable
	../../fun-util: subscript
	../../json: to
	../../misc: key, new, to, void
	../../number: ==, <=>, +, -, *, nat64
	../../option: ??, force, new, option
	../../pointer: ==, <=>, +, -, *, as-const, const-pointer, mut-pointer, set-deref
	../../range: ..
	../../string: ==, <=>, ~~, hash-mix, new, string, to
	../../test-util: is
	../array:
		+, -, ~=, array, as-array, begin, begin-pointer, build, end, end-pointer, is-empty, iterate,
		new, next, next-index, size, slice
	../collection:
		.., -, build, build-options, end, for-loop, join, set-subscript, subscript, with-block
	../mut-array:
		~=, +, -, begin, begin-pointer, build, end, end-pointer, is-empty, mut-array,
		mut-array-builder, next, set-next, size, slice, uninitialized-mut-array
	../list: ~=, build, iterate, list, list-builder, to
	../sort: sort
	../private/sort-utils: binary-search-exact
	./index-set:
		~, count-greater-or-equal, count-range, filter-less, in, index-set, is-empty, iterate, new,
		size, try-remove

# This is like `set`, but keeps elements in sorted order.
+sorted-set[t] record
	-add t add-node
	-remove index-set

###
We store add/remove separately.
Add nodes are a linked list where links point to the left.
Largest node is on the left.
Nodes are added to the right.
###

-add-node[t] record
	values t array
	left t add-node?

+new[t] t sorted-set(...a t array) t key
	a.to to

+to[t] t sorted-set(a t[]) t key
	(a.to.sort, ()) :: (t add-node), ()

+to[t] t[](a t sorted-set) t key
	for x : a
		x

# Same as `a.size == 0`.
+is-empty[t] bool(a t sorted-set)
	# Compaction ensures that this is the only case where we store empty values.
	a.add.values is-empty

# Number of elements in the set.
+size[t] nat64(a t sorted-set)
	a.add.add-size - a.remove.size
-add-size[t] nat64(a t add-node)
	a.values.size + a.add-size-left
-add-size-left[t] nat64(a t add-node)
	acc mut = 0
	cur mut = a
	loop
		if left ?= cur left
			acc +:= left.values size
			cur := left
			continue
		else
			break acc

# True if `value` is an element of the set.
+in[t] bool(value t, a t sorted-set) t key
	if index ?= a.add find-in-add value
		!(index in a.remove)

-find-in-add[t] nat64?(a t add-node, value t) t key
	if iter ?= a.values binary-search-exact value
		a.add-size-left + iter.next-index,
	elif left ?= a left
		left find-in-add value

-find-in-add-for-remove-result record
	value-index nat64
	size-left nat64
	size-here nat64
	size-right nat64

-find-in-add-for-remove[t] find-in-add-for-remove-result?(
	a t add-node,
	value t,
	size-right nat64,
) t key
	if iter ?= a.values binary-search-exact value
		sl = a add-size-left
		(sl + iter.next-index, sl, a.values.size, size-right),
	elif left ?= a left
		# TODO: should be able to write this inline
		new-size-right = size-right + a.values.size
		left find-in-add-for-remove value, new-size-right

###
Adds an element to the set.

If `value` is already in the set, returns `a` unmodified.
###
+ ~[t] t sorted-set(a t sorted-set, value t) t key
	a try-add value ?? a

###
If `value` is already in the set, returns an empty option.
Else, adds it and returns the new set.
###
+try-add[t] t sorted-set?(a t sorted-set, value t) t key
	if index ?= a.add find-in-add value
		# In 'add', but may need to remove from removals
		if new-remove ?= a.remove try-remove index
			(a.add, new-remove),
	else
		(a add-and-maybe-compact value),

###
Removes a value from the set.

If `value` is not in the set, returns `a` unmodified.
###
+ -[t] t sorted-set(a t sorted-set, value t) t key
	a try-remove value ?? a

###
If `value` is in the set, removes it and returns the new set.
Else, returns an empty option.
###
+try-remove[t] t sorted-set?(a t sorted-set, value t) t key
	if r ?= a.add find-in-add-for-remove value, 0
		removals-here-and-right = (a.remove count-greater-or-equal r.size-left) + 1
		if r.size-here should-compact r.size-right, removals-here-and-right
			compacted-size = r.size-here + r.size-right - 1
			(a remove-and-compact (r.size-left, compacted-size), r.value-index),
		else
			(a.add, a.remove ~ r.value-index),

-add-and-maybe-compact[t] t sorted-set(a t sorted-set, value t) t key
	add-size = a.add add-size
	if add-size == 0
		# TODO: type annotation should be unnecessary
		((value,), ()) :: (t add-node), ()
	else
		# size-right starts as 1 because we're adding a value
		plan = add-size add-and-compact-plan a.add, a.remove, 1
		if plan.compacted-size == 1
			# TODO: type annotation should be unnecessary
			((value,), (a.add,)) :: (t add-node), a.remove
		else
			a add-and-compact add-size, plan, value

-compact-plan record
	# Total size of all non-compacted nodes (all but the new last node)
	add-size-left nat64
	# Size that the compacted node will have (sum of 'depth' rightmost nodes)
	compacted-size nat64

###
Given that we're adding a new value to the right, we may compact nodes on the right.
size-here-and-left + size-right is the current size + 1.

We compact a node if:
* The combined size of all nodes to the right is >= this node's size
* Half of the values of this node have been removed
Or a combination of the two.
###
-add-and-compact-plan[t] compact-plan(
	size-here-and-left nat64,
	a t add-node,
	remove index-set,
	size-right nat64,
)
	size-here = a.values size
	size-left = size-here-and-left - size-here
	removals-here-and-right = remove count-greater-or-equal size-left
	if size-here should-compact size-right, removals-here-and-right
		size-here-and-right = size-here + size-right
		if left ?= a left
			size-left add-and-compact-plan left, remove, size-here-and-right
		else
			size-left, size-here-and-right
	else
		size-here-and-left, size-right

-should-compact bool(size-here nat64, size-right nat64, removals-here-and-right nat64)
	(size-right + removals-here-and-right * 2) * 2 >= size-here

-add-and-compact[t] t sorted-set(a t sorted-set, add-size nat64, plan compact-plan, value t) t key
	assert plan.compacted-size > 1
	trusted
		compacted t mut-array = plan.compacted-size uninitialized-mut-array
		begin = compacted begin-pointer
		*begin := value
		compactor t compactor = begin.as-const, begin + 1, compacted.end-pointer
		new-add = compactor do-compact a.add, add-size, a.remove
		new-add, (a.remove filter-less plan.add-size-left)

-remove-and-compact[t] t sorted-set(a t sorted-set, plan compact-plan, extra-removal nat64) t key
	new-remove = a.remove filter-less plan.add-size-left
	if plan.compacted-size == 0
		if left ?= a.add left
			left, new-remove
	else
		trusted
			compacted t mut-array = plan.compacted-size uninitialized-mut-array
			begin = compacted begin-pointer
			compactor t compactor = begin.as-const, begin, compacted.end-pointer
			old-size = plan.add-size-left + plan.compacted-size + 1
			new-add = compactor do-compact a.add, old-size, a.remove ~ extra-removal
			new-add, new-remove

-compactor[t] record mut
	begin t*
	cur mut t mut*
	end t mut*

-do-compact[t] t add-node(
	compactor t compactor,
	add t add-node,
	add-size nat64,
	remove index-set,
) unsafe, t key
	cur mut = add
	add-size-here-and-left mut = add-size
	loop
		compactor merge cur.values, add-size-here-and-left, remove
		assert compactor.cur <= compactor.end
		if compactor.cur == compactor.end
			break compactor.finish, cur.left
		else
			add-size-here-and-left -:= cur.values size
			cur := cur.left!
			continue

-merge[t] void(
	a t compactor,
	values t array,
	add-size-here-and-left nat64,
	remove index-set,
) unsafe, t key
	n-remove = remove count-range (add-size-here-and-left - values.size), add-size-here-and-left
	n-added = values.size - n-remove
	unless n-added == 0
		new-cur = a.cur + n-added
		remove-index = add-size-here-and-left - 1
		if a.cur.as-const == a.begin
			new-cur - 1 copy-from-b values, remove-index, remove
		else
			a-read = (a.cur - 1).as-const
			a.begin do-merge a-read, new-cur - 1, values, remove-index, remove
		a.cur := new-cur

-do-merge[t] void(
	a-begin t*,
	init-a-read t*,
	init-a-write t mut*,
	b t array,
	init-b-remove-index nat64,
	b-remove index-set,
) unsafe, t key
	a-read mut = init-a-read
	a-write mut = init-a-write
	b-begin = b begin-pointer
	b-read mut = b.end-pointer - 1
	b-remove-index mut = init-b-remove-index
	loop
		forbid a-read < a-begin
		forbid b-read < b-begin
		forbid a-write.as-const < a-begin
		# merging from right, so take the greater value
		match *a-read <=> *b-read
		as less
			unless b-remove-index in b-remove
				*a-write := *b-read
				a-write -:= 1

			if b-read == b-begin
				# done, everything from 'a' is in place
				break
			else
				b-read -:= 1
				b-remove-index -:= 1
				continue
		as equal
			# We shouldn't store the same value twice.
			unreachable
			break
		as greater
			*a-write := *a-read
			if a-read == a-begin
				a-write - 1 copy-from-b (b-begin .. b-read + 1).as-array, b-remove-index, b-remove
				break
			else
				a-read -:= 1
				a-write -:= 1
				continue

-copy-from-b[t] void(
	init-a-write t mut*,
	b t array,
	init-b-remove-index nat64,
	b-remove index-set,
) unsafe
	a-write mut = init-a-write
	b-read mut = b.end-pointer - 1
	b-remove-index mut = init-b-remove-index
	loop
		unless b-remove-index in b-remove
			*a-write := *b-read
			a-write -:= 1
		if b-read == b.begin-pointer
			break
		else
			b-read -:= 1
			b-remove-index -:= 1
			continue

-finish[t] t array(a t compactor) unsafe
	assert a.cur == a.end
	a.begin .. a.end.as-const as-array

region spec impls (see collection.crow)

+iterate[t] bool(a t sorted-set, f act bool(t)) t key
	iters mut = a init-iters
	loop
		if iters is-empty
			break false
		else
			least-iter-index = iters[0].values[0] find-least-iter 0, 1, iters
			least-value = iters[least-iter-index].values[0]
			iters[least-iter-index] := iters[least-iter-index] tail a.remove
			if iters[least-iter-index] is-empty
				iters[least-iter-index] := iters[end - 1]
				iters := iters[0 .. iters.size - 1]
			if f[least-value]
				break true
			else
				continue

-find-least-iter[t] nat64(
	current-least t,
	current-least-index nat64,
	iter-index nat64,
	iters t iter-part mut-array,
) t key
	if iter-index == iters.size
		current-least-index
	else
		value = iters[iter-index].values[0]
		if value < current-least
			value find-least-iter iter-index, iter-index + 1, iters
		else
			current-least find-least-iter current-least-index, iter-index + 1, iters

-iter-part[t] record by-val
	values t array
	remove-index nat64

-is-empty[t] bool(a t iter-part)
	a.values is-empty

-tail[t] t iter-part(a t iter-part, remove index-set)
	(a.values[1 .. end], a.remove-index + 1) remove-from-front remove

-init-iters[t] t iter-part mut-array(a t sorted-set)
	with out : a.add-node-count build
		_ = out init-iters-recur a.add, a.remove

-add-node-count[t] nat64(a t sorted-set)
	acc mut = 1
	cur mut = a add
	loop
		if left ?= cur left
			acc +:= 1
			cur := left
			continue
		else
			break acc

# Returns next remove index
-init-iters-recur[t] nat64(out t iter-part mut-array-builder, a t add-node, remove index-set)
	prev = if left ?= a left
		out init-iters-recur left, remove
	else
		0
	here = (a.values, prev) remove-from-front remove
	unless here is-empty
		out ~= here
	prev + a.values.size

-remove-from-front[t] t iter-part(a t iter-part, remove index-set)
	if !a.values.is-empty && a.remove-index in remove
		(a.values[1 .. end], a.remove-index + 1) remove-from-front remove
	else
		a

subregion build

+sorted-set-builder[t] record mut
	-inner t list-builder

+build[t] t sorted-set(a build-options, f act void(t sorted-set-builder)) t key
	a build (out => f[out,]) to

+ ~=[t] void(a t sorted-set-builder, value t) t key
	a.inner ~= value

region test

-dbg[t] string(a t sorted-set) (string, t) to
	add = a.add dbg
	if a.remove is-empty
		add
	else
		parts = " " join for i : a remove; "{i}"
		"{add} - [{parts}]"

-dbg[t] string(a t add-node) (string, t) to
	left = if l ?= a left
		"{l dbg}, "
	values = " " join for x : a values; "{x}"
	"{left}[{values}]"

-verify void(a string sorted-set, expected string)
	a.dbg is expected

test
	# TODO: be sure to test removing and then adding back
	a string sorted-set = ()
	a.is-empty is true
	a.size is 0
	a verify "[]"

	b = a ~ "r"
	b.is-empty is false
	b.size is 1
	b verify "[r]"

	b - "r" verify "[]"

	c = b ~ "o"
	c verify "[o r]"

	d = c ~ "c"
	d verify "[c o r]"

	d - "o" verify "[c r]"
	d - "r" verify "[c o]"
	d - "c" verify "[o r]"

	"-" join (for x : d; "({x})") is "(c)-(o)-(r)"

	# TODO: test filter

	dm string sorted-set = for x : d
		if x == "c"
			"sea"
		elif x == "r"
			"arr"
		elif x == "o"
			"oh"
		else
			"x"
	dm verify "[arr oh sea]"

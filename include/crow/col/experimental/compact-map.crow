import
	../mut-slice: ~=, build, mut-slice
	./frozen-map:
		frozen-map, in, is-empty, iterate, mut-slice-to-frozen-map-promise-no-duplicates, new,
		size, subscript, to

+compact-map[k, v] record by-val
	-ignore void
	-impl (k, v) impl

+==[k, v] bool(a (k, v) compact-map, b (k, v) compact-map) k key, v equal
	a.to-sorted-pairs == b.to-sorted-pairs
-to-sorted-pairs[k, v] (k, v)[](a (k, v) compact-map) k key
	(for x : a; x) sort (k, _) => k

+to[k, v] json(a (k, v) compact-map) k key, (json, k) to, (json, v) to
	a.to-sorted-pairs to

-impl[k, v] union(overlay (k, v) overlay, end-node (k, v) frozen-map)

-overlay[k, v] record(pairs (k, v?) frozen-map, prev (k, v) impl) by-ref

+new[k, v] (k, v) compact-map() k key
	(), ().end-node

+to[k, v] (k, v) compact-map(a (k, v)[]) k key
	(), a.to.end-node

+is-empty[k, v] bool(a (k, v) compact-map) k key
	match a impl
	as overlay _
		false
	as end-node e
		e is-empty

###
Number of pairs.
This is O(n).
###
+size[k, v] nat64(a (k, v) compact-map) k key
	res mut nat64 = 0
	for _ : a
		res +:= 1
	res

+ ~[k, v] (k, v) compact-map(a (k, v) compact-map, (key k, value v)) k key
	a add-or-remove key, (value,)

###
TODO
~[k, v] (k, v) compact-map(a (k, v) compact-map, b (k, v) compact-map) k key
	a ~ b.arr
###

+ ~~[k, v] (k, v) compact-map(a (k, v) compact-map, b (k, v)[]) k key
	res mut = a
	for pair : b
		res ~:= pair
	res

+ -[k, v] (k, v) compact-map(a (k, v) compact-map, key k) k key
	if key in a
		a add-or-remove key, ()
	else
		a

+subscript[k, v] v?(a (k, v) compact-map, key k) k key
	cur mut = a impl
	loop
		match cur
		as overlay o
			if res ?= o.pairs[key]
				break res
			else
				cur := o prev
				continue
		as end-node e
			break e[key]

+in[k, v] bool(key k, a (k, v) compact-map) k key
	!a[key].is-empty

-add-or-remove[k, v] (k, v) compact-map(a (k, v) compact-map, key k, value v?) k key
	(), ((((key, value),).to, a.impl) merge-as-needed)

-merge-as-needed[k, v] (k, v) impl(a (k, v) overlay) k key
	match a prev
	as overlay o
		if o.pairs.size should-merge a.pairs.size
			((o.pairs merge-overlays a.pairs), o.prev) merge-as-needed
		else
			a overlay
	as end-node e
		if e.size should-merge a.pairs.size
			e merge-to-end a.pairs end-node
		else
			a overlay

-should-merge bool(prev-size nat64, overlay-size nat64)
	prev-size <= (overlay-size max 3)

-merge-overlays[k, v] (k, v?) frozen-map(
	l (k, v?) frozen-map,
	r (k, v?) frozen-map,
) k key
	pairs (k, v?) mut-slice = with out : l.size + r.size build
		for k, vl : l
			unless k in r
				out ~= (k, vl)
		for x : r
			out ~= x
	trusted pairs mut-slice-to-frozen-map-promise-no-duplicates

-merge-to-end[k, v] (k, v) frozen-map(
	l (k, v) frozen-map,
	r (k, v?) frozen-map,
) k key
	pairs (k, v) mut-slice = with out : l.size + r.size build
		for k, vl : l
			unless k in r
				out ~= (k, vl)
		for k, vr : r
			if v ?= vr
				out ~= (k, v)
	trusted pairs mut-slice-to-frozen-map-promise-no-duplicates

region spec impls (see collection.crow)

+iterate[k, v] bool(a (k, v) compact-map, f bool mut(key k, value v)) k key
	cur mut = a impl
	seen k mut-set = ()
	loop
		match cur
		as overlay o
			broke = o.pairs iterate (k, v-opt) =>
				if seen try-add k
					if v ?= v-opt
						f[k, v]
			if broke
				break true
			else
				cur := o prev
				continue
		as end-node e
			break e iterate (k, v) =>
				unless k in seen
					# Don't need to add to 'seen' because this is the last node.
					f[k, v]

region test

-dbg[k, v] string(a (k, v) compact-map) k show, v show
	a.impl dbg
-dbg[k, v] string(a (k, v) impl) k show, v show
	match a
	as overlay o
		parts = ", " join for k, v : o pairs
			"{k} -> {v?.show ?? "_"}"
		"{o.prev dbg}, [{parts}]"
	as end-node e
		parts = ", " join for k, v : e
			"{k} -> {v}"
		"[{parts}]"

-verify void(a (nat64, string) compact-map, expected string)
	a.dbg is expected
	for k, v : a
		a[k] is (v,)

test
	a (nat64, string) compact-map = ()
	a.is-empty is true
	a.size is 0
	a verify "[]"
	a[0] is ()

	b = a ~ (10, "10")
	b.is-empty is false
	b.size is 1
	b verify "[10 -> 10]"
	b[10] is ("10",)

	c = b ~~ ((15, "15"), (5, "5"), (20, "20"))
	c verify "[10 -> 10, 15 -> 15, 5 -> 5, 20 -> 20]"

	d = c ~ (11, "11")
	d verify "[10 -> 10, 15 -> 15, 5 -> 5, 20 -> 20], [11 -> 11]"

	e = d - 15
	e verify "[10 -> 10, 15 -> 15, 5 -> 5, 20 -> 20], [11 -> 11, 15 -> _]"
	e[10] is ("10",)
	e[11] is ("11",)
	e[15] is ()

	e - 15 is e
	e - 16 is e

	f = e - 10
	f verify "[10 -> 10, 15 -> 15, 5 -> 5, 20 -> 20], [11 -> 11, 15 -> _, 10 -> _]"
	f[10] is ()
	10::nat64 in f is false

	g = f ~ (10, "10b")
	g verify "[10 -> 10, 15 -> 15, 5 -> 5, 20 -> 20], [11 -> 11, 15 -> _, 10 -> 10b]"

	h = g - 11 - 12
	h verify "[10 -> 10, 15 -> 15, 5 -> 5, 20 -> 20], [15 -> _, 10 -> 10b, 11 -> _]"

	i = h ~~ ((11, "11"), (25, "25"))
	i verify "[10 -> 10b, 20 -> 20, 5 -> 5, 11 -> 11, 25 -> 25]"

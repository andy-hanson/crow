no-std
import
	../../bool: &&, ==, bool, not, true
	../../compare: <=
	../../fun-util: subscript
	../../hash: hash, hash-mix
	../../json: json
	../../misc: key, new, void
	../../number: ==, <=>, +, -, /, %, nat64
	../../option: ==, is-empty, new, option
	../../pointer: ==, <=>, +, -, *, const-pointer, mut-pointer, swap
	../../range: ..
	../../string: ==, literal, string
	../../test-util: is
	../../tuple: from, new, pair, to
	../array:
		~=, array, array-cast, as-array, begin-pointer, end-pointer, build, exists, for-loop,
		is-empty, new, size, subscript, with-block
	../mut-array:
		~=, begin-pointer, build, cast-immutable, end-pointer, fill, mut-array, mut-array-builder,
		for-loop, n-of, size, temp-as-array, to-mut-array, set-subscript, subscript, with-block
	../list: ==, for-loop, list, new, to-array, to-list

###
Immutable dictionary that is not efficient to update.
However, this is more compact than `dict` and has faster lookups.
###
frozen-dict[k, v] record by-val
	.pairs (k, v) array
	.bucket-starts (k, v)* array

new[k, v] (k, v) frozen-dict(...a (k, v) array) k key
	a.to-list to-frozen-dict

to-frozen-dict[k, v] (k, v) frozen-dict(a (k, v)[]) k key
	trusted a.to-array.to-mut-array as-frozen-dict

# This is O(1).
to-array[k, v] (k, v) array(a (k, v) frozen-dict) noctx
	a pairs

# This is O(1).
to-list[k, v] (k, v)[](a (k, v) frozen-dict) noctx
	a.to-array to-list

# TODO:INTERNAL
begin-pointer[k, v] (k, v)*(a (k, v) frozen-dict) unsafe
	a.pairs begin-pointer

end-pointer[k, v] (k, v)*(a (k, v) frozen-dict) unsafe
	a.pairs end-pointer

is-empty[k, v] bool(a (k, v) frozen-dict)
	a.pairs is-empty

size[k, v] nat64(a (k, v) frozen-dict)
	a.pairs size

subscript[k, v] v?(a (k, v) frozen-dict, key k) k key
	trusted if pointer ?= a find-pointer key
		pointer->to,

in[k, v] bool(key k, a (k, v) frozen-dict) k key
	!(a try-get-unordered-index key is-empty)

try-get-unordered-index[k, v] nat64?(a (k, v) frozen-dict, key k) k key
	trusted if pointer ?= a find-pointer key
		pointer - a.pairs.begin-pointer,

.find-pointer[k, v] (k, v)*?(a (k, v) frozen-dict, key k) unsafe, k key
	bucket = if a.bucket-starts is-empty
		a pairs
	else
		bucket-index = key.hash % a.bucket-starts.size
		bucket-start = a.bucket-starts[bucket-index]
		bucket-end = if bucket-index == a.bucket-starts.size - 1
			a.pairs end-pointer
		else
			a.bucket-starts[bucket-index + 1]
		bucket-start .. bucket-end as-array

	bucket.begin-pointer find-pointer bucket.end-pointer, key

find-index[k, v] nat64?(pairs (k, v) array, key k) unsafe, k key
	if pointer ?= pairs.begin-pointer find-pointer pairs.end-pointer, key
		pointer - pairs.begin-pointer,

find-pointer[k, v] (k, v)*?(cur (k, v)*, end (k, v)*, key k) unsafe, k key
	if cur == end
		()
	elif cur->from == key
		cur,
	else
		cur + 1 find-pointer end, key

.as-frozen-dict[k, v] (k, v) frozen-dict(a (k, v) mut-array) unsafe, k key
	a.mut-array-to-frozen-dict-promise-no-duplicates remove-duplicates

mut-array-to-frozen-dict-promise-no-duplicates[k, v] (k, v) frozen-dict(
	a (k, v) mut-array,
)unsafe, k key
	if a.size <= 4
		a.cast-immutable, ()
	else
		n-buckets = a.size / 2
		bucket-counts = a get-bucket-counts n-buckets
		bucket-starts = a.begin-pointer running-sum bucket-counts.temp-as-array
		bucket-counts fill 0
		cur mut = a begin-pointer
		until cur == a.end-pointer
			bucket-index = cur->from get-bucket-index bucket-counts.size
			bucket-count = bucket-counts[bucket-index]
			bucket-start = bucket-starts[bucket-index]
			bucket-cur-end = bucket-start + bucket-count
			if bucket-start <= cur && cur <= bucket-cur-end
				if cur == bucket-cur-end
					bucket-counts[bucket-index] := bucket-count + 1
				cur := cur + 1
			else
				bucket-counts[bucket-index] := bucket-count + 1
				cur swap bucket-cur-end
		a.cast-immutable, bucket-starts.array-cast

.remove-duplicates[k, v] (k, v) frozen-dict(a (k, v) frozen-dict) unsafe, k key
	if a has-duplicates
		# Write out pairs from each bucket to a mut-array, omitting a pair if its key appears later in the same bucket.
		# Then call mut-array-to-frozen-dict-promise-no-duplicates 
		xs (k, v) mut-array = with out : a.size build
			out write-without-duplicates a
		xs mut-array-to-frozen-dict-promise-no-duplicates
	else
		a

.write-without-duplicates[k, v] void(out (k, v) mut-array-builder, a (k, v) frozen-dict) k key
	if a.bucket-starts is-empty
		out write-bucket-without-duplicates a.pairs
	else
		for i, bucket-start : a bucket-starts
			trusted
				bucket-end = if i == a.bucket-starts.size - 1
					a.pairs end-pointer
				else
					a.bucket-starts[i + 1]
				out write-bucket-without-duplicates (bucket-start .. bucket-end).as-array

.write-bucket-without-duplicates[k, v] void(out (k, v) mut-array-builder, pairs (k, v) array) k key
	for i, pair : pairs
		unless pair.from key-in-range pairs[i + 1 .. pairs.size]
			out ~= pairs[i]

.has-duplicates[k, v] bool(a (k, v) frozen-dict) k key
	if a.bucket-starts is-empty
		a.pairs bucket-has-duplicates
	else
		a.bucket-starts exists (i, bucket-start) =>
			trusted
				bucket-end = if i == a.bucket-starts.size - 1
					a.pairs end-pointer
				else
					a.bucket-starts[i + 1]
				(bucket-start .. bucket-end).as-array bucket-has-duplicates

.bucket-has-duplicates[k, v] bool(pairs (k, v) array) k key
	pairs exists (i, pair) =>
		pair.from key-in-range pairs[i + 1 .. pairs.size]

.key-in-range[k, v] bool(key k, pairs (k, v) array) k key
	pairs exists pair => key == pair.from

.get-bucket-counts[k, v] nat64 mut-array(a (k, v) mut-array, n-buckets nat64) unsafe, k key
	res = n-buckets n-of 0
	for pair : a
		bucket-index = pair.from get-bucket-index n-buckets
		res[bucket-index] := res[bucket-index] + 1
	res

.get-bucket-index[k] nat64(key k, n-buckets nat64) k key
	key.hash % n-buckets

.running-sum[k, v] (k, v) mut* array(initial (k, v) mut*, offsets nat64 array) unsafe
	with out : offsets.size build
		acc mut = initial
		for offset : offsets
			out ~= acc
			acc := acc + offset

region builder

build-frozen-dict record
	.size-hint nat64
build build-frozen-dict()
	0,
build build-frozen-dict(size-hint nat64)
	size-hint,

frozen-dict-builder[k, v] record mut
	.inner (k, v) mut-array-builder

with-block[k, v] (k, v) frozen-dict(
	a build-frozen-dict,
	f act void((k, v) frozen-dict-builder),
) k key
	trusted (with out : a.size-hint build; f[(out,)]) as-frozen-dict

~=[k, v] void(a(k, v) frozen-dict-builder, pair (k, v))
	a.inner ~= pair

region iteration

for-loop[k, v] void(a (k, v) frozen-dict, f act void(k, v))
	for pair : a pairs
		f[pair from, pair to]

for-loop[out, k, v] out[](a (k, v) frozen-dict, f act out(k, v))
	for pair : a.pairs to-list
		f[pair from, pair to]

.verify void(a (nat64, string) frozen-dict, keys-order nat64[], bucket-starts nat64[]) unsafe
	(for pair : a.pairs to-list; pair from)::nat64[] is keys-order
	(for pointer : a.bucket-starts to-list; pointer - a.pairs.begin-pointer)::nat64[] is bucket-starts

test
	a (nat64, string) frozen-dict = ()
	a.is-empty is true
	a.size is 0
	a verify (), ()
	a[0] is ()
	
	b (nat64, string) frozen-dict = (3, "3"), (1, "1"), (5, "5"), (2, "2")
	b verify (3, 1, 5, 2), ()
	b[0] is ()
	b[1] is ("1",)
	b[2] is ("2",)
	b[3] is ("3",)
	b[4] is ()
	b[5] is ("5",)
	b[6] is ()

	c (nat64, string) frozen-dict = (3, "3"), (1, "1"), (5, "5"), (2, "2"), (8, "8")
	c verify (2, 8, 3, 5, 1), (0, 2)
	c[0] is ()
	c[1] is ("1",)
	c[2] is ("2",)
	c[3] is ("3",)
	c[4] is ()
	c[5] is ("5",)
	c[6] is ()
	c[7] is ()
	c[8] is ("8",)
	c[9] is ()

test
	a (nat64, string) frozen-dict = (1, "1"), (1, "2")
	a.size is 1
	a verify (1,), ()
	a[1] is ("2",)

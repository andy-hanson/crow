no-std
import
	../../bits:
		&, <<, >>, add-bit, iterate, has-bit, count-ones, low-n-bits, one-bits, sub-bit
	../../bool: &&, bool, false, true
	../../compare: <, <=, >, >=, equal, min
	../../exception: unreachable
	../../fun-util: subscript
	../../misc: ==, void
	../../number: ==, <=>, +, -, *, /, %, max-value, nat64, new
	../../option: ??, new, option
	../../pointer: const-pointer
	../../private/number-low-level: wrap-sub
	../../range: ..
	../../string: interpolate, join, string, to-hex, to
	../array: +, array, begin, iterate, next, slice, subscript
	../collection: build-options, for-loop, subscript
	../list: ~=, build, iterate, list, list-builder, to

+index-set record by-ref
	# This is one more than the highest number that would currently fit in the tree.
	-capacity nat64
	-root node

-node union(inner inner-node, leaf leaf-node, empty)
# TODO: could save space by having separate types for inner node of inner nodes
# and inner node of leaf-node?
-inner-node record(a node, b node, c node, d node) by-ref
-leaf-node record(a nat64, b nat64, c nat64, d nat64) by-ref

-subscript nat64(a leaf-node, n nat64)
	a.values[n]

-values nat64 array(a leaf-node)
	trusted ((&a.a)::nat64*)[0 .. 4]
-bits-in-leaf-node nat64()
	# 64 * 4
	256

+new index-set(...a nat64 array)
	a.to to

+to index-set(a nat64[])
	res mut index-set = (0, empty)
	for x : a
		res ~:= x
	res

+== bool(a index-set, b index-set) bare
-== bool(a node, b node) bare
-== bool(a inner-node, b inner-node) bare
-== bool(a leaf-node, b leaf-node) bare

+is-empty bool(a index-set)
	a.capacity == 0
-is-empty bool(a node)
	match a
	as inner _
		false
	as leaf _
		false
	as empty
		true

# O(n).
+size nat64(a index-set)
	0 size-recur a.root
-size-recur nat64(acc nat64, a node)
	match a
	as inner i
		acc size-recur i.a size-recur i.b size-recur i.c size-recur i.d
	as leaf l
		acc + l.a.count-ones + l.b.count-ones + l.c.count-ones + l.d.count-ones
	as empty
		acc

+to nat64[](a index-set)
	for x : a
		x

+in bool(index nat64, a index-set)
	index < a.capacity && index in a.root, a.capacity
# n = capacity of this node
-in bool(index nat64, a node, n nat64)
	assert index < n
	match a
	as inner i
		assert n > bits-in-leaf-node
		half = n / 2
		quarter = half / 2
		if index < half
			if index < quarter
				index in i.a, quarter
			else
				index - quarter in i.b, quarter
		else
			index2 = index - half
			if index2 < quarter
				index2 in i.c, quarter
			else
				index2 - quarter in i.d, quarter
	as leaf l
		assert n == bits-in-leaf-node
		l[index word-index] has-bit index.bit-index
	as empty
		false

~ ~ index-set(a index-set, index nat64)
	a try-add index ?? a

-quadruple-capacity index-set(a index-set)
	if a.capacity == 0
		bits-in-leaf-node, empty-leaf-node.leaf
	else
		a.capacity * 4, (a.root, empty, empty, empty).inner

-empty-inner-node inner-node()
	empty, empty, empty, empty
-empty-leaf-node leaf-node()
	0, 0, 0, 0

+try-add index-set?(a index-set, index nat64)
	if index >= a.capacity
		a.quadruple-capacity try-add index
	elif res ?= a.root try-add index, a.capacity
		(a.capacity, res),
-try-add node?(a node, index nat64, n nat64)
	assert index < n
	match a
	as inner i
		assert n > bits-in-leaf-node
		half = n / 2
		quarter = half / 2
		if index < half
			if index < quarter
				if res ?= i.a try-add index, quarter
					(i with-a res).inner,
			else
				if res ?= i.b try-add index - quarter, quarter
					(i with-b res).inner,
		else
			index2 = index - half
			if index2 < quarter
				if res ?= i.c try-add index2, quarter
					(i with-c res).inner,
			else
				if res ?= i.d try-add index2 - quarter, quarter
					(i with-d res).inner,
	as leaf l
		assert n == bits-in-leaf-node
		word-index = index word-index
		bit-index = index bit-index
		word = l[word-index]
		new-word = word add-bit bit-index
		unless new-word == word
			(l update-leaf word-index, new-word).leaf,
	as empty
		new-node = if n == bits-in-leaf-node
			empty-leaf-node leaf
		else
			empty-inner-node inner
		new-node try-add index, n

+ ~~ index-set(a index-set, indices nat64[])
	res mut = a
	for index : indices
		res ~:= index
	res

+ - index-set(a index-set, index nat64)
	a try-remove index ?? a

+try-remove index-set?(a index-set, index nat64)
	if index < a.capacity
		if removed ?= a.root try-remove index, a.capacity
			(removed simplify-after-remove-or-filter a.capacity),
-try-remove node?(a node, index nat64, n nat64)
	assert index < n
	match a
	as inner i
		assert n > bits-in-leaf-node
		half = n / 2
		quarter = half / 2
		opt-new-node inner-node? = if index < half
			if index < quarter
				if res ?= i.a try-remove index, quarter
					(i with-a res),
			else
				if res ?= i.b try-remove index - quarter, quarter
					(i with-b res),
		else
			index2 = index - half
			if index2 < quarter
				if res ?= i.c try-remove index2, quarter
					(i with-c res),
			else
				if res ?= i.d try-remove index2 - quarter, quarter
					(i with-d res),
		if new-node ?= opt-new-node
			if new-node is-all-empty
				empty,
			else
				new-node.inner,
	as leaf l
		assert n == bits-in-leaf-node
		word-index = index word-index
		bit-index = index bit-index
		word = l[word-index]
		new-word = word sub-bit bit-index
		unless new-word == word
			if new-word == 0
				empty,
			else
				(l update-leaf word-index, new-word).leaf,
	as empty
		()
-simplify-after-remove-or-filter index-set(node node, capacity nat64)
	match node
	as inner i
		if i.b.is-empty && i.c.is-empty && i.d.is-empty
			forbid i.a is-empty
			i.a simplify-after-remove-or-filter capacity / 4
		else
			capacity, i.inner
	as leaf l
		assert capacity == bits-in-leaf-node
		forbid l.a == 0 && l.b == 0 && l.c == 0 && l.d == 0
		capacity, l.leaf
	as empty
		0, empty

-is-all-empty bool(a inner-node)
	a.a.is-empty && a.b.is-empty && a.c.is-empty && a.d.is-empty

# TODO:MOVE
-with-a inner-node(a inner-node, new-a node)
	new-a, a.b, a.c, a.d
-with-b inner-node(a inner-node, new-b node)
	a.a, new-b, a.c, a.d
-with-c inner-node(a inner-node, new-c node)
	a.a, a.b, new-c, a.d
-with-d inner-node(a inner-node, new-d node)
	a.a, a.b, a.c, new-d

-update-leaf leaf-node(a leaf-node, word-index nat64, new-word nat64)
	if word-index == 0
		new-word, a.b, a.c, a.d
	elif word-index == 1
		a.a, new-word, a.c, a.d
	elif word-index == 2
		a.a, a.b, new-word, a.d
	elif word-index == 3
		a.a, a.b, a.c, new-word
	else
		unreachable

###
# TODO: ~ index-set(a index-set, b index-set)

intersect index-set(a index-set, b index-set)
	strip-trailing-zeroes: a.values zip-smaller b.values, (x, y) =>
		x & y

- index-set(a index-set, b index-set)
	strip-trailing-zeroes: a.values zip-larger b.values, (x, y) =>
		(x ?? 0) & ~(y ?? 0)

-strip-trailing-zeroes index-set(a nat64 array)
	index-set: void, a.strip-trailing-zeroes
-strip-trailing-zeroes nat64 array(a nat64 array)
	if last ?= a last
		if last == 0
			a.rtail strip-trailing-zeroes
		else
			a
###

# hi exclusive
# TODO: use 'range' type
+count-range nat64(a index-set, low nat64, high nat64)
	if low <= high
		a.root count-range a.capacity, low, high - low
-count-range nat64(a node, n nat64, low nat64, len nat64)
	if low <= n
		match a
		as inner i
			assert n > bits-in-leaf-node
			half = n / 2
			quarter = half / 2
			three-quarters = quarter + half
			# If low < quarter, wrap-sub will give an impossibly high value
			# and the recursive call will return 0.
			ca = i.a count-range quarter, low, len
			cb = i.b count-range quarter, (low wrap-sub quarter), len
			cc = i.c count-range quarter, (low wrap-sub half), len
			cd = i.d count-range quarter, (low wrap-sub three-quarters), len
			ca + cb + cc + cd
		as leaf l
			assert n == bits-in-leaf-node
			high = low + len min (bits-in-leaf-node - 1)
			low-word-index = low word-index
			high-word-index = high word-index
			low-bit-index = low bit-index
			high-bit-index = high bit-index
			if low-word-index == high-word-index
				l[low-word-index] count-range-in-nat64 low-bit-index, high-bit-index
			else
				first-word = l[low-word-index] count-gte-in-nat64 low-bit-index
				mid-words = l.values[low-word-index + 1 .. high-word-index] count-ones-in-array
				last-word = l[high-word-index] count-less-in-nat64 high-bit-index
				first-word + mid-words + last-word
		as empty
			0

+count-less nat64(a index-set, n nat64)
	a count-range 0, n

count-greater-or-equal nat64(a index-set, n nat64)
	a count-range n, max-value

-count-range-in-nat64 nat64(a nat64, lo-bit-index nat64, hi-bit-index nat64)
	a >> lo-bit-index count-less-in-nat64 (hi-bit-index - lo-bit-index)

-count-less-in-nat64 nat64(a nat64, bit-index nat64)
	a << (64 - bit-index) count-ones

-count-gte-in-nat64 nat64(a nat64, bit-index nat64)
	a >> bit-index count-ones

-count-ones-in-array nat64(a nat64 array)
	res mut nat64 = 0
	for x : a
		res +:= x count-ones
	res

# Gets the set with only values < limit
+filter-less index-set(a index-set, limit nat64)
	if limit < a.capacity
		filtered = a.root filter-less-recur a.capacity, limit
		filtered simplify-after-remove-or-filter a.capacity
	else
		a
-filter-less-recur node(a node, n nat64, limit nat64)
	match a
	as inner i
		assert n > bits-in-leaf-node
		half = n / 2
		quarter = half / 2
		new-a = i.a filter-less-recur quarter, limit, 0
		new-b = i.b filter-less-recur quarter, limit, 0x40
		new-c = i.c filter-less-recur quarter, limit, 0x80
		new-d = i.c filter-less-recur quarter, limit, 0xc0
		new-node = new-a, new-b, new-c, new-d
		if new-node is-all-empty
			empty
		else
			new-node inner
	as leaf l
		assert n == bits-in-leaf-node
		new-a = l.a filter-less-word limit, 0
		new-b = l.b filter-less-word limit, 0x40
		new-c = l.c filter-less-word limit, 0x80
		new-d = l.d filter-less-word limit, 0xc0
		(new-a, new-b, new-c, new-d) leaf
	as empty
		empty
-filter-less-recur node(a node, n nat64, limit nat64, offset nat64)
	if limit < offset
		empty
	elif limit > offset + n
		a
	else
		a filter-less-recur n, limit - offset

-filter-less-word nat64(a nat64, limit nat64, offset nat64)
	if limit >= offset
		if limit > offset + 64
			a
		else
			a & (limit - offset low-n-bits)

-word-index nat64(a nat64)
	a / 64
-bit-index nat64(a nat64)
	a % 64

+to string(a index-set)
	", " join for x : a; "{x}"

region spec impls (see collection.crow)

+iterate bool(a index-set, f bool mut(elem nat64))
	a.root iterate-recur 0, a.capacity, f
# offset: how much to add to indices in this node
-iterate-recur bool(node node, offset nat64, n nat64, f bool mut(elem nat64))
	match node
	as inner i
		half = n / 2
		quarter = half / 2
		three-quarters = half + quarter
		if i.a iterate-recur offset, quarter, f
			true
		elif i.b iterate-recur offset + quarter, quarter, f
			true
		elif i.c iterate-recur offset + half, quarter, f
			true
		else
			i.d iterate-recur offset + three-quarters, quarter, f
	as leaf l
		word-index mut nat64 = 0
		l.values iterate value =>
			bit-index-offset = offset + word-index * 64
			word-index +:= 1
			value.one-bits iterate bit-index =>
				f[bit-index-offset + bit-index]
	as empty
		false

+index-set-builder record mut
	-inner nat64 list-builder

+build index-set(a build-options, f void mut(out index-set-builder))
	a build (out => f[out,]) to

+ ~= void(a index-set-builder, value nat64)
	a.inner ~= value

region test

~dbg string(a index-set)
	a.root dbg
-dbg string(a node)
	match a
	as inner i
		"({i.a dbg} {i.b dbg} {i.c dbg} {i.d dbg})"
	as leaf l
		"[{l.a to-hex} {l.b to-hex} {l.c to-hex} {l.d to-hex}]"
	as empty
		"_"

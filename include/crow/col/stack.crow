no-std
import
	../bool: bool
	../compare: !=
	../exception: assert, forbid
	../fun-util: subscript
	../misc: drop, new, void
	../opt: !, ==, is-empty, new, opt
	../ptr: ==, +, -, set-deref
	../str: str
	../test-util: is
	../test-util/spy: calls, fn, new, spy-act1
	../private/number-low-level: ==, nat64, wrap-add
	./arr: ==, arr, new
	./arr-util: fold
	./fix-arr: begin-ptr, cast-immutable, end-ptr, fix-arr, uninitialized-fix-arr

###
Immutable stack type.
Iteration functions move from the bottom to the top.
###
stack<a> record
	.last-node node<a>?

.node<a> record
	prev node<a>?
	value a

###
Stack containing the given elements.

The first element of `a` goes on the bottom and the last element of `a` goes on the top.
###
new<a> stack a(...a a[])
	a to-stack

###
Stack containing the given elements.

The first element of `a` goes on the bottom and the last element of `a` goes on the top.
###
to-stack<a> stack a(a a[])
	# TODO: type annotation should not be necessary
	empty stack a = (()::node<a>?,)
	empty fold a, (stack, x) => stack ~ x

# Copy elements an arrary.
to-arr<a> a[](a stack a) trusted
	res fix-arr a = a.size uninitialized-fix-arr
	begin = res.end-ptr fold-reverse a, (out, x) =>
		new-out = out - 1
		*new-out := x
		new-out
	assert: begin == res.begin-ptr
	res cast-immutable

# Copy elements to an array, from top to bottom.
to-arr-reverse<a> a[](a stack a) trusted
	res fix-arr a = a.size uninitialized-fix-arr
	end = res.begin-ptr fold-reverse a, (out, x) =>
		*out := x
		out + 1
	assert: end == res.end-ptr
	res cast-immutable

# `true` iff `a.size == 0`.
is-empty<a> bool(a stack a)
	a.last-node is-empty

###
Appends an element to the stack.
This is O(1).
###
~ <a> stack a(a stack a, b a)
	# TODO: type annotation should not be necessary
	((a.last-node, b),)::node<a>?,

###
Number of elements in the stack.
This is O(1).
###
size<a> nat64(a stack a)
	0 fold a, (acc, ignore) =>
		drop: ignore
		acc wrap-add 1

###
Top element.
Returns an empty option iff `a` is empty.
This is O(1).
###
peek<a> a?(a stack a)
	if node ?= a last-node
		node.value,

popped<a> record
	value a
	rest stack a

###
Returns the top element of the stack and a new stack with all elements but the top.
Returns an empty option iff `a` is empty.
###
pop<a> popped<a>?(a stack a)
	if node ?= a last-node
		(node.value, (node.prev,)),

region iteration

each<a> void(a stack a, f act void(a))
	a.last-node each-recur f
.each-recur<a> void(a node<a>?, f act void(a))
	if node ?= a
		node.prev each-recur f
		f[node value]

each-reverse<a> void(a stack a, f act void(a))
	a.last-node each-reverse-recur f
.each-reverse-recur<a> void(a node<a>?, f act void(a))
	if node ?= a
		f[node value]
		node.prev each-reverse-recur f

# Call a function for each element in the stack and accumulate.
fold<a, b> a(acc a, a stack b, f act a(a, b))
	acc fold-recur a.last-node, f
.fold-recur<a, b> a(acc a, a node<b>?, f act a(a, b))
	if node ?= a
		prev-val = acc fold-recur node.prev, f
		f[prev-val, node.value]
	else
		acc

fold-reverse<a, b> a(acc a, a stack b, f act a(a, b))
	acc fold-reverse-recur a.last-node, f
.fold-reverse-recur<a, b> a(acc a, a node<b>?, f act a(a, b))
	if node ?= a
		f[acc, node.value] fold-reverse-recur node.prev, f
	else
		acc


# Produce a stack with `f[x]` applied to each element `x` in the input.
map<out, in> stack out(a stack in, f act out(in))
	(a.last-node map-recur f),
.map-recur<out, in> node<out>?(a node<in>?, f act out(in))
	if node ?= a
		((node.prev map-recur f), f[node value]),

filter<a> stack a(a stack a, f act bool(a))
	(a.last-node filter-recur f),
.filter-recur<a> node<a>?(a node<a>?, f act bool(a))
	if node ?= a
		prev = node.prev filter-recur f
		if f[node value]
			(prev, node.value),
		else
			prev

find-and-get<out, in> out?(a stack in, f act out?(in))
	a.last-node find-and-get-recur f
.find-and-get-recur<out, in> out?(a node<in>?, f act out?(in))
	if node ?= a
		if x ?= node.prev find-and-get-recur f
			x,
		else
			f[node value]

test
	a stack nat64 = ()
	assert: a is-empty
	a.to-arr is ()
	a.peek is ()

	b = a ~ 1
	b.to-arr is (1,)
	b.peek is (1,)
	b.pop!.rest.to-arr is ()
	forbid: b is-empty

	c = b ~ 2
	c.to-arr is (1, 2)
	c.peek is (2,)
	c.pop!.rest.to-arr is (1,)

	d = c ~ 3
	d.to-arr is (1, 2, 3)

	each-spy spy-act1<void, nat64> = new: ignore => ()
	d each each-spy.fn
	each-spy.calls is (1, 2, 3)

	d each-reverse each-spy.fn
	each-spy.calls is (3, 2, 1)

	d2 = d map x => x wrap-add 10
	d2.to-arr is (11, 12, 13)

	d3 = d filter x => x != 2
	d3.to-arr is (1, 3)

	folded = 5 fold d, (x, y) => x wrap-add y
	folded is 11

	(d find-and-get x => x if-eq 2, "two") is ("two",)
	(d find-and-get x => x if-eq 5, "five") is ()

.if-eq str?(actual nat64, expected nat64, result str)
	if actual == expected
		result,

no-std
import
	../bool: ||, bool, new, true, false
	../fun-util: subscript
	../json: to
	../number: ==, +, nat64
	../option: ==, force, is-empty, new, option
	../test-util: is
	../tuple: a, b, new
	./array: ~=, array, array-iterator, begin, build, end, next, prev
	./collection: build, for-loop, reversed, with-block
	./list: ==, ~=, build, iterate, list, new, to

###
Immutable stack type.
Iteration functions move from the bottom to the top.
###
+stack[t] record
	-last-node t node?

-node[t] record(prev t node?, value t)

###
Stack containing the given elements.

The first element of `a` goes on the bottom and the last element of `a` goes on the top.
###
+new[t] t stack(...a t array)
	a to

###
Stack containing the given elements.

The first element of `a` goes on the bottom and the last element of `a` goes on the top.
###
+to[t] t stack(a t array)
	a.to::t[] to
+to[t] t stack(a t[])
	res mut t stack = ()::(t node?),
	for x : a
		res ~:= x
	res

+to[t] t array(a t stack)
	for x : a; x
+to[t] t[](a t stack)
	for x : a; x

# `true` iff `a.size == 0`.
+is-empty[t] bool(a t stack)
	a.last-node is-empty

###
Appends an element to the stack.
This is O(1).
###
+~[t] t stack(a t stack, b t)
	# TODO: type annotation should not be necessary
	((a.last-node, b),)::(t node?),

###
Number of elements in the stack.
This is O(1).
###
+size[t] nat64(a t stack)
	res mut nat64 = 0
	for _ : a
		res +:= 1
	res

###
Top element.
Returns an empty option iff `a` is empty.
This is O(1).
###
+peek[t] t?(a t stack)
	if node ?= a last-node
		node.value,

###
Returns the top element of the a stacknd a new stack with all elements but the top.
Returns an empty option iff `a` is empty.
###
+pop[t] (t stack, t)?(a t stack)
	if node ?= a last-node
		((node.prev,), node.value),

region spec impls (see collection.crow)

+iterate[t] bool(a t stack, f bool mut(elem t))
	a.last-node iterate-recur f
-iterate-recur[t] bool(a t node?, f bool mut(elem t))
	if node ?= a
		node.prev iterate-recur f || f[node value]
iterate-reverse[t] bool(a t stack, f bool mut(elem t))
	cur mut = a last-node
	loop
		if c ?= cur
			if f[c value]
				break true
			else
				cur := c prev
				continue
		else
			break false

~to-array-reverse[t] t array(a t stack)
	with out : a.size build
		broke = a iterate-reverse x =>
			out ~= x
			false
		forbid broke

+stack-iterator[t] record by-val
	-collection t stack
	-array-reverse t array-iterator

+begin[t] t stack-iterator(a t stack)
	a, a.to-array-reverse.end
+end[t] t stack-iterator(a t stack)
	a, a.to-array-reverse.begin

+prev[t] (t stack-iterator, t)?(a t stack-iterator)
	if pair ?= a.array-reverse next
		((a.collection, pair.b), pair.a),
+next[t] (t, t stack-iterator)?(a t stack-iterator)
	if pair ?= a.array-reverse prev
		(pair.b, (a.collection, pair.a)),

test
	a nat64 stack = ()
	assert a is-empty
	a.to::nat64[] is ()
	a.peek is ()

	b = a ~ 1
	b.to::nat64[] is (1,)
	b.peek is (1,)
	b-popped = b.pop!
	b.pop!.a.to::nat64[] is ()
	b-popped.b is 1
	forbid b is-empty

	c = b ~ 2
	c.to::nat64[] is (1, 2)
	c.peek is (2,)
	c-popped = c.pop!
	c-popped.a.to::nat64[] is (1,)
	c-popped.b is 2

	d = c ~ 3
	d.to::nat64[] is (1, 2, 3)

	(for x : d; x)::nat64[] is (1, 2, 3)

	(for x : d reversed; x)::nat64[] is (3, 2, 1)

	(for x : d; x + 10)::nat64[] is (11, 12, 13)

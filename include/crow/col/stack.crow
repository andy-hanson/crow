no-std
import
	../bool: bool
	../compare: !=
	../exception: assert, forbid, throw
	../fun: subscript
	../misc: drop, void
	../opt: ==, is-empty, none, opt, some
	../ptr: ==, +, -, set-subscript
	../str: str
	../test: is
	../test/spy: calls, fn, spy-act
	../private/number-low-level: ==, nat64, wrap-add
	./arr: ==, arr
	./arr-util: fold
	./mut-arr: begin-ptr, cast-immutable, end-ptr, uninitialized-mut-arr

###
Immutable stack ype.
Appending a value with `~`, removing the last value with `rtail`, and `last` are always O(1).
Accessing the first element of the stack is O(n).
###
stack<a> record
	# TODO:PRIVATE
	ignore void
	last-node opt node a

.node<a> record
	prev opt node a
	value a

# Empty stack.
stack<a> stack a()
	stack: void, none

# Copy an arr to a stack.
stack<a> stack a(a a[])
	stack<a> fold a, (stack, x) => stack ~ x

# Copy a stack to an arr.
arr<a> a[](a stack a) trusted
	res = a.size uninitialized-mut-arr<a>
	begin = res.end-ptr fold-reverse a, (out, x) =>
		new-out = out - 1
		new-out[] := x
		new-out
	assert: begin == res.begin-ptr
	res cast-immutable

arr-reverse<a> a[](a stack a) trusted
	res = a.size uninitialized-mut-arr<a>
	end = res.begin-ptr fold-reverse a, (out, x) =>
		out[] := x
		out + 1
	assert: end == res.end-ptr
	res cast-immutable

# True iff `a.size == 0`.
is-empty<a> bool(a stack a)
	a.last-node is-empty

###
Appends an element to the stack.
This is O(1).
###
~ <a> stack a(a stack a, b a)
	stack: void, some: node: a.last-node, b

###
Number of elements in the stack.
This is O(1).
###
size<a> nat64(a stack a)
	0 fold a, (acc, ignore) =>
		drop: ignore
		acc wrap-add 1

###
Oldest element.
This is O(a size).
###
first<a> opt a(a stack a)
	none fold-reverse a, (ignore, x) => x some

###
Most recently appended element.
This is O(1).
###
last<a> opt a(a stack a)
	if node ?= a last-node
		node.value some

###
All but the last element.
This is O(1).
Throws if the stack is empty.
###
rtail<a> stack a(a stack a)
	if node ?= a last-node
		stack: void, node prev
	else
		throw: "Stack is empty"

popped<a> record
	value a
	rest stack a

pop<a> opt popped a(a stack a)
	if node ?= a last-node
		some: popped: node.value, stack: void, node.prev

region iteration

each<a> void(a stack a, f act void(a))
	a.last-node each-recur f
.each-recur<a> void(a opt node a, f act void(a))
	if node ?= a
		node.prev each-recur f
		f[node value]

each-reverse<a> void(a stack a, f act void(a))
	a.last-node each-reverse-recur f
.each-reverse-recur<a> void(a opt node a, f act void(a))
	if node ?= a
		f[node value]
		node.prev each-reverse-recur f

# Call a function for each element in the stack and accumulate.
fold<a, b> a(acc a, a stack b, f act a(a, b))
	acc fold-recur a.last-node, f
.fold-recur<a, b> a(acc a, a opt node b, f act a(a, b))
	if node ?= a
		prev-val = acc fold-recur node.prev, f
		f[prev-val, node.value]
	else
		acc

fold-reverse<a, b> a(acc a, a stack b, f act a(a, b))
	acc fold-reverse-recur a.last-node, f
.fold-reverse-recur<a, b> a(acc a, a opt node b, f act a(a, b))
	if node ?= a
		f[acc, node.value] fold-reverse-recur node.prev, f
	else
		acc


# Produce a stack with `f[x]` applied to each element `x` in the input.
map<out, in> stack out(a stack in, f act out(in))
	stack: void, a.last-node map-recur f
.map-recur<out, in> opt node out(a opt node in, f act out(in))
	if node ?= a
		prev = node.prev map-recur f
		some: node: prev, f[node value]

filter<a> stack a(a stack a, f act bool(a))
	stack: void, a.last-node filter-recur f
.filter-recur<a> opt node a(a opt node a, f act bool(a))
	if node ?= a
		prev = node.prev filter-recur f
		if f[node value]
			some: node: prev, node.value
		else
			prev

first-some<out, in> opt out(a stack in, f act opt out(in))
	a.last-node first-some-recur f
.first-some-recur<out, in> opt out(a opt node in, f act opt out(in))
	if node ?= a
		res = node.prev first-some-recur f
		if res is-empty
			f[node value]
		else
			res

test
	a = stack<nat64>
	assert: a is-empty
	a.arr is []
	a.last is none

	b = a ~ 1
	b.arr is [1]
	b.last is 1.some
	b.rtail.arr is []
	forbid: b is-empty

	c = b ~ 2
	c.arr is [1, 2]
	c.last is 2.some
	c.rtail.arr is [1]

	d = c ~ 3
	d.arr is [1, 2, 3]

	each-spy = spy-act<void, nat64>: void
	d each each-spy.fn
	each-spy.calls is [1, 2, 3]

	d each-reverse each-spy.fn
	each-spy.calls is [3, 2, 1]

	d2 = d map x => x wrap-add 10
	d2.arr is [11, 12, 13]

	d3 = d filter x => x != 2
	d3.arr is [1, 3]

	folded = 5 fold d, (x, y) => x wrap-add y
	folded is 11

	(d first-some<str, nat64> x => x if-eq 2, "two") is "two".some
	(d first-some<str, nat64> x => x if-eq 5, "five") is none

.if-eq opt str(actual nat64, expected nat64, result str)
	if actual == expected
		result some

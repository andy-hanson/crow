no-std
import
	../../bool: ==, bool, false, true
	../../compare: <
	../../number: ==, <=>, nat64
	../array: array, array-equal, for-loop, new
	../array-util: flatten, groups-of, in, repeat, strip-left-while
	../../test-util: is

dummy-array-util-tests nat64()
	0

test
	2 in (1, 2, 3) is true
	2 in (1, 3) is false

test
	(3, 2, 1) strip-left-while (x => x < 3) is (3, 2, 1)
	# TODO: should not need type annotation
	(1, 3, 5, 3, 1)::array<nat64> strip-left-while (x => x < 5) is (5, 3, 1)

test
	a array nat64 = 5, 3, 1
	(for x : a; (x,) repeat x)::array<array<nat64>>.flatten is (5, 5, 5, 5, 5, 3, 3, 3, 1)

test
	a array nat64 = 1, 2, 3, 4, 5, 6, 7
	a groups-of 3 is ((1, 2, 3), (4, 5, 6), (7,))

.== bool(a array nat64, b array nat64) no-doc noctx
	a array-equal b
.== bool(a array array nat64, b array array nat64) no-doc noctx
	a array-equal b

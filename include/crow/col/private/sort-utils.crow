no-std
import
	../../bool: bool
	../../compare: ==, !=, <, >=, compare, comparison, equal
	../../exception: unreachable
	../../fun-util: subscript
	../../misc: new, void
	../../number: ==, <=>, +, /
	../../opt: new, opt
	../../ptr: ==, +, -, *, as-const, as-mut, const-ptr, mut-ptr, null, set-deref
	../../test-util: is
	../../tuple: from, pair, to
	../../private/bootstrap: nat64
	../array: array
	../mut-array:
		begin-ptr, cast-immutable, copy-from, end-ptr, mut-array, mut-array-from-begin-end, new
	../list: ==, list, new
	../mut-list:
		begin-ptr, clear, end-ptr, is-empty, move-to-list, mut-list, size, swap, temp-as-mut-array,
		to-mut-list, unsafe-set-size
	./array-low-level: array-from-begin-end, begin-ptr, end-ptr

binary-search-has<a> bool(a array a, value a) compare<a> trusted
	(a.begin-ptr binary-search-exact-ptr-recur a.end-ptr, value) != null

binary-search-key<k, v> v?(a array (k, v), key k) trusted compare<k>
	a.begin-ptr binary-search-key-recur a.end-ptr, key
.binary-search-key-recur<k, v> v?(left (k, v)*, right (k, v)*, key k) trusted compare<k>
	diff = right - left
	if diff < 4
		left linear-search-key-recur right, key
	else
		mid = left + diff / 2
		match key <=> mid->from
		as less
			left binary-search-key-recur mid, key
		as equal
			mid->to,
		as greater
			mid + 1 binary-search-key-recur right, key
.linear-search-key-recur<k, v> v?(left (k, v)*, right (k, v)*, key k) trusted compare<k>
	if left == right
		()
	elif left->from == key
		left->to,
	else
		left + 1 linear-search-key-recur right, key

binary-search-exact-index<a> nat64?(a array a, value a) trusted compare<a>
	ptr = a.begin-ptr binary-search-exact-ptr-recur a.end-ptr, value
	unless ptr == null
		ptr - a.begin-ptr,

binary-search-exact-ptr<a> a mut*?(a a mut[], compare act comparison(a)) unsafe
	a.temp-as-mut-array binary-search-exact-ptr compare

binary-search-exact-ptr<a> a mut*?(a mut-array a, compare act comparison(a)) unsafe
	if x ?= a.cast-immutable binary-search-exact-ptr compare
		x.as-mut,

binary-search-exact-ptr<a> a*?(a array a, value a) compare<a> unsafe
	res = a.begin-ptr binary-search-exact-ptr-recur a.end-ptr, value
	unless res == null
		res,

binary-search-exact-ptr<a> a*?(a array a, compare act comparison(a)) unsafe
	ptr = a.begin-ptr binary-search-compare-recur a.end-ptr, compare
	if ptr == a.end-ptr
		()
	elif compare[*ptr] == equal
		ptr,

binary-search-insert-ptr<a> a mut*(a a mut[], compare act comparison(a)) unsafe
	a.temp-as-mut-array binary-search-insert-ptr compare

###
Returns the pointer to the least value that is compared equal or greater.
Returns `a end-ptr` if all values compare less.
###
binary-search-insert-ptr<a> a mut*(a mut-array a, compare act comparison(a)) unsafe
	a.begin-ptr.as-const binary-search-compare-recur a.end-ptr.as-const, compare as-mut

binary-search-insert-ptr<a> a*(a array a, value a) unsafe compare<a>
	a.begin-ptr binary-search-insert-ptr-recur a.end-ptr, value

test
	a mut-array nat64 = 1, 3, 5, 7
	(a binary-search-insert-ptr x => 0 <=> x) - a.begin-ptr is 0
	(a binary-search-insert-ptr x => 3 <=> x) - a.begin-ptr is 1
	(a binary-search-insert-ptr x => 4 <=> x) - a.begin-ptr is 2
	(a binary-search-insert-ptr x => 5 <=> x) - a.begin-ptr is 2
	(a binary-search-insert-ptr x => 6 <=> x) - a.begin-ptr is 3
	(a binary-search-insert-ptr x => 7 <=> x) - a.begin-ptr is 3
	(a binary-search-insert-ptr x => 8 <=> x) - a.begin-ptr is 4

# Left inclusive, right exclusive
.binary-search-exact-ptr-recur<a> a*(left a*, right a*, value a) unsafe compare<a>
	diff = right - left
	if diff < 4
		left linear-search-exact-ptr-recur right, value
	else
		mid = left + diff / 2
		match value <=> *mid
		as less
			left binary-search-exact-ptr-recur mid, value
		as equal
			mid
		as greater
			mid + 1 binary-search-exact-ptr-recur right, value

.linear-search-exact-ptr-recur<a> a*(left a*, right a*, value a) unsafe compare<a>
	if left == right
		null
	elif *left == value
		left
	else
		left + 1 linear-search-exact-ptr-recur right, value

# Left inclusive, right exclusive
.binary-search-insert-ptr-recur<a> a*(left a*, right a*, value a) unsafe compare<a>
	if left == right
		left
	else
		mid = left + (right - left) / 2
		match value <=> *mid
		as less
			left binary-search-insert-ptr-recur mid, value
		as equal
			mid
		as greater
			mid + 1 binary-search-insert-ptr-recur right, value


# Left inclusive, right exclusive
.binary-search-compare-recur<a> a*(left a*, right a*, compare act comparison(a)) unsafe
	if left == right
		left
	else
		mid = left + (right - left) / 2
		match compare[*mid]
		as less
			left binary-search-compare-recur mid, compare
		as equal
			mid
		as greater
			mid + 1 binary-search-compare-recur right, compare

unique-comparison enum
	less
	greater

assert-comparison-not-equal unique-comparison(a comparison) unsafe
	match a
	as less
		less
	as equal
		unreachable
	as greater
		greater

# 'a' and 'b' must be sorted. Moves contents of 'b' into 'a' and preserves sorting.
merge-no-duplicates<a> void(a a mut[], b a mut[], compare act unique-comparison(a, a)) trusted
	if a.size < b.size
		a swap b
	assert a.size >= b.size
	unless b is-empty
		a-old-size = a size
		a unsafe-set-size a-old-size + b.size
		a-read = a.begin-ptr.as-const + a-old-size - 1
		a-write = a.end-ptr - 1
		a.begin-ptr merge-reverse-recur a-read, a-write, b.begin-ptr.as-const, b.end-ptr.as-const - 1, compare
		b clear

###
Merge right-to-left so we never overwrite anything we still have to read.
In condition: a-read, a-write, b-read are all valid pointers.
###
.merge-reverse-recur<a> void(
	a-begin a mut*,
	a-read a*,
	a-write a mut*,
	b-begin a*,
	b-read a*,
	compare act unique-comparison(a, a),
) unsafe
	match compare[*a-read, *b-read]
	as less
		*a-write := *b-read
		unless b-read == b-begin
			a-begin merge-reverse-recur a-read, a-write - 1, b-begin, b-read - 1, compare
		# Else -- we are done, don't need to touch 'a' any more
	as greater
		*a-write := *a-read
		if a-read == a-begin.as-const
			dest = a-begin mut-array-from-begin-end a-write
			src = b-begin array-from-begin-end b-read + 1
			dest copy-from src
		else
			a-begin merge-reverse-recur a-read - 1, a-write - 1, b-begin, b-read, compare

.test-one void(a nat64[], b nat64[], expected nat64[]) unsafe
	a-mut = a to-mut-list
	b-mut = b to-mut-list
	a-mut merge-no-duplicates b-mut, (x, y) =>
		x <=> y assert-comparison-not-equal
	a-mut.move-to-list is expected

test
	(1, 2, 3) test-one (4, 5, 6), (1, 2, 3, 4, 5, 6)
	(4, 5, 6) test-one (1, 2, 3), (1, 2, 3, 4, 5, 6)
	(1, 3, 5) test-one (2, 4, 6), (1, 2, 3, 4, 5, 6)
	(2, 4, 6) test-one (1, 3, 5), (1, 2, 3, 4, 5, 6)
	(3, 4, 5) test-one (1, 2, 6), (1, 2, 3, 4, 5, 6)

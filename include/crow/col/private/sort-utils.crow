no-std
import
	../../bool: bool, not
	../../compare: <, >=, compare, comparison, equal
	../../exception: unreachable
	../../enum-util: ==
	../../fun-util: subscript
	../../json: to
	../../misc: loop-break, new, void
	../../number: ==, <=>, +, /
	../../option: force, is-empty, new, option
	../../pointer: ==, <=>, +, -, *, as-const, set-deref
	../../range: ..
	../../test-util: is
	../../tuple: a, b, new
	../../private/bootstrap: nat64
	../array:
		==, <=>, +, -, array, array-iterator, as-array, begin, end, iterate, next, next-index, slice
	../collection: .., end, for-break
	../mut-array:
		+, as-mut-array, begin, mut-array, mut-array-iterator, new, next-index, set-subscript,
		temp-as-array
	../list: ==, list, new
	../mut-list:
		+, begin, begin-pointer, clear, end-pointer, is-empty, move-to, mut-list, mut-list-iterator,
		size, swap, temp-as-array, to, unsafe-set-size

binary-search-has[t] bool(a t array, value t) t compare
	!(a binary-search-exact value is-empty)

binary-search-key[k, v] v?(a (k, v) array, key k) k compare
	left mut = a begin
	right mut = a end
	loop
		diff = right - left
		if diff < 4
			break for k, v : left slice right
				if k == key
					break v
		else
			mid = left + diff / 2
			next-k, next-v = mid.next!.a
			match key <=> next-k
			as less
				right := mid
				continue
			as equal
				break next-v,
			as greater
				left := mid + 1
				continue

binary-search-exact[t] t mut-list-iterator?(a t mut[], compare comparison mut(elem t))
	if iter ?= trusted a.temp-as-array binary-search-exact compare
		a.begin + iter.next-index,

###
Assumes the array is sorted.
Returns an iterator whose 'next' is the value, or nothing if the array does not contain the value.
###
binary-search-exact[t] t array-iterator?(a t array, value t) t compare
	left mut = a begin
	right mut = a end
	loop
		diff = right - left
		if diff < 4
			break left linear-search-exact right, value
		else
			mid = left + diff / 2
			match value <=> mid.next!.a
			as less
				right := mid
				continue
			as equal
				break mid,
			as greater
				left := mid + 1
				continue
-linear-search-exact[t] t array-iterator?(
	left t array-iterator,
	right t array-iterator,
	value t,
) t equal
	cur mut = left
	loop
		if cur < right
			pair = cur.next!
			if pair.a == value
				break cur,
			else
				cur := pair b
				continue
		else
			break

binary-search-exact[t] t array-iterator?(a t array, compare comparison mut(elem t))
	iter = a binary-search-insert compare
	if pair ?= iter next
		if compare[pair.a] == equal
			iter,

###
Returns the pointer to the least value that is compared equal or greater.
Returns `a end-pointer` if all values compare less.
###
binary-search-insert[t] t mut-list-iterator(a t mut[], compare comparison mut(elem t))
	a.begin + (trusted a.temp-as-array binary-search-insert compare).next-index

binary-search-insert[t] t mut-array-iterator(a t mut-array, compare comparison mut(elem t))
	a.begin + (trusted a.temp-as-array binary-search-insert compare).next-index

binary-search-insert[t] t array-iterator(a t array, value t) t compare
	left mut = a begin
	right mut = a end
	loop
		if left.next-index == right.next-index
			break left
		else
			mid = left + (right - left) / 2
			match value <=> mid.next!.a
			as less
				right := mid
				continue
			as equal
				break mid
			as greater
				left := mid + 1
				continue

test
	a nat64 mut-array = 1, 3, 5, 7
	(a binary-search-insert x => 0::nat64 <=> x).next-index is 0
	(a binary-search-insert x => 3::nat64 <=> x).next-index is 1
	(a binary-search-insert x => 4::nat64 <=> x).next-index is 2
	(a binary-search-insert x => 5::nat64 <=> x).next-index is 2
	(a binary-search-insert x => 6::nat64 <=> x).next-index is 3
	(a binary-search-insert x => 7::nat64 <=> x).next-index is 3
	(a binary-search-insert x => 8::nat64 <=> x).next-index is 4

# Returns an iterator that the element should be inserted to the right of.
-binary-search-insert[t] t array-iterator(a t array, compare comparison mut(elem t))
	left mut = a begin
	right mut = a end
	loop
		if left.next-index == right.next-index
			break left
		else
			mid = left + (right - left) / 2
			match compare[mid.next!.a]
			as less
				right := mid
				continue
			as equal
				break mid
			as greater
				left := mid + 1
				continue

unique-comparison enum(less, greater)

assert-comparison-not-equal unique-comparison(a comparison)
	match a
	as less
		less
	as equal
		unreachable
	as greater
		greater

# 'a' and 'b' must be sorted. Moves contents of 'b' into 'a' and preserves sorting.
merge-no-duplicates[t] void(a t mut[], b t mut[], compare unique-comparison mut(x t, y t))
	if a.size < b.size
		a swap b
	assert a.size >= b.size
	guard !b.is-empty
	trusted
		a-old-size = a size
		a unsafe-set-size a-old-size + b.size
		a-read mut = a.begin-pointer.as-const + a-old-size - 1
		a-write mut = a.end-pointer - 1
		b-begin = b.begin-pointer as-const
		b-read mut = b.end-pointer.as-const - 1
		# Merge right-to-left so we never overwrite anything we still have to read.
		# Invariant: a-read, a-write, b-read are all valid pointers.
		loop
			match compare[*a-read, *b-read]
			as less
				*a-write := *b-read
				if b-read == b-begin
					break
				else
					a-write -:= 1
					b-read -:= 1
					continue
			as greater
				*a-write := *a-read
				if a-read == a.begin-pointer.as-const
					(a.begin-pointer .. a-write).as-mut-array[0 .. end] :=
						(b-begin .. b-read + 1).as-array
					break
				else
					a-read -:= 1
					a-write -:= 1
					continue
		b clear

-test-one void(a nat64[], b nat64[], expected nat64[])
	a-mut nat64 mut[] = a to
	b-mut nat64 mut[] = b to
	a-mut merge-no-duplicates b-mut, (x, y) =>
		x <=> y assert-comparison-not-equal
	a-mut.move-to::nat64[] is expected

test
	(1, 2, 3) test-one (4, 5, 6), (1, 2, 3, 4, 5, 6)
	(4, 5, 6) test-one (1, 2, 3), (1, 2, 3, 4, 5, 6)
	(1, 3, 5) test-one (2, 4, 6), (1, 2, 3, 4, 5, 6)
	(2, 4, 6) test-one (1, 3, 5), (1, 2, 3, 4, 5, 6)
	(3, 4, 5) test-one (1, 2, 6), (1, 2, 3, 4, 5, 6)

no-std
import
	../../bool: !, bool
	../../compare: ==, !=, <, >=, compare, comparison, equal, less, greater
	../../exception: assert, unreachable
	../../fun: subscript
	../../misc: void
	../../opt: none, opt, some
	../../ptr: ==, +, -, null, ptr, set-subscript, subscript
	../../test: is
	../../private/bootstrap: nat64
	../../private/number-low-level: ==, <=>, unsafe-div, wrap-add
	../arr: ==, arr, begin-ptr, end-ptr
	../mut-arr: begin-ptr, cast-immutable, copy-from!, end-ptr, mut-arr, mut-arr-from-begin-end
	../mut-list: arr, begin-ptr, empty!, end-ptr, is-empty, mut-list, size, swap!, temp-as-mut-arr, unsafe-set-size!

binary-search-has<a> bool(a a[], value a) compare<a> trusted
	(a.begin-ptr binary-search-exact-ptr-recur a.end-ptr, value) != null

binary-search-value<a> a?(a a[], compare act comparison(a)) trusted
	if ptr ?= a binary-search-exact-ptr compare
		ptr[] some

binary-search-exact-index<a> nat64?(a a[], value a) trusted compare<a>
	ptr = a.begin-ptr binary-search-exact-ptr-recur a.end-ptr, value
	if ptr == null
		none
	else
		ptr - a.begin-ptr some

binary-search-exact-ptr<a> ptr<a>?(a mut-list a, compare act comparison(a)) unsafe
	a.temp-as-mut-arr binary-search-exact-ptr compare

binary-search-exact-ptr<a> ptr<a>?(a mut-arr a, compare act comparison(a)) unsafe
	a.cast-immutable binary-search-exact-ptr compare

binary-search-exact-ptr<a> ptr<a>?(a a[], value a) compare<a> unsafe
	res = a.begin-ptr binary-search-exact-ptr-recur a.end-ptr, value
	if res != null
		res some

binary-search-exact-ptr<a> ptr<a>?(a a[], compare act comparison(a)) unsafe
	ptr = a.begin-ptr binary-search-compare-recur a.end-ptr, compare
	if ptr == a.end-ptr
		none
	elif compare[ptr[]] == equal
		ptr some

binary-search-insert-ptr<a> ptr a(a mut-list a, compare act comparison(a)) unsafe
	a.temp-as-mut-arr binary-search-insert-ptr compare

###
Returns the pointer to the least value that is compared equal or greater.
Returns `a end-ptr` if all values compare less.
###
binary-search-insert-ptr<a> ptr a(a mut-arr a, compare act comparison(a)) unsafe
	a.begin-ptr binary-search-compare-recur a.end-ptr, compare

binary-search-insert-ptr<a> ptr a(a a[], value a) unsafe compare<a>
	a.begin-ptr binary-search-insert-ptr-recur a.end-ptr, value

test
	a = mut-arr: [1, 3, 5, 7]
	(a binary-search-insert-ptr x => 0 <=> x) - a.begin-ptr is 0
	(a binary-search-insert-ptr x => 3 <=> x) - a.begin-ptr is 1
	(a binary-search-insert-ptr x => 4 <=> x) - a.begin-ptr is 2
	(a binary-search-insert-ptr x => 5 <=> x) - a.begin-ptr is 2
	(a binary-search-insert-ptr x => 6 <=> x) - a.begin-ptr is 3
	(a binary-search-insert-ptr x => 7 <=> x) - a.begin-ptr is 3
	(a binary-search-insert-ptr x => 8 <=> x) - a.begin-ptr is 4

# Left inclusive, right exclusive
.binary-search-exact-ptr-recur<a> ptr a(left ptr a, right ptr a, value a) unsafe compare<a>
	diff = right - left
	if diff < 4
		left linear-search-exact-ptr-recur right, value
	else
		mid = left + ((right - left) unsafe-div 2)
		match value <=> mid[]
		as less
			left binary-search-exact-ptr-recur mid, value
		as equal
			mid
		as greater
			mid + 1 binary-search-exact-ptr-recur right, value

.linear-search-exact-ptr-recur<a> ptr a(left ptr a, right ptr a, value a) unsafe compare<a>
	if left == right
		null
	elif left[] == value
		left
	else
		left + 1 linear-search-exact-ptr-recur right, value

# Left inclusive, right exclusive
.binary-search-insert-ptr-recur<a> ptr a(left ptr a, right ptr a, value a) unsafe compare<a>
	if left == right
		left
	else
		mid = left + ((right - left) unsafe-div 2)
		match value <=> mid[]
		as less
			left binary-search-insert-ptr-recur mid, value
		as equal
			mid
		as greater
			mid + 1 binary-search-insert-ptr-recur right, value


# Left inclusive, right exclusive
.binary-search-compare-recur<a> ptr a(left ptr a, right ptr a, compare act comparison(a)) unsafe
	if left == right
		left
	else
		mid = left + ((right - left) unsafe-div 2)
		match compare[mid[]]
		as less
			left binary-search-compare-recur mid, compare
		as equal
			mid
		as greater
			mid + 1 binary-search-compare-recur right, compare

unique-comparison union
	less
	greater

assert-comparison-not-equal unique-comparison(a comparison)
	match a
	as less
		less
	as equal
		unreachable
	as greater
		greater

# 'a' and 'b' must be sorted. Moves contents of 'b' into 'a' and preserves sorting.
merge-no-duplicates!<a> void(a mut-list a, b mut-list a, compare act unique-comparison(a, a)) trusted
	if a.size < b.size
		a swap! b
	assert: a.size >= b.size
	if !b.is-empty
		a-old-size = a size
		a unsafe-set-size!: a-old-size wrap-add b.size
		a-read = a.begin-ptr + a-old-size - 1
		a-write = a.end-ptr - 1
		a.begin-ptr merge-reverse-recur! a-read, a-write, b.begin-ptr, b.end-ptr - 1, compare
		b empty!

###
Merge right-to-left so we never overwrite anything we still have to read.
In condition: a-read, a-write, b-read are all valid pointers.
###
.merge-reverse-recur!<a> void
	a-begin ptr a
	a-read ptr a
	a-write ptr a
	b-begin ptr a
	b-read ptr a
	compare act unique-comparison(a, a)
spec
	unsafe
body
	match compare[a-read[], b-read[]]
	as less
		a-write[] := b-read[]
		if b-read != b-begin
			a-begin merge-reverse-recur! a-read, a-write - 1, b-begin, b-read - 1, compare
		# Else -- we are done, don't need to touch 'a' any more
	as greater
		a-write[] := a-read[]
		if a-read == a-begin
			dest = a-begin mut-arr-from-begin-end a-write
			src = b-begin mut-arr-from-begin-end b-read + 1
			dest copy-from! src
		else
			a-begin merge-reverse-recur! a-read - 1, a-write - 1, b-begin, b-read, compare

.test-one void(a nat64[], b nat64[], expected nat64[])
	a-mut = mut-list: a
	b-mut = mut-list: b
	a-mut merge-no-duplicates! b-mut, (x, y) =>
		x <=> y assert-comparison-not-equal
	a-mut.arr is expected

test
	[1, 2, 3] test-one [4, 5, 6], [1, 2, 3, 4, 5, 6]
	[4, 5, 6] test-one [1, 2, 3], [1, 2, 3, 4, 5, 6]
	[1, 3, 5] test-one [2, 4, 6], [1, 2, 3, 4, 5, 6]
	[2, 4, 6] test-one [1, 3, 5], [1, 2, 3, 4, 5, 6]
	[3, 4, 5] test-one [1, 2, 6], [1, 2, 3, 4, 5, 6]

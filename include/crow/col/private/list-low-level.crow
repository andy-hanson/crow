no-std
import
	../../bool: ||, bool, false
	../../fun-util: subscript
	../../misc: new, void
	../../pointer: reference-equal
	../../private/bootstrap: array, new
	./array-low-level: ~=, ~~=, array-builder, build, iterate, array-reference-equal
	./build: build-options
export
	../../private/bootstrap:
		array2d, array3d, arrays, branch, down, l1, l2, l3, list, node, nodes, leaf, left,
		right, root, total-size

list-reference-equal[t] bool(a t[], b t[]) unsafe
	match a.root node
	as leaf la
		match b.root node
		as leaf lb
			la array-reference-equal lb
		as branch _
			false
	as branch ba
		match b.root node
		as leaf _
			false
		as branch bb
			ba reference-equal bb

+list-builder[t] record mut
	-inner t array-builder
+build[t] t[](a build-options, f void mut(out t list-builder))
	inner t array = a build out => f[out,]
	(inner.leaf,),
+~=[t] void(a t list-builder, value t)
	a.inner ~= value
+~~=[t] void(a t list-builder, values t[])
	broke = values iterate-chunks chunk =>
		a.inner ~~= chunk
		false
	forbid broke

iterate-chunks[t] bool(a t[], f bool mut(chunk t array))
	a.root iterate-l1 f

-iterate-l1[t] bool(a t l1, f bool mut(chunk t array))
	match a node
	as leaf l
		f[l]
	as branch b
		f[b left] || b.down iterate-l2 f || f[b right]

-iterate-l2[t] bool(a t l2, f bool mut(chunk t array))
	match a node
	as leaf l
		l.arrays iterate f
	as branch b
		b.left.arrays iterate f || b.down iterate-l3 f || b.right.arrays iterate f

-iterate-l3[t] bool(a t l3, f bool mut(chunk t array))
	a.nodes.arrays iterate nodes =>
		nodes.arrays iterate f

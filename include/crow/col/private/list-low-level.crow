no-std
import
	../../bool: ||, bool, false
	../../fun-util: subscript
	../../misc: void
	../../number: nat64
	../../pointer: reference-equal
	../../private/bootstrap: array
	./array-low-level: ~=, ~~=, array-builder, build, iterate, array-reference-equal
	./build: build-options

###
Immutable list type.

This type is designed so concatenation (`~` and `~~`) will be efficient.
It also is efficient to split from an iterator.

It does not support efficient access by an index, so iterators should be used instead.
###
!list[t] record by-val
	root t l1

l1[t] record by-val
	node (t array, t l2) node

l2[t] record by-val
	node (t array2d, t l3) node

l3[t] record by-val
	nodes t array3d

node[leaf, lower] union
	leaf leaf
	branch (leaf, lower) branch

array2d[t] record by-val
	total-size nat64
	arrays t array array

array3d[t] record by-val
	total-size nat64
	arrays t array2d array

###
'left', 'down', and 'right' should all be non-empty.
(Else, this layer should be a leaf. See `branch-or-leaf`.)
###
branch[leaf, lower] record by-ref
	left leaf
	down lower
	right leaf

list-reference-equal[t] bool(a t[], b t[]) unsafe
	match a.root node
	as leaf la
		match b.root node
		as leaf lb
			la array-reference-equal lb
		as branch _
			false
	as branch ba
		match b.root node
		as leaf _
			false
		as branch bb
			ba reference-equal bb

!list-builder[t] record mut
	.inner t array-builder
!build[t] t[](a build-options, f act void(t list-builder))
	inner t array = a build out => f[(out,)]
	(inner.leaf,),
!~=[t] void(a t list-builder, value t)
	a.inner ~= value
!~~=[t] void(a t list-builder, values t[])
	broke = values iterate-chunks chunk =>
		a.inner ~~= chunk
		false
	forbid broke

iterate-chunks[t] bool(a t[], f act bool(t array))
	a.root iterate-l1 f

.iterate-l1[t] bool(a t l1, f act bool(t array))
	match a node
	as leaf l
		f[l]
	as branch b
		f[b left] || b.down iterate-l2 f || f[b right]

.iterate-l2[t] bool(a t l2, f act bool(t array))
	match a node
	as leaf l
		l.arrays iterate f
	as branch b
		b.left.arrays iterate f || b.down iterate-l3 f || b.right.arrays iterate f

.iterate-l3[t] bool(a t l3, f act bool(t array))
	a.nodes.arrays iterate nodes =>
		nodes.arrays iterate f

no-std
import
	../../bool: &&, bool, false, true
	../../compare: >
	../../fun-util: subscript
	../../misc: new, void
	../../number: ==, <=>, +, -, *, nat64, round-up-to-power-of-two
	../../pointer:
		==, <=>, +, -, *, as-const, as-mut, const-pointer, mem-copy, mut-pointer, null,
		pointer-cast, set-subscript, size-of
	../../range: .., low, range, size
	../../private/alloc: allocate
	../../private/bootstrap: inner, mut-array, new, pointer, size
	../../private/number-low-level: max-value
	./build: build-options, size-hint
export
	../../private/bootstrap: array

array-reference-equal[t] bool(a t array, b t array) bare, unsafe
	a.pointer == b.pointer && a.size == b.size

+begin-pointer[t] t*(a t array) bare, unsafe
	a.pointer

# Pointer to the end of an array.
+end-pointer[t] t*(a t array) bare, unsafe
	a.pointer + a.size

###
Arr or the range from begin to end.
`begin` is inclusive and `end` is exclusive.
UB if begin > end.
###
+as-array[t] t array(pointers t* range) bare, unsafe
	pointers.size, pointers.low
+as-array[t] t array(pointers t mut* range) bare, unsafe
	pointers.size, pointers.low.as-const

+pointers[t] t* range(a t array) bare, unsafe
	a.begin-pointer .. a.end-pointer

array-cast[out, in] out array(a in array) bare, unsafe
	assert size-of@out == size-of@in
	a.size, a.begin-pointer.pointer-cast

# Create an array from a range of pointers.
+subscript[t] t array(a t*, r nat64 range) bare, unsafe
	r.size, a + r.low

###
Equivalent to calling `f[a[0]]`, `f[a[1]]`, etc.

Calls `f` for each element in `a`.
###
+iterate[t] bool(a t array, f bool mut(elem t))
	trusted if size-of@t == 0
		i mut nat64 = 0
		loop
			if i == a.size
				break false
			elif f[*a.begin-pointer]
				break true
			else
				i +:= 1
				continue
	else
		cur mut = a begin-pointer
		end = a end-pointer
		loop
			if cur == end
				break false
			elif f[*cur]
				break true
			else
				cur +:= 1
				continue

+array-builder[t] record mut
	-buffer mut t mut-array
	-cur-size mut nat64
+build[t] t array(a build-options, f void mut(out t array-builder)) trusted
	builder t array-builder = a.size-hint.zeroed-mut-array, 0
	f[builder]
	res t array = builder.cur-size, builder.buffer.inner.begin-pointer
	builder.buffer := (0, null),
	builder.cur-size := max-value
	res

+size[t] nat64(a t array-builder)
	forbid a.cur-size == max-value
	a cur-size

+~=[t] void(a t array-builder, value t) trusted
	forbid a.cur-size == max-value
	capacity = a.buffer size
	if a.cur-size == capacity
		new-capacity nat64 = capacity == 0 ? 4 : capacity * 2
		new-buffer t mut-array = new-capacity zeroed-mut-array
		new-buffer.begin-pointer mem-copy a.buffer.begin-pointer.as-const, capacity
		a.buffer := new-buffer
	a.buffer.begin-pointer[a.cur-size] := value
	a.cur-size +:= 1

+~~=[t] void(a t array-builder, values t array) trusted
	forbid a.cur-size == max-value
	capacity = a.buffer size
	if a.cur-size + values.size > capacity
		new-size = a.cur-size + values.size
		new-capacity = new-size round-up-to-power-of-two
		new-buffer t mut-array = new-capacity zeroed-mut-array
		new-buffer.begin-pointer mem-copy a.buffer.begin-pointer.as-const, a.cur-size
		a.buffer := new-buffer
	a.buffer.begin-pointer + a.cur-size mem-copy values.begin-pointer, values.size
	a.cur-size +:= values size

-zeroed-mut-array[t] t mut-array(size nat64) unsafe
	(size, size.allocate.as-const),
-size[t] nat64(a t mut-array)
	a.inner size
-begin-pointer[t] t mut*(a t mut-array) unsafe
	a.inner.begin-pointer as-mut

no-std
import
	../../bool: ==, false, true
	../../hash: hash-mix
	../../json: json
	../../misc: void
	../../number: ==, <=>, nat64
	../../option: ==, new
	../../string: ==, literal, string, to-string
	../../test-util: is
	../../tuple: new
	../dict: ~, ~~, dbg, dict, is-empty, new, size, subscript

dummy-dict-tests nat64()
	0

verify void(a string[nat64], expected string)
	a.dbg is expected

test
	l0 string[nat64] = ()
	l0.is-empty is true
	l0.size is 0
	l0 verify "[]"
	l0[0] is ()

	l1 = l0 ~ (5, "5")
	l1.is-empty is false
	l1.size is 1
	l1 verify "[5 -> 5]"

	l2 = l1 ~~ ((1, "1"), (3, "3"), (9, "9"))
	l2 verify "[5 -> 5, 1 -> 1, 3 -> 3, 9 -> 9]"

	l3 = l2 ~ (13, "13")
	l3 verify "[5 -> 5, 1 -> 1, 3 -> 3, 9 -> 9, 13 -> 13]"
	#l3 verify "1[1 -> 1, 9 -> 9] 3[3 -> 3] 5[13 -> 13, 5 -> 5]"

	#l3[3] is ("3",)
	#l3[4] is ()

	#l3 - 3 verify "[1 -> 1, 9 -> 9, 13 -> 13, 5 -> 5]"

	# TODO: lots more tests. Be sure to test removal can remove inner nodes.

no-std
import
	../bool: &&, ||, ==, bool, true
	../fun-util: subscript
	../json: to
	../misc: void
	../number: ==, +, nat64
	../option: force, is-empty, new, option
	../test-util: is
	../tuple: a, b, new
	./array: ==, ~=, array, array-builder, build, is-empty, iterate, new, size, subscript
	./collection: .., build-options, end, for-loop, subscript
	./stack: ~, is-empty, iterate, new, size, stack, to

###
Immutable queue.

Supports efficient removal from the left and insertion to the right.
###
+queue[t] record
	-left t[]
	-right t stack

# Empty queue.
+new[t] t queue()
	(), ()

+to[t] t queue(a t[])
	a, ()

###
Copies queue elements to an array.

This is O(n).
###
+to[t] t[](a t queue)
	for x : a
		x

# `true` iff `a.size == 0`.
+is-empty[t] bool(a t queue)
	a.left.is-empty && a.right.is-empty

# Number of elements in the queue.
+size[t] nat64(a t queue)
	a.left.size + a.right.size

# Adds a new element on the right.
+~[t] t queue(a t queue, value t)
	a.left, a.right ~ value

###
Removes and returns an element from the left.
Returns an empty option iff `a` is empty.
###
+dequeue[t] (t, t queue)?(a t queue)
	if a.left is-empty
		unless a.right is-empty
			(a.right.to, ()) dequeue
	else
		(a.left[0], (a.left[1 .. end], a.right)),

region iteration

+iterate[t] bool(a t queue, f bool mut(elem t))
	a.left iterate f || a.right iterate f

region build

+queue-builder[t] record mut
	-inner t array-builder
+build[t] t queue(a build-options, f void mut(out t queue-builder))
	a build (out => f[out,]) to
+~=[t] void(a t queue-builder, value t)
	a.inner ~= value

test
	a nat64 queue = ()
	assert a is-empty
	a.to is ()
	a.dequeue.is-empty is true

	b = a ~ 1
	b.to::nat64[] is (1,)
	bd = b dequeue!
	bd.a is 1
	assert bd.b is-empty

	c = b ~ 2
	c.to::nat64[] is (1, 2)
	cd = c dequeue!
	cd.a is 1
	cdr = cd b

	cdr.to::nat64[] is (2,)
	cdd = cdr dequeue!
	cdd.a is 2
	assert cdd.b is-empty

	d = c ~ 3
	d.to::nat64[] is (1, 2, 3)

	(for x : d; x + 10)::(nat64 queue).to::nat64[] is (11, 12, 13)

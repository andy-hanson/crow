no-std
import
	string: memcpy
	../bool: &&, bool, false, true
	../compare: !=, <, <=, equal
	../fun-util: subscript
	../misc: new, void
	../number: ==, <=>, +, -, *, /, %, nat64
	../option: new, option
	../pointer:
		==, <=>, +, *, any-const-pointer, any-mut-pointer, as-const, as-mut, mut-pointer,
		pointer-cast, set-subscript, size-of, subscript
	../private/alloc: alloc-uninitialized, set-zero-range
	../private/bootstrap: inner
	../range: .., high, low, range, size
	../tuple: new
	./array:
		~=, ~~=, +, array, array-builder, as-array, begin, begin-pointer, build, iterate, new, size,
		slice, subscript
	./private/array-low-level: array-reference-equal
	./collection: build-options, for-loop, range-relative-to-end, subscript
export
	../private/bootstrap: mut-array

# True if they are identical.
+==[t] bool(a t mut-array, b t mut-array) bare
	trusted a.inner array-reference-equal b.inner

empty-mut-array[t] t mut-array() bare
	# TODO: should not need type annotation
	inner t array = ()
	inner,

###
Creates a new `mut-array` with the given elements.
###
+new[t] t mut-array(...a t array)
	a to

# Get a `mut-array` from a pointer and range of indices.
+subscript[t] t mut-array(a t mut*, indices nat64 range) bare, unsafe
	a.as-const[indices],

###
Copies the array elements to a new `mut-array`.

This is O(n).
###
+to[t] t mut-array(a t array)
	for x : a
		x

###
Copies the elements to an immutable array.

This is O(n).

There is no `move-to` for `mut-array` since there might be slices that still refer to its elements.
###
+to[t] t array(a t mut-array)
	a.copy.inner

# Creates a `mut-array` from a range of pointers.
+as-mut-array[t] t mut-array(a t mut* range) bare, unsafe
	assert a.low <= a.high
	(a.low .. a.high).as-array,

+pointers[t] t mut* range(a t mut-array) bare, unsafe
	a.begin-pointer .. a.end-pointer

# `true` iff `a.size == 0`.
+is-empty[t] bool(a t mut-array) bare
	a.size == 0

# Pointer to the beginning of the `mut-array`.
+begin-pointer[t] t mut*(a t mut-array) bare, unsafe
	a.inner.begin-pointer as-mut

###
Pointer to the end of the `mut-array`.
This is one past the last valid pointer.
###
+end-pointer[t] t mut*(a t mut-array) bare, unsafe
	a.begin-pointer + a.size

###
Copies the elements to a new `mut-array`.

This is O(n).
###
+copy[t] t mut-array(a t mut-array)
	for x : a; x

###
Copies elements from `source` to `dest`.
Throws if `dest` and `source` are not the same size.
###
set-subscript[t] void(dest t mut-array, range nat64 range, source t array)
	assert range.size == source.size
	dest[range] copy-from source
set-subscript[t] void(dest t mut-array, range nat64 range, source t mut-array)
	dest[range] := trusted source.temp-as-array
set-subscript[t] void(dest t mut-array, range range-relative-to-end, source t array)
	dest[range] copy-from source
set-subscript[t] void(dest t mut-array, range range-relative-to-end, source t mut-array)
	dest[range] := trusted source.temp-as-array

-copy-from[t] void(dest t mut-array, source t array)
	assert dest.size == source.size
	trusted
		dest-ptr any-mut-pointer = dest.begin-pointer pointer-cast
		src-ptr any-const-pointer = source.begin-pointer pointer-cast
		_ = dest-ptr memcpy src-ptr, dest.size * size-of@t

###
Allocates a `mut-array` without initializing any of its elements.
If you just want to create a `mut-array`, use a `for` loop instead.

Since `mut-array` is garbage-collected, this will cause problems unless either:
* You write to all the elements before the current task ends.
* You don't keep a reference to the `mut-array` or to any uninitialized slice.

Keep exceptions in mind: Don't store a reference to the result until it's initialized,
since initialization code might throw an exception.

See `zeroed-mut-array` for a somewhat safer alternative.
###
uninitialized-mut-array[t] t mut-array(size nat64) unsafe
	pointer t mut* = size alloc-uninitialized
	pointer[0 .. size]

###
This is like `uninitialized-mut-array` but fills memory with zeroes.

Zeroed memory is GC-safe, since the GC ignores null pointers,
but is still not safe to expose to readers (who may try to dereference the null pointers).

This is used by collections like `mut[]` that need some excess capacity that will be GC-safe.
###
zeroed-mut-array[t] t mut-array(size nat64) unsafe
	res t mut-array = size uninitialized-mut-array
	res set-zero-elements
	res

###
Sets every element to `zeroed`. See comment on `zeroed-mut-array` for why this is useful.
###
set-zero-elements[t] void(a t mut-array) bare, unsafe
	a.begin-pointer set-zero-range a.size

+in[t] bool(value t, a t mut-array) bare, t equal
	trusted
		cur mut = a.begin-pointer as-const
		end = a.end-pointer as-const
		loop
			if cur == end
				break false
			elif *cur == value
				break true
			else
				cur +:= 1
				continue

###
Unsafe cast a mut-array to an array.
It must never be written to again.
###
+cast-immutable[t] t array(a t mut-array) bare, unsafe
	a inner

###
Unsafe cast to immutable array.

This is O(1).

Unsafe because an array is expected to be fully immutable (meaning: no mutable references exist),
so this value must only be used temporarily.
###
+temp-as-array[t] t array(a t mut-array) bare, unsafe
	a inner

###
Casts elements to a different type.
If the element type is different, adjusts the size so that the number of bytes is the same.
###
cast-mut-array[out, in] out mut-array(a in mut-array) bare, unsafe
	assert size-of@in != 0 && size-of@out != 0
	size-bytes = a.size * size-of@in
	assert size-bytes % size-of@out == 0
	size-out = size-bytes / size-of@out
	# TODO: shouldn't need parentheses
	(a.begin-pointer.pointer-cast::out mut*)[0 .. size-out]

region spec impls (see collection.crow)

# Number of elements.
+size[t] nat64(a t mut-array) bare
	a.inner size

# Calls 'f' on each element in the mut-array.
+iterate[t] bool(a t mut-array, f act bool(t))
	trusted a.temp-as-array iterate f

subregion iterator

+mut-array-iterator[t] record by-val, mut
	collection t mut-array
	next-index nat64

+begin[t] t mut-array-iterator(a t mut-array) bare
	a, 0

+end[t] t mut-array-iterator(a t mut-array) bare
	a, a.size

+ +[t] t mut-array-iterator(a t mut-array-iterator, b nat64) bare
	new-index = a.next-index + b
	assert new-index <= a.collection.size
	a.collection, new-index

+-[t] t mut-array-iterator(a t mut-array-iterator, b nat64) bare
	a.collection, a.next-index - b

+-[t] nat64(a t mut-array-iterator, b t mut-array-iterator) bare
	assert a.collection == b.collection
	a.next-index - b.next-index

+prev[t] (t mut-array-iterator, t)?(a t mut-array-iterator) bare
	unless a.next-index == 0
		assert a.next-index <= a.collection.size
		((a.collection, a.next-index - 1), trusted a.collection.begin-pointer[a.next-index - 1]),

+next[t] (t, t mut-array-iterator)?(a t mut-array-iterator) bare
	if a.next-index < a.collection.size
		(trusted a.collection.begin-pointer[a next-index], (a.collection, a.next-index + 1)),

+set-prev[t] void(a t mut-array-iterator, value t) bare
	assert a.next-index <= a.collection.size
	trusted
		a.collection.begin-pointer[a.next-index - 1] := value

+set-next[t] void(a t mut-array-iterator, value t) bare
	trusted
		assert a.next-index < a.collection.size
		a.collection.begin-pointer[a next-index] := value

+slice[t] t mut-array(begin t mut-array-iterator, end t mut-array-iterator) bare
	assert begin.collection == end.collection
	inner-iter = begin.collection.inner begin
	(inner-iter + begin.next-index slice inner-iter + end.next-index),

subregion builder

+mut-array-builder[t] record mut
	-inner t array-builder
+build[t] t mut-array(a build-options, f act void(t mut-array-builder))
	(a build out => f[out,])::(t array),
+~=[t] void(a t mut-array-builder, value t)
	a.inner ~= value
+~~=[t] void(a t mut-array-builder, values t array)
	a.inner ~~= values
+size[t] nat64(a t mut-array-builder)
	a.inner size

no-std
import
	../bool: &&, bool, not
	../compare: !=, <, <=, >
	../fun-util: subscript
	../js: as-js, call, call-property, cast, eval, js-cast, set-subscript, subscript
	../misc: new, void
	../number: ==, <=>, +, -, float64, nat64, to
	../option: force, new, option
	../pointer:
		+, -, as-const, gc-safe-value, mem-clear, mem-copy, mem-move, mut-pointer, reference-equal,
		set-deref, set-subscript
	../private/bootstrap: todo
	../private/number-low-level: round-up-to-power-of-two
	../range: .., iterate
	../tuple: new
	./array: array, iterate, size, subscript
	./collection:
		.., -, build-options, end, for-loop, index-too-big, iterate, iterator-not-comparable,
		size-hint, slice-out-of-order, subscript
	./mut-slice:
		begin-pointer, cast-immutable, cast-mutable, clear-memory, end-pointer, gc-safe-mut-slice,
		mut-slice, new, set-subscript, size, subscript, temp-as-array, to

###
Mutable array type that can change in size.
This is represented as a reference to a `mut-slice` with extra capacity.
Appending (or removing) elements to the end is amortized O(1),
but appending (or removing) from the beginning is always O(N).
###
+mut-array[t] builtin mut

-as-mut-array-impl[t] t mut-array-impl(a t mut[]) builtin, bare, native extern
-as-mut-array[t] t mut[](a t mut-array-impl) builtin, bare, native extern

-mut-array-impl[t] record mut
	# backing.size is the capacity
	# For the GC's sake, unused parts of backing are filled with 'gc-safe-value'
	backing mut t mut-slice
	# Not used for JS
	size mut nat64

-backing[t] t mut-slice(a t mut[]) bare, unsafe, native extern
	a.as-mut-array-impl backing
-set-backing[t] void(a t mut[], value t mut-slice) bare, unsafe, native extern
	a.as-mut-array-impl.backing := value

+size[t] nat64(a t mut[]) bare
	trusted if extern native
		a.as-mut-array-impl size
	elif extern js
		a.as-js["length"].cast::float64 to
	else
		todo
-set-size[t] void(a t mut[], size nat64) bare, native extern
	a.as-mut-array-impl.size := size

+subscript[t] t(a t mut[], index nat64) bare
	a check-index index
	trusted if extern native
		a.backing[index]
	elif extern js
		a.as-js[index] cast
	else
		todo
+set-subscript[t] void(a t mut[], index nat64, value t) bare
	a check-index index
	trusted if extern native
		a.backing[index] := value
	elif extern js
		a.as-js[index] := value
	else
		todo

# True if they are identical.
+==[t] bool(a t mut[], b t mut[]) bare
	# TODO: this should be generated for all mut by-ref records
	trusted a reference-equal b

###
Pointer to the first element.
Equivalent to `a.temp-as-mut-slice.begin-pointer`.
###
+begin-pointer[t] t mut*(a t mut[]) bare, unsafe, native extern
	a.temp-as-mut-slice begin-pointer

###
Pointer to one past the last element.
Equivalent to `a.temp-as-mut-slice.end-pointer`.
###
+end-pointer[t] t mut*(a t mut[]) bare, unsafe, native extern
	a.temp-as-mut-slice end-pointer

is-at-capacity[t] bool(a t mut[]) bare, unsafe, native extern
	a.capacity == a.size

capacity[t] nat64(a t mut[]) bare, unsafe, native extern
	a.backing size

###
Creates a new list with the given elements.
###
+new[t] t mut[](...a t[]) trusted
	# A spread argument is always a new array
	if extern native
		(a.cast-mutable, a.size) as-mut-array
	elif extern js
		a js-cast
	else
		todo

+to[t] t mut[](a t[])
	res t mut[] = ()
	res ~~= a
	res

+clear[t] void(a t mut[]) bare, trusted
	a reduce-size-to 0

+reduce-size-to[t] void(a t mut[], new-size nat64) bare
	assert new-size <= a.size
	trusted if extern native
		a.backing[new-size .. a.size] clear-memory
		a.size := new-size
	elif extern js
		a.as-js["length"] := new-size.to::float64
	else
		todo

###
Copies the array.
Writes to the original won't affect the copy.
###
+copy[t] t mut[](a t mut[])
	if trusted extern js
		trusted a.as-js call-property "slice" cast
	else
		a.begin slice a.end

###
Copies a `mut-array` to an `array`.
Writes to the `mut-array` won't affect the `array`.
###
+to[t] t[](a t mut[])
	a.copy move-to

###
'move-to' is like 'to' but sets the input to empty.
###
+move-to[t] t[](a t mut[]) bare
	trusted a.move-to cast-immutable
+move-to[t] t mut-slice(a t mut[]) bare
	trusted if extern native
		res t mut-slice = a.backing.begin-pointer[0 .. a.size]
		a.backing := ()
		a.size := 0
		res
	elif extern js
		res t mut-slice = a.as-js call-property "slice" cast
		a clear
		res
	else
		todo
+move-to[t] t mut[](a t mut[])
	trusted if extern native
		res t mut[] = (a.backing, a.size) as-mut-array
		a.backing := ()
		a.size := 0
		res
	elif extern js
		a.move-to::(t mut-slice) js-cast
	else
		todo

+swap[t] void(a t mut[], b t mut[])
	trusted if extern native
		a-backing = a backing
		a-size = a size
		a.backing := b backing
		a.size := b size
		b.backing := a-backing
		b.size := a-size
	elif extern js
		_ = """
			(a, b) => \{
				const temp = a.slice()
				a.length = 0
				a.push(...b)
				b.length = 0
				b.push(...temp)
			}
		""".eval call a, b
	else
		todo

-check-index[t] void(a t mut[], index nat64) bare
	assert index < a.size : index index-too-big a.size

###
Returns a `mut-slice` of all elements currently in the `mut-array`.

Since a `mut-array` may re-allocate its underlying buffer,
it's unsafe to use this after the size of `a` changes.
###
+temp-as-mut-slice[t] t mut-slice(a t mut[]) bare, unsafe
	if extern native
		a.backing[0 .. a.size]
	elif extern js
		a js-cast
	else
		todo

###
Converts to an `array`.
"Temp" because it's UB if the result is used after `a` is written to.
###
+temp-as-array[t] t[](a t mut[]) bare, unsafe
	a.temp-as-mut-slice temp-as-array

# True iff `a.size == 0`.
+is-empty[t] bool(a t mut[]) bare
	a.size == 0

###
Removes the first `n` elements and returns them as an array.
This is O(1) in native code since it simply gives up the memory.
Throws if `n > a.size`.
###
+pop-n-from-start[t] t[](a t mut[], n nat64)
	assert n <= a.size : n index-too-big a.size
	trusted if extern native
		res t[] = a.backing[0 .. n] to
		a.backing := a.backing[n .. end]
		a.size := a.size - n
		res
	elif extern js
		a.as-js call-property "splice", 0::float64, n.to::float64 cast
	else
		todo

+peek[t] t?(a t mut[])
	guard a !is-empty
	a[end - 1],

###
Removes the last element and returns it.
Returns `none` if `a` is empty.
###
+pop[t] t?(a t mut[]) bare
	guard a !is-empty
	if trusted extern native
		new-size = a.size - 1
		res = a[new-size]
		a[new-size] := trusted gc-safe-value
		a.size := new-size
		res,
	elif trusted extern js
		(trusted a.as-js call-property "pop" cast),
	else
		todo

###
Pops `n` times, discarding the result.
Throws if `n > a.size`.
###
+pop-n[t] void(a t mut[], n nat64)
	assert n <= a.size : n index-too-big a.size
	trusted if extern native
		new-size = a.size - n
		a.backing[new-size .. a.size] clear-memory
		a.size := new-size
	elif extern js
		a.as-js["length"] := (a.size - n).to::float64
	else
		todo

+prepend=[t] void(a t mut[], value t)
	trusted if extern native
		a ensure-room-for-one-more
		a.begin-pointer + 1 mem-move a.begin-pointer.as-const, a.size
		*a.begin-pointer := value
		a.size +:= 1
	elif extern js
		_ = a.as-js call-property "unshift", value
	else
		todo

# Push a value onto the end of the list.
+~=[t] void(a t mut[], value t)
	trusted if extern native
		a ensure-room-for-one-more
		assert a.size < a.capacity
		a.begin-pointer[a size] := value
		a.size +:= 1
	elif extern js
		_ = a.as-js call-property "push", value
	else
		todo

# Push multiple values onto the end of the list.
+~~=[t, col] void(a t mut[], values col) (col, t) iterate
	for x : values
		a ~= x

-ensure-room-for-one-more[t] void(a t mut[]) unsafe, native extern
	a ensure-capacity-round-up a.size + 1

-increase-capacity-to[t] void(a t mut[], new-capacity nat64) trusted, native extern
	assert new-capacity > a.capacity
	old-begin = a begin-pointer
	a.backing := new-capacity gc-safe-mut-slice
	a.begin-pointer mem-copy old-begin.as-const, a.size
	a.backing[a.size + 1 .. end] clear-memory

###
For performance, hint that the list will eventually reach 'eventual-size'.
This has no observable effect.
###
hint-size[t] void(a t mut[], eventual-size nat64)
	if trusted extern native
		a ensure-capacity-exact eventual-size

-ensure-capacity-round-up[t] void(a t mut[], min-capacity nat64) native extern
	a ensure-capacity-exact min-capacity.round-up-to-power-of-two

-ensure-capacity-exact[t] void(a t mut[], min-capacity nat64) native extern
	if trusted a.capacity < min-capacity
		a increase-capacity-to min-capacity

###
Removes `a[index]`, replaces it with the last value, and returns the old `a[index]`.
If `a[index]` is the last value, simply pops it.
This is more efficient than `a remove-at index`,
which has to shift all values past `index` to the left.
Throws if `index >= a.size`.
###
remove-unordered-at[t] t(a t mut[], index nat64) bare
	res = a[index]
	replacement = a pop!
	unless index == a.size
		a[index] := replacement
	res

# Create a new `mut-array` full of `gc-safe-value`.
+gc-safe-mut-array[t] t mut[](size nat64) unsafe
	size.gc-safe-mut-slice.cast-immutable to

###
Pushes `n` of `gc-safe-value` to the mut-array.
This can be useful to prepare the array for being written by low-level code.
Unsafe for the same reason as `gc-safe-value`.
###
+push-gc-safe-values[t] void(a t mut[], n nat64) unsafe
	if extern native
		new-size = a.size + n
		a ensure-capacity-exact new-size
		a.size := new-size
		ptr = a.end-pointer - n
		ptr mem-clear n
	else
		new-size = a.size + n
		while a.size != new-size
			a ~= gc-safe-value

###
Sets `a[index] := value`,
but first shifts all elements from `index` onwards to the right to make room.
Increases the size by 1.
This is O(a.size - index) due to having to move other elements.
Throws if `index > a.size`.
###
+insert-at[t] void(a t mut[], index nat64, value t)
	assert index <= a.size : index index-too-big a.size
	trusted if extern native
		a ensure-room-for-one-more
		a.backing[index + 1 .. a.size + 1] := a.backing[index .. a.size]
		a.size +:= 1
		assert a.size <= a.capacity
		a[index] := value
	elif extern js
		_ = a.as-js call-property "splice", index.to::float64, 0::float64, value
	else
		todo

###
Removes `a[index]`, and shifts all values from `index` onwards to the left to fill the hole.
Returns the old `a[index]`.
Decreases the size by 1.
This is O(a.size - index) due to having to move other elements.
Throws if `index >= a.size`.
###
+remove-at[t] t(a t mut[], index nat64)
	a check-index index
	res = a[index]
	trusted if extern native
		a.backing[index .. a.size - 1] := a.backing[index + 1 .. a.size]
		a.size -:= 1
	elif extern js
		_ = a.as-js call-property "splice", index.to::float64, 1::float64
	else
		todo
	res

region mutating iteration

# TODO: what happens if data accessed during filtering?
###
Removes every element `x` where `!f[x]`.
This can be written as `a.filter := f`.
###
+filter=[t] void(a t mut[], f bool mut(elem t))
	# TOOD: this is unsafe if 'f' accesses to the list. Make it a 'fun' instead?
	out mut nat64 = 0
	for x : a
		if f[x]
			a[out] := x
			out +:= 1
	a reduce-size-to out

region spec impls (see collection.crow)

+iterate[t] bool(a t mut[], f bool mut(elem t))
	0::nat64 .. a.size iterate i =>
		f[a[i]]

+mut-array-iterator[t] record(collection t mut[], next-index nat64) by-val, mut

+begin[t] t mut-array-iterator(a t mut[]) bare
	a, 0

+end[t] t mut-array-iterator(a t mut[]) bare
	a, a.size

+prev[t] (t mut-array-iterator, t)?(a t mut-array-iterator) bare
	guard a.next-index != 0
	assert a.next-index <= a.collection.size
	value = a.collection[a.next-index - 1]
	((a.collection, a.next-index - 1), value),

+next[t] (t, t mut-array-iterator)?(a t mut-array-iterator) bare
	guard a.next-index < a.collection.size
	value = a.collection[a next-index]
	(value, (a.collection, a.next-index + 1)),

+ +[t] t mut-array-iterator(a t mut-array-iterator, n nat64) bare
	new-next-index = a.next-index + n
	assert new-next-index <= a.collection.size
	a.collection, new-next-index

+-[t] t mut-array-iterator(a t mut-array-iterator, n nat64) bare
	a.collection, a.next-index - n

+-[t] nat64(a t mut-array-iterator, b t mut-array-iterator) bare
	assert a.collection == b.collection
	a.next-index - b.next-index

+set-prev[t] void(a t mut-array-iterator, value t) bare
	assert a.next-index != 0 && a.next-index <= a.collection.size
	a.collection[a.next-index - 1] := value

+set-next[t] void(a t mut-array-iterator, value t) bare
	assert a.next-index < a.collection.size
	a.collection[a next-index] := value

+slice[t] t mut[](begin t mut-array-iterator, end t mut-array-iterator)
	assert begin.collection == end.collection : iterator-not-comparable
	assert begin.next-index <= end.next-index : slice-out-of-order
	trusted begin.collection.temp-as-array[begin.next-index .. end.next-index] to

+build[t] t mut[](a build-options, f void mut(out t mut[]))
	res t mut[] = ()
	res hint-size a.size-hint
	f[res]
	res

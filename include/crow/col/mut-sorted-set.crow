no-std
import
	../bool: !, bool, new, true
	../compare: compare
	../fun-util: subscript
	../misc: is-data, new, void
	../number: nat64
	../opt: is-empty
	../tuple: from, new, pair
	./list: for-loop, list
	./mut-sorted-dict:
		clear, each, filter, fold, in, is-empty, map, move-to-list,
		mut-sorted-dict, new, remove-key, set-filter, set-map, set-subscript, size, subscript, to-mut-sorted-dict
	./sorted-set: sorted-set, to-sorted-set

###
Mutable sorted set of unique values.
This is like a `set` but mutable, or like a `mut-sorted-dict` with no values.
Unlike `mut-arr`, values are in sorted order, not insertion order,
and it never stores two of the same value.
###
mut-sorted-set<a> record mut
	.inner mut-sorted-dict<a, void>

# New empty `mut-sorted-set`.
new<a> mut-sorted-set a() is-data<a> compare<a>
	(),

to-mut-sorted-set<a> mut-sorted-set a(a list a) is-data<a> compare<a>
	pairs list pair<a, void> = for x : a
		x, ()
	pairs.to-mut-sorted-dict,

# True iff the set has no elements.
is-empty<a> bool(a mut-sorted-set a) is-data<a> compare<a>
	a.inner is-empty

# Removes all elements.
clear<a> void(a mut-sorted-set a) is-data<a> compare<a>
	a.inner clear

# Number of values in the set.
size<a> nat64(a mut-sorted-set a) is-data<a> compare<a>
	a.inner size

# True iff the value is in the set.
subscript<a> bool(a mut-sorted-set a, value a) is-data<a> compare<a>
	value in a

in<a> bool(value a, a mut-sorted-set a) is-data<a> compare<a>
	!a.inner[value].is-empty

###
Adds a value to the set.
Does nothing if the value is already in the set.
###
~= <a> void(a mut-sorted-set a, value a) is-data<a> compare<a>
	a.inner[value] := ()

# Adds multiple values to the set.
~~= <a> void(a mut-sorted-set a, values list a) is-data<a> compare<a>
	for value : values
		a ~= value

try-add<a> bool(a mut-sorted-set a, value a) is-data<a> compare<a>
	# TODO:PERF do it without two lookups
	unless value in a.inner
		a.inner[value] := ()
		true

###
Removes a value from the set.
If the value was present, removes it and returns `true`.
If the value was not present, does nothing and returns `false`.
###
remove<a> bool(a mut-sorted-set a, value a) is-data<a> compare<a>
	!(a.inner remove-key value is-empty)

# Convert to a list, clearing the original `mut-sorted-set` in the process.
move-to-list<a> list a(a mut-sorted-set a) is-data<a> compare<a>
	for pair : a.inner move-to-list
		pair from

# Convert to a `sorted-set`, clearning the original `mut-sorted-set` in the process.
move-to-sorted-set<a> sorted-set a(a mut-sorted-set a) is-data<a> compare<a>
	# TODO:PERF avoid a copy: return a 'mut-arr' which the sorted-set can move into to itself
	a.move-to-list to-sorted-set

region iteration

each<a> void(a mut-sorted-set a, f act void(a)) is-data<a> compare<a>
	a.inner each (k, _) => f[k]

fold<a, b> a(acc a, a mut-sorted-set b, f act a(a, b)) is-data<b> compare<b>
	acc fold a.inner, (cur, k, _) => f[cur, k]

filter<a> mut-sorted-set a(a mut-sorted-set a, f act bool(a)) is-data<a> compare<a>
	(a.inner filter (k, _) => f[k]),

map<out, in> mut-sorted-set out(a mut-sorted-set in, f act out(in)) is-data<in> compare<in> is-data<out> compare<out>
	(a.inner map (k, _) => f[k], ()),

region mutating iteration

set-filter<a> void(a mut-sorted-set a, f act bool(a)) is-data<a> compare<a>
	a.inner set-filter (k, _) => f[k]

set-map<a> void(a mut-sorted-set a, f act a(a)) is-data<a> compare<a>
	a.inner set-map (k, _) => f[k], ()

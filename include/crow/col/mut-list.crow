no-std
import
	../bool: bool, not
	../compare: <, <=, >
	../fun-util: subscript
	../misc: new, void
	../number: ==, <=>, +, -, nat64
	../option: new, option
	../pointer:
		+, -, as-const, mut-pointer, reference-equal, set-deref, set-subscript, subscript, zeroed
	../private/alloc: mem-copy, mem-move
	../private/bootstrap: backing, mut-list-size, set-backing, set-mut-list-size
	../private/number-low-level: round-up-to-power-of-two
	../range: .., iterate
	../tuple: a, b, new
	./array: +, array, begin, slice
	./collection:
		.., -, build-options, end, for-loop, index-too-big, iterate, new, set-subscript, size-hint,
		subscript
	./mut-array:
		+, -, begin, begin-pointer, cast-immutable, copy, empty-mut-array, end, mut-array,
		mut-array-iterator, prev, next, next-index, set-next, set-prev, set-subscript,
		size, slice, subscript, temp-as-array, uninitialized-mut-array, zero-memory
	./list: iterate, list, to
export
	../private/bootstrap: mut-list

+size[t] nat64(a t mut[]) bare
	a mut-list-size
-set-size[t] void(a t mut[], size nat64) bare
	a.mut-list-size := size

# True if they are identical.
+==[t] bool(a t mut[], b t mut[]) bare
	# TODO: this should be generated for all mut by-ref records
	trusted a reference-equal b

###
Pointer to the first element.
Since `mut-list` changes its underlying data occasionally,
it's unsafe to use this after the size of `a` changes.
###
+begin-pointer[t] t mut*(a t mut[]) bare, unsafe
	a.backing begin-pointer

+end-pointer[t] t mut*(a t mut[]) bare, unsafe
	a.begin-pointer + a.size

is-at-capacity[t] bool(a t mut[]) bare, unsafe
	a.capacity == a.size

capacity[t] nat64(a t mut[]) bare, unsafe
	a.backing size

###
Creates a new list with the given elements.
###
+new[t] t mut[](...a t array)
	a to

+to[t] t mut[](a t array)
	a.to to

+to[t] t mut[](a t[])
	backing t mut-array = empty-mut-array
	res t mut[] = backing, 0
	res ~~= a
	res

+clear[t] void(a t mut[]) bare
	trusted
		a.backing[0 .. a.size] zero-memory
		a.size := 0

###
Copies the `mut-list`.
Writes to the original won't affect the copy.
###
+copy[t] t mut[](a t mut[])
	a.begin slice a.end

###
Copies a `mut-list` to a `list`.
Writes to the `mut-list` won't affect the `list`.
###
+to[t] t[](a t mut[])
	a.copy move-to

###
'move-to' is like 'to' but sets the input to empty.
###
+move-to[t] t[](a t mut[])
	a.move-to::(t array) to
+move-to[t] t array(a t mut[]) bare
	trusted a.move-to cast-immutable
+move-to[t] t mut-array(a t mut[]) bare
	trusted
		res = a.begin-pointer[0 .. a.size]
		a.backing := empty-mut-array
		a.size := 0
		res
+move-to[t] t mut[](a t mut[])
	res t mut[] = a.backing, a.mut-list-size
	a.backing := empty-mut-array
	a.mut-list-size := 0
	res

+swap[t] void(a t mut[], b t mut[])
	a-backing = a backing
	a-size = a size
	a.backing := b backing
	a.size := b size
	b.backing := a-backing
	b.size := a-size

-check-index[t] void(a t mut[], index nat64) bare
	assert index < a.size : (index, a.size) index-too-big

###
Converts to an `mut-array`.
"Temp" because it's UB if the result is used after ths size of `a` changes.
###
temp-as-mut-array[t] t mut-array(a t mut[]) bare, unsafe
	a.begin-pointer[0 .. a.size]

###
Converts to an `array`.
"Temp" because it's UB if the result is used after `a` is written to.
###
temp-as-array[t] t array(a t mut[]) bare, unsafe
	a.temp-as-mut-array temp-as-array

# True iff `a.size == 0`.
+is-empty[t] bool(a t mut[]) bare
	a.size == 0

###
Removes the first `n` elements and returns them as an array.
This is O(a.size - n) because of the cost of copying, and all remaining elements must be shifted.
Throws if `n > a.size`.
###
+pop-n-from-start[t] t[](a t mut[], n nat64)
	assert n <= a.size : (n, a.size) index-too-big
	res = a[0 .. n]
	new-size = a.size - n
	a.backing[0 .. new-size] := trusted a.temp-as-array[n .. a.size]
	a.size := new-size
	res to

+peek[t] t?(a t mut[])
	guard !a.is-empty
	a[end - 1],

###
Removes the last element and returns it.
Returns `none` if `a` is empty.
###
+pop[t] t?(a t mut[])
	guard !a.is-empty
	new-size = a.size - 1
	res = a[new-size]
	# Ensure GC doesn't hold on to the memory there
	a[new-size] := trusted zeroed
	a.size := new-size
	res,

###
Pops `n` times, discarding the result.
Throws if `n > a.size`.
###
+pop-n[t] void(a t mut[], n nat64)
	assert n <= a.size : (n, a.size) index-too-big
	new-size = a.size - n
	trusted a.backing[new-size .. a.size] zero-memory
	a.size := new-size

+prepend=[t] void(a t mut[], value t)
	trusted
		a incr-capacity
		a.begin-pointer + 1 mem-move a.begin-pointer.as-const, a.size
		*a.begin-pointer := value
		a.size +:= 1

# Push a value onto the end of the list.
+~=[t] void(a t mut[], value t)
	trusted
		a incr-capacity
		assert a.size < a.capacity
		a.begin-pointer[a size] := value
		a.size +:= 1

# Push multiple values onto the end of the list.
+~~=[t, col] void(a t mut[], values col) (col, t) iterate
	for x : values
		a ~= x

-incr-capacity[t] void(a t mut[]) unsafe
	a ensure-capacity (a.size + 1 round-up-to-power-of-two)

push-capacity-must-be-sufficient[t] void(a t mut[], value t) bare, unsafe
	assert a.size < a.capacity
	a.begin-pointer[a size] := value
	a.size +:= 1

-increase-capacity-to[t] void(a t mut[], new-capacity nat64)
	trusted
		assert new-capacity > a.capacity
		old-begin = a begin-pointer
		a.backing := new-capacity uninitialized-mut-array
		a.begin-pointer mem-copy old-begin.as-const, a.size
		a.backing[a.size + 1 .. end] zero-memory

###
For performance, hint that the list will eventually reach 'eventual-size'.
This has no observable effect.
###
hint-size[t] void(a t mut[], eventual-size nat64)
	a ensure-capacity eventual-size

-ensure-capacity[t] void(a t mut[], min-capacity nat64)
	if trusted a.capacity < min-capacity
		a increase-capacity-to min-capacity

###
Ensure that the mut-list can grow to a size of `reserved` without reallocating.
Does nothing if the capacity is already sufficient.

This may reserve more space than requested,
so calling `reserve` repeatedly for slowly increasing sizes
doesn't reallocate every time, and is no worse than pushing repeatedly.
###
-reserve[t] void(a t mut[], reserved nat64) unsafe
	a ensure-capacity reserved.round-up-to-power-of-two

###
Removes `a[index]`, replaces it with the last value, and returns the old `a[index]`.
If `a[index]` is the last value, simply pops it.
This is more efficient than `a remove-at index`,
which has to shift all values past `index` to the left.
Throws if `index >= a.size`.
###
remove-unordered-at[t] t(a t mut[], index nat64) bare
	a check-index index
	trusted
		res = a.begin-pointer[index]
		new-size = a.size - 1
		a.begin-pointer[index] := a.begin-pointer[new-size]
		a.size := new-size
		res

uninitialized-mut-list[t] t mut[](size nat64) unsafe
	res t mut[] = ()
	res unsafe-set-size size
	res

###
Directly sets the `size` without touching the data.
Unsafe because if this increases the size, it exposes uninitialized data.
If this decreases the size, it doesn't zero out the rest of the data,
so the garbage collector will keep it alive.
###
unsafe-set-size[t] void(a t mut[], new-size nat64) unsafe
	a reserve new-size
	a.size := new-size

###
Sets `a[index] := value`,
but first shifts all elements from `index` onwards to the right to make room.
Increases the size by 1.
This is O(a.size - index) due to having to move other elements.
Throws if `index > a.size`.
###
+insert-at[t] void(a t mut[], index nat64, value t)
	assert index <= a.size : (index, a.size) index-too-big
	trusted
		a incr-capacity
		a.backing[index + 1 .. a.size + 1] := a.temp-as-array[index .. a.size]
		a.size +:= 1
		assert a.size <= a.capacity
		a[index] := value

###
Removes `a[index]`, and shifts all values from `index` onwards to the left to fill the hole.
Returns the old `a[index]`.
Decreases the size by 1.
This is O(a.size - index) due to having to move other elements.
Throws if `index >= a.size`.
###
+remove-at[t] t(a t mut[], index nat64)
	a check-index index
	res = a[index]
	trusted
		a.backing[index .. a.size - 1] := a.temp-as-array[index + 1 .. a.size]
		a.size -:= 1
	res

region mutating iteration

# TODO: what happens if data accessed during filtering?
###
Removes every element `x` where `!f[x]`.
This can be written as `a.filter := f`.
###
+filter=[t] void(a t mut[], f bool mut(elem t))
	# TOOD: this is unsafe if 'f' accesses to the list. Make it a 'fun' instead?
	trusted
		out mut = a begin-pointer
		for x : a
			if f[x]
				*out := x
				out +:= 1
		new-size = out - a.begin-pointer
		a.backing[new-size .. a.size] zero-memory
		a.size := new-size

region spec impls (see collection.crow)

###
Gets the element at the index.
Throws if `index >= a.size`.
###
+at-index[t] t(a t mut[], index nat64) bare
	a check-index index
	trusted a.begin-pointer[index]

###
Sets the element at the index.
Throws if `index >= a.size`.
###
+set-at-index[t] void(a t mut[], index nat64, value t) bare
	a check-index index
	trusted
		a.begin-pointer[index] := value

+iterate[t] bool(a t mut[], f bool mut(elem t))
	0::nat64 .. a.size iterate i =>
		f[a[i]]

+mut-list-iterator[t] record(collection t mut[], next-index nat64) by-val, mut

+begin[t] t mut-list-iterator(a t mut[]) bare
	a, 0

+end[t] t mut-list-iterator(a t mut[]) bare
	a, a.size

-as-backing-iter[t] t mut-array-iterator(a t mut-list-iterator) bare
	assert a.next-index <= a.collection.size
	a.collection.backing.begin + a.next-index

+prev[t] (t mut-list-iterator, t)?(a t mut-list-iterator) bare
	if res ?= a.as-backing-iter prev
		((a.collection, res.a.next-index), res.b),

+next[t] (t, t mut-list-iterator)?(a t mut-list-iterator) bare
	if res ?= a.as-backing-iter next
		if res.b.next-index <= a.collection.size
			(res.a, (a.collection, res.b.next-index)),

+ +[t] t mut-list-iterator(a t mut-list-iterator, n nat64) bare
	new-next-index = a.next-index + n
	assert new-next-index <= a.collection.size
	a.collection, new-next-index

+-[t] t mut-list-iterator(a t mut-list-iterator, n nat64) bare
	a.collection, a.next-index - n

+-[t] nat64(a t mut-list-iterator, b t mut-list-iterator) bare
	assert a.collection == b.collection
	a.next-index - b.next-index

+set-prev[t] void(a t mut-list-iterator, value t) bare
	a.as-backing-iter set-prev value

+set-next[t] void(a t mut-list-iterator, value t) bare
	a.as-backing-iter set-next value

+slice[t] t mut[](a t mut-list-iterator, b t mut-list-iterator)
	res = a.as-backing-iter slice b.as-backing-iter
	res.copy, res.size

+build[t] t mut[](a build-options, f void mut(out t mut[]))
	res t mut[] = ()
	res hint-size a.size-hint
	f[res]
	res

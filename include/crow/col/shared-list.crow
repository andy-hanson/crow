no-std
import
	../bool: bool
	../fun-util: subscript
	../misc: void
	../number: ==, nat64
	../private/bootstrap: todo
	../private/thread-utils: acquire, init, lock, release, uninit
	../pointer: mut-pointer
	./array: array
	./collection: build-options, subscript
	./list: list
	./mut-list: +, ~=, begin, build, clear, mut-list, move-to, next, new, size, to

###
Shared equivalent to 'mut-list'.

Iteration is not supported; since operations on this take a lock, they need to be short.
If you need to iterate, you could use 'copy-to' or 'move-to' to get a snapshot of all the elements
and iterate it at your leisure.
###
+shared-list[t] record force-shared, by-ref
	-lk mut lock
	-inner mut t mut[]
-lock[t] lock mut*(a t shared[]) bare, unsafe
	&a.lk
-with-lock[out, t] out(a t shared[], cb out mut(a t mut[])) unsafe
	if extern native
		a.lock acquire
		finally a.lock release
		cb[a.inner]
	else
		todo # ------------------------------------------------------------------------------------------------------------------

+new[t] t shared[](...a t array)
	a.to new-from-new-mut-list
-new-from-new-mut-list[t] t shared[](inner t mut[])
	trusted if extern native
		res t shared[] = uninit, inner
		res.lock init
		res
	else
		todo # TODO: in JS builds, 'shared-list' should just be a list with no wrapper ...........................................

+size[t] nat64(a t shared[])
	trusted a with-lock x => x size
+is-empty[t] bool(a t shared[])
	a.size == 0

# WARN: This holds the lock while copying the entire list. Consider using 'move-to' instead.
+copy-to[t] t[](a t shared[]) unsafe
	a with-lock x => x.to

+move-to[t] t shared[](a t mut[])
	a.move-to new-from-new-mut-list
+move-to[t] t[](a t shared[])
	trusted a with-lock x => x move-to
+move-to[t] t mut[](a t shared[])
	trusted a with-lock x =>
		a.inner := ()
		x

+clear[t] void(a t shared[])
	trusted a with-lock x => x clear

+~=[t] void(a t shared[], value t)
	trusted a with-lock x =>
		x ~= value

+subscript[t] t(a t shared[], index nat64)
	trusted a with-lock x => x[index]

region build

+build[t] t shared[](a build-options, f void mut(out t mut[]))
	a build f move-to

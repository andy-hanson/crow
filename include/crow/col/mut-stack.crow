no-std
import
	../bool: bool
	../misc: void
	../number: nat64
	../opt: new, opt
	./arr: arr
	./mut-arr:
		~=, to-arr, copy, each, fold, is-empty, last, mut-arr, new, pop, set-filter, set-map, size,
		to-mut-arr

###
Mutable stack.

Elements are pushed and popped from the top of the stack.
Iteration functions move from the bottom to the top.
###
mut-stack<a> record mut
	.inner a mut[]

# New empty stack.
new<a> mut-stack a()
	(),

# Copy elements to a new stack.
copy<a> mut-stack a(a mut-stack a)
	a.inner.copy,

# Copy elements to a new stack.
to-mut-stack<a> mut-stack a(a a[])
	a.to-mut-arr,

# Copy elements to an array.
to-arr<a> a[](a mut-stack a)
	a.inner to-arr

# True iff `a.size == 0`.
is-empty<a> bool(a mut-stack a)
	a.inner is-empty

###
Number of elements in the stack.

This is O(n).
###
size<a> nat64(a mut-stack a)
	a.inner size

# Pushes a value to the top of the stack.
~= <a> void(a mut-stack a, value a)
	a.inner ~= value

# Pushes many values to the top of the stack.
~= <a> void(a mut-stack a, values a[])
	a.inner ~= values

###
Returns the top element of the stack without removing it.

Returns an empty option iff `a` is empty.
###
peek<a> a?(a mut-stack a)
	unless a is-empty
		a.inner last

###
Removes and returns the top element of the stack.

Returns an empty option iff `a` is empty.
###
pop<a> a?(a mut-stack a)
	a.inner pop

region iteration

each<a> void(a mut-stack a, f act void(a))
	a.inner each f

fold<a, b> a(acc a, a mut-stack b, f act a(a, b))
	acc fold a.inner, f

###
Removes every element `x` where `!f[x]`.
This can be written as `a.filter := f`.
###
set-filter<a> void(a mut-stack a, f act bool(a))
	a.inner set-filter f

###
Overwrites every element `x` with `f[x]`.
This can be written as `a.map := f`.
###
set-map<a> void(a mut-stack a, f act a(a))
	a.inner set-map f

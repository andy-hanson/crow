no-std
import
	../bool: !, bool
	../misc: void
	../opt: opt
	./arr: arr
	./mut-list: ~=, arr, copy, each, filter!, fold, is-empty, last, map!, mut-list, pop!

###
Unlike `mut-list`, this is not guaranteed to be represented as an array.
###
mut-stack<a> record mut
	# TODO: PRIVATE
	inner mut-list a

# New empty `mut-stack`.
mut-stack<a> mut-stack a()
	mut-stack: mut-list<a>

copy<a> mut-stack a(a mut-stack a)
	mut-stack: a.inner copy

mut-stack<a> mut-stack a(a a[])
	mut-stack: mut-list: a

arr<a> a[](a mut-stack a)
	a.inner arr

is-empty<a> bool(a mut-stack a)
	a.inner is-empty

~= <a> void(a mut-stack a, value a)
	a.inner ~= value

~= <a> void(a mut-stack a, values a[])
	a.inner ~= values

last<a> opt a(a mut-stack a)
	if !a.is-empty
		a.inner last

pop!<a> opt a(a mut-stack a)
	a.inner pop!

region iteration

each<a> void(a mut-stack a, f act void(a))
	a.inner each f

fold<a, b> a(acc a, a mut-stack b, f act a(a, b))
	acc fold a.inner, f

filter!<a> void(a mut-stack a, f act bool(a))
	a.inner filter! f

map!<a> void(a mut-stack a, f act a(a))
	a.inner map! f

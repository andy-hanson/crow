no-std
import
	../bool: bool
	../misc: void
	../number: nat64
	../option: option
	./collection: iterate
	./array: array
	./list: list
	./mut-list: ~=, ~~=, copy, filter=, is-empty, iterate, mut-list, peek, pop, size, to

###
Mutable stack.

Elements are pushed and popped from the top of the stack.
Iteration functions move from the bottom to the top.
###
+mut-stack[t] record mut
	-inner t mut[]

+new[t] t mut-stack(...a t array)
	a.to,

+copy[t] t mut-stack(a t mut-stack)
	a.inner.copy,

+to[t] t mut-stack(a t[])
	a.to,

+to[t] t[](a t mut-stack)
	a.inner to

# True iff `a.size == 0`.
+is-empty[t] bool(a t mut-stack)
	a.inner is-empty

###
Number of elements in the stack.

This is O(n).
###
+size[t] nat64(a t mut-stack)
	a.inner size

# Pushes a value to the top of the stack.
+~=[t] void(a t mut-stack, value t)
	a.inner ~= value

# Pushes many values to the top of the stack.
+~~=[t, col] void(a t mut-stack, values col) (col, t) iterate
	a.inner ~~= values

###
Returns the top element of the stack without removing it.

Returns an empty option iff `a` is empty.
###
+peek[t] t?(a t mut-stack)
	a.inner peek

###
Removes and returns the top element of the stack.

Returns an empty option iff `a` is empty.
###
+pop[t] t?(a t mut-stack)
	a.inner pop

region iteration

+iterate[t] bool(a t mut-stack, f act bool(t))
	a.inner iterate f

+filter=[t] void(a t mut-stack, f act bool(t))
	a.inner filter= f

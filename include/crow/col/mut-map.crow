no-std
import
	../bool: &&, ||, bool, false, not
	../compare: >, >=
	../fun-util: subscript
	../hash: hash, hash-mix
	../json: to
	../misc: key, new, void, to
	../number: ==, <=>, +, -, *, %, nat64
	../option: ==, is-empty, new, option
	../string: ==, ~~, literal, new, string, to
	../test-util: is
	../tuple: ==, new
	./array: array
	./collection: fill, find, find-index, for-loop, join, n-of, map=, set-subscript, subscript
	./map: ~=, build, map
	./mut-array: ~=, +, begin, build, iterate, mut-array, is-empty, new, next, set-next, size
	./list: ==, ~=, build, iterate, list, new, size, to
	./mut-list:
		~=, +, begin, copy, filter=, is-at-capacity, is-empty, iterate, mut-list, new, next,
		remove-unordered-at, set-next, size

###
Mutable unordered map.

Unordered means that iteration functions like `each` reach each entry in arbitrary order.
###
+mut-map[k, v] record mut
	-entries mut (k, v) entry mut-array
	-total-size mut nat64

-entry[k, v] union mut
	none
	one (k, v)
	many (k, v) mut[]

###
New map containing the given pairs.

Later pairs overwrite earlier pairs with the same key.
###
+new[k, v] v mut[k](...a (k, v) array) k key
	a.to to

###
New empty map with space for about `capacity` entries.
This can have a small performance benefit if you know that much space will be needed.

Since hash conflicts are possible,
this makes no guarantees about whether more allocations will be needed.
###
-mut-map-with-capacity[k, v] v mut[k](capacity nat64) k key
	# TODO: should not need type annotation
	(capacity n-of none)::((k, v) entry mut-array), 0

###
Convert a list of pairs to a map.

Later pairs overwrite earlier pairs with the same key.
###
+to[k, v] v mut[k](a (k, v)[]) k key
	res v mut[k] = a.size mut-map-with-capacity
	for k, v : a
		res[k] := v
	res

+to[k, v] v[k](a v mut[k]) k key
	for x : a; x

# Copy pairs to a list.
+to[k, v] (k, v)[](a v mut[k]) k key
	for x : a; x

# Copy pairs to a list and clear the map.
+move-to[k, v] (k, v)[](a v mut[k]) k key
	res (k, v)[] = a to
	a clear
	res

+move-to[k, v] v[k](a v mut[k]) k key
	res v[k] = a to
	a clear
	res

# Copy pairs to a new map.
+copy[k, v] v mut[k](a v mut[k]) k key
	entries (k, v) entry mut-array = for entry : a entries
		match entry
		as none
			none
		as one ar
			ar one
		as many m
			m.copy many
	entries, a.total-size
test
	a string mut[nat64] = (1, "1"), (2, "2"), (5, "5")
	a verify "_ (1 -> 1) [2 -> 2, 5 -> 5]"

	b = a copy
	b verify "_ (1 -> 1) [2 -> 2, 5 -> 5]"

	a[6] := "6"
	a verify "(6 -> 6) (1 -> 1) [2 -> 2, 5 -> 5]"
	b verify "_ (1 -> 1) [2 -> 2, 5 -> 5]"

# `true` iff `a.size == 0`.
+is-empty[k, v] bool(a v mut[k]) k key
	a.size == 0

# Number of unique keys in the map.
+size[k, v] nat64(a v mut[k]) k key
	a total-size

###
Gets the value associated with a key.

Returns an empty option if the key is not in the map.
###
+subscript[k, v] v?(a v mut[k], key k) k key
	unless a is-empty
		match a.entries[key.hash % a.entries.size]
		as none
			()
		as one k, v
			k == key ? v,
		as many m
			if (_, v) ?= m find (k, _) => k == key
				v,

# `true` iff the key is in the map.
+in[k, v] bool(key k, a v mut[k]) k key
	!a[key].is-empty

###
Sets the key to the given value, so that `a[key]` will return `value`.

If the key is already in the map, this overwrites the previous value.
###
+set-subscript[k, v] void(a v mut[k], key k, value v) k key
	_ = a update key, (value,)

+TODOKILLME[k, v] void(a v mut[k], key k, value v) k key
	_ = a update key, (value,)

# Remove all keys, leaving the map empty.
+clear[k, v] void(a v mut[k]) k key
	a.entries fill none
	a.total-size := 0

# Set the contents of `a` to the contents of `b` and vice versa.
+swap[k, v] void(a v mut[k], b v mut[k]) k key
	temp-entries = a entries
	a.entries := b entries
	b.entries := temp-entries
	temp-size = a.total-size
	a.total-size := b total-size
	b.total-size := temp-size

###
If the key was in the map, remove it and return the old value.

Returns an empty option if the key was not in the map.
###
+try-remove[k, v] v?(a v mut[k], key k) k key
	a update key, ()

+remove[k, v] void(a v mut[k], key k) k key
	_ = a try-remove key

+ensure[k, v] v(a v mut[k], key k, get-value act v()) k key
	if v ?= a[key]
		v
	else
		value = get-value[]
		a[key] := value
		value
+ensure[k, v] v(a v mut[k], key k) k key, v new
	a ensure key, () => ()

# Returns the old value (if it exists).
-update[k, v] v?(a v mut[k], key k, new-value v?) k key
	if a.entries is-empty
		if value ?= new-value
			a.entries := (key, value).one,
			a.total-size := 1
		()
	else
		entry-index = key.hash % a.entries.size
		match a.entries[entry-index]
		as none
			if value ?= new-value
				a.entries[entry-index] := (key, value) one
				a.total-size +:= 1
			()
		as one k, v
			if k == key
				a.entries[entry-index] := if value ?= new-value
					(key, value) one
				else
					a.total-size -:= 1
					none
				v,
			else
				if value ?= new-value
					if a should-expand
						a expand
						a[key] := value
					else
						a.entries[entry-index] := ((k, v), (key, value)) many
						a.total-size +:= 1
				()
		as many m
			if index ?= m find-index (k, _) => k == key
				_, old-value = m[index]
				if value ?= new-value
					m[index] := key, value
				else
					_ = m remove-unordered-at index
					if m is-empty
						a.entries[entry-index] := none
					elif m.size == 1
						a.entries[entry-index] := m[0] one
					a.total-size -:= 1
				old-value,
			else
				if value ?= new-value
					if (trusted m is-at-capacity) && a.should-expand
						a expand
						a[key] := value
					else
						m ~= (key, value)
						a.total-size +:= 1
				()

# This is the same as calling `a[b a] := b b`.
+~=[k, v] void(a v mut[k], (key k, value v)) k key
	a[key] := value

# This is the same as calling `a ~= x` for every `x` in `b`.
+~~=[k, v] void(a v mut[k], pairs (k, v)[]) k key
	for pair : pairs
		a ~= pair

# Called when we're about to allocate a bigger bucket -- maybe we should expand the table instead
-should-expand[k, v] bool(a v mut[k])
	a.total-size >= a.entries.size

-expand[k, v] void(a v mut[k]) k key
	forbid a.entries.size == 0
	new-size = a.entries.size * 2
	bigger v mut[k] = new-size mut-map-with-capacity
	for k, v : a
		bigger[k] := v
	a swap bigger
	assert a.entries.size == new-size

###
Filters the map in place.

Calls `f` on every key and value and removes the key if `f` returns false.
###
+filter=[k, v] void(a v mut[k], f act bool(k, v)) k key
	a.entries map= entry =>
		match entry
		as none
			none
		as one k, v
			if f[k, v]
				(k, v) one
			else
				none
		as many m
			m filter= f
			if m is-empty
				none
			elif m.size == 1
				m[0] one
			else
				m many

###
Calls `f` on every key and value, and replaces the value with the new value returned by `f`.
###
+map-values=[k, v] void(a v mut[k], f act v(k, v)) k key
	a.entries map= entry =>
		match entry
		as none
			none
		as one k, v
			(k, f[k, v]) one
		as many m
			m map= (k, v) => k, f[k, v]
			m many

region spec impls (see collection.crow)

# Calls `f` for every key and value in the map.
+iterate[k, v] bool(a v mut[k], f act bool(k, v)) k key
	a.entries iterate entry =>
		match entry
		as none
			false
		as one x
			f[x]
		as many m
			m iterate f

region test

-dbg[k, v] string(a v mut[k]) (string, k) to, (string, v) to
	parts string[] = for entry : a entries
		match entry
		as none
			"_"
		as one ar
			"({ar dbg})"
		as many m
			"[{", " join for pair : m; pair dbg}]"
	" " join parts
-dbg[k, v] string((k k, v v)) (string, k) to, (string, v) to
	"{k} -> {v}"

-verify void(a string mut[nat64], expected string)
	a.dbg is expected

test
	a string mut[nat64] = ()

	a[6] := "6"
	a[5] is ()
	a[6] is ("6",)
	a.size is 1
	# TODO: a.arr is ((6, "6"),)
	(for k, _ : a; k)::nat64[] is (6,)
	(for _, v : a; v)::string[] is ("6",)

	a verify "(6 -> 6)"

	a[6] := "six"
	a verify "(6 -> six)"

	a[3] := "3"
	a verify "(6 -> six) (3 -> 3)"

	a[4] := "4"
	a verify "(4 -> 4) _ (6 -> six) (3 -> 3)"

	a[8] := "8"
	a verify "[4 -> 4, 8 -> 8] _ (6 -> six) (3 -> 3)"

	a[4] is ("4",)
	a[8] is ("8",)
	a[5] is ()

	a.to::(nat64, string)[] is ((4, "4"), (8, "8"), (6, "six"), (3, "3"))

	a[12] := "12"
	a verify "(8 -> 8) _ _ (3 -> 3) [4 -> 4, 12 -> 12] _ (6 -> six) _"

	a try-remove 5 is ()
	a try-remove 4 is ("4",)

	a verify "(8 -> 8) _ _ (3 -> 3) (12 -> 12) _ (6 -> six) _"

	a[11] := "11"
	a verify "(8 -> 8) _ _ [3 -> 3, 11 -> 11] (12 -> 12) _ (6 -> six) _"

	a filter= (key, value) => key > 10 || value == "six"
	a verify "_ _ _ (11 -> 11) (12 -> 12) _ (6 -> six) _"

	a map-values= (key, value) => "{key}-{value}"
	a verify "_ _ _ (11 -> 11-11) (12 -> 12-12) _ (6 -> 6-six) _"

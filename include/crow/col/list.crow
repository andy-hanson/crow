no-std
import
	../bool: &&, ||, bool, false
	../compare: !=, <, <=, >, compare, comparison, equal
	../fun-util: subscript
	../misc: ==, <=>, new
	../number: ==, <=>, +, -, *, nat64
	../option: ??, new, option
	../pointer: const-pointer, mut-pointer
	../private/exception-low-level: unreachable
	../private/range-low-level: .., rangeable, iterate, range, size
	../pointer: size-of
	../tuple: a, b, new
	./array:
		~~, ~=, +, -, array, array-cast, as-array, begin, build, end, is-empty, iterate, new, next,
		size, slice
	./collection:
		.., -, concatenate, end, for-loop, index-relative-to-end, is-empty, range-relative-to-end,
		sequence-compare, sequence-equal, subscript
	./mut-array: ~=, build, mut-array, to
	./private/array-low-level: array-reference-equal
	./private/list-low-level:
		array2d, array3d, arrays, branch, down, iterate-chunks, l1, l2, l3, leaf, left,
		list-reference-equal, node, nodes, right, root, total-size
export
	./private/list-low-level: ~=, ~~=, build, list, list-builder

-new[t] t array2d() bare
	0, ()
-new[t] t array2d(a t array)
	a.size, (a,)
-is-empty[t] bool(a t array2d) bare
	a.arrays is-empty
-~~[t] t array2d(a t array2d, b t array2d)
	a.total-size + b.total-size, a.arrays ~~ b.arrays
-subscript[t] t array(a t array2d, index nat64) bare
	a.arrays[index]
-subscript[t] t array(a t array2d, index index-relative-to-end) bare
	a.arrays[index]
-subscript[t] t array2d(a t array2d, indices nat64 range) bare
	a.arrays[indices] recompute-total-size
-subscript[t] t array2d(a t array2d, indices range-relative-to-end) bare
	a.arrays[indices] recompute-total-size
-recompute-total-size[t] t array2d(a t array array) bare
	a.compute-total-size, a
-compute-total-size[t] nat64(a t array array) bare
	total-size mut nat64 = 0
	iter mut = a begin
	loop
		if x, next ?= iter next
			total-size +:= x size
			iter := next
			continue
		else
			break total-size
-new[t] t array3d() bare
	0, ()
-new[t] t array3d(a t array2d)
	a.total-size, (a,)
-is-empty[t] bool(a t array3d) bare
	a.arrays is-empty
-~~[t] t array3d(a t array3d, b t array3d)
	a.total-size + b.total-size, a.arrays ~~ b.arrays
-subscript[t] t array2d(a t array3d, index nat64) bare
	a.arrays[index]
-subscript[t] t array2d(a t array3d, index index-relative-to-end) bare
	a.arrays[index]
-subscript[t] t array3d(a t array3d, indices nat64 range) bare
	a.arrays[indices] recompute-total-size
-subscript[t] t array3d(a t array3d, indices range-relative-to-end) bare
	a.arrays[indices] recompute-total-size
-recompute-total-size[t] t array3d(a t array2d array) bare
	a.compute-total-size, a
-compute-total-size[t] nat64(a t array2d array) bare
	total-size mut nat64 = 0
	iter mut = a begin
	loop
		if x, next ?= iter next
			total-size +:= x total-size
			iter := next
			continue
		else
			break
	total-size

-new[leaf, lower] (leaf, lower) node() leaf new
	() leaf

-new[t] t l2()
	(),
-new[t] t l3()
	(),

-is-empty[t] bool(a t l2)
	match a node
	as leaf xs
		xs is-empty
	as branch _
		false

-is-empty[t] bool(a t l3)
	a.nodes is-empty

-depth[t] nat64(a t[])
	match a.root.node
	as leaf _
		0
	as branch b
		b.down depth-l2

-depth-l2[t] nat64(a t l2)
	match a node
	as leaf _
		1
	as branch b
		b.down depth-l3

-depth-l3[t] nat64(_ t l3)
	2

-as-branch[leaf, lower] (leaf, lower) branch(a (leaf, lower) node) bare
	match a
	as leaf _
		unreachable
	as branch b
		b

-try-as-l1-leaf[t] t array?(a t[]) bare
	match a.root node
	as leaf xs
		xs,
	as branch _
		()

-get-l1-branch[t] (t array, t l2) branch(a t[]) bare
	a.root.node as-branch

-try-get-l2[t] t l2?(a t[]) bare
	match a.root node
	as leaf _
		()
	as branch b
		b.down,

-get-l2[t] t l2(a t[]) bare
	a.try-get-l2!

-get-l2-branch[t] (t array2d, t l3) branch(a t[]) bare
	a.get-l1-branch.down.node as-branch

-get-l3[t] t l3(a t[]) bare
	a.get-l2-branch down

# List containing the given elements.
+new[t] t[](...a t array) bare
	a to

+as-list[t] t[](a t* range) bare, unsafe
	a.as-array to
+as-list[t] t[](a t mut* range) bare, unsafe
	a.as-array to

###
Convert an array to a list.
This is O(1).
###
+to[t] t[](a t array) bare
	l t l1 = a.leaf,
	l,
+to[t] t[](a t mut-array)
	a.to::(t array) to

+to[t] t[](a t?)
	if x ?= a
		x,
+to[t] t[](a t range) t rangeable
	for x : a
		x

###
Convert a list to an array.
This is O(n).
This is O(1) if the list was converted from an array, meaning a round trip is free.
###
+to[t] t array(a t[])
	a.try-as-l1-leaf ?? for x : a; x
+to[t] t mut-array(a t[])
	for x : a; x

list-cast[out, in] out[](a in[]) unsafe
	assert size-of@out == size-of@in
	# TODO:PERF
	a.to.array-cast::(out array) to

+==[t] bool(a t[], b t[]) t equal
	(trusted a list-reference-equal b) || a sequence-equal b

+<=>[t] comparison(a t[], b t[]) t compare
	if trusted a list-reference-equal b
		equal
	else
		a sequence-compare b

###
`true` iff `a.size == 0`.
This is O(1).
###
+is-empty[t] bool(a t[]) bare
	match a.root node
	as leaf xs
		xs is-empty
	as branch _
		false

###
Concatenate two lists.
This is O(log n), where `n` is the size of the smaller list.
###
+~~[t] t[](a t[], b t[])
	if a is-empty
		b
	elif b is-empty
		a
	else
		# Concatenate the smaller list onto the bigger one.
		match a.depth <=> b.depth
		as less
			(a.root cat-left-node-l1 b.root),
		as equal
			if a.size < b.size
				(a.root cat-left-node-l1 b.root),
			else
				(a.root cat-right-node-l1 b.root),
		as greater
			(a.root cat-right-node-l1 b.root),

###
Prepend an element to a list.
This is O(log n), amortized O(1).
###
+~[t] t[](a t, b t[])
	((a,) cat-left-array-l1 b.root),

###
Append an element to a list.
This is O(log n), amortized O(1).
###
+~[t] t[](a t[], b t)
	(a.root cat-right-array-l1 (b,)),

# 'r' is bigger, add 'l' to the left
-cat-left-node-level[leaf, lower] (leaf, lower) node(
	l (leaf, lower) node,
	r (leaf, lower) node,
	cat-left-array-lower lower mut(left leaf, right lower),
	cat-left-node-lower lower mut(left lower, right lower),
) leaf concatenate, leaf size-bytes, lower new
	match l
	as leaf xs
		xs cat-left-array-level r, cat-left-array-lower
	as branch bl
		match r
		as leaf _
			# 'r' should be bigger
			unreachable
		as branch br
			down1 = cat-left-array-lower[bl.right ~~ br.left, br.down]
			down2 = cat-left-node-lower[bl.down, down1]
			(bl.left, down2, br.right) branch

# 'l' is bigger, add 'r' to right
-cat-right-node-level[leaf, lower] (leaf, lower) node(
	l (leaf, lower) node,
	r (leaf, lower) node,
	cat-right-array-lower lower mut(left lower, right leaf),
	cat-right-node-lower lower mut(left lower, right lower),
) leaf concatenate, leaf size-bytes, lower new
	match r
	as leaf xs
		l cat-right-array-level xs, cat-right-array-lower
	as branch br
		match l
		as leaf _
			# 'l' should be bigger
			unreachable
		as branch bl
			down1 = cat-right-array-lower[bl.down, bl.right ~~ br.left]
			down2 = cat-right-node-lower[down1, br.down]
			(bl.left, down2, br.right) branch

# 'r' is bigger
-cat-left-array-level[leaf, lower] (leaf, lower) node(
	l leaf,
	r (leaf, lower) node,
	cat-left-lower lower mut(left leaf, right lower),
) leaf concatenate, leaf size-bytes, lower new
	match r
	as leaf xs
		if l.size-bytes + xs.size-bytes <= max-leaf-bytes
			l ~~ xs leaf
		else
			(l, (), xs) branch
	as branch br
		if l.size-bytes + br.left.size-bytes <= max-leaf-bytes
			(l ~~ br.left, br.down, br.right) branch
		else
			(l, cat-left-lower[br.left, br.down], br.right) branch

-cat-right-array-level[leaf, lower] (leaf, lower) node(
	l (leaf, lower) node,
	r leaf,
	cat-right-lower lower mut(left lower, right leaf),
) leaf concatenate, leaf size-bytes, lower new
	match l
	as leaf xs
		if xs.size-bytes + r.size-bytes <= max-leaf-bytes
			xs ~~ r leaf
		else
			(xs, (), r) branch
	as branch br
		if br.right.size-bytes + r.size-bytes <= max-leaf-bytes
			(br.left, br.down, br.right ~~ r) branch
		else
			(br.left, cat-right-lower[br.down, br.right], r) branch

-cat-left-node-l1[t] t l1(l t l1, r t l1)
	node = l.node cat-left-node-level r.node,
		((xs, lower) => (xs,) cat-left-array-l2 lower),
		(x, y) => x cat-left-node-l2 y
	node,

-cat-right-node-l1[t] t l1(l t l1, r t l1)
	node = l.node cat-right-node-level r.node,
		((lower, xs) => lower cat-right-array-l2 (xs,)),
		((x, y) => x cat-right-node-l2 y)
	node,

-cat-left-array-l1[t] t l1(l t array, r t l1)
	(l cat-left-array-level r.node, (xs, lower) => (xs,) cat-left-array-l2 lower),

-cat-right-array-l1[t] t l1(l t l1, r t array)
	(l.node cat-right-array-level r, (lower, xs) => lower cat-right-array-l2 (xs,)),

-cat-left-node-l2[t] t l2(l t l2, r t l2)
	node = l.node cat-left-node-level r.node,
		((xs, lower) => (xs,) cat-left-array-l3 lower),
		((x, y) => x cat-left-node-l3 y)
	node,

-cat-right-node-l2[t] t l2(l t l2, r t l2)
	node = l.node cat-right-node-level r.node,
		((lower, xs) => lower cat-right-array-l3 (xs,)),
		((x, y) => x cat-right-node-l3 y)
	node,

-cat-left-array-l2[t] t l2(l t array2d, r t l2)
	(l cat-left-array-level r.node, (xs, lower) => (xs,) cat-left-array-l3 lower),

-cat-right-array-l2[t] t l2(l t l2, r t array2d)
	(l.node cat-right-array-level r, (lower, xs) => lower cat-right-array-l3 (xs,)),

-cat-left-node-l3[t] t l3(l t l3, r t l3)
	l.nodes ~~ r.nodes,

-cat-right-node-l3[t] t l3(l t l3, r t l3)
	l.nodes ~~ r.nodes,

-cat-left-array-l3[t] t l3(l t array3d, r t l3)
	l ~~ r.nodes,

-cat-right-array-l3[t] t l3(l t l3, r t array3d)
	l.nodes ~~ r,

# Leaves are allowed to be arbitrarily long,
# this is just the limit when we would normally make a branch
-max-leaf-bytes nat64()
	64

-size-bytes[t] spec
	size-bytes nat64(a t)
# 'trusted' since we are just using it to guide branch sizes
# (which should have no observable effect)
-size-bytes[t] nat64(a t array)
	trusted a.size * size-of@t
-size-bytes[t] nat64(a t array2d)
	a.arrays size-bytes

-force[t] t(a t?) bare
	if x ?= a
		x
	else
		unreachable

region spec impls (see collection.crow)

###
Number of elements in the list.
This is O(n).
###
+size[t] nat64(a t[]) bare
	a.end - a.begin

+iterate[t] bool(a t[], f bool mut(elem t))
	a iterate-chunks chunk =>
		chunk iterate f

+list-iterator[t] record by-val
	-list t[]
	# Always non-empty
	-cur-chunk t array
	# Always be a valid index
	-next-index-in-chunk nat64
	# Identifies where cur-chunk is from
	-pos t position

-position[t] union
	l1-leaf
	l1-left
	l1-right
	l2-leaf t array-2d-iterator
	l2-left t array-2d-iterator
	l2-right t array-2d-iterator
	l3-leaf t array-3d-iterator

+==[t] bool(a t list-iterator, b t list-iterator) t equal
	assert a.list == b.list : "can't compare iterators from different lists"
	if trusted a.list list-reference-equal b.list
		# No need to test position since that determines cur-chunk
		same-chunk = trusted a.cur-chunk array-reference-equal b.cur-chunk
		same-chunk && a.next-index-in-chunk == b.next-index-in-chunk
	else
		a.next-index == b.next-index
+<=>[t] comparison(a t list-iterator, b t list-iterator) t equal
	assert a.list == b.list : "can't compare iterators from different lists"
	a.next-index <=> b.next-index

-level[t] t level(a t position) bare
	a.level-and-side a

-side[t] side(a t position) bare
	a.level-and-side b

-level-and-side[t] (t level, side)(a t position) bare
	match a
	as l1-leaf
		l1, leaf
	as l1-left
		l1, left
	as l1-right
		l1, right
	as l2-leaf i
		i l2, leaf
	as l2-left i
		i l2, left
	as l2-right i
		i l2, right
	as l3-leaf i
		i l3, leaf

-level[t] union
	l1
	l2 t array-2d-iterator
	l3 t array-3d-iterator

-side union(left, leaf, right)
-== bool(a side, b side)
-<=> comparison(a side, b side)

+next-index[t] nat64(a t list-iterator) bare
	match a pos
	as l1-leaf
		a next-index-in-chunk
	as l1-left
		a next-index-in-chunk
	as l1-right
		b = a.list get-l1-branch
		b.left.size + b.down.total-size + a.next-index-in-chunk
	as l2-leaf i
		a.list.get-l1-branch.left.size + (a next-index-2d i)
	as l2-left i
		a.list.get-l1-branch.left.size + (a next-index-2d i)
	as l2-right i
		b = a.list get-l2-branch
		a.list.get-l1-branch.left.size + b.left.total-size + b.down.total-size + (a next-index-2d i)
	as l3-leaf i
		a.list.get-l1-branch.left.size + a.list.get-l2-branch.left.total-size + (a next-index-3d i)
-total-size[t] spec
	total-size nat64(a t)
-total-size[t] nat64(a t l2) bare
	a.node total-size
-total-size[t] nat64(a t l3) bare
	a.nodes total-size
-total-size[leaf, lower] nat64(a (leaf, lower) node) leaf total-size, lower total-size, bare
	match a
	as leaf xs
		xs total-size
	as branch b
		b.left.total-size + b.down.total-size + b.right.total-size
-next-index-2d[t] nat64(a t list-iterator, i t array-2d-iterator) bare
	i.slice-left.total-size + a.next-index-in-chunk
-next-index-3d[t] nat64(a t list-iterator, i t array-3d-iterator) bare
	left, cur = i slice-left
	left.total-size + cur.total-size + a.next-index-in-chunk

+begin[t] t list-iterator(a t[]) bare
	match a.root node
	as leaf xs
		a, xs, 0, l1-leaf
	as branch b
		a, b.left, 0, l1-left

+end[t] t list-iterator(a t[]) bare
	match a.root node
	as leaf xs
		a, xs, xs.size, l1-leaf
	as branch b
		a, b.right, b.right.size, l1-right

+collection[t] t[](a t list-iterator) bare
	a list

+ +[t] t list-iterator(a t list-iterator, n nat64) bare
	# TODO:PERF
	cur mut = a
	i mut nat64 = 0
	loop
		if i == n
			break cur
		elif _, next ?= cur next
			cur := next
			i +:= 1
			continue
		else
			break throw "iterator went too far"

+ -[t] t list-iterator(a t list-iterator, n nat64) bare
	# TODO:PERF
	cur mut = a
	i mut nat64 = 0
	loop
		if i == n
			break cur
		elif prev, _ ?= cur prev
			cur := prev
			i +:= 1
			continue
		else
			break throw "iterator went too far"

+ -[t] nat64(a t list-iterator, b t list-iterator) bare
	# TODO:PERF
	a.next-index - b.next-index

+next[t] (t, t list-iterator)?(a t list-iterator) bare
	if a.next-index-in-chunk < a.cur-chunk.size
		right t list-iterator = a.list, a.cur-chunk, a.next-index-in-chunk + 1, a.pos
		(a.cur-chunk[a next-index-in-chunk], right),
	else
		match a pos
		as l1-leaf
			()
		as l1-left
			a next-to-l2-left
		as l1-right
			()
		as l2-leaf i
			if iter ?= i move-right
				a next-set-chunk *iter, iter.l2-leaf
			else
				a next-to-l1-right
		as l2-left i
			if iter ?= i move-right
				a next-set-chunk *iter, iter.l2-left
			else
				a next-to-l3
		as l2-right i
			if iter ?= i move-right
				a next-set-chunk *iter, iter.l2-right
			else
				a next-to-l1-right
		as l3-leaf i
			if iter ?= i move-right
				a next-set-chunk *iter, iter.l3-leaf
			else
				a next-to-l2-right


+prev[t] (t list-iterator, t)?(a t list-iterator) bare
	if a.next-index-in-chunk != 0
		left t list-iterator = a.list, a.cur-chunk, a.next-index-in-chunk - 1, a.pos
		(left, a.cur-chunk[a.next-index-in-chunk - 1]),
	else
		match a pos
		as l1-leaf
			()
		as l1-left
			()
		as l1-right
			a prev-to-l2-right
		as l2-leaf i
			if iter ?= i move-left
				a prev-set-chunk *iter, iter.l2-leaf
			else
				a prev-to-l1-left
		as l2-left i
			if iter ?= i move-left
				a prev-set-chunk *iter, iter.l2-left
			else
				a prev-to-l1-left
		as l2-right i
			if iter ?= i move-left
				a prev-set-chunk *iter, iter.l2-right
			else
				a prev-to-l3
		as l3-leaf i
			if iter ?= i move-left
				a prev-set-chunk *iter, iter.l3-leaf
			else
				a prev-to-l2-left

-next-set-chunk[t] (t, t list-iterator)?(a t list-iterator, chunk t array, pos t position) bare
	(chunk[0], (a.list, chunk, 1, pos)),

-prev-set-chunk[t] (t list-iterator, t)?(a t list-iterator, chunk t array, pos t position) bare
	((a.list, chunk, chunk.size - 1, pos), chunk[end - 1]),

-next-to-l1-right[t] (t, t list-iterator)?(a t list-iterator) bare
	a next-set-chunk a.list.get-l1-branch.right, l1-right

-prev-to-l1-left[t] (t list-iterator, t)?(a t list-iterator) bare
	a prev-set-chunk a.list.get-l1-branch.left, l1-left

-next-to-l2-left[t] (t, t list-iterator)?(a t list-iterator) bare
	match a.list.get-l2 node
	as leaf xs
		if xs is-empty
			a next-to-l1-right
		else
			a next-set-chunk xs[0], xs.begin.l2-leaf
	as branch b
		a next-set-chunk b.left[0], b.left.begin.l2-left

-prev-to-l2-left[t] (t list-iterator, t)?(a t list-iterator) bare
	iter2d = a.list.get-l2-branch.left end
	a prev-set-chunk *iter2d, iter2d.l2-left

-next-to-l2-right[t] (t, t list-iterator)?(a t list-iterator) bare
	iter2d = a.list.get-l2-branch.right begin
	a next-set-chunk *iter2d, iter2d.l2-right

-prev-to-l2-right[t] (t list-iterator, t)?(a t list-iterator) bare
	match a.list.get-l2 node
	as leaf xs
		if xs is-empty
			a prev-to-l1-left
		else
			a prev-set-chunk xs[end - 1], xs.end.l2-leaf
	as branch b
		a prev-set-chunk b.right[end - 1], b.right.end.l2-right

-next-to-l3[t] (t, t list-iterator)?(a t list-iterator) bare
	nodes = a.list.get-l3 nodes
	if nodes is-empty
		a next-to-l2-right
	else
		a next-set-chunk nodes[0][0], nodes.begin.l3-leaf

-prev-to-l3[t] (t list-iterator, t)?(a t list-iterator) bare
	nodes = a.list.get-l3 nodes
	if nodes is-empty
		a prev-to-l2-left
	else
		a prev-set-chunk nodes[end - 1][end - 1], nodes.end.l3-leaf

+slice[t] t[](begin t list-iterator, end t list-iterator)
	end-of-same-list = if trusted begin.list list-reference-equal end.list
		end
	else
		begin.list.begin + end.next-index
	begin slice-same-list end-of-same-list ?? throw "Invalid slice: begin > end"

# returns empty option if a > b
-slice-same-list[t] t[]?(a t list-iterator, b t list-iterator)
	a-level = a.pos level
	b-level = b.pos level
	a-side = a.pos side
	b-side = b.pos side
	match a-level
	as l1
		match b-level
		as l1
			match a-side <=> b-side
			as less
				(a.slice-right-cur-chunk make-l1 a.list.get-l2, b.slice-left-cur-chunk),
			as equal
				a slice-same-array1d b
			as greater
				()
		as l2 bi
			if a-side == left
				if b-side == right
					branch = a.list get-l2-branch
					l2 = branch.left make-l2 branch.down, bi.slice-left
					(a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk),
				else
					(a.slice-right-cur-chunk make-l1 (bi.slice-left.leaf,), b.slice-left-cur-chunk),
		as l3 bi
			if a-side == left
				branch = a.list get-l2-branch
				left, cur = bi slice-left
				l2 = branch.left make-l2 (left,), cur
				(a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk),
	as l2 ai
		match b.pos level
		as l1
			if b-side == right
				if a-side == left
					branch = a.list get-l2-branch
					l2 = ai.slice-right make-l2 branch.down, branch.right
					(a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk),
				else
					down t l2 = ai.slice-right.leaf,
					(a.slice-right-cur-chunk make-l1 down, b.slice-left-cur-chunk),
		as l2 bi
			match a-side <=> b-side
			as less
				assert a-side == left && b-side == right
				l2 = ai.slice-right make-l2 a.list.get-l3, bi.slice-left
				(a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk),
			as equal
				a slice-same-array2d ai, b, bi
			as greater
				()
		as l3 bi
			if a-side == left
				left, cur = bi slice-left
				l2 = ai.slice-right make-l2 (left,), cur
				(a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk),
	as l3 ai
		match b.pos level
		as l1
			if b-side == right
				branch = a.list get-l2-branch
				cur, right = ai slice-right
				l2 = cur make-l2 (right,), branch.right
				(a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk),
		as l2 bi
			if b-side == right
				cur, right = ai slice-right
				l2 t l2 = cur make-l2 (right,), bi.slice-left
				(a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk),
		as l3 bi
			a slice-both-l3 ai, b, bi

-slice-left-cur-chunk[t] t array(a t list-iterator)
	a.cur-chunk[0 .. a.next-index-in-chunk]
-slice-right-cur-chunk[t] t array(a t list-iterator)
	a.cur-chunk[a.next-index-in-chunk .. end]

-slice-same-array1d[t] t[]?(a t list-iterator, b t list-iterator)
	assert trusted a.cur-chunk array-reference-equal b.cur-chunk
	if a.next-index-in-chunk <= b.next-index-in-chunk
		a.cur-chunk[a.next-index-in-chunk .. b.next-index-in-chunk].to,

-slice-same-array2d[t] t[]?(
	a t list-iterator,
	ai t array-2d-iterator,
	b t list-iterator,
	bi t array-2d-iterator,
)
	arrays = ai arrays
	assert trusted bi.arrays.arrays array-reference-equal arrays.arrays
	match ai.index-2d <=> bi.index-2d
	as less
		l2 t l2 = arrays[ai.index-2d + 1 .. bi.index-2d].leaf,
		(a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk),
	as equal
		a slice-same-array1d b
	as greater
		()

-slice-both-l3[t] t[]?(
	a t list-iterator,
	ai t array-3d-iterator,
	b t list-iterator,
	bi t array-3d-iterator,
)
	arrays = ai arrays
	assert trusted bi.arrays.arrays array-reference-equal arrays.arrays
	match ai.index-3d <=> bi.index-3d
	as less
		l3 t l3 = (arrays[ai.index-3d + 1 .. bi.index-3d],)
		l2l = arrays[ai index-3d][ai.index-2d + 1 .. end]
		l2r = arrays[bi index-3d][0 .. bi.index-2d]
		l2 = l2l make-l2 l3, l2r
		(a.slice-right-cur-chunk make-l1 l2, b.slice-left-cur-chunk),
	as equal
		array2d = arrays[ai index-3d]
		a slice-same-array2d (array2d, ai.index-2d), b, (array2d, bi.index-2d)
	as greater
		()

-level[l, leaf] spec
	is-empty bool(level l)
	pop-left (leaf, l)(level l)
	pop-right (l, leaf)(level l)

-make-level-generic[leaf, lower] (leaf, lower) node(
	left leaf,
	down lower,
	right leaf,
) leaf concatenate, leaf is-empty, (lower, leaf) level
	if down is-empty
		left ~~ right leaf
	else
		if left is-empty
			if right is-empty
				pair0 = down pop-left
				if pair0.b is-empty
					pair0.a leaf
				else
					pair1 = pair0.b pop-right
					(pair0.a, pair1.a, pair1.b) branch
			else
				down-left, down-down = down pop-left
				if down-down is-empty
					down-left ~~ right leaf
				else
					(down-left, down-down, right) branch
		elif right is-empty
			down-down, down-right = down pop-right
			if down-down is-empty
				left ~~ down-right leaf
			else
				(left, down-down, down-right) branch
		else
			(left, down, right) branch

-make-l1[t] t[](left t array, down t l2, right t array)
	l1 t l1 = (left make-level-generic down, right),
	l1,

-make-l2[t] t l2(left t array2d, down t l3, right t array2d)
	(left make-level-generic down, right),

-pop-left[t] (t array, t l2)(a t l2)
	match a node
	as leaf xs
		xs[0], (xs[1 .. end].leaf,)
	as branch b
		bl t array2d = b left
		popped = bl[0]
		rest t l2 = if b.left.arrays.size == 0
			unreachable
		elif b.left.arrays.size == 1
			if b.down is-empty
				b.right.leaf,
			else
				left, cur = b.down pop-left
				(left, cur, b.right).branch,
		else
			(b.left[1 .. end], b.down, b.right).branch,
		popped, rest

-pop-right[t] (t l2, t array)(a t l2)
	match a node
	as leaf xs
		(xs[0 .. end - 1].leaf,), xs[end - 1]
	as branch b
		popped t array = b.right[end - 1]
		rest t l2 = if b.right.arrays.size == 0
			unreachable
		elif b.right.arrays.size == 1
			if b.down is-empty
				b.left.leaf,
			else
				cur, right = b.down pop-right
				(b.left, cur, right).branch,
		else
			(b.left, b.down, b.right[0 .. end - 1]).branch,
		rest, popped

-pop-left[t] (t array2d, t l3)(a t l3)
	a.nodes[0], (a.nodes[1 .. end],)

-pop-right[t] (t l3, t array2d)(a t l3)
	(a.nodes[0 .. end - 1],), a.nodes[end - 1]

-array-2d-iterator[t] record by-val
	arrays t array2d
	# arrays[index-2d] is the current chunk
	index-2d nat64

-begin[t] t array-2d-iterator(a t array2d) bare
	a, 0

-end[t] t array-2d-iterator(a t array2d) bare
	a, a.arrays.size - 1

-*[t] t array(a t array-2d-iterator) bare
	a.arrays[a index-2d]

-move-left[t] t array-2d-iterator?(a t array-2d-iterator) bare
	if a.index-2d > 0
		(a.arrays, a.index-2d - 1),

-move-right[t] t array-2d-iterator?(a t array-2d-iterator) bare
	if a.index-2d < a.arrays.arrays.size - 1
		(a.arrays, a.index-2d + 1),

-slice-left[t] t array2d(a t array-2d-iterator) bare
	a.arrays[0 .. a.index-2d]

-slice-right[t] t array2d(a t array-2d-iterator) bare
	a.arrays[a.index-2d + 1 .. end]

-array-3d-iterator[t] record by-val
	arrays t array3d
	index-3d nat64
	index-2d nat64

-begin[t] t array-3d-iterator(a t array3d) bare
	a, 0, 0

-end[t] t array-3d-iterator(a t array3d) bare
	a, a.arrays.size - 1, a[end - 1].arrays.size - 1

-*[t] t array(a t array-3d-iterator) bare
	a.arrays[a.index-3d][a.index-2d]

-move-left[t] t array-3d-iterator?(a t array-3d-iterator) bare
	if a.index-2d > 0
		(a.arrays, a.index-3d, a.index-2d - 1),
	elif a.index-3d > 0
		(a.arrays, a.index-3d - 1, a.arrays[a.index-3d - 1].arrays.size - 1),

-move-right[t] t array-3d-iterator?(a t array-3d-iterator) bare
	if a.index-2d < a.arrays[a.index-3d].arrays.size - 1
		(a.arrays, a.index-3d, a.index-2d + 1),
	elif a.index-3d < a.arrays.arrays.size - 1
		(a.arrays, a.index-3d + 1, 0),

-slice-left[t] (t array3d, t array2d)(a t array-3d-iterator) bare
	a2d t array-2d-iterator = a.arrays[a index-3d], a.index-2d
	a.arrays[0 .. a.index-3d], a2d.slice-left

-slice-right[t] (t array2d, t array3d)(a t array-3d-iterator) bare
	a2d t array-2d-iterator = a.arrays[a index-3d], a.index-2d
	a2d.slice-right, a.arrays[a.index-3d + 1 .. end]

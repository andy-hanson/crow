no-std
import
	../bool: bool, not
	../compare: !=, <
	../json: to
	../misc: new, void
	../number: ==, <=>, +, -, *, max-value, nat64, new
	../option: ==, new, option
	../pointer: zeroed
	../range: ..
	../string: ==, interpolate, join, new, string, to
	../test-util: is
	./collection: .., -, end, for-loop, subscript, with-index
	./mut-array:
		as-slice, cast-immutable, iterate, mut-array, mut-slice, is-empty, new,
		set-subscript, size, subscript, zero-memory, zeroed-mut-array
	./list: ==, ~=, build, is-empty, list, new, size, subscript, to

# Mutable double-ended queue.
+mut-deque[t] record mut
	-inner mut t mut-array
	# Index of the first element. 'nil' for an empty queue.
	-left mut nat64
	# Index of the element after the last. 'nil' for an empty queue.
	# This should never be inner.size; it wraps around to 0.
	-right mut nat64

-nil nat64()
	max-value
-prev-index[t] nat64(a t mut-deque, index nat64)
	forbid index == nil
	(index == 0 ? a.inner.size : index) - 1
-next-index[t] nat64(a t mut-deque, index nat64)
	forbid index == nil
	index == a.inner.size - 1 ? 0 : index + 1

# New empty `mut-deque`.
+new[t] t mut-deque()
	(), nil, nil

###
Copy elements to a list.

This is O(n).
###
+to[t] t[](a t mut-deque)
	trusted a.to.cast-immutable to

-to[t] t mut-array(a t mut-deque)
	guard !a.is-empty
	res t mut-array = trusted a.size zeroed-mut-array
	res.as-slice copy-from-deque a
	res

# Copy elements to a new deque.
+copy[t] t mut-deque(a t mut-deque)
	a.to, 0, 0

# `true` iff `a.size == 0`.
+is-empty[t] bool(a t mut-deque)
	a.left == nil

# Number of elements in the deque.
+size[t] nat64(a t mut-deque)
	match a.left <=> a.right
	as less
		a.right - a.left
	as equal
		unless a.left == nil
			a.inner size
	as greater
		a.inner.size - a.left + a.right

# Push a value to the left.
+push[t] void(value t, a t mut-deque)
	trusted
		a ensure-capacity
		a.left := a prev-index a.left
		a.inner[a.left] := value

# Push a value to the right.
+push[t] void(a t mut-deque, value t)
	trusted
		a ensure-capacity
		assert a.right < a.inner.size
		a.inner[a.right] := value
		a.right := a next-index a.right

###
Returns the leftmost element without removing it.

Returns an empty option iff `a` is empty.
###
+peek-left[t] t?(a t mut-deque)
	guard a.left != nil
	a.inner[a left],

###
Returns the rightmost element without removing it.

Returns an empty option iff `a` is empty.
###
+peek-right[t] t?(a t mut-deque)
	guard a.right != nil
	a.inner[a prev-index a.right],

###
Removes and returns the leftmost element.

Returns an empty option iff `a` was empty (before calling `pop-left`).
###
+pop-left[t] t?(a t mut-deque)
	guard a.left != nil
	res = a.inner[a.left]
	a.inner[a.left] := trusted zeroed
	a.left := a next-index a.left
	if a.left == a.right
		a.left := nil
		a.right := nil
		# Still hold on to `a inner`
	res,

###
Removes and returns the rightmost element.

Returns an empty option iff `a` was empty (before calling `pop-right`).
###
+pop-right[t] t?(a t mut-deque)
	guard a.right != nil
	a.right := a prev-index a.right
	res = a.inner[a.right]
	a.inner[a.right] := trusted zeroed
	if a.right == a.left
		a.left := nil
		a.right := nil
		# Still hold on to `a inner`
	res,

###
This breaks the invariant that a.left and a.right are null for an empty queue.
Callers should then push something.
###
-ensure-capacity[t] void(a t mut-deque) unsafe
	if a.left == nil
		assert a.right == nil
		if a.inner is-empty
			a.inner := 2 zeroed-mut-array
		a.left := 0
		a.right := 0
	else
		assert a.right != nil
		forbid a.inner is-empty
		if a.left == a.right
			old-inner = a inner
			old-capacity = old-inner size
			new-capacity = old-capacity * 2
			new-inner t mut-array = new-capacity zeroed-mut-array
			new-inner[0 .. old-capacity] copy-from-deque a
			new-inner[old-capacity .. new-capacity] zero-memory
			a.inner := new-inner
			a.left := 0
			a.right := old-capacity

-copy-from-deque[t] void(dest t mut-slice, a t mut-deque)
	assert dest.size == a.size
	if a.left < a.right
		dest[0 .. end] := a.inner[a.left .. a.right]
	else
		left-to-end-size = a.inner.size - a.left
		dest[0 .. left-to-end-size] := a.inner[a.left .. end]
		dest[left-to-end-size .. end] := a.inner[0 .. a.right]

-dbg string(a nat64 mut-deque)
	" " join for i, x : a.inner with-index
		is-nil = trusted x == zeroed
		"{i == a.right ? "<-R "::string}{i == a.left ? "L-> "::string}{is-nil ? "_"::string : "{x}"}"

-verify void(a nat64 mut-deque, expected nat64[], expected-dbg string)
	a.peek-left is (expected.is-empty ? () : (expected[0],))
	a.peek-right is (expected.is-empty ? () : (expected[end - 1],))
	a.size is expected.size
	a.to::nat64[] is expected
	a.dbg is expected-dbg

test
	a nat64 mut-deque = ()
	a.pop-left is ()
	a.pop-right is ()
	a verify (), ""
	1::nat64 push a
	a verify (1,), "<-R _ L-> 1"
	a push 2
	a verify (1, 2), "2 <-R L-> 1"

	a-copy = a copy
	a-copy verify (1, 2), "<-R L-> 1 2"

	a.pop-right is (2,)
	a verify (1,), "<-R _ L-> 1"

	a.pop-right is (1,)
	a.left is nil
	a.right is nil
	a verify (), "_ _"

	a push 1
	a verify (1,), "L-> 1 <-R _"

	2::nat64 push a
	a verify (2, 1), "1 <-R L-> 2"

	3::nat64 push a
	a verify (3, 2, 1), "2 1 <-R _ L-> 3"

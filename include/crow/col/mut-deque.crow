no-std
import
	../bool: !, bool
	../compare: !=, <
	../exception: assert, forbid
	../misc: void
	../opt: ==, none, opt, some
	../ptr: ==, <=>, +, -, *, as-const, mut-ptr, null, set-deref, zeroed
	../range: ..
	../str: ==, str
	../str-conv: to-str
	../test: is
	../writer: ~=, backup!, move-to-str!, writer
	../private/number-low-level: ==, <=>, nat64, wrap-add, wrap-mul
	./arr: ==, arr, arr-from-begin-end, size
	./arr-util: each-ptr, first, last
	./fix-arr:
		begin-ptr, cast-immutable, copy-from!, end-ptr, is-empty, fix-arr, set-zero-elements, size,
		subscript, uninitialized-fix-arr, zeroed-fix-arr

mut-deque<a> record mut
	# TODO:PRIVATE
	inner mut fix-arr a
	# Points to the first element. Null for an empty queue.
	left mut a mut*
	# Points to the element after the last. Null for an empty queue.
	# This should never be inner.end-ptr, it wraps around to inner.begin-ptr
	right mut a mut*

mut-deque<a> mut-deque a() trusted
	mut-deque: fix-arr<a>, null, null

arr<a> a[](a mut-deque a) trusted
	a.fix-arr cast-immutable

fix-arr<a> fix-arr a(a mut-deque a) trusted
	if a is-empty
		fix-arr
	else
		res = a.size uninitialized-fix-arr<a>
		res copy-from-deque! a
		res

copy<a> mut-deque a(a mut-deque a) trusted
	inner = a fix-arr
	mut-deque: inner, inner.begin-ptr, inner.begin-ptr

is-empty<a> bool(a mut-deque a) trusted
	a.left == null

size<a> nat64(a mut-deque a) trusted
	match a.left <=> a.right
	as less
		a.right - a.left
	as equal
		if a.left == null
			0
		else
			a.inner size
	as greater
		a.inner.end-ptr - a.left wrap-add a.right - a.inner.begin-ptr

# Push a value to the left.
push!<a> void(value a, a mut-deque a) trusted
	a ensure-capacity!
	if a.left == a.inner.begin-ptr
		a.left := a.inner end-ptr
	a.left := a.left - 1
	*a.left := value

# Push a value to the right.
push!<a> void(a mut-deque a, value a) trusted
	a ensure-capacity!
	assert: a.right < a.inner.end-ptr
	*a.right := value
	a.right := a.right + 1

first<a> a?(a mut-deque a) trusted
	if a.left != null
		*a.left some

last<a> a?(a mut-deque a) trusted
	if a.right != null
		fixed-right = if a.right == a.inner.begin-ptr
			a.inner end-ptr
		else
			a right
		*(fixed-right - 1) some

pop-left!<a> a?(a mut-deque a) trusted
	if a.left != null
		res = *a.left
		*a.left := zeroed
		a.left := a.left + 1
		if a.left == a.inner.end-ptr
			a.left := a.inner begin-ptr
		if a.left == a.right
			a.left := null
			a.right := null
			# Still hold on to `a inner`
		res some

pop-right!<a> a?(a mut-deque a) trusted
	if a.right != null
		if a.right == a.inner.begin-ptr
			a.right := a.inner end-ptr
		a.right := a.right - 1
		res = *a.right
		*a.right := zeroed
		if a.right == a.left
			a.left := null
			a.right := null
			# Still hold on to `a inner`
		res some

# This temporarily breaks the invariant that a.left and a.right are null for an empty queue.
.ensure-capacity!<a> void(a mut-deque a) unsafe
	if a.left == null
		assert: a.right == null
		if a.inner is-empty
			a.inner := 2 zeroed-fix-arr<a>
		a.left := a.inner begin-ptr
		a.right := a.left
	else
		assert: a.right != null
		forbid: a.inner is-empty
		if a.left == a.right
			old-inner = a inner
			old-capacity = old-inner size
			new-capacity = old-capacity wrap-mul 2
			new-inner = new-capacity uninitialized-fix-arr<a>
			new-inner[0 .. old-capacity] copy-from-deque! a
			new-inner[old-capacity .. new-capacity] set-zero-elements
			a.inner := new-inner
			a.left := a.inner begin-ptr
			a.right := a.left + old-capacity

.copy-from-deque!<a> void(dest fix-arr a, a mut-deque a) trusted
	assert: dest.size == a.size
	if a.left < a.right
		dest copy-from! (a.left.as-const arr-from-begin-end a.right.as-const)
	else
		left-to-end-size = a.inner.end-ptr - a.left
		dest[0 .. left-to-end-size] copy-from! (a.left.as-const arr-from-begin-end a.inner.end-ptr.as-const)
		dest[left-to-end-size .. dest.size] copy-from! (a.inner.begin-ptr.as-const arr-from-begin-end a.right.as-const)

.dbg str(a mut-deque nat64) trusted
	out = writer
	a.inner.begin-ptr.as-const arr-from-begin-end a.inner.end-ptr.as-const each-ptr ptr =>
		if ptr == a.right.as-const
			out ~= "<-R "
		if ptr == a.left.as-const
			out ~= "L-> "
		out ~= *ptr to-str
		out ~= " "
	if !a.inner.is-empty
		out backup!
	out move-to-str!

.verify void(a mut-deque nat64, arr nat64[], expected str)
	a.first is arr.first
	a.last is arr.last
	a.size is arr.size
	a.arr is arr
	a.dbg is expected

test
	a = mut-deque<nat64>
	a.pop-left! is none
	a.pop-right! is none
	a verify [], ""
	1 push! a
	a verify [1], "<-R 0 L-> 1"
	a push! 2
	a verify [1, 2], "2 <-R L-> 1"

	a-copy = a copy
	a-copy verify [1, 2], "<-R L-> 1 2"

	a.pop-right! is 2.some
	a verify [1], "<-R 0 L-> 1"

	a.pop-right! is 1.some
	assert: a.left == null
	assert: a.right == null
	a verify [], "0 0"

	a push! 1
	a verify [1], "L-> 1 <-R 0"

	2 push! a
	a verify [2, 1], "1 <-R L-> 2"

	3 push! a
	a verify [3, 2, 1], "2 1 <-R 0 L-> 3"

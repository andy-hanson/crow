no-std
import
	..bool: !, ==, bool, false, true
	..compare: !=, <=, >, >=, compare
	..exception: assert
	..fun: subscript
	..hash: hash-mix
	..misc: data, void
	..opt: force, none, opt, or-default, some
	..ptr: ==, <=>, +, ptr, set-subscript, size-of, subscript
	..str: ==, str
	..str-conv: to-str
	..test: is
	..writer: ~=, backup!, move-to-str!, writer
	..private.number-low-level: ==, <=>, nat64, wrap-add, wrap-sub, wrap-mul
	.arr: ==, arr
	.arr-util: fold
	.frozen-unordered-set:
		alloc-count, begin-ptr, each-unordered, empty?, end-ptr, fold-unordered-with-index,
		frozen-unordered-set, overhead-bytes, size, try-get-unordered-index,
		unsafe-frozen-unordered-set-from-mut-arr-cast-immutable
	.index-set:
		alloc-count, count-greater-or-equal, deep-size-bytes, each, empty?, filter-less, index-set,
		size, subscript, try-remove
	.mut-arr: begin-ptr, cast-immutable, end-ptr, mut-arr-from-begin-end, uninitialized-mut-arr

unordered-set<?a> record
	# TODO:PRIVATE
	add add-node ?a
	remove index-set

.add-node<?a> record
	here frozen-unordered-set ?a
	left opt add-node ?a

unordered-set unordered-set ?a() data<?a> compare<?a> hash-mix<?a>
	unordered-set: (add-node: frozen-unordered-set, none), index-set

unordered-arr arr ?a(a unordered-set ?a) data<?a> compare<?a> hash-mix<?a>
	# TODO: If a has a single add node and no remove, just return that
	a map-to-arr-unordered x => x

alloc-count nat64(a unordered-set ?a) unsafe
	a.remove.alloc-count alloc-count-recur a.add
.alloc-count-recur nat64(acc nat64, a add-node ?a) unsafe
	mid = acc wrap-add a.here.alloc-count
	if left ?= a left
		# + 1 to allocate the left node
		mid wrap-add 1 alloc-count-recur left
	else
		mid

# TODO: any value that is removed is overhead too
overhead-bytes nat64(a unordered-set ?a) unsafe
	a.remove.deep-size-bytes overhead-bytes-recur a.add
.overhead-bytes-recur nat64(acc nat64, a add-node ?a) unsafe
	mid = acc wrap-add a.here.overhead-bytes wrap-add a.left.size-of
	if left ?= a left
		mid overhead-bytes-recur left
	else
		mid

empty? bool(a unordered-set ?a) data<?a> compare<?a> hash-mix<?a>
	a.add.here empty?

size nat64(a unordered-set ?a) data<?a> compare<?a> hash-mix<?a>
	a.remove.size add-size-recur a.add

.add-size nat64(a add-node ?a)
	0 add-size-recur a
.add-size-recur nat64(acc nat64, a add-node ?a)
	acc wrap-add a.here.size add-size-left-recur a
.add-size-left nat64(a add-node ?a)
	0 add-size-left-recur a
.add-size-left-recur nat64(acc nat64, a add-node ?a)
	if left ?= a left
		acc add-size-recur left
	else
		acc

subscript bool(a unordered-set ?a, value ?a) data<?a> compare<?a> hash-mix<?a>
	if index ?= a.add find-in-add value
		!a.remove[index]
	else
		false

.find-in-add opt nat64(a add-node ?a, value ?a) data<?a> compare<?a> hash-mix<?a>
	if index ?= a.here try-get-unordered-index value
		a.add-size-left wrap-add index some
	elif left ?= a left
		left find-in-add value

~ unordered-set ?a(a unordered-set ?a, value ?a) data<?a> compare<?a> hash-mix<?a>
	a try-add value or-default a

~ unordered-set ?a(a unordered-set ?a, values arr ?a) data<?a> compare<?a> hash-mix<?a>
	a fold values, (cur, value) => cur ~ value

try-add opt unordered-set ?a(a unordered-set ?a, value ?a) data<?a> compare<?a> hash-mix<?a>
	if index ?= a.add find-in-add value
		if new-remove ?= a.remove try-remove index
			a.add unordered-set new-remove some
	else
		a add-and-maybe-compact value some

.add-and-maybe-compact unordered-set ?a(a unordered-set ?a, value ?a) trusted data<?a> compare<?a> hash-mix<?a>
	add-size = a.add add-size
	if add-size == 0
		unordered-set: (add-node: [value].frozen-unordered-set, none), index-set
	else
		# size-right starts as 1 because we're adding a value
		plan = add-size add-and-compact-plan a.add, a.remove, 1
		if plan.compacted-size == 1
			unordered-set: (add-node: [value].frozen-unordered-set, a.add.some), a.remove
		else
			a add-and-compact add-size, plan, value

.compact-plan record
	# Total size of all non-compacted nodes (all but the new last node)
	add-size-left nat64
	# Size that the compacted node will have (sum of 'depth' rightmost nodes)
	compacted-size nat64


.add-and-compact-plan compact-plan(size-here-and-left nat64, a add-node ?a, remove index-set, size-right nat64)
	size-here = a.here size
	size-left = size-here-and-left wrap-sub size-here
	removals-here-and-right = remove count-greater-or-equal size-left
	if size-here should-compact? size-right, removals-here-and-right
		size-here-and-right = size-here wrap-add size-right
		if left ?= a left
			size-left add-and-compact-plan left, remove, size-here-and-right
		else
			size-left compact-plan size-here-and-right
	else
		size-here-and-left compact-plan size-right

.should-compact? bool(size-here nat64, size-right nat64, removals-here-and-right nat64)
	(size-right wrap-add (removals-here-and-right wrap-mul 2)) >= size-here

.add-and-compact unordered-set ?a
	a unordered-set ?a
	add-size nat64
	plan compact-plan
	value ?a
spec
	unsafe
	data<?a>
	compare<?a>
	hash-mix<?a>
body
	assert: plan.compacted-size > 1
	compacted = plan.compacted-size uninitialized-mut-arr<?a>
	compacted.begin-ptr[] := value
	compactor = compactor<?a>: compacted.begin-ptr, compacted.begin-ptr + 1, compacted.end-ptr
	new-add = compactor do-compact-recur! a.add, add-size, a.remove
	unordered-set: new-add, a.remove filter-less plan.add-size-left

.compactor<?a> record mut
	begin ptr ?a
	cur mut ptr ?a
	end ptr ?a

.do-compact-recur! add-node ?a
	compactor compactor ?a
	a add-node ?a
	add-size-here-and-left nat64
	remove index-set
spec
	unsafe
	data<?a>
	compare<?a>
	hash-mix<?a>
body
	compactor push! a.here, add-size-here-and-left, remove
	assert: compactor.cur <= compactor.end
	if compactor.cur == compactor.end
		add-node: compactor.finish, a.left
	else
		# TODO: should be able to write this inline
		new-l = add-size-here-and-left wrap-sub a.here.size
		compactor do-compact-recur! a.left.force, new-l, remove

.push! void(a compactor ?a, here frozen-unordered-set ?a, add-size-here-and-left nat64, remove index-set) unsafe
	a push-recur! here.begin-ptr, here.end-ptr, add-size-here-and-left, remove
.push-recur! void(a compactor ?a, cur ptr ?a, end ptr ?a, remove-index nat64, remove index-set) unsafe
	if cur != end
		if !remove[remove-index]
			a.cur[] := cur[]
			a.cur := a.cur + 1
		a push-recur! cur + 1, end, (remove-index wrap-add 1), remove


.finish frozen-unordered-set ?a(a compactor ?a) unsafe data<?a> compare<?a> hash-mix<?a>
	assert: a.cur == a.end
	unsafe-frozen-unordered-set-from-mut-arr-cast-immutable: a.begin mut-arr-from-begin-end a.end

region iteration

fold-unordered ?a(acc ?a, a unordered-set ?b, f act ?a(?a, ?b)) data<?b> compare<?b> hash-mix<?b>
	acc fold-unordered-recur a.add, a.add.add-size-left, a.remove, f

.fold-unordered-recur ?a(acc ?a, a add-node ?b, add-size-left nat64, remove index-set, f act ?a(?a, ?b))
	mid = acc fold-unordered-with-index a.here, (cur, x, index) =>
		if remove[add-size-left wrap-add index]
			cur
		else
			f[cur, x]
	if left ?= a left
		# TODO: should not need a local
		l = add-size-left wrap-sub a.here.size
		mid fold-unordered-recur left, l, remove, f
	else
		mid

map-to-arr-unordered arr ?out(a unordered-set ?in, f act ?out(?in)) trusted data<?in> compare<?in> hash-mix<?in>
	out = a.size uninitialized-mut-arr<?out>
	end = out.begin-ptr fold-unordered a, (cur, x) =>
		cur[] := f[x]
		cur + 1
	assert: end == out.end-ptr
	out cast-immutable

.dbg str(a unordered-set ?a) to-str<?a>
	out = writer
	out dbg-add-recur! a.add
	if !a.remove.empty?
		out ~= " - ["
		a.remove each i =>
			out ~= i to-str
			out ~= " "
		out backup!
		out ~= "]"
	out move-to-str!

.dbg-add-recur! void(out writer, a add-node ?a) to-str<?a>
	if left ?= a left
		out dbg-add-recur! left
		out ~= ", "

	if a.here empty?
		out ~= "[]"
	else
		out ~= "["
		a.here each-unordered x =>
			out ~= x to-str
			out ~= " "
		out backup!
		out ~= "]"

.verify void(a unordered-set nat64, expected str)
	a.dbg is expected

test
	a = unordered-set<nat64>
	a.empty? is true
	a.size is 0
	a verify "[]"

	b = a ~ 5
	b.empty? is false
	b.size is 1
	b.unordered-arr is [5]
	b verify "[5]"

	c = b ~ [6, 4, 1]
	c verify "[1 4 6 5]"

	d = c ~ [8]
	d verify "[1 4 6 5], [8]"

	e = d ~ [4, 10]
	e verify "[1 4 6 5], [10 8]"
	e.size is 6
	e[0] is false
	e[1] is true
	e[2] is false
	e[3] is false
	e[4] is true
	e[5] is true
	e[6] is true
	e[7] is false
	e[8] is true
	e[9] is false
	e[10] is true
	e[11] is false

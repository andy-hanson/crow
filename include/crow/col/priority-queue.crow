no-std
import
	../bool: &&, bool
	../compare: <, >, <=, compare
	../fun-util: subscript
	../misc: is-data, new, void
	../number: ==, <=>, +, -, nat64
	../option: !, is-empty, new, option
	../ptr: ==, +, -, mut-ptr, set-deref
	../range: ..
	../string: ~~, ==, join, literal, new, string, to-string
	../test-util: is
	../test-util/spy: calls, fn, new, spy-act2
	../tuple: from, new, pair, to
	./array: array, first, fold, is-empty, new, size, tail
	./mut-array:
		begin-ptr, cast-immutable, end-ptr, first, mut-array, set-subscript, size, subscript,
		tail, uninitialized-mut-array
	./list: ==, first, for-loop, is-empty, list, list-equal, new, tail, to-array, to-list
	./sort: set-sort-by, sort-by

###
Immutable priority queue.

Elements are key-value pairs. Pairs are sorted by key.
Popping removes the pair with the lowest key.

If two pairs have the same key, the second pair added will be popped second.
###
priority-queue<k, v> record
	.root node<k, v>?

###
Priority queue consists of a linked list of nodes with two parts.
First part is recently inserted values. These all have a single pair in 'min' and nothing in 'pairs'.
Next part is compacted arrays of pairs. These are sorted biggest to smallest.
They grow exponentially from right to left, so total # of these nodes is logarithmic in queue size.

So node sizes might look like:

	1 1 1 8 4 2 1

A push operation just adds to the left.
Then right before a pop operation, we will compact all the left nodes into a big node,
and also compact any nodes of the same size or less with it.
(This applies recursively, so if the 3 1s were compacted,
they would join with the `1` on the right to size 4, then with the `2` on the right to size 6,
then with the `4` to size 10, then with the `8` to size 18, leaving only one node.)
###

.node<k, v> record
	min (k, v)
	pairs array (k, v)
	next node<k, v>?

# New priority queue containing the given pairs.
new<k, v> priority-queue<k, v>(...a array (k, v)) is-data<k> compare<k>
	a.to-list to-priority-queue

# New priority queue containing the given pairs.
to-priority-queue<k, v> priority-queue<k, v>(a (k, v)[]) is-data<k> compare<k>
	if a is-empty
		# TODO: type annotation should not be necessary
		()::node<k, v>?,
	else
		sorted = a sort-by pair => pair from
		root node<k, v> = sorted.first!, sorted.tail.to-array, ()
		# TODO: type annotation should not be necessary
		(root,)::node<k, v>?,

to-list<k, v> (k, v)[](a priority-queue<k, v>) is-data<k> compare<k>
	for k, v : a
		k, v

# True iff `a.size == 0`.
is-empty<k, v> bool(a priority-queue<k, v>) is-data<k> compare<k>
	a.root is-empty

###
Number of pairs in the priority queue.

This is O(n).
###
size<k, v> nat64(a priority-queue<k, v>) is-data<k> compare<k>
	acc mut = 0
	cur mut = a root
	loop
		if node ?= cur
			acc := acc + 1 + node.pairs.size
			cur := node next
			continue
		else
			break acc

###
Adds a pair to the queue.

This is O(1), since the work of sorting pairs is actually done in `pop`.
###
~ <k, v> priority-queue<k, v>(a priority-queue<k, v>, b (k, v)) is-data<k> compare<k>
	root node<k, v> = b, (), a.root
	# TODO: type annotation should not be necessary
	(root,)::node<k, v>?,

popped<k, v> record
	popped (k, v)
	rest priority-queue<k, v>

###
Removes and returns the pair with the lowest key.

Returns an empty option iff `a` is empty.

This is amortized O(log n).
###
pop<k, v> popped<k, v>?(a priority-queue<k, v>) is-data<k> compare<k>
	if root ?= a.compact-leading-nodes root
		if next ?= root next
			if popped ?= next pop-no-compact-recur root.min.from
				(root combine-with-popped popped),
			else
				root.pop-from-node,
		else
			root.pop-from-node,

.pop-from-node<k, v> popped<k, v>(a node<k, v>)
	# TODO: node<k, v>? should not be necessary
	rest node<k, v>? = if first ?= a.pairs first
		(first, a.pairs.tail, a.next),
	else
		a next
	a.min, (rest,)

# Returns none if this (or any following node) did not have a lower min.
.pop-no-compact-recur<k, v> popped<k, v>?(a node<k, v>, min k) compare<k>
	is-min = a.min.from < min
	next-popped = if next ?= a next
		next pop-no-compact-recur if is-min
			a.min from
		else
			min
	if next ?= next-popped
		(a combine-with-popped next),
	elif is-min
		a.pop-from-node,

.combine-with-popped<k, v> popped<k, v>(a node<k, v>, popped popped<k, v>)
	root node<k, v> = a.min, a.pairs, popped.rest.root
	# TODO: type annotation should not be necessary
	popped.popped, ((root,)::node<k, v>?,)

.compact-leading-nodes<k, v> priority-queue<k, v>(a priority-queue<k, v>) compare<k> trusted
	mid = a.root find-mid 0
	if mid.n-before-mid == 0
		a
	else
		root = a.root!
		match mid.mid plan root, mid.n-before-mid
		as plan-did-compact compacted
			# TODO: type annotation should not be necessary
			(compacted,)::node<k, v>?,
		as plan-will-compact n
			# TODO: type annotation should not be necessary
			((root do-compact n, mid.mid),)::node<k, v>?,

.found-mid<k, v> record
	mid node<k, v>?
	n-before-mid nat64

# Finds the first node with 'pairs' non-empty.
# Also returns the # of nodes before that
.find-mid<k, v> found-mid<k, v>(a node<k, v>?, n-before nat64)
	if node ?= a
		if node.pairs is-empty
			node.next find-mid n-before + 1
		else
			(node,), n-before
	else
		(), n-before

.plan<k, v> union
	plan-did-compact node<k, v>
	# has the number of elements to compact
	plan-will-compact nat64

# We only call this if we will definitely compact something,
# TODO: 'plan' is misnamed, this now does the compaction during the recursion
.plan<k, v> plan<k, v>(a node<k, v>?, root node<k, v>, n-singles nat64) compare<k>
	if node ?= a
		match node.next plan root, n-singles
		as plan-did-compact compacted
			(node.min, node.pairs, (compacted,)) plan-did-compact
		as plan-will-compact n-elements-to-compact
			node-size-here = 1 + node.pairs.size
			if node-size-here <= n-elements-to-compact
				n-elements-to-compact + node-size-here plan-will-compact
			else
				compacted = root do-compact n-elements-to-compact, node.next
				(node.min, node.pairs, (compacted,)) plan-did-compact
	else
		n-singles plan-will-compact

.do-compact<k, v> node<k, v>(root node<k, v>, n-to-compact nat64, nodes-to-compact node<k, v>?) trusted compare<k>
	compacted mut-array (k, v) = n-to-compact uninitialized-mut-array
	mid = compacted.begin-ptr compact-non-singles nodes-to-compact
	end = mid compact-singles root
	assert end == compacted.end-ptr
	compacted set-sort-by pair => pair from
	arr = compacted cast-immutable
	arr.first!, arr.tail, ()

.compact-singles<k, v> (k, v) mut*(out (k, v) mut*, a node<k, v>) unsafe
	if a.pairs is-empty
		# Output later nodes first to preserve insertion order (since they're inserted to the front)
		pos = if next ?= a next
			out compact-singles next
		else
			out
		*pos := a.min
		pos + 1
	else
		out

.compact-non-singles<k, v> (k, v) mut*(out (k, v) mut*, a node<k, v>?) unsafe
	if node ?= a
		*out := node min
		out2 = out + 1 fold node.pairs, (cur, x) =>
			*cur := x
			cur + 1
		out2 compact-non-singles node.next
	else
		out

.dbg string(a priority-queue<nat64, string>)
	a.root dbg
.dbg string(a node<nat64, string>?)
	if node ?= a
		pairs = ", " join for pair : node.pairs to-list
			"{pair from} {pair to}"
		rest = node.next.is-empty ? "" : "; {node.next dbg}"
		"{node.min from} {node.min to} [{pairs}]{rest}"

region iteration

for-loop<k, v> void(a priority-queue<k, v>, f act void(k, v)) is-data<k> compare<k>
	() fold a, (_, k, v) => f[k, v]

fold<a, k, v> a(acc a, a priority-queue<k, v>, f act a(a, k, v)) is-data<k> compare<k>
	acc walk-fold a.each-arr, f

.each-part<k, v> record mut
	min mut (k, v)
	pairs mut array (k, v)

.each-arr<k, v> mut-array each-part<k, v>(a priority-queue<k, v>) trusted compare<k>
	res mut-array each-part<k, v> = a.node-count uninitialized-mut-array
	end = res.begin-ptr fill-each-arr a.root
	assert end == res.end-ptr
	res set-sort-by it => it.min from
	res

.node-count<k, v> nat64(a priority-queue<k, v>)
	0 node-count a.root

.node-count<k, v> nat64(acc nat64, a node<k, v>?)
	if node ?= a
		acc + 1 node-count node.next
	else
		acc

.fill-each-arr<k, v> each-part<k, v> mut*(out each-part<k, v> mut*, a node<k, v>?) unsafe
	if node ?= a
		*out := node.min, node.pairs
		out + 1 fill-each-arr node.next
	else
		out

.walk-fold<a, k, v> a(acc a, a mut-array each-part<k, v>, f act a(a, k, v)) compare<k>
	if head ?= a first
		min = head min
		next-acc = f[acc, min from, min to]
		if first-pair ?= head.pairs first
			head.min := first-pair
			head.pairs := head.pairs tail
			a swap-sorted
			next-acc walk-fold a, f
		else
			next-acc walk-fold a.tail, f
	else
		acc

.swap-sorted<k, v> void(a mut-array each-part<k, v>) compare<k>
	if a.size > 1 && a[0].min.from > a[1].min.from
		# TODO: use a swap function
		temp = a[0]
		a[0] := a[1]
		a[1] := temp
		a.tail swap-sorted

filter<k, v> priority-queue<k, v>(a priority-queue<k, v>, f act bool(k, v)) trusted is-data<k> compare<k>
	out mut-array (k, v) = a.size uninitialized-mut-array
	end = out.begin-ptr fold a, (cur, k, v) =>
		if f[k, v]
			*cur := k, v
			cur + 1
		else
			cur
	out[0 .. end - out.begin-ptr].cast-immutable.to-list to-priority-queue

for-loop<k-out, v-out, k-in, v-in> priority-queue<k-out, v-out>(
	a priority-queue<k-in, v-in>,
	f act (k-out, v-out)(k-in, v-in),
) is-data<k-in> compare<k-in> is-data<k-out> compare<k-out>
	a for-loop f to-priority-queue

for-loop<out, k, v> out[](a priority-queue<k, v>, f act out(k, v)) is-data<k> compare<k> trusted
	out mut-array out = a.size uninitialized-mut-array
	end = out.begin-ptr fold a, (cur, k, v) =>
		*cur := f[k, v]
		cur + 1
	assert end == out.end-ptr
	out.cast-immutable to-list

keys<k, v> k[](a priority-queue<k, v>) is-data<k> compare<k>
	for k, _ : a
		k

values<k, v> v[](a priority-queue<k, v>) is-data<k> compare<k>
	for _, v : a
		v

test
	p priority-queue<nat64, string> = ()

	p1 = p ~ (5, "5")
	p1.dbg is "5 5 []"

	p2 = p1 ~ (6, "6")
	p2.dbg is "6 6 []; 5 5 []"
	p2.compact-leading-nodes.dbg is "5 5 [6 6]"

	p2pop = p2.pop!
	p2pop.popped is (5, "5")
	p2pop.rest.dbg is "6 6 []"

	p3 = p2 ~ (4, "4")
	p4 = p3 ~ (7, "7")

	p4.dbg is "7 7 []; 4 4 []; 6 6 []; 5 5 []"

	p4pop = p4.pop!
	p4pop.popped is (4, "4")
	p4pop.rest.dbg is "5 5 [6 6, 7 7]"

	p5 = p4pop.rest ~ (6, "6b") ~ (6, "6c")
	p5.dbg is "6 6c []; 6 6b []; 5 5 [6 6, 7 7]"

	p5pop = p5.pop!
	p5pop.popped is (5, "5")
	p5pop.rest.dbg is "6 6 [7 7]; 6 6b [6 6c]"

	p6 = p5pop.rest ~ (7, "7b") ~ (8, "8")
	p6.dbg is "8 8 []; 7 7b []; 6 6 [7 7]; 6 6b [6 6c]"
	p6.size is 6
	p6-pairs (nat64, string)[] = (6, "6"), (6, "6b"), (6, "6c"), (7, "7"), (7, "7b"), (8, "8")
	p6.to-list is p6-pairs
	p6.keys is (6, 6, 6, 7, 7, 8)
	p6.values is ("6", "6b", "6c", "7", "7b", "8")

	p6pop = p6.pop!
	p6pop.rest.dbg is "6 6b [6 6c, 7 7, 7 7b, 8 8]"

	folded = "init" fold p6, (acc, k, v) => "{acc}, {k} -> {v}"
	folded is "init, 6 -> 6, 6 -> 6b, 6 -> 6c, 7 -> 7, 7 -> 7b, 8 -> 8"

	filter-order spy-act2<bool, nat64, string> = ((k, _) => k == 6),
	filtered = p6 filter filter-order.fn
	filter-calls = filter-order calls
	filter-calls is p6-pairs
	filtered.dbg is "6 6 [6 6b, 6 6c]"

	map-order spy-act2<(nat64, string), nat64, string> = ((k, v) => (10 - k), "{v}x"),
	mapped priority-queue<nat64, string> = p6 for-loop map-order.fn
	map-calls = map-order calls
	map-calls is p6-pairs
	mapped.dbg is "2 8x [3 7x, 3 7bx, 4 6x, 4 6bx, 4 6cx]"

.== bool(a (nat64, string)[], b (nat64, string)[])
	a list-equal b

# TODO: pair should be equatable
.== bool(a (nat64, string), b (nat64, string))
	a.from == b.from && a.to == b.to

.== bool(a string[], b string[])
	a list-equal b

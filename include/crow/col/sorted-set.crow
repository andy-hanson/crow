no-std
import
	../bool: !, &&, ==, bool, false, new, true
	../compare: <, <=, >, >=, compare
	../fun-util: subscript
	../misc: is-data, new, void
	../opt: !, ??, new, opt
	../ptr: ==, <=>, +, -, *, as-const, const-ptr, mut-ptr, set-deref
	../range: ..
	../str: ==, <=>, literal, str
	../str-conv: finish, interp, to-str, with-str, with-value
	../test-util: is
	../writer: ~=, ~~=, backup, move-to-str, new, writer
	../private/bootstrap: hard-assert, hard-forbid, hard-unreachable
	../private/number-low-level: ==, <=>, nat64, wrap-add, wrap-mul, wrap-sub
	./arr: arr, for-loop, is-empty, new, size, subscript
	./arr-util: tail
	./experimental/index-set:
		~, count-greater-or-equal, count-range, filter-less, for-loop, in, index-set, is-empty, new,
		size, try-remove
	./fix-arr:
		begin-ptr, cast-immutable, end-ptr, is-empty, fix-arr, set-subscript, size, subscript,
		uninitialized-fix-arr
	./sort: sort
	./private/arr-low-level: arr-from-begin-end, begin-ptr, end-ptr
	./private/sort-utils: binary-search-exact-index

# This is like `set`, but keeps elements in sorted order.
sorted-set<a> record
	.add add-node a
	.remove index-set

###
We store add/remove separately.
Add nodes are a linked list where links point to the left. Largest node is on the left. Nodes are added to the right.
###

.add-node<a> record
	values a[]
	left add-node<a>?

# Set containing the given elements (with duplicates removed).
new<a> sorted-set a(...a a[]) is-data<a> compare<a>
	a to-sorted-set

# Set containing the given elements (with duplicates removed).
to-sorted-set<a> sorted-set a(a a[]) is-data<a> compare<a>
	# TODO: type annotation should be unnecessary
	(a.sort, ()) :: add-node<a>, ()

# Copies elements to an array.
to-arr<a> a[](a sorted-set a) is-data<a> compare<a>
	for x : a
		x

# `true` iff `a.size == 0`.
is-empty<a> bool(a sorted-set a)
	# Compaction ensures that this is the only case where we store empty values.
	a.add.values is-empty

# Number of elements in the set.
size<a> nat64(a sorted-set a)
	a.remove.size add-size-recur a.add
.add-size<a> nat64(a add-node a)
	0 add-size-recur a
.add-size-recur<a> nat64(acc nat64, a add-node a)
	acc wrap-add a.values.size add-size-left-recur a
.add-size-left<a> nat64(a add-node a)
	0 add-size-left-recur a
.add-size-left-recur<a> nat64(acc nat64, a add-node a)
	if left ?= a left
		acc add-size-recur left
	else
		acc

# True if `value` is an element of the set.
in<a> bool(value a, a sorted-set a) is-data<a> compare<a>
	if index ?= a.add find-in-add value
		!(index in a.remove)

.find-in-add<a> nat64?(a add-node a, value a) compare<a>
	if index ?= a.values binary-search-exact-index value
		(a.add-size-left wrap-add index),
	elif left ?= a left
		left find-in-add value

.find-in-add-for-remove-result record
	value-index nat64
	size-left nat64
	size-here nat64
	size-right nat64

.find-in-add-for-remove<a> find-in-add-for-remove-result?(a add-node a, value a, size-right nat64) compare<a>
	if index ?= a.values binary-search-exact-index value
		sl = a add-size-left
		((sl wrap-add index), sl, a.values.size, size-right),
	elif left ?= a left
		# TODO: should be able to write this inline
		new-size-right = size-right wrap-add a.values.size
		left find-in-add-for-remove value, new-size-right

###
Adds an element to the set.

If `value` is already in the set, returns `a` unmodified.
###
~ <a> sorted-set a(a sorted-set a, value a) is-data<a> compare<a>
	a try-add value ?? a

###
If `value` is already in the set, returns an empty option.
Else, adds it and returns the new set.
###
try-add<a> sorted-set<a>?(a sorted-set a, value a) is-data<a> compare<a>
	if index ?= a.add find-in-add value
		# In 'add', but may need to remove from removals
		if new-remove ?= a.remove try-remove index
			(a.add, new-remove),
	else
		(a add-and-maybe-compact value),

###
Removes a value from the set.

If `value` is not in the set, returns `a` unmodified.
###
- <a> sorted-set a(a sorted-set a, value a) is-data<a> compare<a>
	a try-remove value ?? a

###
If `value` is in the set, removes it and returns the new set.
Else, returns an empty option.
###
try-remove<a> sorted-set<a>?(a sorted-set a, value a) trusted is-data<a> compare<a>
	if r ?= a.add find-in-add-for-remove value, 0
		removals-here-and-right = 1 wrap-add (a.remove count-greater-or-equal r.size-left)
		if r.size-here should-compact r.size-right, removals-here-and-right
			compacted-size = r.size-here wrap-add r.size-right wrap-sub 1
			(a remove-and-compact (r.size-left, compacted-size), r.value-index),
		else
			(a.add, a.remove ~ r.value-index),

.add-and-maybe-compact<a> sorted-set a(a sorted-set a, value a) trusted compare<a>
	add-size = a.add add-size
	if add-size == 0
		# TODO: type annotation should be unnecessary
		((value,), ()) :: add-node<a>, ()
	else
		# size-right starts as 1 because we're adding a value
		plan = add-size add-and-compact-plan a.add, a.remove, 1
		if plan.compacted-size == 1
			# TODO: type annotation should be unnecessary
			((value,), (a.add,)) :: add-node<a>, a.remove
		else
			a add-and-compact add-size, plan, value

.compact-plan record
	# Total size of all non-compacted nodes (all but the new last node)
	add-size-left nat64
	# Size that the compacted node will have (sum of 'depth' rightmost nodes)
	compacted-size nat64

###
Given that we're adding a new value to the right, we may compact nodes on the right.
size-here-and-left + size-right is the current size + 1.

We compact a node if:
* The combined size of all nodes to the right is >= this node's size
* Half of the values of this node have been removed
Or a combination of the two.	
###
.add-and-compact-plan<a> compact-plan(size-here-and-left nat64, a add-node a, remove index-set, size-right nat64)
	size-here = a.values size
	size-left = size-here-and-left wrap-sub size-here
	removals-here-and-right = remove count-greater-or-equal size-left
	if size-here should-compact size-right, removals-here-and-right
		size-here-and-right = size-here wrap-add size-right
		if left ?= a left
			size-left add-and-compact-plan left, remove, size-here-and-right
		else
			size-left, size-here-and-right
	else
		size-here-and-left, size-right

.should-compact bool(size-here nat64, size-right nat64, removals-here-and-right nat64)
	(size-right wrap-add (removals-here-and-right wrap-mul 2) wrap-mul 2) >= size-here

.add-and-compact<a> sorted-set a(a sorted-set a, add-size nat64, plan compact-plan, value a) unsafe compare<a>
	hard-assert: plan.compacted-size > 1
	compacted fix-arr a = plan.compacted-size uninitialized-fix-arr
	*compacted.begin-ptr := value
	compactor compactor a = compacted.begin-ptr.as-const, compacted.begin-ptr + 1, compacted.end-ptr.as-const
	new-add = compactor do-compact-recur a.add, add-size, a.remove
	new-add, (a.remove filter-less plan.add-size-left)

.remove-and-compact<a> sorted-set a(a sorted-set a, plan compact-plan, extra-removal nat64) unsafe is-data<a> compare<a>
	new-remove = a.remove filter-less plan.add-size-left
	if plan.compacted-size == 0
		if left ?= a.add left
			left, new-remove
		else
			()
	else
		compacted fix-arr a = plan.compacted-size uninitialized-fix-arr
		compactor compactor a = compacted.begin-ptr.as-const, compacted.begin-ptr, compacted.end-ptr.as-const
		old-size = plan.add-size-left wrap-add plan.compacted-size wrap-add 1
		new-add = compactor do-compact-recur a.add, old-size, a.remove ~ extra-removal
		new-add, new-remove

.compactor<a> record mut
	begin a*
	cur mut a mut*
	end a*

# NOTE: size-here-and-left is the old size, used to index into remove
.do-compact-recur<a> add-node a
	compactor compactor a
	a add-node a
	add-size-here-and-left nat64
	remove index-set
spec
	unsafe
	compare<a>
body
	compactor merge a.values, add-size-here-and-left, remove
	hard-assert: compactor.cur.as-const <= compactor.end
	if compactor.cur.as-const == compactor.end
		compactor.finish, a.left
	else
		# TODO: should be able to write this inline
		new-l = add-size-here-and-left wrap-sub a.values.size
		compactor do-compact-recur a.left!, new-l, remove

.merge<a> void(a compactor a, values a[], add-size-here-and-left nat64, remove index-set) unsafe compare<a>
	n-remove = remove count-range (add-size-here-and-left wrap-sub values.size), add-size-here-and-left
	n-added = values.size wrap-sub n-remove
	unless n-added == 0
		new-cur = a.cur + n-added
		remove-index = add-size-here-and-left wrap-sub 1
		if a.cur.as-const == a.begin
			new-cur - 1 copy-from-b-recur values.begin-ptr, values.end-ptr - 1, remove-index, remove
		else
			a-read = (a.cur - 1).as-const
			a.begin merge-recur a-read, new-cur - 1, values.begin-ptr, values.end-ptr - 1, remove-index, remove
		a.cur := new-cur

.merge-recur<a> void
	a-begin a*
	a-read a*
	a-write a mut*
	b-begin a*
	b-read a*
	b-remove-index nat64
	b-remove index-set
spec
	unsafe
	compare<a>
body
	hard-forbid: a-read < a-begin
	hard-forbid: b-read < b-begin
	hard-forbid: a-write.as-const < a-begin
	# merging from right, so take the greater value
	match *a-read <=> *b-read
	as less
		new-a-write = if b-remove-index in b-remove
			a-write
		else
			*a-write := *b-read
			a-write - 1
		unless b-read == b-begin
			a-begin merge-recur a-read, new-a-write, b-begin, b-read - 1, (b-remove-index wrap-sub 1), b-remove
		# Else -- done, everything from 'a' is in place
	as equal
		# We shouldn't store the same value twice.
		hard-unreachable
	as greater
		*a-write := *a-read
		if a-read == a-begin
			a-write - 1 copy-from-b-recur b-begin, b-read, b-remove-index, b-remove
		else
			a-begin merge-recur a-read - 1, a-write - 1, b-begin, b-read, b-remove-index, b-remove

.copy-from-b-recur<a> void
	a-write a mut*
	b-begin a*
	b-read a*
	b-remove-index nat64
	b-remove index-set
spec
	unsafe
body
	new-a-write = if b-remove-index in b-remove
		a-write
	else
		*a-write := *b-read
		a-write - 1
	unless b-read == b-begin
		new-a-write copy-from-b-recur b-begin, b-read - 1, (b-remove-index wrap-sub 1), b-remove

.finish<a> a[](a compactor a) unsafe
	hard-assert: a.cur.as-const == a.end
	a.begin arr-from-begin-end a.end

region iteration

each<a> void(a sorted-set a, f act void(a)) is-data<a> compare<a>
	() fold a, (_, x) => f[x]

fold<a, b> a(acc a, a sorted-set b, f act a(a, b)) is-data<b> compare<b>
	acc fold-recur a.init-iters, a.remove, f
.fold-recur<a, b> a(acc a, iters fix-arr iter-part b, remove index-set, f act a(a, b)) compare<b>
	if iters is-empty
		acc
	else
		least-iter-index = iters[0].values[0] find-least-iter 0, 1, iters
		least-value = iters[least-iter-index].values[0]
		iters[least-iter-index] := iters[least-iter-index] tail remove
		new-iters = if iters[least-iter-index] is-empty
			iters[least-iter-index] := iters[iters.size wrap-sub 1]
			iters[0 .. (iters.size wrap-sub 1)]
		else
			iters
		f[acc, least-value] fold-recur new-iters, remove, f

.find-least-iter<a> nat64
	current-least a
	current-least-index nat64
	iter-index nat64
	iters fix-arr iter-part a
spec
	compare<a>
body
	if iter-index == iters.size
		current-least-index
	else
		value = iters[iter-index].values[0]
		if value < current-least
			value find-least-iter iter-index, (iter-index wrap-add 1), iters
		else
			current-least find-least-iter current-least-index, (iter-index wrap-add 1), iters

.iter-part<a> record by-val
	values a[]
	remove-index nat64

.is-empty<a> bool(a iter-part a)
	a.values is-empty

.tail<a> iter-part a(a iter-part a, remove index-set)
	(a.values.tail, (a.remove-index wrap-add 1)) remove-from-front remove

.init-iters<a> fix-arr iter-part a(a sorted-set a) trusted
	iters fix-arr iter-part a = a.add-node-count uninitialized-fix-arr
	res = iters.begin-ptr init-iters-recur a.add, a.remove
	iters[0 .. res.out - iters.begin-ptr]

.add-node-count<a> nat64(a sorted-set a)
	0 add-node-count-recur a.add
.add-node-count-recur<a> nat64(acc nat64, a add-node a)
	if left ?= a left
		acc wrap-add 1 add-node-count-recur left
	else
		acc wrap-add 1

.init-iters-result<a> record mut by-val
	next-remove-index nat64
	out iter-part<a> mut*

.init-iters-recur<a> init-iters-result a(out iter-part<a> mut*, a add-node a, remove index-set) unsafe
	prev = if left ?= a left
		out init-iters-recur left, remove
	else
		0, out
	here = (a.values, prev.next-remove-index) remove-from-front remove
	new-out = if here is-empty
		prev.out
	else
		*prev.out := here
		prev.out + 1
	(prev.next-remove-index wrap-add a.values.size), new-out

.remove-from-front<a> iter-part a(a iter-part a, remove index-set)
	if !a.values.is-empty && a.remove-index in remove
		(a.values.tail, (a.remove-index wrap-add 1)) remove-from-front remove
	else
		a

# TODO: filter

# Returns a set containing `f[x]` for every element `x` in `a`.
for-loop<out, in> sorted-set out(a sorted-set in, f act out(in)) is-data<out> compare<out> is-data<in> compare<in>
	a for-loop f to-sorted-set

for-loop<out, in> out[](a sorted-set in, f act out(in)) trusted is-data<in> compare<in>
	out fix-arr out = a.size uninitialized-fix-arr
	end = out.begin-ptr fold a, (cur, x) =>
		*cur := f[x]
		cur + 1
	hard-assert: end == out.end-ptr
	out cast-immutable

.dbg<a> str(a sorted-set a) to-str<a>
	out writer = ()
	out dbg-add-recur a.add
	unless a.remove is-empty
		out ~~= " - ["
		for i : a remove
			out ~~= i to-str
			out ~= " "
		out backup
		out ~= "]"
	out move-to-str

.dbg-add-recur<a> void(out writer, a add-node a) to-str<a>
	if left ?= a left
		out dbg-add-recur left
		out ~~= ", "

	if a.values is-empty
		out ~~= "[]"
	else
		out ~= "["
		for x : a values
			out ~~= x to-str
			out ~= " "
		out backup
		out ~= "]"

.verify void(a sorted-set str, expected str)
	a.dbg is expected

test
	# TODO: be sure to test removing and then adding back
	a sorted-set str = ()
	a.is-empty is true
	a.size is 0
	a verify "[]"

	b = a ~ "r"
	b.is-empty is false
	b.size is 1
	b verify "[r]"

	b - "r" verify "[]"

	c = b ~ "o"
	c verify "[o r]"

	d = c ~ "c"
	d verify "[c o r]"

	d - "o" verify "[c r]"
	d - "r" verify "[c o]"
	d - "c" verify "[o r]"

	folded = "w" fold d, (acc, x) => "{acc}-{x}"
	folded is "w-c-o-r"

	# TODO: test filter

	dm sorted-set str = for x : d
		if x == "c"
			"sea"
		elif x == "r"
			"arr"
		elif x == "o"
			"oh"
		else
			"x"
	dm verify "[arr oh sea]"

no-std
import
	../compare: ==, <, <=, >, compare, comparison, equal, less
	../exception: assert, forbid
	../fun-util: subscript
	../misc: new, void
	../number: ==, <=>, +, -, /, nat64
	../ptr: ==, +, -, *, mut-ptr, set-deref
	../range: ..
	../str: ==, <=>, chars, str
	../test-util: is
	./arr: ==, arr, new, subscript
	./fix-arr:
		begin-ptr, cast-immutable, end-ptr, is-empty, fix-arr, new, size, set-subscript,
		subscript, to-arr, to-fix-arr
	./mut-arr: mut-arr, temp-as-fix-arr

###
Sorts the elements of `a` from least to greatest.

That means that the result satisfies `res[i] <= res[i + 1]`.

This is O(n * log(n)).
###
sort<a> a[](a a[]) compare<a>
	a sort (x, y) => x <=> y
###
Same as `sort`, but uses a custom comparer.

`comparer` should be consistent, meaning always return the same result for the same inputs.
###
sort<a> a[](a a[], comparer act comparison(a, a)) trusted
	res = a to-fix-arr
	res set-sort comparer
	res cast-immutable
###
Same as `sort`, but uses `f` to get the comparable part of each element.

`f` should be consistent, meaning always return the same `b` for the same `a`.
###
sort-by<a, b> a[](a a[], f act b(a)) compare<b>
	a sort (x, y) => f[x] <=> f[y]

# TODO: try https://github.com/BonzaiThePenguin/WikiSort

###
Sort and remove duplicates.
That means `res[i] < res[i + 1]` for each element in the result.
`(2, 1, 2) sort-unique` is `1, 2`.
###
sort-unique<a> a[](a a[]) compare<a> trusted
	a.to-fix-arr.set-sort-unique cast-immutable

test
	()::nat64[].sort is ()
	(3, 1, 2)::nat64[].sort is (1, 2, 3)

	# Test that it's a stable sort
	arr fix-arr str = "2a", "2b", "1a", "1b"
	arr set-sort (x, y) => x.chars[0] <=> y.chars[0]
	arr.to-arr is ("1a", "1b", "2a", "2b")

# Sort the elements of `a` from least to greatest.
set-sort<a> void(a a mut[]) compare<a> trusted
	a.temp-as-fix-arr set-sort
# Like `set-sort`, but uses a custom comparer.
set-sort<a> void(a a mut[], comparer act comparison(a, a)) trusted
	a.temp-as-fix-arr set-sort comparer
# Like `set-sort`, but `f` to get the comparable part of each element.
set-sort-by<a, b> void(a a mut[], f act b(a)) compare<b> trusted
	a.temp-as-fix-arr set-sort-by f

set-sort<a> void(a fix-arr a) compare<a>
	a set-sort (x, y) => x <=> y
set-sort<a> void(a fix-arr a, comparer act comparison(a, a)) trusted
	unless a is-empty
		a.begin-ptr insertion-sort-recur a.begin-ptr + 1, a.end-ptr, comparer
set-sort-by<a, b> void(a fix-arr a, f act b(a)) compare<b>
	a set-sort (x, y) => f[x] <=> f[y]

.insertion-sort-recur<a> void(begin a mut*, cur a mut*, end a mut*, comparer act comparison(a, a)) unsafe
	unless cur == end
		begin insert cur, *cur, comparer
		begin insertion-sort-recur cur + 1, end, comparer

.insert<a> void(begin a mut*, cur a mut*, value a, comparer act comparison(a, a)) unsafe
	forbid: begin == cur
	prev = cur - 1
	if comparer[value, *prev] == less
		*cur := *prev
		if begin == prev
			*prev := value
		else
			begin insert prev, value, comparer
	else
		*cur := value

###
Sort `a` in place and remove unique elements.
Returns is a slice of the original `a`, which will be shorter if non-unique elements were removed.
###
set-sort-unique<a> fix-arr a(a fix-arr a) compare<a>
	a set-sort-unique (x, y) => x <=> y
set-sort-unique<a> fix-arr a(a fix-arr a, comparer act comparison(a, a)) trusted
	if a is-empty
		a
	else
		a set-sort comparer
		end = *a.begin-ptr set-unique-recur a.begin-ptr + 1, a.begin-ptr + 1, a.end-ptr, comparer
		a[0 .. end - a.begin-ptr]
set-sort-unique-by<a, b> fix-arr a(a fix-arr a, f act b(a)) compare<b>
	a set-sort-unique (x, y) => f[x] <=> f[y]
.set-unique-recur<a> a mut*
	prev a
	read a mut*
	write a mut*
	end a mut*
	comparer act comparison(a, a)
spec
	unsafe
body
	if read == end
		write
	else
		here = *read
		if comparer[here, prev] == equal
			prev set-unique-recur read + 1, write, end, comparer
		else
			*write := here
			here set-unique-recur read + 1, write + 1, end, comparer

.swap<a> void(a fix-arr a, x nat64, y nat64)
	old-x = a[x]
	a[x] := a[y]
	a[y] := old-x

sorted-by-first<a, b> record
	a a[]
	b b[]

###
Sort `a`, and move elements of `b` in the same permutation as `a`.

This is useful if `a` and `b` are parallel arrays, meaning `a[i]` and `b[i]` belong together.

Every pair `a[i]` and `b[i]`, will move to `res.a[j]` and `res.b[j]` for some `j`.
###
sort-by-first<a, b> sorted-by-first<a, b>(a a[], b b[]) compare<a> trusted
	mut-a = a to-fix-arr
	mut-b = b to-fix-arr
	mut-a set-sort-by-first mut-b
	mut-a.cast-immutable, mut-b.cast-immutable

# Sort `a` in place, and move elements of `b` in the same permutation as `a`.
set-sort-by-first<a, b> void(a a mut[], b b mut[]) compare<a> trusted
	a.temp-as-fix-arr set-sort-by-first b.temp-as-fix-arr

# Sort `a` in place, and move elements of `b` in the same permutation as `a`.
set-sort-by-first<a, b> void(a fix-arr a, b fix-arr b) compare<a>
	assert: a.size == b.size
	if a.size > 1
		a swap 0, a.size / 2
		pivot = a[0]
		new-pivot-index = (a set-partition-by-first b, pivot, 1, a.size - 1) - 1
		a swap 0, new-pivot-index
		b swap 0, new-pivot-index
		a[0 .. new-pivot-index] set-sort-by-first b[0 .. new-pivot-index]
		a[new-pivot-index + 1 .. a.size] set-sort-by-first b[new-pivot-index + 1 .. b.size]

.set-partition-by-first<a, b> nat64(a fix-arr a, b fix-arr b, pivot a, l nat64, r nat64) compare<a>
	assert: l <= a.size
	assert: r < a.size
	if l <= r
		if a[l] < pivot
			a set-partition-by-first b, pivot, (l + 1), r
		else
			a swap l, r
			b swap l, r
			a set-partition-by-first b, pivot, l, r - 1
	else
		l

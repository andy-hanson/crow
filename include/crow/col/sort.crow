no-std
import
	../bool: &&, bool, false, true
	../compare: <, <=, >, compare
	../fun-util: subscript
	../json: to
	../misc: loop-break, loop-continue, new, void
	../number: ==, <=>, +, -, /, nat64
	../option: ==, new, option
	../range: .., iterate
	../string: ==, <=>, char32
	../test-util: is
	../tuple: a, b, new
	./array: ~=, ==, array, build, iterate, new, size, subscript
	./collection: .., -, build, end, for-break, for-loop, iterate, size, subscript, swap-at
	./mut-slice:
		~=, +, begin, build, cast-immutable, iterate, mut-slice, new, next, set-next, set-subscript,
		size, slice, to, subscript
	./mut-array: mut-array, temp-as-mut-slice

+is-sorted[col, elem] bool(a col) (col, elem) iterate, elem compare
	prev mut elem? = ()
	for x : a
		if p ?= prev
			if p > x
				break false
			else
				prev := x,
				continue
		else
			prev := x,
			continue
	else
		true

###
Sorts the elements of `a` from least to greatest.

The result satisfies `res[i] <= res[i + 1]`.
###
+sort[col, elem, builder] col(
	a col,
) (col, elem, builder) build, (col, elem) iterate, col size, elem compare
	a sort x => x

###
Same as `sort`, but use `get-key` to get the comparable part of each element.
###
+sort[col, elem, builder, k] col(
	a col,
	get-key k data(elem elem),
) (col, elem, builder) build, (col, elem) iterate, col size, k compare
	res elem mut-slice = for x : a; x
	res sort= get-key
	for x : res; x

###
Sort and remove duplicates.
That means `res[i] < res[i + 1]` for each element in the result.
`(2, 1, 2) sort-unique` is `1, 2`.
###
+sort-unique[col, elem, builder] col(
	a col,
) (col, elem, builder) build, (col, elem) iterate, col size, elem compare
	m elem mut-slice = for x : a; x
	for x : m set-sort-unique; x

test
	()::nat64[].sort is ()
	(3, 1, 2)::nat64[].sort is (1, 2, 3)

	# Test that it's a stable sort
	arr char32[] mut-slice = "2a", "2b", "1a", "1b"
	arr sort= x => x[0]
	arr.to::char32[][] is ("1a", "1b", "2a", "2b")
	arr sort= x => x[1]
	arr.to::char32[][] is ("1a", "2a", "1b", "2b")

# Sort the elements of `a` from least to greatest.
+set-sort[t] void(a t mut-slice) t compare
	a sort= x => x
+sort=[t, k] void(a t mut[], get-key k data(elem t)) k compare
	trusted a.temp-as-mut-slice sort= get-key
# Like `set-sort`, but use `get-key` to get the comparable part of each element.
+sort=[t, k] void(a t mut-slice, get-key k data(elem t)) k compare
	# TODO: PERF Try https://github.com/BonzaiThePenguin/WikiSort
	guard a.size > 1
	for i : 2::nat64 .. a.size + 1
		a[0 .. i] move-last-into-sorted get-key
# All but the last element is sorted. Move the last element to where it needs to be.
-move-last-into-sorted[t, k] void(a t mut-slice, get-key k data(elem t)) k compare
	if a.size > 1 && get-key[a[end - 2]] > get-key[a[end - 1]]
		a swap-at end - 2, end - 1
		a[0 .. end - 1] move-last-into-sorted get-key

###
Sort `a` in place and remove unique elements.
Returns is a slice of the original `a`, which will be shorter if non-unique elements were removed.
###
-set-sort-unique[t] t mut-slice(a t mut-slice) t compare
	a set-sort
	out mut = a begin
	in mut = a begin
	prev mut t? = ()
	while pair ?= in next
		unless prev == (pair.a,)
			out set-next pair.a
			out +:= 1
			prev := pair.a,
		in := pair b
	a.begin slice out

###
Sort `a`, and move elements of `b` in the same permutation as `a`.

This is useful if `a` and `b` are parallel arrays, meaning `a[i]` and `b[i]` belong together.

Every pair `a[i]` and `b[i]`, will move to `res.a[j]` and `res.b[j]` for some `j`.
###
~sort-by-first[t, u] (t[], u[])(a t[], b u[]) t compare
	mut-a t mut-slice = a to
	mut-b u mut-slice = b to
	mut-a set-sort-by-first mut-b
	trusted mut-a.cast-immutable, mut-b.cast-immutable

# Sort `a` in place, and move elements of `b` in the same permutation as `a`.
~set-sort-by-first[t, u] void(a t mut[], b u mut[]) t compare
	trusted a.temp-as-mut-slice set-sort-by-first b.temp-as-mut-slice

# Sort `a` in place, and move elements of `b` in the same permutation as `a`.
~set-sort-by-first[t, u] void(a t mut-slice, b u mut-slice) t compare
	assert a.size == b.size
	if a.size > 1
		a swap-at 0, a.size / 2
		pivot = a[0]
		new-pivot-index = (a set-partition-by-first b, pivot, 1, a.size - 1) - 1
		a swap-at 0, new-pivot-index
		b swap-at 0, new-pivot-index
		a[0 .. new-pivot-index] set-sort-by-first b[0 .. new-pivot-index]
		a[new-pivot-index + 1 .. end] set-sort-by-first b[new-pivot-index + 1 .. end]

-set-partition-by-first[t, u] nat64(
	a t mut-slice,
	b u mut-slice,
	pivot t,
	left nat64,
	right nat64,
) t compare
	l mut = left
	r mut = right
	while l <= r
		assert r < a.size
		if a[l] < pivot
			l +:= 1
		else
			a swap-at l, r
			b swap-at l, r
			r -:= 1
	l

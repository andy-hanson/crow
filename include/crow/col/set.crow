no-std
import
	../bool: !, ==, bool, false, new, true
	../compare: <=, >, >=, compare
	../fun-util: subscript
	../hash: hash-mix
	../log: info, log
	../misc: is-data, new, void
	../number: ==, <=>, +, -, *, nat64
	../option: !, ??, new, option
	../string: ==, ~~, join, literal, new, string, to-string
	../test-util: is
	./array: array
	./experimental/index-set:
		count-greater-or-equal, filter-less, for-loop, is-empty, in, index-set, new, size, try-remove
	./experimental/frozen-set:
		~=, build-frozen-set, for-loop, frozen-set, frozen-set-builder, is-empty, new, size,
		to-frozen-set, to-list, try-get-unordered-index, with-block
	./list: ==, ~=, build-list, for-loop, list, new, to-list, with-block

###
Immutable unsorted set.
###
set<a> record
	.add add-node a
	.remove index-set

# TODO:KILL
node-count<a> nat64(a set<a>) no-doc
	0 node-count a.add
.node-count<a> nat64(acc nat64, a add-node<a>)
	if left ?= a.left
		acc + 1 node-count left
	else
		acc + 1

.add-node<a> record
	here frozen-set a
	left add-node<a>?

# Set containing the given elements (with duplicates removed).
new<a> set a(...a array a) is-data<a> compare<a> hash-mix<a>
	a.to-list to-set

# Set containing the given elements (with duplicates removed).
to-set<a> set a(a a[]) is-data<a> compare<a> hash-mix<a>
	# TODO: type annotation should be unnecessary
	(a.to-frozen-set, ())::add-node<a>, ()

# Copies set elements to a list.
to-list<a> a[](a set a) is-data<a> compare<a> hash-mix<a>
	# TODO: If a has a single add node and no remove, just return that
	for x : a
		x

# `true` iff `a.size == 0`.
is-empty<a> bool(a set a) is-data<a> compare<a> hash-mix<a>
	a.add.here is-empty

# Number of elements in the set.
size<a> nat64(a set a) is-data<a> compare<a> hash-mix<a>
	a.add.add-size - a.remove.size

.add-size<a> nat64(a add-node a)
	a.here.size + a.add-size-left
.add-size-left<a> nat64(a add-node a)
	acc mut = 0
	cur mut = a
	loop
		if left ?= cur left
			acc := acc + left.here.size
			cur := left
			continue
		else
			break acc

# `true` iff `value` is an element of `a`.
in<a> bool(value a, a set a) is-data<a> compare<a> hash-mix<a>
	if index ?= a.add find-in-add value
		!(index in a.remove)

.find-in-add<a> nat64?(a add-node a, value a) is-data<a> compare<a> hash-mix<a>
	if index ?= a.here try-get-unordered-index value
		a.add-size-left + index,
	elif left ?= a left
		left find-in-add value

###
Adds an element to the set.

If `value` is alerady in the set, returns `a` unmodified.
###
~ <a> set a(a set a, value a) is-data<a> compare<a> hash-mix<a>
	a try-add value ?? a

# Same as `a | b`.
~~ <a> set a(a set a, b set a) is-data<a> compare<a> hash-mix<a>
	a | b

###
Union of two sets.

This is a set containing all elements in either `a` or `b`.
###
| <a> set a(a set a, b set a) is-data<a> compare<a> hash-mix<a>
	res mut = a
	for x : b
		res := res ~ x
	res

###
Intersection of two sets.

This is a set containing all elements in both `a` and `b`.
###
& <a> set a(a set a, b set a) is-data<a> compare<a> hash-mix<a>
	# TODO:PERF
	a filter x => x in b

###
Set difference.

This is a set containing all elements in `a` but not in `b`.
###
- <a> set a(a set a, b set a) is-data<a> compare<a> hash-mix<a>
	a filter x => !(x in b)

###
If `value` is already in the set, returns an empty option.
Else, adds it and returns the new set.
###
try-add<a> set<a>?(a set a, value a) is-data<a> compare<a> hash-mix<a>
	if index ?= a.add find-in-add value
		if new-remove ?= a.remove try-remove index
			(a.add, new-remove),
	else
		(a add-and-maybe-compact value),

.add-and-maybe-compact<a> set a(a set a, value a) trusted is-data<a> compare<a> hash-mix<a>
	add-size = a.add add-size
	if add-size == 0
		# TODO: type annotation should be unnecessary
		((value,), ())::add-node<a>, ()
	else
		# size-right starts as 1 because we're adding a value
		plan = add-size add-and-compact-plan a.add, a.remove, 1
		if plan.compacted-size == 1
			# TODO: type annotation should be unnecessary
			((value,), (a.add,))::add-node<a>, a.remove
		else
			a add-and-compact add-size, plan, value

.compact-plan record
	# Total size of all non-compacted nodes (all but the new last node)
	add-size-left nat64
	# Size that the compacted node will have (sum of 'depth' rightmost nodes)
	compacted-size nat64

.add-and-compact-plan<a> compact-plan(size-here-and-left nat64, a add-node a, remove index-set, size-right nat64)
	size-here = a.here size
	size-left = size-here-and-left - size-here
	removals-here-and-right = remove count-greater-or-equal size-left
	if size-here should-compact size-right, removals-here-and-right
		size-here-and-right = size-here + size-right
		if left ?= a left
			size-left add-and-compact-plan left, remove, size-here-and-right
		else
			size-left, size-here-and-right
	else
		size-here-and-left, size-right

.should-compact bool(size-here nat64, size-right nat64, removals-here-and-right nat64)
	size-right + removals-here-and-right * 2 >= size-here

.add-and-compact<a> set a(
	a set a,
	add-size nat64,
	plan compact-plan,
	value a,
) is-data<a> compare<a> hash-mix<a>
	assert plan.compacted-size > 1
	left mut add-node<a>? = ()
	compacted frozen-set a = with out : plan.compacted-size build-frozen-set
		out ~= value
		left := out do-compact a, add-size, plan.compacted-size
	(compacted, left), (a.remove filter-less plan.add-size-left)

.do-compact<a> add-node<a>?(
	out frozen-set-builder a,
	a set a,
	add-size nat64,
	compacted-size nat64,
) is-data<a> compare<a> hash-mix<a>
	cur mut = a add
	add-size-here-and-left mut = add-size
	loop
		out push cur.here, add-size-here-and-left, a.remove
		assert out.size <= compacted-size
		if out.size == compacted-size
			break cur left
		else
			cur := cur.left!
			add-size-here-and-left := add-size-here-and-left - cur.here.size
			continue

.push<a> void(out frozen-set-builder a, here frozen-set a, add-size-here-and-left nat64, remove index-set)
	for x, i : here
		unless add-size-here-and-left + i in remove
			out ~= x

region iteration

for-loop<a> void(a set a, f act void(a)) is-data<a> compare<a> hash-mix<a>
	cur mut = a add
	add-size-left mut = cur add-size-left
	loop
		for x, index : cur here
			unless add-size-left + index in a.remove
				f[x]
		if left ?= cur left
			cur := left
			add-size-left := add-size-left - cur.here.size
			continue
		else
			break

filter<a> set a(a set a, f act bool(a)) is-data<a> compare<a> hash-mix<a>
	list a[] = with out : build-list
		for x : a
			if f[x]
				out ~= x
	list to-set

for-loop<out, in> out[](a set in, f act out(in)) trusted is-data<in> compare<in> hash-mix<in>
	with out : a.size build-list
		for x : a
			out ~= f[x]

.dbg<a> string(a set a) to-string<a>
	add = a.add dbg
	if a.remove is-empty
		add
	else
		parts = " " join for i : a remove; "{i}"
		"{add} - [{parts}]"
.dbg<a> string(a add-node a) to-string<a>
	left = if l ?= a left
		"{l dbg}, "
	here = " " join for x : a.here to-list; "{x}"
	"{left}[{here}]"

.verify void(a set nat64, expected string)
	dbg = a dbg
	unless dbg == expected
		info log "expected:"
		info log expected
		info log "but was:"
		info log dbg
	dbg is expected

test
	a set nat64 = ()
	a.is-empty is true
	a.size is 0
	a verify "[]"

	b = a ~ 5
	b.is-empty is false
	b.size is 1
	b.to-list is (5,)
	b verify "[5]"

	c = b ~~ (6, 4, 1)
	c verify "[1 4 6 5]"

	d = c ~ 8
	d verify "[1 4 6 5], [8]"

	e = d ~~ (4, 10)
	e verify "[1 4 6 5], [10 8]"
	e.size is 6
	0 in e is false
	1 in e is true
	2 in e is false
	3 in e is false
	4 in e is true
	5 in e is true
	6 in e is true
	7 in e is false
	8 in e is true
	9 in e is false
	10 in e is true
	11 in e is false

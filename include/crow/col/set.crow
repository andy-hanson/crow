no-std
import
	../bool: !, ==, bool, false, true
	../compare: !=, <=, >, >=, compare
	../exception: assert
	../fun: subscript
	../hash: hash-mix
	../log: info, log
	../misc: data, void
	../opt: force, none, opt, or-default, some
	../ptr: ==, <=>, +, *, const-ptr, mut-ptr, set-deref
	../str: ==, str
	../str-conv: to-str
	../test: is
	../writer: ~=, backup!, move-to-str!, new, writer
	../private/number-low-level: ==, <=>, nat64, wrap-add, wrap-sub, wrap-mul
	./arr: ==, arr
	./arr-util: fold
	./fix-arr: begin-ptr, cast-immutable, end-ptr, fix-arr-from-begin-end, uninitialized-fix-arr
	./frozen-set:
		begin-ptr, each, end-ptr, fold-with-index, frozen-set, is-empty, new, size,
		try-get-unordered-index, unsafe-frozen-set-from-fix-arr-cast-immutable
	./index-set:
		count-greater-or-equal, each, filter-less, is-empty, in, index-set, new, size, try-remove

set<a> record
	# TODO:PRIVATE
	add add-node a
	remove index-set

# TODO:KILL
node-count<a> nat64(a set<a>)
	0 node-count a.add
.node-count<a> nat64(acc nat64, a add-node<a>)
	if left ?= a.left
		acc wrap-add 1 node-count left
	else
		acc wrap-add 1

.add-node<a> record
	here frozen-set a
	left add-node<a>?

new<a> set a() data<a> compare<a> hash-mix<a>
	(new, none), new

set<a> set a(a a[]) data<a> compare<a> hash-mix<a>
	(a.frozen-set, none), new

arr<a> a[](a set a) data<a> compare<a> hash-mix<a>
	# TODO: If a has a single add node and no remove, just return that
	a map-to-arr x => x

is-empty<a> bool(a set a) data<a> compare<a> hash-mix<a>
	a.add.here is-empty

size<a> nat64(a set a) data<a> compare<a> hash-mix<a>
	a.remove.size add-size-recur a.add

.add-size<a> nat64(a add-node a)
	0 add-size-recur a
.add-size-recur<a> nat64(acc nat64, a add-node a)
	acc wrap-add a.here.size add-size-left-recur a
.add-size-left<a> nat64(a add-node a)
	0 add-size-left-recur a
.add-size-left-recur<a> nat64(acc nat64, a add-node a)
	if left ?= a left
		acc add-size-recur left
	else
		acc

subscript<a> bool(a set a, value a) data<a> compare<a> hash-mix<a>
	if index ?= a.add find-in-add value
		!(index in a.remove)
	else
		false

in<a> bool(value a, a set a) data<a> compare<a> hash-mix<a>
	a[value]

.find-in-add<a> nat64?(a add-node a, value a) data<a> compare<a> hash-mix<a>
	if index ?= a.here try-get-unordered-index value
		a.add-size-left wrap-add index some
	elif left ?= a left
		left find-in-add value

~ <a> set a(a set a, value a) data<a> compare<a> hash-mix<a>
	a try-add value or-default a

~ <a> set a(a set a, values a[]) data<a> compare<a> hash-mix<a>
	a fold values, (cur, value) => cur ~ value

try-add<a> set<a>?(a set a, value a) data<a> compare<a> hash-mix<a>
	if index ?= a.add find-in-add value
		if new-remove ?= a.remove try-remove index
			(a.add, new-remove) some
	else
		a add-and-maybe-compact value some

.add-and-maybe-compact<a> set a(a set a, value a) trusted data<a> compare<a> hash-mix<a>
	add-size = a.add add-size
	if add-size == 0
		([value].frozen-set, none), new
	else
		# size-right starts as 1 because we're adding a value
		plan = add-size add-and-compact-plan a.add, a.remove, 1
		if plan.compacted-size == 1
			([value].frozen-set, a.add.some), a.remove
		else
			a add-and-compact add-size, plan, value

.compact-plan record
	# Total size of all non-compacted nodes (all but the new last node)
	add-size-left nat64
	# Size that the compacted node will have (sum of 'depth' rightmost nodes)
	compacted-size nat64

.add-and-compact-plan<a> compact-plan(size-here-and-left nat64, a add-node a, remove index-set, size-right nat64)
	size-here = a.here size
	size-left = size-here-and-left wrap-sub size-here
	removals-here-and-right = remove count-greater-or-equal size-left
	if size-here should-compact size-right, removals-here-and-right
		size-here-and-right = size-here wrap-add size-right
		if left ?= a left
			size-left add-and-compact-plan left, remove, size-here-and-right
		else
			size-left, size-here-and-right
	else
		size-here-and-left, size-right

.should-compact bool(size-here nat64, size-right nat64, removals-here-and-right nat64)
	(size-right wrap-add (removals-here-and-right wrap-mul 2)) >= size-here

.add-and-compact<a> set a
	a set a
	add-size nat64
	plan compact-plan
	value a
spec
	unsafe
	data<a>
	compare<a>
	hash-mix<a>
body
	assert: plan.compacted-size > 1
	compacted = plan.compacted-size uninitialized-fix-arr<a>
	*compacted.begin-ptr := value
	compactor compactor a = compacted.begin-ptr, compacted.begin-ptr + 1, compacted.end-ptr
	new-add = compactor do-compact-recur! a.add, add-size, a.remove
	new-add, (a.remove filter-less plan.add-size-left)

.compactor<a> record mut
	begin a mut*
	cur mut a mut*
	end a mut*

.do-compact-recur!<a> add-node a
	compactor compactor a
	a add-node a
	add-size-here-and-left nat64
	remove index-set
spec
	unsafe
	data<a>
	compare<a>
	hash-mix<a>
body
	compactor push! a.here, add-size-here-and-left, remove
	assert: compactor.cur <= compactor.end
	if compactor.cur == compactor.end
		compactor.finish, a.left
	else
		# TODO: should be able to write this inline
		new-l = add-size-here-and-left wrap-sub a.here.size
		compactor do-compact-recur! a.left.force, new-l, remove

.push!<a> void(a compactor a, here frozen-set a, add-size-here-and-left nat64, remove index-set) unsafe
	a push-recur! here.begin-ptr, here.end-ptr, add-size-here-and-left, remove
.push-recur!<a> void(a compactor a, cur a*, end a*, remove-index nat64, remove index-set) unsafe
	if cur != end
		if !(remove-index in remove)
			*a.cur := *cur
			a.cur := a.cur + 1
		a push-recur! cur + 1, end, (remove-index wrap-add 1), remove


.finish<a> frozen-set a(a compactor a) unsafe data<a> compare<a> hash-mix<a>
	assert: a.cur == a.end
	a.begin fix-arr-from-begin-end a.end unsafe-frozen-set-from-fix-arr-cast-immutable

region iteration

fold<a, b> a(acc a, a set b, f act a(a, b)) data<b> compare<b> hash-mix<b>
	acc fold-recur a.add, a.add.add-size-left, a.remove, f

.fold-recur<a, b> a(acc a, a add-node b, add-size-left nat64, remove index-set, f act a(a, b))
	mid = acc fold-with-index a.here, (cur, x, index) =>
		if add-size-left wrap-add index in remove
			cur
		else
			f[cur, x]
	if left ?= a left
		# TODO: should not need a local
		l = add-size-left wrap-sub a.here.size
		mid fold-recur left, l, remove, f
	else
		mid

map-to-arr<out, in> out[](a set in, f act out(in)) trusted data<in> compare<in> hash-mix<in>
	out = a.size uninitialized-fix-arr<out>
	end = out.begin-ptr fold a, (cur, x) =>
		*cur := f[x]
		cur + 1
	assert: end == out.end-ptr
	out cast-immutable

.dbg<a> str(a set a) to-str<a>
	out writer = new
	out dbg-add-recur! a.add
	if !a.remove.is-empty
		out ~= " - ["
		a.remove each i =>
			out ~= i to-str
			out ~= " "
		out backup!
		out ~= "]"
	out move-to-str!

.dbg-add-recur!<a> void(out writer, a add-node a) to-str<a>
	if left ?= a left
		out dbg-add-recur! left
		out ~= ", "

	if a.here is-empty
		out ~= "[]"
	else
		out ~= "["
		a.here each x =>
			out ~= x to-str
			out ~= " "
		out backup!
		out ~= "]"

.verify void(a set nat64, expected str)
	dbg = a dbg
	if dbg != expected
		info log "expected:"
		info log expected
		info log "but was:"
		info log dbg
	dbg is expected

test
	a set nat64 = new
	a.is-empty is true
	a.size is 0
	a verify "[]"

	b = a ~ 5
	b.is-empty is false
	b.size is 1
	b.arr is [5]
	b verify "[5]"

	c = b ~ [6, 4, 1]
	c verify "[1 4 6 5]"

	d = c ~ [8]
	d verify "[1 4 6 5], [8]"

	e = d ~ [4, 10]
	e verify "[1 4 6 5], [10 8]"
	e.size is 6
	e[0] is false
	e[1] is true
	e[2] is false
	e[3] is false
	e[4] is true
	e[5] is true
	e[6] is true
	e[7] is false
	e[8] is true
	e[9] is false
	e[10] is true
	e[11] is false

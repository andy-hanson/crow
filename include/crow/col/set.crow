no-std
import
	../bool: bool, false, new, not, true
	../compare: <=, >, >=
	../fun-util: subscript
	../misc: key, new, void
	../number: ==, <=>, +, -, *, nat64
	../option: ??, force, new, option
	../string: ~~, literal, new, string, to-string
	./array: array
	./collection: build, build-options, filter, for-loop, join, with-block, with-index
	./experimental/index-set:
		count-greater-or-equal, filter-less, in, index-set, iterate, is-empty, new, size, try-remove
	./experimental/frozen-set:
		~=, build, frozen-set, frozen-set-builder, is-empty, iterate, new, size, to-frozen-set,
		try-get-unordered-index
	./list: ~=, build, iterate, list, to-list

###
Immutable unsorted set.
###
+set[t] record
	-add t add-node
	-remove index-set

-add-node[t] record
	here t frozen-set
	left t add-node?

# Set containing the given elements (with duplicates removed).
+new[t] t set(...a t array) t key
	a.to-list to-set

# Set containing the given elements (with duplicates removed).
+to-set[t] t set(a t[]) t key
	a.to-frozen-set to-set

to-set[t] t set(a t frozen-set) t key
	# TODO: type annotation should be unnecessary
	(a, ())::(t add-node), ()

# Copies set elements to a list.
+to-list[t] t[](a t set) t key
	# TODO: If a has a single add node and no remove, just return that
	for x : a; x

# `true` iff `a.size == 0`.
+is-empty[t] bool(a t set) t key
	a.add.here is-empty

# Number of elements in the set.
+size[t] nat64(a t set) t key
	a.add.add-size - a.remove.size

-add-size[t] nat64(a t add-node)
	a.here.size + a.add-size-left
-add-size-left[t] nat64(a t add-node)
	acc mut = 0
	cur mut = a
	loop
		if left ?= cur left
			acc +:= left.here size
			cur := left
			continue
		else
			break acc

# `true` iff `value` is an element of `a`.
+in[t] bool(value t, a t set) t key
	if index ?= a.add find-in-add value
		!(index in a.remove)

-find-in-add[t] nat64?(a t add-node, value t) t key
	cur mut = a
	loop
		if index ?= cur.here try-get-unordered-index value
			break cur.add-size-left + index,
		elif left ?= cur left
			cur := left
			continue
		else
			break

###
Adds an element to the set.

If `value` is alerady in the set, returns `a` unmodified.
###
+~[t] t set(a t set, value t) t key
	a try-add value ?? a

# Same as `a | b`.
+~~[t] t set(a t set, b t set) t key
	a | b

###
Union of two sets.

This is a set containing all elements in either `a` or `b`.
###
+|[t] t set(a t set, b t set) t key
	res mut = a
	for x : b
		res ~:= x
	res

###
Intersection of two sets.

This is a set containing all elements in both `a` and `b`.
###
+&[t] t set(a t set, b t set) t key
	# TODO:PERF
	a filter x => x in b

###
Set difference.

This is a set containing all elements in `a` but not in `b`.
###
+-[t] t set(a t set, b t set) t key
	a filter x => !(x in b)

###
If `value` is already in the set, returns an empty option.
Else, adds it and returns the new set.
###
+try-add[t] t set?(a t set, value t) t key
	if index ?= a.add find-in-add value
		if new-remove ?= a.remove try-remove index
			(a.add, new-remove),
	else
		(a add-and-maybe-compact value),

-add-and-maybe-compact[t] t set(a t set, value t) t key
	add-size = a.add add-size
	if add-size == 0
		# TODO: type annotation should be unnecessary
		((value,), ())::(t add-node), ()
	else
		# size-right starts as 1 because we're adding a value
		plan = add-size add-and-compact-plan a
		if plan.compacted-size == 1
			# TODO: type annotation should be unnecessary
			((value,), (a.add,))::(t add-node), a.remove
		else
			a add-and-compact add-size, plan, value

-compact-plan record
	# Total size of all non-compacted nodes (all but the new last node)
	add-size-left nat64
	# Size that the compacted node will have (sum of 'depth' rightmost nodes)
	compacted-size nat64

-add-and-compact-plan[t] compact-plan(full-add-size nat64, a t set)
	cur-size-here-and-left mut = full-add-size
	cur mut = a add
	remove = a remove
	cur-size-right mut = 1
	loop
		size-here = cur.here size
		size-left = cur-size-here-and-left - size-here
		removals-here-and-right = remove count-greater-or-equal size-left
		if size-here should-compact cur-size-right, removals-here-and-right
			size-here-and-right = size-here + cur-size-right
			if left ?= cur left
				cur-size-here-and-left := size-left
				cur := left
				cur-size-right := size-here-and-right
				continue
			else
				break size-left, size-here-and-right
		else
			break cur-size-here-and-left, cur-size-right

-should-compact bool(size-here nat64, size-right nat64, removals-here-and-right nat64)
	size-right + removals-here-and-right * 2 >= size-here

-add-and-compact[t] t set(
	a t set,
	add-size nat64,
	plan compact-plan,
	value t,
) t key
	assert plan.compacted-size > 1
	left mut t add-node? = ()
	compacted t frozen-set = with out : plan.compacted-size build
		out ~= value
		left := out do-compact a, add-size, plan.compacted-size
	(compacted, left), (a.remove filter-less plan.add-size-left)

-do-compact[t] t add-node?(
	out t frozen-set-builder,
	a t set,
	add-size nat64,
	compacted-size nat64,
) t key
	cur mut = a add
	add-size-here-and-left mut = add-size
	loop
		out push cur.here, add-size-here-and-left, a.remove
		assert out.size <= compacted-size
		if out.size == compacted-size
			break cur left
		else
			cur := cur.left!
			add-size-here-and-left -:= cur.here size
			continue

-push[t] void(out t frozen-set-builder, here t frozen-set, add-size-here-and-left nat64, remove index-set)
	for i, x : here with-index
		unless add-size-here-and-left + i in remove
			out ~= x

region spec impls (see collection.crow)

+iterate[t] bool(a t set, f act bool(t)) t key
	cur mut = a add
	add-size-left mut = cur add-size-left
	loop
		i mut = 0
		here = cur.here iterate x =>
			index = add-size-left + i
			i +:= 1
			unless index in a.remove
				f[x]
		if here
			break true
		elif left ?= cur left
			cur := left
			add-size-left -:= cur.here size
			continue
		else
			break false

subregion build

+set-builder[t] record mut
	-inner t frozen-set-builder
+build[t] t set(a build-options, f act void(t set-builder)) t key
	inner t frozen-set = a build out => f[out,]
	inner to-set
+~=[t] void(a t set-builder, value t) t key
	a.inner ~= value

region test

dbg[t] string(a t set) t to-string
	add = a.add dbg
	if a.remove is-empty
		add
	else
		parts = " " join for i : a remove; "{i}"
		"{add} - [{parts}]"
-dbg[t] string(a t add-node) t to-string
	left = if l ?= a left
		"{l dbg}, "
	here = " " join for x : a here; "{x}"
	"{left}[{here}]"

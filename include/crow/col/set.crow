no-std
import
	../bool: !, bool, new
	../compare: <=, >, >=, compare
	../fun-util: subscript
	../hash: hash-mix
	../misc: is-data, new, void
	../number: ==, <=>, +, -, *, nat64
	../option: !, ??, new, option
	../string: ~~, join, literal, new, string, to-string
	./array: array
	./experimental/index-set:
		count-greater-or-equal, filter-less, for-loop, in, index-set, is-empty, new, size,
		try-remove
	./experimental/frozen-set:
		~=, build, for-loop, frozen-set, frozen-set-builder, is-empty, new, size, to-frozen-set,
		try-get-unordered-index, with-block
	./list: ~=, build, list, to-list, with-block

###
Immutable unsorted set.
###
set[t] record
	.add t add-node
	.remove index-set

# TODO:KILL
node-count[t] nat64(a t set) no-doc
	0 node-count a.add
.node-count[t] nat64(acc nat64, a t add-node)
	if left ?= a.left
		acc + 1 node-count left
	else
		acc + 1

.add-node[t] record
	here t frozen-set
	left t add-node?

# Set containing the given elements (with duplicates removed).
new[t] t set(...a t array) t is-data, t compare, t hash-mix
	a.to-list to-set

# Set containing the given elements (with duplicates removed).
to-set[t] t set(a t[]) t is-data, t compare, t hash-mix
	# TODO: type annotation should be unnecessary
	(a.to-frozen-set, ())::(t add-node), ()

# Copies set elements to a list.
to-list[t] t[](a t set) t is-data, t compare, t hash-mix
	# TODO: If a has a single add node and no remove, just return that
	for x : a
		x

# `true` iff `a.size == 0`.
is-empty[t] bool(a t set) t is-data, t compare, t hash-mix
	a.add.here is-empty

# Number of elements in the set.
size[t] nat64(a t set) t is-data, t compare, t hash-mix
	a.add.add-size - a.remove.size

.add-size[t] nat64(a t add-node)
	a.here.size + a.add-size-left
.add-size-left[t] nat64(a t add-node)
	acc mut = 0
	cur mut = a
	loop
		if left ?= cur left
			acc := acc + left.here.size
			cur := left
			continue
		else
			break acc

# `true` iff `value` is an element of `a`.
in[t] bool(value t, a t set) t is-data, t compare, t hash-mix
	if index ?= a.add find-in-add value
		!(index in a.remove)

.find-in-add[t] nat64?(a t add-node, value t) t is-data, t compare, t hash-mix
	if index ?= a.here try-get-unordered-index value
		a.add-size-left + index,
	elif left ?= a left
		left find-in-add value

###
Adds an element to the set.

If `value` is alerady in the set, returns `a` unmodified.
###
~[t] t set(a t set, value t) t is-data, t compare, t hash-mix
	a try-add value ?? a

# Same as `a | b`.
~~[t] t set(a t set, b t set) t is-data, t compare, t hash-mix
	a | b

###
Union of two sets.

This is a set containing all elements in either `a` or `b`.
###
|[t] t set(a t set, b t set) t is-data, t compare, t hash-mix
	res mut = a
	for x : b
		res := res ~ x
	res

###
Intersection of two sets.

This is a set containing all elements in both `a` and `b`.
###
&[t] t set(a t set, b t set) t is-data, t compare, t hash-mix
	# TODO:PERF
	a filter x => x in b

###
Set difference.

This is a set containing all elements in `a` but not in `b`.
###
-[t] t set(a t set, b t set) t is-data, t compare, t hash-mix
	a filter x => !(x in b)

###
If `value` is already in the set, returns an empty option.
Else, adds it and returns the new set.
###
try-add[t] t set?(a t set, value t) t is-data, t compare, t hash-mix
	if index ?= a.add find-in-add value
		if new-remove ?= a.remove try-remove index
			(a.add, new-remove),
	else
		(a add-and-maybe-compact value),

.add-and-maybe-compact[t] t set(a t set, value t) t is-data, t compare, t hash-mix
	add-size = a.add add-size
	if add-size == 0
		# TODO: type annotation should be unnecessary
		((value,), ())::(t add-node), ()
	else
		# size-right starts as 1 because we're adding a value
		plan = add-size add-and-compact-plan a.add, a.remove, 1
		if plan.compacted-size == 1
			# TODO: type annotation should be unnecessary
			((value,), (a.add,))::(t add-node), a.remove
		else
			a add-and-compact add-size, plan, value

.compact-plan record
	# Total size of all non-compacted nodes (all but the new last node)
	add-size-left nat64
	# Size that the compacted node will have (sum of 'depth' rightmost nodes)
	compacted-size nat64

.add-and-compact-plan[t] compact-plan(
	size-here-and-left nat64,
	a t add-node,
	remove index-set,
	size-right nat64,
)
	size-here = a.here size
	size-left = size-here-and-left - size-here
	removals-here-and-right = remove count-greater-or-equal size-left
	if size-here should-compact size-right, removals-here-and-right
		size-here-and-right = size-here + size-right
		if left ?= a left
			size-left add-and-compact-plan left, remove, size-here-and-right
		else
			size-left, size-here-and-right
	else
		size-here-and-left, size-right

.should-compact bool(size-here nat64, size-right nat64, removals-here-and-right nat64)
	size-right + removals-here-and-right * 2 >= size-here

.add-and-compact[t] t set(
	a t set,
	add-size nat64,
	plan compact-plan,
	value t,
) t is-data, t compare, t hash-mix
	assert plan.compacted-size > 1
	left mut t add-node? = ()
	compacted t frozen-set = with out : plan.compacted-size build
		out ~= value
		left := out do-compact a, add-size, plan.compacted-size
	(compacted, left), (a.remove filter-less plan.add-size-left)

.do-compact[t] t add-node?(
	out t frozen-set-builder,
	a t set,
	add-size nat64,
	compacted-size nat64,
) t is-data, t compare, t hash-mix
	cur mut = a add
	add-size-here-and-left mut = add-size
	loop
		out push cur.here, add-size-here-and-left, a.remove
		assert out.size <= compacted-size
		if out.size == compacted-size
			break cur left
		else
			cur := cur.left!
			add-size-here-and-left := add-size-here-and-left - cur.here.size
			continue

.push[t] void(out t frozen-set-builder, here t frozen-set, add-size-here-and-left nat64, remove index-set)
	for i, x : here
		unless add-size-here-and-left + i in remove
			out ~= x

region iteration

for-loop[t] void(a t set, f act void(t)) t is-data, t compare, t hash-mix
	cur mut = a add
	add-size-left mut = cur add-size-left
	loop
		for i, x : cur here
			unless add-size-left + i in a.remove
				f[x]
		if left ?= cur left
			cur := left
			add-size-left := add-size-left - cur.here.size
			continue
		else
			break

filter[t] t set(a t set, f act bool(t)) t is-data, t compare, t hash-mix
	list t[] = with out : build
		for x : a
			if f[x]
				out ~= x
	list to-set

for-loop[out, in] out[](a in set, f act out(in)) in is-data, in compare, in hash-mix
	with out : a.size build
		for x : a
			out ~= f[x]

dbg[t] string(a t set) no-doc, t to-string
	add = a.add dbg
	if a.remove is-empty
		add
	else
		parts = " " join for i : a remove; "{i}"
		"{add} - [{parts}]"
.dbg[t] string(a t add-node) t to-string
	left = if l ?= a left
		"{l dbg}, "
	here = " " join for x : a here; "{x}"
	"{left}[{here}]"

no-std
import
	../bool: !, &&, ==, bool, false, true
	../compare: !=, <, <=, >, >=, compare
	../exception: assert, forbid, unreachable
	../fun: subscript
	../log: info, log
	../misc: ->, data, void
	../opt: force, none, opt, or-default, some
	../ptr: ==, <=>, +, -, deep-size-bytes, ptr, set-subscript, size-of, subscript
	../str: ==, <=>, str
	../str-conv: finish, interp, to-str, with-str, with-value
	../test: is
	../writer: ~=, backup!, move-to-str!, writer
	../private/number-low-level: ==, <=>, nat64, wrap-add, wrap-mul, wrap-sub
	./arr: arr, arr-from-begin-end, begin-ptr, end-ptr, is-empty, size, subscript
	./arr-util: alloc-count, deep-size-bytes, each, tail
	./index-set:
		~, alloc-count, count-greater-or-equal, count-range, deep-size-bytes, each, filter-less,
		index-set, is-empty, size, subscript, try-remove
	./mut-arr:
		begin-ptr, cast-immutable, end-ptr, is-empty, mut-arr, set-subscript, size, subscript,
		uninitialized-mut-arr
	./sort: sort
	./private/sort-utils: binary-search-exact-index

set<?a> record
	# TODO:PRIVATE
	add add-node ?a
	remove index-set

###
We store add/remove separately.
Add nodes are a linked list where links point to the left. Largest node is on the left. Nodes are added to the right.
###

.add-node<?a> record
	values arr ?a
	left opt add-node ?a

set set ?a() data<?a> compare<?a>
	[] set

set set ?a(a arr ?a) data<?a> compare<?a>
	a.sort add-node none set index-set

arr arr ?a(a set ?a) data<?a> compare<?a>
	a map-to-arr x => x

deep-size-bytes nat64(a set ?a) unsafe deep-size-bytes<?a>
	a.remove.deep-size-bytes deep-size-bytes-recur a.add
.deep-size-bytes-recur nat64(acc nat64, a add-node ?a) unsafe deep-size-bytes<?a>
	mid = acc wrap-add a.values.deep-size-bytes wrap-add a.left.size-of
	if left ?= a left
		mid deep-size-bytes-recur left
	else
		mid

# TODO: any value that is removed is overhead too
overhead-bytes nat64(a set ?a) unsafe
	a.remove.deep-size-bytes overhead-bytes-recur a.add
.overhead-bytes-recur nat64(acc nat64, a add-node ?a) unsafe
	mid = acc wrap-add a.size-of
	if left ?= a left
		mid overhead-bytes-recur left
	else
		mid

alloc-count nat64(a set ?a) unsafe
	a.remove.alloc-count alloc-count-recur a.add
.alloc-count-recur nat64(acc nat64, a add-node ?a) unsafe
	mid = acc wrap-add a.values.alloc-count
	if left ?= a left
		# + 1 to allocate the left node
		mid wrap-add 1 alloc-count-recur left
	else
		mid

.add-node-count nat64(a set ?a)
	0 add-node-count-recur a.add
.add-node-count-recur nat64(acc nat64, a add-node ?a)
	if left ?= a left
		acc wrap-add 1 add-node-count-recur left
	else
		acc wrap-add 1


is-empty bool(a set ?a)
	# Compaction ensures that this is the only case where we store empty values.
	a.add.values is-empty

size nat64(a set ?a)
	a.remove.size add-size-recur a.add
.add-size nat64(a add-node ?a)
	0 add-size-recur a
.add-size-recur nat64(acc nat64, a add-node ?a)
	acc wrap-add a.values.size add-size-left-recur a
.add-size-left nat64(a add-node ?a)
	0 add-size-left-recur a
.add-size-left-recur nat64(acc nat64, a add-node ?a)
	if left ?= a left
		acc add-size-recur left
	else
		acc

subscript bool(a set ?a, value ?a) data<?a> compare<?a>
	if index ?= a.add find-in-add value
		!a.remove[index]
	else
		false

.find-in-add opt nat64(a add-node ?a, value ?a) compare<?a>
	if index ?= a.values binary-search-exact-index value
		a.add-size-left wrap-add index some
	elif left ?= a left
		left find-in-add value

.find-in-add-for-remove-result record
	value-index nat64
	size-left nat64
	size-here nat64
	size-right nat64

.find-in-add-for-remove opt find-in-add-for-remove-result(a add-node ?a, value ?a, size-right nat64) compare<?a>
	if index ?= a.values binary-search-exact-index value
		sl = a add-size-left
		some: find-in-add-for-remove-result: (sl wrap-add index), sl, a.values.size, size-right
	elif left ?= a left
		# TODO: should be able to write this inline
		new-size-right = size-right wrap-add a.values.size
		left find-in-add-for-remove: value, new-size-right

~ set ?a(a set ?a, value ?a) data<?a> compare<?a>
	a try-add value or-default a

try-add opt set ?a(a set ?a, value ?a) data<?a> compare<?a>
	if index ?= a.add find-in-add value
		# In 'add', but may need to remove from removals
		if new-remove ?= a.remove try-remove index
			a.add set new-remove some
	else
		a add-and-maybe-compact value some

- set ?a(a set ?a, value ?a) data<?a> compare<?a>
	a try-remove value or-default a

try-remove opt set ?a(a set ?a, value ?a) trusted data<?a> compare<?a>
	if r ?= a.add find-in-add-for-remove value, 0
		removals-here-and-right = 1 wrap-add: a.remove count-greater-or-equal r.size-left
		some: if r.size-here should-compact r.size-right, removals-here-and-right
			compacted-size = r.size-here wrap-add r.size-right wrap-sub 1
			a remove-and-compact (compact-plan: r.size-left, compacted-size), r.value-index
		else
			set: a.add, a.remove ~ r.value-index

.add-and-maybe-compact set ?a(a set ?a, value ?a) trusted compare<?a>
	add-size = a.add add-size
	if add-size == 0
		set: (add-node: [value], none), index-set
	else
		# size-right starts as 1 because we're adding a value
		plan = add-size add-and-compact-plan a.add, a.remove, 1
		if plan.compacted-size == 1
			set: (add-node: [value], a.add.some), a.remove
		else
			a add-and-compact add-size, plan, value

.compact-plan record
	# Total size of all non-compacted nodes (all but the new last node)
	add-size-left nat64
	# Size that the compacted node will have (sum of 'depth' rightmost nodes)
	compacted-size nat64

###
Given that we're adding a new value to the right, we may compact nodes on the right.
size-here-and-left + size-right is the current size + 1.

We compact a node if:
* The combined size of all nodes to the right is >= this node's size
* Half of the values of this node have been removed
Or a combination of the two.	
###
.add-and-compact-plan compact-plan(size-here-and-left nat64, a add-node ?a, remove index-set, size-right nat64)
	size-here = a.values size
	size-left = size-here-and-left wrap-sub size-here
	removals-here-and-right = remove count-greater-or-equal size-left
	if size-here should-compact size-right, removals-here-and-right
		size-here-and-right = size-here wrap-add size-right
		if left ?= a left
			size-left add-and-compact-plan left, remove, size-here-and-right
		else
			size-left compact-plan size-here-and-right
	else
		size-here-and-left compact-plan size-right

.should-compact bool(size-here nat64, size-right nat64, removals-here-and-right nat64)
	(size-right wrap-add (removals-here-and-right wrap-mul 2) wrap-mul 2) >= size-here

.add-and-compact set ?a(a set ?a, add-size nat64, plan compact-plan, value ?a) unsafe compare<?a>
	assert: plan.compacted-size > 1
	compacted = plan.compacted-size uninitialized-mut-arr<?a>
	compacted.begin-ptr[] := value
	compactor = compactor<?a>: compacted.begin-ptr, compacted.begin-ptr + 1, compacted.end-ptr
	new-add = compactor do-compact-recur! a.add, add-size, a.remove
	set: new-add, a.remove filter-less plan.add-size-left

.remove-and-compact set ?a(a set ?a, plan compact-plan, extra-removal nat64) unsafe data<?a> compare<?a>
	new-remove = a.remove filter-less plan.add-size-left
	if plan.compacted-size == 0
		if left ?= a.add left
			left set new-remove
		else
			set
	else
		compacted = plan.compacted-size uninitialized-mut-arr<?a>
		compactor = compactor<?a>: compacted.begin-ptr, compacted.begin-ptr, compacted.end-ptr
		old-size = plan.add-size-left wrap-add plan.compacted-size wrap-add 1
		new-add = compactor do-compact-recur! a.add, old-size, a.remove ~ extra-removal
		new-add set new-remove

.compactor<?a> record mut
	begin ptr ?a
	cur mut ptr ?a
	end ptr ?a

# NOTE: size-here-and-left is the old size, used to index into remove
.do-compact-recur! add-node ?a
	compactor compactor ?a
	a add-node ?a
	add-size-here-and-left nat64
	remove index-set
spec
	unsafe
	compare<?a>
body
	compactor merge! a.values, add-size-here-and-left, remove
	assert: compactor.cur <= compactor.end
	if compactor.cur == compactor.end
		add-node: compactor.finish, a left
	else
		# TODO: should be able to write this inline
		new-l = add-size-here-and-left wrap-sub a.values.size
		compactor do-compact-recur! a.left.force, new-l, remove

.merge! void(a compactor ?a, values arr ?a, add-size-here-and-left nat64, remove index-set) unsafe compare<?a>
	n-remove = remove count-range (add-size-here-and-left wrap-sub values.size), add-size-here-and-left
	n-added = values.size wrap-sub n-remove
	if n-added != 0
		new-cur = a.cur + n-added
		remove-index = add-size-here-and-left wrap-sub 1
		if a.cur == a.begin
			new-cur - 1 copy-from-b-recur! values.begin-ptr, values.end-ptr - 1, remove-index, remove
		else
			a.begin merge-recur! a.cur - 1, new-cur - 1, values.begin-ptr, values.end-ptr - 1, remove-index, remove
		a.cur := new-cur

.merge-recur! void
	a-begin ptr ?a
	a-read ptr ?a
	a-write ptr ?a
	b-begin ptr ?a
	b-read ptr ?a
	b-remove-index nat64
	b-remove index-set
spec
	unsafe
	compare<?a>
body
	forbid: a-read < a-begin
	forbid: b-read < b-begin
	forbid: a-write < a-begin
	# merging from right, so take the greater value
	match a-read[] <=> b-read[]
	as less
		new-a-write = if b-remove[b-remove-index]
			a-write
		else
			a-write[] := b-read[]
			a-write - 1
		if b-read != b-begin
			a-begin merge-recur! a-read, new-a-write, b-begin, b-read - 1, (b-remove-index wrap-sub 1), b-remove
		# Else -- done, everything from 'a' is in place
	as equal
		# We shouldn't store the same value twice.
		unreachable
	as greater
		a-write[] := a-read[]
		if a-read == a-begin
			a-write - 1 copy-from-b-recur! b-begin, b-read, b-remove-index, b-remove
		else
			a-begin merge-recur! a-read - 1, a-write - 1, b-begin, b-read, b-remove-index, b-remove

.copy-from-b-recur! void(a-write ptr ?a, b-begin ptr ?a, b-read ptr ?a, b-remove-index nat64, b-remove index-set) unsafe
	new-a-write = if b-remove[b-remove-index]
		a-write
	else
		a-write[] := b-read[]
		a-write - 1
	if b-read != b-begin
		new-a-write copy-from-b-recur! b-begin, b-read - 1, (b-remove-index wrap-sub 1), b-remove

.finish arr ?a(a compactor ?a) unsafe
	assert: a.cur == a.end
	a.begin arr-from-begin-end a.end

region iteration

each void(a set ?a, f act void(?a)) data<?a> compare<?a>
	void fold a, (ignore, x) => f[x]

fold ?a(acc ?a, a set ?b, f act ?a(?a, ?b)) data<?b> compare<?b>
	acc fold-recur a.init-iters, a.remove, f
.fold-recur ?a(acc ?a, iters mut-arr iter-part ?b, remove index-set, f act ?a(?a, ?b)) compare<?b>
	if iters is-empty
		acc
	else
		least-iter-index = iters[0].values[0] find-least-iter 0, 1, iters
		least-value = iters[least-iter-index].values[0]
		iters[least-iter-index] := iters[least-iter-index] tail remove
		new-iters = if iters[least-iter-index] is-empty
			iters[least-iter-index] := iters[iters.size wrap-sub 1]
			iters[0 ->: iters.size wrap-sub 1]
		else
			iters
		f[acc, least-value] fold-recur new-iters, remove, f

.find-least-iter nat64
	current-least ?a
	current-least-index nat64
	iter-index nat64
	iters mut-arr iter-part ?a
spec
	compare<?a>
body
	if iter-index == iters.size
		current-least-index
	else
		value = iters[iter-index].values[0]
		if value < current-least
			value find-least-iter iter-index, (iter-index wrap-add 1), iters
		else
			current-least find-least-iter current-least-index, (iter-index wrap-add 1), iters

.iter-part<?a> record
	by-val
	values arr ?a
	remove-index nat64

.is-empty bool(a iter-part ?a)
	a.values is-empty

.tail iter-part ?a(a iter-part ?a, remove index-set)
	a.values.tail iter-part (a.remove-index wrap-add 1) remove-from-front remove

.init-iters mut-arr iter-part ?a(a set ?a) trusted
	iters = a.add-node-count uninitialized-mut-arr<iter-part<?a>>
	res = iters.begin-ptr init-iters-recur! a.add, a.remove
	iters[0 -> res.out - iters.begin-ptr]

.init-iters-result<?a> record mut
	by-val
	next-remove-index nat64
	out ptr iter-part ?a

.init-iters-recur! init-iters-result ?a(out ptr iter-part ?a, a add-node ?a, remove index-set) unsafe
	prev = if left ?= a left
		out init-iters-recur! left, remove
	else
		0 init-iters-result out
	here = a.values iter-part prev.next-remove-index remove-from-front remove
	new-out = if here is-empty
		prev.out
	else
		prev.out[] := here
		prev.out + 1
	init-iters-result: (prev.next-remove-index wrap-add a.values.size), new-out

.remove-from-front iter-part ?a(a iter-part ?a, remove index-set)
	if !a.values.is-empty && remove[a.remove-index]
		a.values.tail iter-part (a.remove-index wrap-add 1) remove-from-front remove
	else
		a

# TODO: filter

map set ?out(a set ?in, f act ?out(?in)) data<?out> compare<?out> data<?in> compare<?in>
	set: a map-to-arr f

map-to-arr arr ?out(a set ?in, f act ?out(?in)) trusted data<?in> compare<?in>
	out = a.size uninitialized-mut-arr<?out>
	end = out.begin-ptr fold a, (cur, x) =>
		cur[] := f[x]
		cur + 1

	assert: end == out.end-ptr
	out cast-immutable

# TODO:PRIVATE
dbg str(a set ?a) to-str<?a>
	out = writer
	out dbg-add-recur! a.add
	if !a.remove.is-empty
		out ~= " - ["
		a.remove each i =>
			out ~= i to-str
			out ~= " "
		out backup!
		out ~= "]"
	out move-to-str!

.dbg-add-recur! void(out writer, a add-node ?a) to-str<?a>
	if left ?= a left
		out dbg-add-recur! left
		out ~= ", "

	if a.values is-empty
		out ~= "[]"
	else
		out ~= "["
		a.values each x =>
			out ~= x to-str
			out ~= " "
		out backup!
		out ~= "]"

.verify void(a set str, expected str)
	a.dbg is expected

test
	info log "SET TEST START"
	# TODO: be sure to test removing and then adding back
	a = set<str>
	a.is-empty is true
	a.size is 0
	a verify "[]"

	b = a ~ "r"
	b.is-empty is false
	b.size is 1
	b verify "[r]"

	b - "r" verify "[]"

	info log "CAC"

	c = b ~ "o"
	c verify "[o r]"

	d = c ~ "c"
	info log "D IS"
	info log d.dbg
	d verify "[c o r]"

	d - "o" verify "[c r]"
	d - "r" verify "[c o]"
	d - "c" verify "[o r]"

	folded = "w" fold d, (acc, x) => "{acc}-{x}"
	folded is "w-c-o-r"

	# TODO: test filter

	dm = d map<str, str> x =>
		if x == "c"
			"sea"
		elif x == "r"
			"arr"
		elif x == "o"
			"oh"
		else
			"x"
	dm verify "[arr oh sea]"

	info log "SET TEST DONE"

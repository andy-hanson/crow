no-std
import
	../col/arr: arr
	../col/mut-arr: ~=, move-to-arr!, mut-arr
	../fun: subscript
	../tuple: pair

spy-act1<out, in> record mut
	# TODO:PRIVATE
	calls-builder in mut[]
	fn act out(in)

# Empties the list of calls and returns it.
calls<out, in> in[](a spy-act1<out, in>)
	a.calls-builder move-to-arr!

spy-act<out, in> spy-act1<out, in>(f act out(in))
	calls = mut-arr<in>
	calls spy-act1 in =>
		calls ~= in
		f[in]

spy-act<out, in> spy-act1<out, in>(value out)
	calls = mut-arr<in>
	calls spy-act1 in =>
		calls ~= in
		value

spy-act2<out, in0, in1> record mut
	# TODO:PRIVATE
	calls-builder pair<in0, in1> mut[]
	fn act out(in0, in1)

# Empties the list of calls and returns it.
calls<out, in0, in1> pair<in0, in1>[](a spy-act2<out, in0, in1>)
	a.calls-builder move-to-arr!

spy-act<out, in0, in1> spy-act2<out, in0, in1>(f act out(in0, in1))
	calls = mut-arr<pair<in0, in1>>
	calls spy-act2 (a, b) =>
		calls ~= pair<in0, in1>: a, b
		f[a, b]

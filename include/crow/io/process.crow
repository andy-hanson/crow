no-std
import
	poll:
		fd, has-POLLIN, has-POLLERR, has-POLLHUP, has-POLLNVAL, has-POLLOUT, has-POLLPRI,
		poll, pollfd, POLLIN, revents
	spawn:
		posix_spawn, posix_spawn_file_actions_addclose, posix_spawn_file_actions_adddup2,
		posix_spawn_file_actions_init, posix_spawn_file_actions_t
	stdio: stderr, stdout
	sys/types: pid_t
	sys/wait:
		status-t, waitpid, WEXITSTATUS, WIFCONTINUED, WIFEXITED, WIFSIGNALED,
		WIFSTOPPED, WTERMSIG
	unistd: close, pipe, pipes, read, read-pipe, write-pipe
	../bool: !, &&, ||, bool, to-nat64
	../bytes-types: zero
	../cell: *, cell
	../col/arr: ~, arr, begin-ptr
	../col/arr-util: fold, map
	../col/mut-arr: begin-ptr, mut-arr, ref-of-val-at, size
	../col/mut-list: begin-ptr, move-to-arr!, mut-list, size, unsafe-set-size!
	../compare: <=
	../exception: assert, throw
	../extra-types: fd-t
	../misc: as, void
	../number: to-nat64
	../ptr: +, any-const-ptr, as-any-mut-ptr, as-ref, by-val, const-ptr, null
	../str: char, c-str, str
	../str-conv: finish, interp, to-str, with-str, with-value
	../str-util: to-c-str
	../private/bootstrap: todo
	../private/number-low-level: ==, <=>, int32, to-int64, wrap-add
	./environ: convert-environ, environ
	./file: is-file
	./posix-util: check-posix-error
	./print: print

# Alias for the exit code of a process.
exit-code alias
	int32

# Represents the output of running a process.
process-result record
	exit-code exit-code
	stdout str
	stderr str

###
Launches a process and synchronously waits on the result.
The child process' stdout and stderr will be sent to the `process-result`,
not to the parent's stdout and stderr.
###
spawn-and-wait-result process-result(exe str, args str[], environ environ) trusted summon
	print: "spawn-and-wait-result: {exe}" fold args, (a, b) =>
		"{a} {b}"

	# TODO: kill, handle that error properly
	if exe is-file
		exe-c-str = exe to-c-str
		exe-c-str spawn-and-wait-result (exe-c-str convert-args args), environ.convert-environ
	else
		throw: "{exe} is not a file"

###
Launches a process and synchronously waits on the result.
The child process shares stdout and stderr with the parent process.
###
spawn-and-wait exit-code(exe str, args str[], environ environ) trusted summon
	# TODO: kill, handle that error properly
	if exe is-file
		# First argument should be the executable path
		# TODO: &to-c-str
		exe-c-str = exe.to-c-str
		exe-c-str spawn-and-wait (exe-c-str convert-args args), environ.convert-environ
	else
		throw: "{exe} is not a file"

.convert-args c-str*(exe-c-str c-str, args str[]) unsafe
	begin-ptr: [exe-c-str] ~ (args map x => x to-c-str) ~ [null]

.spawn-and-wait-result process-result(exe c-str, args c-str*, environ c-str*) summon unsafe
	stdout-pipes = make-pipes
	stderr-pipes = make-pipes

	# TODO: Neater, move to own function
	actions = posix_spawn_file_actions_t: 0, 0, null, zero
	check-posix-error: actions posix_spawn_file_actions_init
	check-posix-error: actions posix_spawn_file_actions_addclose stdout-pipes.write-pipe
	check-posix-error: actions posix_spawn_file_actions_addclose stderr-pipes.write-pipe
	check-posix-error: actions posix_spawn_file_actions_adddup2 stdout-pipes.read-pipe, stdout
	check-posix-error: actions posix_spawn_file_actions_adddup2 stderr-pipes.read-pipe, stderr
	check-posix-error: actions posix_spawn_file_actions_addclose stdout-pipes.read-pipe
	check-posix-error: actions posix_spawn_file_actions_addclose stderr-pipes.read-pipe

	pid-cell = 0 cell<pid_t>
	check-posix-error: posix_spawn: pid-cell, exe, actions, null, args, environ
	pid = *pid-cell

	# Close child-side of pipes (from this process, child still has them)
	check-posix-error: stdout-pipes.read-pipe close
	check-posix-error: stderr-pipes.read-pipe close

	# Read from pipes
	stdout-builder = mut-list<char>
	stderr-builder = mut-list<char>
	keep-POLLINg: stdout-pipes.write-pipe, stderr-pipes.write-pipe, stdout-builder, stderr-builder

	exit-code = pid wait-and-get-exit-code

	process-result: exit-code, stdout-builder.move-to-arr!.str, stderr-builder.move-to-arr!.str

.make-pipes pipes() summon
	res = pipes: 0, 0
	check-posix-error: res pipe
	res

.keep-POLLINg void
	stdout-pipe fd-t
	stderr-pipe fd-t
	stdout-builder mut-list char
	stderr-builder mut-list char
spec
	summon
	unsafe
body
	poll-fds = mut-arr: as<by-val<pollfd>[]>: [(pollfd: stdout-pipe, POLLIN, 0), (pollfd: stderr-pipe, POLLIN, 0)]
	stdout-pollfd = poll-fds ref-of-val-at 0
	stderr-pollfd = poll-fds ref-of-val-at 1
	# timeout == -1 means we block
	n-pollfds-with-events = to-int64: poll: poll-fds.begin-ptr, poll-fds.size, -1
	if n-pollfds-with-events == 0
		# TODO: is this even possible to reach ? I think we always get has-POLLHUP instead.
		void
	else
		a = stdout-pollfd handle-revents stdout-builder
		b = stderr-pollfd handle-revents stderr-builder
		assert: (a.any.to-nat64 wrap-add b.any.to-nat64) == n-pollfds-with-events.to-nat64
		# Apparently stdout and stderr can hang up at slightly different times.
		if !(a.hung-up && b.hung-up)
			keep-POLLINg: stdout-pipe, stderr-pipe, stdout-builder, stderr-builder

.handle-revents-result record
	had-POLLIN bool
	hung-up bool

.any bool(r handle-revents-result)
	r.had-POLLIN || r.hung-up

.handle-revents handle-revents-result(pollfd pollfd, builder mut-list char) summon
	revents = pollfd revents
	had-POLLIN = revents has-POLLIN
	if had-POLLIN
		pollfd.fd read-to-buffer-until-eof builder
	hung-up = revents has-POLLHUP
	if revents.has-POLLPRI || revents.has-POLLOUT || revents.has-POLLERR || revents.has-POLLNVAL
		todo
	had-POLLIN handle-revents-result hung-up

.read-to-buffer-until-eof void(fd fd-t, buffer mut-list char) trusted summon
	read-max = 1024
	# It will write to the end of the buffer. So we must ensure that it has enough space at the end.
	old-size = buffer.size
	buffer unsafe-set-size!: old-size wrap-add read-max
	add-data-to = buffer.begin-ptr + old-size
	n-bytes-read = fd read add-data-to.as-any-mut-ptr, read-max
	if n-bytes-read == -1
		# Error
		todo
	elif n-bytes-read == 0
		# EOF, done
		buffer unsafe-set-size! old-size
		void
	else
		assert: n-bytes-read.to-nat64 <= read-max
		new-size = old-size wrap-add n-bytes-read.to-nat64
		buffer unsafe-set-size! new-size
		fd read-to-buffer-until-eof buffer

# Args should be terminated by null.
# Each entry in environ looks like "name=value", and final entry is null.
# TODO: option to get stdout/stderr as a string rather than having them go to the terminal
.spawn-and-wait exit-code(exe c-str, args c-str*, environ c-str*) summon unsafe
	pid-cell = 0 cell<pid_t>
	# TODO: null.as-ref is bad. If it's nullable it shouldn't be a ref.
	check-posix-error: posix_spawn: pid-cell, exe, null.as<any-const-ptr>.as-ref, null, args, environ
	*pid-cell wait-and-get-exit-code

.wait-and-get-exit-code exit-code(pid pid_t) summon unsafe
	wait-status-cell = 0 cell<status-t>
	res-pid = pid waitpid wait-status-cell, 0
	wait-status = *wait-status-cell
	assert: res-pid == pid
	if wait-status WIFEXITED
		wait-status WEXITSTATUS
	elif wait-status WIFSIGNALED
		signal = wait-status WTERMSIG
		print: "Process terminated with signal {signal}"
		todo
		# use `wait-status WTERMSIG`
		# and `wait-status WCOREDUMP`
	elif wait-status WIFSTOPPED
		print: "WAIT STOPPED"
		todo
		# use `wait-status w-stop-sig`
	elif wait-status WIFCONTINUED
		todo
	else
		# What other statuses are there ?
		todo

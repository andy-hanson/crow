no-std
import
	poll:
		fd, has-POLLIN, has-POLLERR, has-POLLHUP, has-POLLNVAL, has-POLLOUT, has-POLLPRI, new,
		poll, pollfd, POLLIN, revents
	spawn:
		new, posix_spawn, posix_spawn_file_actions_addclose, posix_spawn_file_actions_adddup2,
		posix_spawn_file_actions_init, posix_spawn_file_actions_t
	stdio: feof, fgets, FILE, pclose, popen, stderr, stdout
	sys/types: pid_t
	sys/wait:
		status-t, waitpid, WEXITSTATUS, WIFCONTINUED, WIFEXITED, WIFSIGNALED,
		WIFSTOPPED, WTERMSIG
	unistd: close, new, pipe, pipes, read, read-pipe, write-pipe
	win32:
		CloseHandle, CreatePipe, CreateProcessA, DWORD, ERROR_BROKEN_PIPE, GetExitCodeProcess,
		GetLastError, HANDLE, HANDLE_FLAG_INHERIT, hProcess, hThread, INFINITE, new, _pclose,
		_popen, PROCESS_INFORMATION, ReadFile, SECURITY_ATTRIBUTES, SetHandleInformation,
		STARTF_USESTDHANDLES, STARTUPINFOA, WaitForSingleObject
	../bool: &&, ||, bool, to-nat64, true
	../col/array: begin-pointer
	../col/collection: for-loop, join, subscript
	../col/mut-array: +, begin, begin-pointer, mut-array, new, next, size
	../col/list: ~, ~=, build, iterate, list, size, to-array
	../col/mut-list: begin-pointer, end-pointer, move-to-list, mut-list, new, size, unsafe-set-size
	../compare: <=
	../c-types: fd-t
	../misc: new, void
	../number: ==, <=>, +, int32, nat8, nat32, to-int32, to-int64, to-nat32, to-nat64
	../private/bootstrap: todo
	../private/c-string-util: find-c-string-end
	../pointer: ==, +, -, as-any-const-pointer, as-any-mut-pointer, mut-pointer, new, null
	../string: ~~, as-string, char8, c-string, literal, new, string, to-c-string, to-string
	../version: is-windows
	./environ: get-environ-raw
	./file: is-file
	./posix-util: check-errno, check-posix-error
	./print: err, out, print
	./win32-util: show-win32-error

# Represents the output of running a process.
!process-result record
	exit-code int32
	stdout string
	stderr string

###
Launches a process and synchronously waits on the result.
The child process' stdout and stderr will be sent to the `process-result`,
not to the parent's stdout and stderr.
EXE should be a file path and not just a name; this does not search the system path for `exe`.
###
!spawn-and-wait-result process-result(exe string, args string[]) summon
	out print (" " join "spawn-and-wait-result: {exe}" ~ args)

	# TODO: kill, handle that error properly
	assert exe is-file : "{exe} is not a file"
	trusted
		exe-c-string = exe to-c-string
		if is-windows
			exe-c-string spawn-and-wait-result-windows args
		else
			exe-c-string spawn-and-wait-result-posix (exe-c-string convert-args args)

.keep-reading void(res char8 mut[], file FILE mut*) summon, unsafe
	read-at-a-time = 0x1000
	old-size = res size
	res unsafe-set-size old-size + read-at-a-time
	old-end = res.end-pointer - read-at-a-time
	err = old-end fgets read-at-a-time.to-int32, file
	if err == null
		res unsafe-set-size old-size
		unless file feof
			check-errno
	else
		new-end = old-end find-c-string-end
		res unsafe-set-size new-end - res.begin-pointer
		res keep-reading file

###
Launches a process and synchronously waits on the result.
The child process shares stdout and stderr with the parent process.
###
!spawn-and-wait int32(exe string, args string[]) summon
	# TODO: kill, handle that error properly
	assert exe is-file : "{exe} is not a file"
	# First argument should be the executable path
	# TODO: &to-c-string
	trusted
		exe-c-string = exe to-c-string
		exe-c-string spawn-and-wait (exe-c-string convert-args args)

# Executes a shell command and returns its output.
!shell-exec string(command string) summon
	trusted
		cmd = command to-c-string
		pipe = is-windows ? cmd _popen "r" : cmd popen "r"
		if pipe.as-any-const-pointer == null
			todo
		res char8 mut[] = ()
		res keep-reading pipe
		err = is-windows ? pipe _pclose : pipe pclose
		assert err == 0
		res.move-to-list as-string

.convert-args c-string[](exe-c-string c-string, args string[]) unsafe
	exe-c-string ~ (for x : args; x to-c-string) ~ null

.spawn-and-wait-result-windows process-result(exe c-string, args string[]) summon, unsafe
	all-args = " " join (exe.to-string ~ args) to-c-string

	stdout-read mut HANDLE = ()
	stdout-write mut HANDLE = ()
	stderr-read mut HANDLE = ()
	stderr-write mut HANDLE = ()
	sec SECURITY_ATTRIBUTES = null, true

	ok0 = &stdout-read CreatePipe &stdout-write, &sec, 0
	ok1 = stdout-read SetHandleInformation HANDLE_FLAG_INHERIT, 0
	ok2 = &stderr-read CreatePipe &stderr-write, &sec, 0
	ok3 = stderr-read SetHandleInformation HANDLE_FLAG_INHERIT, 0
	unless ok0 && ok1 && ok2 && ok3
		todo

	startup-info STARTUPINFOA = STARTF_USESTDHANDLES, (), stdout-write, stderr-write
	process-info mut PROCESS_INFORMATION = ()
	ok4 = exe CreateProcessA all-args, (), (), true, 0, (), (), &startup-info, &process-info
	unless ok4
		todo

	unless stdout-write.CloseHandle && stderr-write.CloseHandle
		todo

	stdout = stdout-read.read-from-pipe-windows
	unless stdout-read.CloseHandle
		todo
	stderr = stderr-read.read-from-pipe-windows
	unless stderr-read.CloseHandle
		todo

	_ = process-info.hProcess WaitForSingleObject INFINITE

	exit-code mut DWORD = 0
	ok5 = process-info.hProcess GetExitCodeProcess &exit-code
	unless ok5
		todo
	# TODO: should be in a 'finally'
	unless process-info.hProcess.CloseHandle && process-info.hThread.CloseHandle
		todo

	exit-code.to-int32, stdout, stderr

.read-from-pipe-windows string(pipe HANDLE) summon, unsafe
	res nat8 mut[] = ()
	loop
		read-at-a-time = 0x1000
		old-size = res size
		res unsafe-set-size old-size + read-at-a-time
		old-end = res.end-pointer - read-at-a-time
		n-read mut nat32 = 0
		ok = pipe ReadFile old-end, read-at-a-time.to-nat32, &n-read, null
		if ok
			assert n-read.to-nat64 <= read-at-a-time
			res unsafe-set-size old-size + n-read.to-nat64
			continue
		else
			res unsafe-set-size old-size
			err = GetLastError
			assert err == ERROR_BROKEN_PIPE : "Error reading from pipe: {err show-win32-error}"
			break res.move-to-list as-string

.spawn-and-wait-result-posix process-result(exe c-string, args c-string[]) summon, unsafe
	stdout-pipes = make-pipes
	stderr-pipes = make-pipes

	# TODO: Neater, move to own function
	actions mut posix_spawn_file_actions_t = ()
	(&actions).posix_spawn_file_actions_init check-posix-error
	&actions posix_spawn_file_actions_addclose stdout-pipes.write-pipe check-posix-error
	&actions posix_spawn_file_actions_addclose stderr-pipes.write-pipe check-posix-error
	&actions posix_spawn_file_actions_adddup2 stdout-pipes.read-pipe, stdout check-posix-error
	&actions posix_spawn_file_actions_adddup2 stderr-pipes.read-pipe, stderr check-posix-error
	&actions posix_spawn_file_actions_addclose stdout-pipes.read-pipe check-posix-error
	&actions posix_spawn_file_actions_addclose stderr-pipes.read-pipe check-posix-error

	pid mut pid_t = 0
	&pid posix_spawn exe, &actions, null, args.to-array.begin-pointer, get-environ-raw check-posix-error

	# Close child-side of pipes (from this process, child still has them)
	stdout-pipes.read-pipe.close check-posix-error
	stderr-pipes.read-pipe.close check-posix-error

	# Read from pipes
	stdout-builder char8 mut[] = ()
	stderr-builder char8 mut[] = ()
	stdout-pipes.write-pipe keep-polling stderr-pipes.write-pipe, stdout-builder, stderr-builder

	exit-code = pid wait-and-get-exit-code

	exit-code, stdout-builder.move-to-list.as-string, stderr-builder.move-to-list.as-string

.make-pipes pipes() summon, unsafe
	res mut pipes = 0, 0
	(&res).pipe check-posix-error
	res

.keep-polling void(
	stdout-pipe fd-t,
	stderr-pipe fd-t,
	stdout-builder char8 mut[],
	stderr-builder char8 mut[],
) summon, unsafe
	poll-fds pollfd mut-array = (stdout-pipe, POLLIN, 0), (stderr-pipe, POLLIN, 0)
	# timeout == -1 means we block
	n-pollfds-with-events = poll-fds.begin-pointer poll poll-fds.size, -1 to-int64
	if n-pollfds-with-events == 0
		# TODO: is this even possible to reach ? I think we always get has-POLLHUP instead.
		()
	else
		a = poll-fds[0] handle-revents stdout-builder
		b = poll-fds[1] handle-revents stderr-builder
		assert a.any.to-nat64 + b.any.to-nat64 == n-pollfds-with-events.to-nat64
		# Apparently stdout and stderr can hang up at slightly different times.
		unless a.hung-up && b.hung-up
			stdout-pipe keep-polling stderr-pipe, stdout-builder, stderr-builder

.handle-revents-result record
	had-POLLIN bool
	hung-up bool

.any bool(r handle-revents-result)
	r.had-POLLIN || r.hung-up

.handle-revents handle-revents-result(pollfd pollfd, builder char8 mut[]) summon
	revents = pollfd revents
	had-POLLIN = revents has-POLLIN
	if had-POLLIN
		pollfd.fd read-to-buffer-until-eof builder
	hung-up = revents has-POLLHUP
	if revents.has-POLLPRI || revents.has-POLLOUT || revents.has-POLLERR || revents.has-POLLNVAL
		todo
	had-POLLIN, hung-up

.read-to-buffer-until-eof void(fd fd-t, buffer char8 mut[]) summon
	read-max = 1024
	# It will write to the end of the buffer. So we must ensure that it has enough space at the end.
	old-size = buffer size
	trusted
		buffer unsafe-set-size old-size + read-max
		add-data-to = buffer.begin-pointer + old-size
		n-bytes-read = fd read add-data-to.as-any-mut-pointer, read-max
		if n-bytes-read == -1
			# Error
			todo
		elif n-bytes-read == 0
			# EOF, done
			buffer unsafe-set-size old-size
		else
			assert n-bytes-read.to-nat64 <= read-max
			new-size = old-size + n-bytes-read.to-nat64
			buffer unsafe-set-size new-size
			fd read-to-buffer-until-eof buffer

# Args should be terminated by null.
# TODO: option to get stdout/stderr as a string rather than having them go to the terminal
.spawn-and-wait int32(exe c-string, args c-string[]) summon, unsafe
	pid mut pid_t = 0
	args-pointer = args.to-array begin-pointer
	&pid posix_spawn exe, null, null, args-pointer, get-environ-raw check-posix-error
	pid wait-and-get-exit-code

.wait-and-get-exit-code int32(pid pid_t) summon, unsafe
	wait-status mut status-t = 0
	res-pid = pid waitpid &wait-status, 0
	assert res-pid == pid
	if wait-status WIFEXITED
		wait-status WEXITSTATUS
	elif wait-status WIFSIGNALED
		signal = wait-status WTERMSIG
		err print "Subprocess terminated with signal {signal}"
		todo
		# use `wait-status WTERMSIG`
		# and `wait-status WCOREDUMP`
	elif wait-status WIFSTOPPED
		err print "WAIT STOPPED"
		todo
		# use `wait-status w-stop-sig`
	elif wait-status WIFCONTINUED
		todo
	else
		# What other statuses are there ?
		todo

no-std
import
	time: time, time_t
	../fut: fut
	../misc: void
	../number: +
	../ptr: null
	../private/fut-low-level: resolve!, unresolved
	../private/runtime: add-task, get-cur-island, new-exclusion
	./duration: duration, nsec
export
	./time-low-level: get-monotime-nsec

unix-time record
	seconds-since-epoch time_t

get-unix-time unix-time() summon trusted
	unix-time: null time

# Returns a `fut` that will resolve after `duration` has passed.
delay fut void(duration duration) trusted summon
	target-time = get-monotime-nsec + duration.nsec
	island = get-cur-island
	res = unresolved<void>
	island add-task target-time, island.new-exclusion, () =>
		res resolve! void
	res

no-std
import
	system/time: time, time_t
	../compare: max
	../fun-util: subscript
	../future: future, then
	../misc: break-or-continue, new, shared, void
	../number: ==, <=>, +, /, nat64, to
	../pointer: null
	../future: new
	../private/future-low-level: forward-to, resolve, unresolved
	../private/runtime:
		enqueue-timed-task-cur-exclusion, enqueue-timed-task-no-exclusion, get-global-ctx
	../version: is-windows
	./duration: duration, nsec
export
	./private/time-low-level: get-monotime-nsec

+get-monotime-msec nat64() summon
	get-monotime-nsec / 1000000

+unix-time record
	seconds-since-epoch time_t

# Get the current Unix timestamp.
+get-unix-time unix-time() summon
	forbid trusted is-windows : "TODO: Windows support"
	trusted null.time,

# Returns a future that will resolve after `duration` has passed.
+delay void^(duration duration) summon
	get-monotime-nsec + duration.nsec.to delay-until-time

+interval record
	-time duration
+interval interval(time duration)
	time,
# Call `action` now and on every `interval`.
+for-break[out] out^(
	interval interval,
	f-loop out break-or-continue^ mut(),
) summon, out shared
	get-monotime-nsec repeat-interval-recur interval.time.nsec.to, f-loop
-repeat-interval-recur[out] out^(
	start-nsec nat64,
	interval-nsec nat64,
	action out break-or-continue^ mut(),
) summon, out shared
	choice <- action[]
	match choice
	as loop-break v
		v,
	as loop-continue
		next-time = get-monotime-nsec max start-nsec + interval-nsec
		trusted
			res out^ = unresolved
			get-global-ctx enqueue-timed-task-cur-exclusion next-time, () =>
				res forward-to (next-time repeat-interval-recur interval-nsec, action)
			res

-delay-until-time void^(target-nsec nat64) summon
	trusted
		res void^ = unresolved
		get-global-ctx enqueue-timed-task-no-exclusion target-nsec, () =>
			res resolve ()
		res

no-std
import
	time: time, time_t
	../col/iter: again-or-stop
	../compare: max
	../fut: fut, subscript, then
	../misc: new, void
	../number: ==, <=>, +, /, nat64, to-nat64
	../ptr: null
	../fut: new
	../private/fut-low-level: forward-to, resolve, unresolved
	../private/runtime: add-timed-task, get-global-ctx, new-exclusion
	./duration: duration, nsec
export
	./private/time-low-level: get-monotime-nsec

get-monotime-msec nat64() summon
	get-monotime-nsec / 1000000

unix-time record
	seconds-since-epoch time_t

# Get the current Unix timestamp.
get-unix-time unix-time() summon trusted
	null.time,

# Returns a `fut` that will resolve after `duration` has passed.
delay fut void(duration duration) trusted summon
	get-monotime-nsec + duration.nsec.to-nat64 delay-until-time

# Call `action` now and on every `interval`.
repeat-interval fut void(interval duration, action ref again-or-stop()) trusted summon
	get-monotime-nsec repeat-interval-recur interval.nsec.to-nat64, action
.repeat-interval-recur fut void(
	start-nsec nat64,
	interval-nsec nat64,
	action ref again-or-stop(),
) trusted summon
	choice <- action[]
	match choice
	as again
		next-time = get-monotime-nsec max start-nsec + interval-nsec
		gctx = get-global-ctx
		res fut void = unresolved
		gctx add-timed-task next-time, gctx.new-exclusion, () =>
			res forward-to (next-time repeat-interval-recur interval-nsec, action)
		res
	as stop
		()

.delay-until-time fut void(target-nsec nat64) unsafe summon
	res fut void = unresolved
	gctx = get-global-ctx
	gctx add-timed-task target-nsec, gctx.new-exclusion, () =>
		res resolve ()
	res

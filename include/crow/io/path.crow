###
Functions for operating on paths.
There is technically no I/O here; for functions like reading from a path, see `crow/io/file`.
###

no-std
import
	../col/collection: last-iter-of, slice-left, slice-right
	../json: to
	../option: ==, new, option
	../string: ==, ~~, +, begin, collection, end, new, prev, slice, string, to
	../test-util: is

###
Parent of a path. This means removing the last path component.
`""` if the path has no parent.
###
+parent-path string(a string)
	if x ?= a last-iter-of "/"
		x slice-left

# Adds a new path component onto the end.
+child-path string(a string, child_name string)
	# TODO: ensure child-name doesn't contain "../"
	"{a}/{child_name}"

###
Gets the extension from a file name or path.
Returns an empty option if there is no extension.
###
+get-extension string?(name string)
	if x ?= name last-iter-of "."
		(x + 1).slice-right,
test
	"birds/crow.txt".get-extension is ("txt",)

###
Removes the extension from a file name or path.
This returns the path without the extension.

For example: `"birds/crow.txt" remove-extension` is `"birds/crow"`.
###
+remove-extension string(name string)
	if x ?= name last-iter-of "."
		x slice-left
	else
		name
test
	"birds/crow.txt".remove-extension is "birds/crow"

###
Adds an extension to a file name or path.
If an extension already exists, adds a second one, as in `foo.png.txt`.
###
+add-extension string(name string, ext string)
	"{name}.{ext}"
test
	"birds/crow.txt" add-extension "exe" is "birds/crow.txt.exe"

# Removes the extension (if it exists) and adds a new one.
+change-extension string(name string, ext string)
	name.remove-extension add-extension ext
test
	"birds/crow.txt" change-extension "exe" is "birds/crow.exe"

# Gets just the file name without any directory names in from of it.
+base-name string(path string)
	if x ?= path last-iter-of "/"
		(x + 1) slice-right
	else
		path
test
	"birds/crow.txt".base-name is "crow.txt"

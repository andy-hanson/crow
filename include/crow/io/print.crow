no-std
import
	stdio: stderr, stdout
	unistd: write
	win32:
		DWORD, GetLastError, GetStdHandle, HANDLE, STD_ERROR_HANDLE, STD_OUTPUT_HANDLE,
		WriteFile
	../col/array: begin-pointer, size
	../col/list: to-array
	../extra-types: fd-t
	../misc: new, void
	../number: ==, nat8, to-int64, to-nat32
	../pointer: null, size-of
	../string: ~~, char8, literal, string, to-bytes, to-c-string, to-string
	../version: is-windows
	../private/bootstrap: todo
	./win32-util: show-win32-error

pipe enum
	out
	err

# Print to stdout or stderr, including a newline.
print void(pipe pipe, message string) summon
	pipe print-no-newline "{message}\n"

# Print to stdout or stderr, without appending a newline.
print-no-newline void(pipe pipe, message string) summon
	if trusted is-windows
		handle = match out
		as out
			STD_OUTPUT_HANDLE
		as err
			STD_ERROR_HANDLE
		trusted handle.GetStdHandle write-windows message
	else
		output = match pipe
		as out
			stdout
		as err
			stderr
		trusted output write-posix message

.write-windows void(console HANDLE, a string) summon, unsafe
	bytes = a.to-bytes to-array
	written mut DWORD = 0
	size32 = bytes.size to-nat32
	ok = console WriteFile bytes.begin-pointer, size32, &written, null
	assert ok : "{GetLastError show-win32-error}"
	unless written == size32
		# TODO: maybe retry
		todo

.write-posix void(fd fd-t, a string) summon, unsafe
	assert size-of@char8 == size-of@nat8
	bytes = a.to-bytes to-array
	res = fd write bytes.begin-pointer, bytes.size
	unless res == bytes.size.to-int64
		# TODO: Maybe retry
		todo

# Clear the terminal.
clear-screen void() summon
	out print-no-newline "\x1bc"

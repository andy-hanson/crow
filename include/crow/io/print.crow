no-std
import
	stdio: stderr, stdout
	unistd: write
	../col/arr: size
	../col/private/arr-low-level: begin-ptr
	../extra-types: fd-t
	../misc: new, void
	../ptr: size-of
	../str: char, literal, str
	../str-util: to-bytes
	../private/bootstrap: hard-assert, todo
	../private/number-low-level: ==, nat8, unsafe-to-int64

# Print to stdout, including a newline.
print void(a str) summon
	a print-no-newline
	"\n" print-no-newline

# Print to stdout, without appending a newline.
print-no-newline void(a str) summon trusted
	stdout write-no-newline a

# Print to stderr, including a newline.
print-err void(s str) summon
	s print-err-no-newline
	"\n" print-err-no-newline

# Print to stderr, without appending a newline.
print-err-no-newline void(s str) summon trusted
	stderr write-no-newline s

.write-no-newline void(fd fd-t, a str) summon unsafe
	hard-assert: size-of@<char> == size-of@<nat8>
	bytes = a to-bytes
	res = fd write bytes.begin-ptr, bytes.size
	unless res == bytes.size.unsafe-to-int64
		# TODO: Maybe retry
		todo

# Clear the terminal.
clear-screen void() summon
	"\x1bc" print-no-newline

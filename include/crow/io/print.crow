no-std
import
	stdio: stderr, stdout
	unistd: write
	win32:
		DWORD, GetLastError, GetStdHandle, HANDLE, STD_ERROR_HANDLE, STD_OUTPUT_HANDLE,
		WriteFile
	../cell: *, as-mut-ptr, cell, new
	../col/arr: size
	../col/private/arr-low-level: begin-ptr
	../extra-types: fd-t
	../misc: new, void
	../number: ==, nat8, to-int64, to-nat32
	../ptr: null, size-of
	../str: char8, literal, str
	../str-conv: finish, interp, to-str, with-str, with-value
	../str-util: to-bytes
	../version: is-windows
	../private/bootstrap: todo
	./win32-util: show-win32-error

# Print to stdout, including a newline.
print void(a str) summon
	"{a}\n" print-no-newline

# Print to stdout, without appending a newline.
print-no-newline void(a str) summon trusted
	if is-windows
		STD_OUTPUT_HANDLE.GetStdHandle write-windows a
	else
		stdout write-posix a

# Print to stderr, including a newline.
print-err void(a str) summon
	a print-err-no-newline
	"\n" print-err-no-newline

# Print to stderr, without appending a newline.
print-err-no-newline void(a str) summon trusted
	if is-windows
		STD_ERROR_HANDLE.GetStdHandle write-windows a
	else
		stderr write-posix a

.write-windows void(console HANDLE, a str) summon unsafe
	bytes = a to-bytes
	written cell DWORD = 0,
	size32 = bytes.size to-nat32
	ok = console WriteFile bytes.begin-ptr, size32, written.as-mut-ptr, null
	assert ok : "{GetLastError show-win32-error}"
	unless *written == size32
		# TODO: maybe retry
		todo

.write-posix void(fd fd-t, a str) summon unsafe
	assert size-of@<char8> == size-of@<nat8>
	bytes = a to-bytes
	res = fd write bytes.begin-ptr, bytes.size
	unless res == bytes.size.to-int64
		# TODO: Maybe retry
		todo

# Clear the terminal.
clear-screen void() summon
	"\x1bc" print-no-newline

###
Functions for formatting time values as strings.

Most of these take a `unix-time`; see `get-unix-time` in `crow/io/time`.
###

no-std
import
	system/time: gmtime, localtime, strftime
	../bool: bool, false, true
	../col/array: +, begin, slice
	../col/collection: subscript
	../col/mut-array: cast-immutable, begin-pointer, mut-array, size, uninitialized-mut-array
	../number: ==, <=>, +, nat64
	../pointer: as-const
	../range: ..
	../string: as-string, char8, literal, string, to
	../version: is-windows
	./time: seconds-since-epoch, unix-time

+time-locale record
	-is-local-time bool

# User's local time formatting preferences.
+local-time time-locale()
	true,

# Not summon because getting GMT from a timestamp is a pure function
+gmt time-locale()
	false,

# Returns a value like `"-0500"`.
+timezone-offset string(locale time-locale, time unix-time) summon
	locale format time, "%z", 5

# Returns a value like `"EST"`.
+timezone-name string(locale time-locale, time unix-time) summon
	locale format time, "%Z", 20

# Year as a string, e.g. `"2000"`.
+year string(locale time-locale, time unix-time) summon
	locale format time, "%Y", 5

# Last 2 digits of the year, e.g. `"00"`.
+year-2-digit string(locale time-locale, time unix-time) summon
	locale format time, "%y", 2

###
Date formatted by local preferences.
E.g., `"2020-01-30"` or `"01/30/20"`.
###
+date string(locale time-locale, time unix-time) summon
	if locale is-local-time
		locale format time, "%x", 10
	else
		locale iso-date time

# `HH:MM:SS`, e.g. `00:00:00`.
+time-of-day string(locale time-locale, time unix-time) summon
	locale format time, "%X", 8

# E.g. `"Mon"`.
+day-of-week-short string(locale time-locale, time unix-time) summon
	locale format time, "%a", 3

# E.g. `"Monday"`.
+day-of-week-long string(locale time-locale, time unix-time) summon
	locale format time, "%A", 9

# Day from 001 to 366 inclusive.
+day-of-year string(locale time-locale, time unix-time) summon
	locale format time, "%j", 3

# Month like `"Jan"`.
+month-short string(locale time-locale, time unix-time) summon
	locale format time, "%b", 3

# Month like `"January"`.
+month-long string(locale time-locale, time unix-time) summon
	locale format time, "%B", 9

# Month from `"01"` to `"12"` inclusive.
+month-number string(locale time-locale, time unix-time) summon
	locale format time, "%m", 2

# Day of month from `"01"` to `"31"` inclusive.
+day-of-month string(locale time-locale, time unix-time) summon
	locale format time, "%d", 2

# `YYYY-MM-DD` (ISO 8601 date format)
+iso-date string(locale time-locale, time unix-time) summon
	locale format time, "%F", 10

###
ISO 8601 full timestamp, in UTC.
E.g.: `2000-01-01T00:00:00Z`
###
+iso-timestamp string(time unix-time) summon
	gmt format time, "%FT%H:%M:%SZ", 20

# Hour from 00 to 23 inclusive.
+hour-of-24 string(locale time-locale, time unix-time) summon
	locale format time, "%H", 2

# Hour from 1 to 12 inclusive.
+hour-of-12 string(locale time-locale, time unix-time) summon
	locale format time, "%I", 2

# `"am"` or `"pm"`. `""` in GMT.
+am-pm string(locale time-locale, time unix-time) summon
	locale format time, "%P", 2

# Minute from 00 to 59 inclusive.
+minute string(locale time-locale, time unix-time) summon
	locale format time, "%M", 2

###
Second from 00 to 60 inclusive.
(60 for leap seconds.)
###
+second string(locale time-locale, time unix-time) summon
	locale format time, "%S", 2

-format string(locale time-locale, time unix-time, format string, max-size nat64) summon
	if trusted is-windows
		throw "TODO: Windows support"
	else
		seconds = time seconds-since-epoch
		trusted
			tm = if locale is-local-time
				&seconds localtime
			else
				&seconds gmtime
			res char8 mut-array = max-size + 1 uninitialized-mut-array
			len = res.begin-pointer strftime res.size, format.to, tm.as-const
			res.cast-immutable[0 .. len] as-string

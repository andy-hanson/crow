no-std
import
	dirent: closedir, DIR, dirent, d_name, new, opendir, readdir_r
	errno: ENOENT, errno
	stat: mkdir, new, S_IFDIR, S_IFMT, S_IFREG, stat, st_mode
	stdio: fclose, ferror, FILE, fopen, fread, fseek, ftell, fwrite, SEEK_SET, SEEK_END
	sys/types: mode_t
	unistd: getcwd, readlink, rmdir, symlink, unlink
	win32:
		&, |, ==, cFileName, CreateSymbolicLinkA, DeleteFileA, ERROR_FILE_NOT_FOUND,
		ERROR_NO_MORE_FILES, ERROR_PATH_NOT_FOUND, FILE_ATTRIBUTE_DIRECTORY, FindClose,
		FindFirstFileA, FindNextFileA, _getcwd, GetFileAttributesA, GetLastError, HANDLE,
		INVALID_FILE_ATTRIBUTES, INVALID_HANDLE_VALUE, _mkdir, new,
		SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE, SYMBOLIC_LINK_FLAG_DIRECTORY,
		WIN32_FIND_DATAA
	../bits: &, |, <<
	../bool: ||, bool, false, new, not, to-nat64, true
	../col/array: +, array, begin, begin-pointer, size, slice
	../col/collection: build, for-loop, subscript, with-block
	../col/mut-array: cast-immutable, begin-pointer, mut-array, size, uninitialized-mut-array
	../col/list: ~=, build, iterate, list, new, size, to-array, to-list
	../col/sort: sort
	../compare: !=
	../exception: finally, with-block
	../flags-util: is-in
	../fun-util: subscript
	../misc: new, void
	../number: ==, <=>, nat8, to-nat32, to-nat64
	../option: ??, is-empty, new, option
	../private/bootstrap: todo
	../pointer: ==, as-any-const-pointer, as-const, mut-pointer, null, pointer-cast, size-of
	../range: ..
	../string:
		==, <=>, ~~, as-string, char8, c-string, literal, string, to-bytes, to-c-string, to-string
	../version: is-windows
	./path: child-path
	./posix-util: check-errno, check-posix-error
	./print: err, print
	./win32-util: show-win32-error

# `true` iff anything (like a file or directory) exists at the path.
+path-exists bool(path string) summon
	!path.get-path-kind.is-empty

###
`true` iff `path` is the path of a directory.
`false` if the path is a file.
`true` if the path is a symlink to a directory.
`false` if nothing exists at the path.
###
+is-dir bool(path string) summon
	if kind ?= path get-path-kind
		kind == directory

###
`true` iff `path` is the path of a file.
`false` if the path is a directory.
`true` if the path is a symlink to a file.
`false` if nothing exists at the path.
###
is-file bool(path string) summon
	if kind ?= path get-path-kind
		kind == file
-is-file bool(path c-string) summon, unsafe
	if kind ?= path get-path-kind
		kind == file

-path-kind enum
	directory
	file
	other

# Returns an empty option iff nothing exists at the path.
-get-path-kind path-kind?(path string) summon
	trusted path.to-c-string get-path-kind
-get-path-kind path-kind?(path c-string) summon, unsafe
	if is-windows
		attr = path GetFileAttributesA
		if attr == INVALID_FILE_ATTRIBUTES
			err = GetLastError
			unless err == ERROR_FILE_NOT_FOUND || err == ERROR_PATH_NOT_FOUND
				throw "error {err} while testing path {path}: {err show-win32-error}"
		else
			if FILE_ATTRIBUTE_DIRECTORY is-in attr
				directory,
			else
				file,
	else
		s mut stat = ()
		err = path stat &s
		if err == 0
			if s.st_mode & S_IFMT == S_IFDIR
				directory,
			elif s.st_mode & S_IFMT == S_IFREG
				file,
			else
				other,
		else
			assert err == -1
			# TODO: show error message
			assert errno == ENOENT : "error while testing path {path}"
			()

###
Returns all children of the directory `path`, as full paths.
Use `names-in-dir` if you just want their names.
###
+paths-in-dir string[](path string) summon
	for x : path names-in-dir
		path child-path x

###
Returns the basename of all children of the directory.
Does not include ".." or ".".
Use `paths-in-dir` if you want full paths.
###
+names-in-dir string[](path string) summon
	trusted path.to-c-string names-in-dir

-names-in-dir string[](path c-string) summon, unsafe
	if is-windows
		path-search = "{path}\\*" to-c-string
		file-data mut WIN32_FIND_DATAA = ()
		file = path-search FindFirstFileA &file-data
		if file == INVALID_HANDLE_VALUE
			throw "failed to open dir {path}"
		else
			with : (() => file find-close path) finally
				path names-in-dir-windows file sort
	else
		dirp = path opendir
		forbid dirp == null : "failed to open dir {path}"
		with : (() => dirp close-dir path) finally
			dirp.names-in-dir-posix sort

-find-close void(file HANDLE, path c-string) summon, unsafe
	ok = file FindClose
	assert ok : "failed to close dir {path}"

-close-dir void(dirp DIR mut*, path c-string) summon, unsafe
	err = dirp closedir
	assert err == 0 : "failed to close dir {path}"

-names-in-dir-windows string[](dir-path c-string, file HANDLE) summon, unsafe
	with out : build
		loop
			file-data mut WIN32_FIND_DATAA = ()
			ok = file FindNextFileA &file-data
			if ok
				s = (&file-data).cFileName.as-const to-string
				if s != ".."
					out ~= s
				continue
			else
				err = GetLastError
				assert err == ERROR_NO_MORE_FILES : "Error while reading directory {dir-path}: {err show-win32-error}"
				break

-names-in-dir-posix string[](dirp DIR mut*) summon, unsafe
	with out : build
		loop
			# Initial value of entry / result should not matter
			entry mut dirent = ()
			result mut dirent mut* = &entry
			err = dirp readdir_r &entry, &result
			# TODO: handle error
			assert err == 0
			if result == null
				break
			else
				assert result == &entry
				name = result.as-const.d_name to-string
				unless name == "." || name == ".."
					out ~= name
				continue

# Gets the path a symbolic link refers to.
+read-link string(path string) summon
	trusted
		# TODO: smart small and retry if necessAry
		buff char8 mut-array = 1000 uninitialized-mut-array
		size = path.to-c-string readlink buff.begin-pointer, buff.size
		if size == -1
			check-errno
		buff.cast-immutable[0 .. size.to-nat64] as-string

# Create a symbolic link at `link` with the target `target`.
+make-symlink-to void(link string, target string) summon
	trusted if is-windows
		link-flags = SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE | (target.is-dir ? SYMBOLIC_LINK_FLAG_DIRECTORY : ())
		ok = link.to-c-string CreateSymbolicLinkA target.to-c-string, link-flags
		unless ok
			throw "Error creating link {link}: {GetLastError show-win32-error}"
	else
		err = target.to-c-string symlink link.to-c-string
		unless err == 0
			assert err == -1
			check-errno

###
Gets the path of the current executable.
If this program was built to executable, this will return its path.
Otherwise, this will be the path where `crow` is installed.
###
+current-executable-path string() summon
	"/proc/self/exe" read-link

# Reads the full contents of the file.
+read-file string(path string) summon
	path.read-file::nat8[] as-string

# Reads the full contents of the file as bytes.
+read-file nat8[](path string) summon
	path.try-read-file ?? throw "file does not exist: {path}"

###
Writes the full contents of the file as a string.
If the file already exists, overwrites it.
###
+write-file void(path string, content string) summon
	trusted path.to-c-string write-file content

-write-file void(path c-string, content string) summon, unsafe
	fd = path fopen "wb"
	forbid fd.as-any-const-pointer == null : "failed to open file for write: {path}"
	with : (() => fd close-fd path) finally
		fd write-fd path, content.to-bytes.to-array

-write-fd void(fd FILE mut*, path c-string, bytes nat8 array) summon, unsafe
	wrote-bytes = bytes.begin-pointer fwrite size-of@nat8, bytes.size, fd
	assert wrote-bytes == bytes.size : "error writing file {path}"

###
Like `read-file`, but returns an empty option if the file does not exist.
Will still throw on other errors, like permission errors.
###
+try-read-file string?(path string) summon
	if bytes ?= path.try-read-file :: nat8[]?
		bytes.as-string,

# Like `try-read-file` but returns binary data.
+try-read-file nat8[]?(path string) summon
	trusted path.to-c-string try-read-file

-try-read-file nat8[]?(path c-string) summon, unsafe
	if path is-file
		fd = path fopen "rb"
		if fd.as-any-const-pointer == null
			unless errno == ENOENT
				err print "failed to open file {path}"
				todo
		else
			with : (() => fd close-fd path) finally
				(fd read-fd path),
	else
		()

-read-fd nat8[](fd FILE mut*, path c-string) summon, unsafe
	err = fd fseek 0, SEEK_END
	assert err == 0 : "Error reading {path}"

	file-size = fd ftell
	# TODO: handle errors
	forbid file-size == -1
	if file-size != 0
		# Go back to beginning
		err2 = fd fseek 0, SEEK_SET
		# TODO: handle errors
		assert err2 == 0

		# TODO: allocation can fail, then 'fd' is left open. Need finalizers
		file-size-nat = file-size to-nat64
		res nat8 mut-array = file-size-nat uninitialized-mut-array
		n-bytes-read = res.begin-pointer.pointer-cast fread size-of@nat8, file-size-nat, fd
		assert n-bytes-read == file-size-nat
		forbid fd ferror : "Error reading {path}"
		res.cast-immutable to-list

-close-fd void(fd FILE mut*, path c-string) summon, unsafe
	err = fd fclose
	assert err == 0 : "Error closing {path}"

# Gets the current directory (of the user that ran the program).
+current-directory string() summon
	trusted
		buff char8 mut-array = 256 uninitialized-mut-array
		b = is-windows ? buff.begin-pointer _getcwd buff.size : buff.begin-pointer getcwd buff.size
		if b == null
			todo
		else
			assert b == buff.begin-pointer
			b.as-const to-string

###
If `path` is a directory, calls `each-child-recursive` on every child of the directory.
Else, calls `f[path]`.
###
each-child-recursive void(path string, f act void(string)) summon
	path each-child-recursive (_ => true), f

###
Like `each-child-recursive`, but calls `filter` on names of directory children
and skips them if `filter` returns false.
###
each-child-recursive void(path string, filter act bool(string), f act void(string)) summon
	if path is-dir
		for child-name : path names-in-dir
			if filter[child-name]
				path child-path child-name each-child-recursive filter, f
	else
		f[path]

# POSIX file permissions.
+file-permissions record
	user permissions
	group permissions
	public permissions

# Permissions for one of user, group, public.
+permissions record
	read bool
	write bool
	execute bool

-to-mode mode_t(a permissions)
	a.read.to-nat64 << 2 | a.write.to-nat64 << 1 | a.execute.to-nat64 to-nat32

+no-permissions permissions()
	false, false, false

+all-permissions permissions()
	true, true, true

+user-only file-permissions(user-permissions permissions)
	user-permissions, no-permissions, no-permissions

# Converts permissions to an integer.
-to-mode mode_t(a file-permissions)
	a.user.to-mode << 6 | a.group.to-mode << 3 | a.public.to-mode

# TODO: this might not be the correct default permissions
# Creates a new empty directory at `path`.
+make-directory void(path string) summon
	# TODO: all-permissions.user-only instead of a number literal
	# TODO: 'to-nat32' should not be necessary
	path make-directory 0o777.to-nat32

+make-directory void(path string, permissions file-permissions) summon
	path make-directory permissions.to-mode

-make-directory void(path string, permissions mode_t) summon
	trusted
		path-c-string = path to-c-string
		err = is-windows ? path-c-string _mkdir permissions : path-c-string mkdir permissions
		err check-posix-error

# Deletes the file at `path`.
+remove-file void(path string) summon
	trusted if is-windows
		ok = path.to-c-string DeleteFileA
		assert ok : "error removing file at {path}: {GetLastError show-win32-error}"
	else
		path.to-c-string.unlink check-posix-error

###
Deletes the directory at `path`.
It should be empty.
###
+remove-directory void(path string) summon
	trusted path.to-c-string.rmdir check-posix-error

remove-directory-and-contents-non-recursive void(path string) summon
	path remove-directory-contents-non-recursive
	path remove-directory

remove-directory-contents-non-recursive void(path string) summon
	for child : path names-in-dir
		"{path}/{child}" remove-file

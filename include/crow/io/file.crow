import
	system/dirent: closedir, DIR, dirent, d_name, new, opendir, readdir_r
	system/errno: EEXIST, ENOENT, errno
	system/stdio: fclose, ferror, FILE, fopen, fread, fseek, ftell, fwrite, SEEK_SET, SEEK_END
	system/sys/stat: mkdir, new, S_IFDIR, S_IFMT, S_IFREG, stat, st_mode
	system/sys/types: mode_t
	system/unistd: getcwd, readlink, rmdir, symlink, unlink
	system/win32:
		cFileName, CreateSymbolicLinkA, DeleteFileA, ERROR_ALREADY_EXISTS, ERROR_FILE_NOT_FOUND,
		ERROR_NO_MORE_FILES, ERROR_PATH_NOT_FOUND, FILE_ATTRIBUTE_DIRECTORY, FindClose,
		FindFirstFileA, FindNextFileA, _getcwd, GetFileAttributesA, GetLastError, HANDLE,
		INVALID_FILE_ATTRIBUTES, INVALID_HANDLE_VALUE, _mkdir, new,
		SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE, SYMBOLIC_LINK_FLAG_DIRECTORY,
		WIN32_FIND_DATAA
	../version: is-windows
	./path: child-path
	./win32-util: show-win32-error

+path-already-exists record(path string) exception variant-member
+describe string(a path-already-exists)
	"Path already exists: {a path}"

+path-not-found record(path string) exception variant-member
+describe string(a path-not-found)
	"Path not found: {a path}"

+file-system-error record(path string, description string) exception variant-member
+describe string(a file-system-error)
	"Error at path {a path}: {a description}"

# `true` iff anything (like a file or directory) exists at the path.
+path-exists bool(path string) summon
	try _ = path get-path-kind catch path-not-found _ : false
	true

###
`true` if `path` is the path of a directory.
`false` if the path is a file.
`true` if the path is a symlink to a directory.
`false` if nothing exists at the path.
###
+is-directory bool(path string) summon
	try kind = path get-path-kind catch path-not-found _ : false
	kind == directory

###
`true` if `path` is the path of a file.
`false` if the path is a directory.
`true` if the path is a symlink to a file.
`false` if nothing exists at the path.
###
is-file bool(path string) summon
	try kind = path get-path-kind catch path-not-found _ : false
	kind == file

+path-kind enum(file, directory, other)

+get-path-kind path-kind(path string) summon
	trusted if is-windows
		attr = path.to GetFileAttributesA
		forbid attr == INVALID_FILE_ATTRIBUTES : path exception-for-last
		FILE_ATTRIBUTE_DIRECTORY is-in attr ? directory : file
	else
		s mut stat = ()
		err = path.to stat &s
		if err == 0
			if s.st_mode & S_IFMT == S_IFDIR
				directory
			elif s.st_mode & S_IFMT == S_IFREG
				file
			else
				other
		else
			assert err == -1
			throw path exception-for-last

-exception-for-last exception(path string) summon, unsafe
	if is-windows
		err = GetLastError
		if err == ERROR_FILE_NOT_FOUND || err == ERROR_PATH_NOT_FOUND
			path path-not-found
		elif err == ERROR_ALREADY_EXISTS
			path path-already-exists
		else
			path file-system-error err.show-win32-error
	else
		if errno == ENOENT
			path path-not-found
		elif errno == EEXIST
			path path-already-exists
		else
			path file-system-error "{errno}" # TODO: better error description

-exception-for-last-no-path exception() summon, unsafe
	"<<no path>>" exception-for-last

###
Returns all children of the directory `path`, as full paths.
Use `names-in-dir` if you just want their names.
###
+paths-in-dir string[](path string) summon
	for x : path names-in-dir
		path child-path x

###
Returns the basename of all children of the directory.
Does not include ".." or ".".
Use `paths-in-dir` if you want full paths.
###
+names-in-dir string[](path string) summon
	trusted if is-windows
		path-search c-string = "{path}\\*" to
		file-data mut WIN32_FIND_DATAA = ()
		file = path-search FindFirstFileA &file-data
		forbid file == INVALID_HANDLE_VALUE : path exception-for-last
		finally file find-close path.to
		path names-in-dir-windows file sort
	else
		dirp = path.to opendir
		forbid dirp == null : path exception-for-last
		finally dirp close-dir path
		dirp.names-in-dir-posix sort

-find-close void(file HANDLE, path string) summon, unsafe
	assert file.FindClose : path exception-for-last

-close-dir void(dirp DIR mut*, path string) summon, unsafe
	assert dirp.closedir == 0 : path exception-for-last

-names-in-dir-windows string[](dir-path string, file HANDLE) summon, unsafe
	with out : build
		loop
			file-data mut WIN32_FIND_DATAA = ()
			ok = file FindNextFileA &file-data
			if ok
				s string = (&file-data).cFileName.as-const to
				if s != ".."
					out ~= s
				continue
			else
				err = GetLastError
				assert err == ERROR_NO_MORE_FILES : dir-path exception-for-last
				break

-names-in-dir-posix string[](dirp DIR mut*) summon, unsafe
	with out : build
		loop
			# Initial value of entry / result should not matter
			entry mut dirent = ()
			result mut dirent mut* = &entry
			err = dirp readdir_r &entry, &result
			# TODO: handle error
			assert err == 0
			if result == null
				break
			else
				assert result == &entry
				name string = result.as-const.d_name to
				unless name == "." || name == ".."
					out ~= name
				continue

# Gets the path a symbolic link refers to.
+read-link string(path string) summon
	trusted
		# TODO: smart small and retry if necessAry
		buff char8 mut-array = 1000 zeroed-mut-array
		size = path.to readlink buff.begin-pointer, buff.size
		forbid size == -1 : path exception-for-last
		buff.cast-immutable[0 .. size.to] to

# Create a symbolic link at `link` with the target `target`.
+make-symlink-to void(link string, target string) summon
	trusted if is-windows
		link-flags = SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE |
			(target.is-directory ? SYMBOLIC_LINK_FLAG_DIRECTORY : ())
		assert link.to CreateSymbolicLinkA target.to, link-flags : link exception-for-last
	else
		err = target.to symlink link.to
		unless err == 0
			assert err == -1
			throw link exception-for-last

###
Gets the path of the current executable.
If this program was built to executable, this will return its path.
Otherwise, this will be the path where `crow` is installed.
###
+current-executable-path string() summon
	"/proc/self/exe" read-link

# Reads the full contents of the file.
+read-file string(path string) summon
	path.read-file::nat8[] as-string

# Like 'read-file', but returns an empty string instead of throwing 'path-not-found'.
+read-file-or-empty string(path string) summon
	try
		path read-file
	catch path-not-found _
		""

###
Writes the full contents of the file as a string.
If the file already exists, overwrites it.
###
+write-file void(path string, content string) summon, trusted
	fd = path.to fopen "wb"
	forbid fd == null : path exception-for-last
	finally fd close-fd path
	bytes nat8 array = content to-bytes
	wrote-bytes = bytes.begin-pointer fwrite size-of@nat8, bytes.size, fd
	assert wrote-bytes == bytes.size : path exception-for-last

+read-file nat8[](path string) summon, trusted
	fd = path.to fopen "rb"
	forbid fd == null : path exception-for-last
	finally fd close-fd path

	err = fd fseek 0, SEEK_END
	assert err == 0 : path exception-for-last

	file-size = fd ftell
	forbid file-size == -1 : todo
	if file-size != 0
		# Go back to beginning
		err2 = fd fseek 0, SEEK_SET
		assert err2 == 0 : todo

		file-size-nat nat64 = file-size to
		res nat8 mut-array = file-size-nat zeroed-mut-array
		n-bytes-read = res.begin-pointer.pointer-cast fread size-of@nat8, file-size-nat, fd
		assert n-bytes-read == file-size-nat
		forbid fd ferror : path exception-for-last
		res.cast-immutable to

-close-fd void(fd FILE mut*, path string) summon, unsafe
	assert fd.fclose == 0 : path exception-for-last

# Gets the current directory (of the user that ran the program).
+current-directory string() summon, trusted
	buff char8 mut-array = 256 zeroed-mut-array
	b = is-windows ? buff.begin-pointer _getcwd buff.size : buff.begin-pointer getcwd buff.size
	forbid b == null : exception-for-last-no-path
	assert b == buff.begin-pointer
	res string = b.as-const to
	if is-windows
		res replace-all "\\", "/"
	else
		res

###
If `path` is a directory, calls `each-child-recursive` on every child of the directory.
Else, calls `f[path]`.
###
+each-child-recursive void(path string, f void mut(path string)) summon
	path each-child-recursive (_ => true), f

###
Like `each-child-recursive`, but calls `filter` on names of directory children
and skips them if `filter` returns false.
###
+each-child-recursive void(
	path string,
	filter bool mut(path string),
	f void mut(path string),
) summon
	if path is-directory
		for child-name : path names-in-dir
			if filter[child-name]
				path child-path child-name each-child-recursive filter, f
	else
		f[path]

# POSIX file permissions.
+file-permissions record(user permissions, group permissions, public permissions)

# Permissions for one of user, group, public.
+permissions record(read bool, write bool, execute bool)

-to-mode mode_t(a permissions)
	a.read.to << 2 | a.write.to << 1 | a.execute.to to

+no-permissions permissions()
	false, false, false

+all-permissions permissions()
	true, true, true

+user-only file-permissions(user-permissions permissions)
	user-permissions, no-permissions, no-permissions

# Converts permissions to an integer.
-to-mode mode_t(a file-permissions)
	a.user.to-mode << 6 | a.group.to-mode << 3 | a.public.to-mode

# TODO: this might not be the correct default permissions
# Creates a new empty directory at `path`.
+make-directory void(path string) summon
	path make-directory all-permissions.user-only

+make-directory void(path string, permissions file-permissions) summon
	assert path make-directory-inner permissions : trusted path exception-for-last

# Like 'make-directory', but OK if it already exists.
+ensure-directory void(path string) summon
	try
		path make-directory all-permissions.user-only
	catch path-already-exists _
		()

-make-directory-inner bool(path string, permissions file-permissions) summon
	trusted
		mode = permissions to-mode
		err = is-windows ? path.to _mkdir mode : path.to mkdir mode
		err == 0

# Deletes the file at `path`.
+remove-file void(path string) summon
	trusted if is-windows
		ok = path.to DeleteFileA
		assert ok : path exception-for-last
	else
		assert path.to.unlink == 0 : path exception-for-last

###
Deletes the directory at `path`.
It should be empty.
###
+remove-directory void(path string) summon
	trusted
		assert path.to.rmdir == 0 : path exception-for-last

# "/dev/null" or "NUL" on windows
+null-path string() unsafe
	if is-windows
		"NUL"
	else
		"/dev/null"

remove-directory-and-contents-non-recursive void(path string) summon
	path remove-directory-contents-non-recursive
	path remove-directory

remove-directory-contents-non-recursive void(path string) summon
	for child : path names-in-dir
		"{path}/{child}" remove-file

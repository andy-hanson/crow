import
	system/dirent: closedir, DIR, dirent, d_name, new, opendir, readdir_r
	system/errno: EEXIST, ENOENT, errno
	system/stdio: fclose, ferror, FILE, fopen, fread, fseek, ftell, fwrite, SEEK_SET, SEEK_END
	system/sys/stat: mkdir, new, S_IFDIR, S_IFMT, S_IFREG, stat, st_mode
	system/sys/types: mode_t
	system/unistd: getcwd, readlink, rmdir, symlink, unlink
	system/win32:
		cFileName, CreateSymbolicLinkA, DeleteFileA, ERROR_FILE_NOT_FOUND,
		ERROR_NO_MORE_FILES, ERROR_PATH_NOT_FOUND, FILE_ATTRIBUTE_DIRECTORY, FindClose,
		FindFirstFileA, FindNextFileA, _getcwd, GetFileAttributesA, GetLastError, HANDLE,
		INVALID_FILE_ATTRIBUTES, INVALID_HANDLE_VALUE, _mkdir, new,
		SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE, SYMBOLIC_LINK_FLAG_DIRECTORY,
		WIN32_FIND_DATAA
	../private/bootstrap: todo
	../version: is-windows
	./path: child-path
	./posix-util: check-errno, check-posix-error, throw-posix-error
	./print: err, print
	./win32-util: show-win32-error

# `true` iff anything (like a file or directory) exists at the path.
+path-exists bool(path string) summon
	!path.get-path-kind.is-empty

###
`true` iff `path` is the path of a directory.
`false` if the path is a file.
`true` if the path is a symlink to a directory.
`false` if nothing exists at the path.
###
+is-dir bool(path string) summon
	if kind ?= path get-path-kind
		kind == directory

###
`true` iff `path` is the path of a file.
`false` if the path is a directory.
`true` if the path is a symlink to a file.
`false` if nothing exists at the path.
###
is-file bool(path string) summon
	if kind ?= path get-path-kind
		kind == file
-is-file bool(path c-string) summon, unsafe
	if kind ?= path get-path-kind
		kind == file

-path-kind enum(file, directory, other)

# Returns an empty option iff nothing exists at the path.
-get-path-kind path-kind?(path string) summon
	trusted path.to::c-string get-path-kind
-get-path-kind path-kind?(path c-string) summon, unsafe
	if is-windows
		attr = path GetFileAttributesA
		if attr == INVALID_FILE_ATTRIBUTES
			err = GetLastError
			assert err == ERROR_FILE_NOT_FOUND || err == ERROR_PATH_NOT_FOUND :
				"error {err} while testing path {path}: {err show-win32-error}"
			()
		else
			if FILE_ATTRIBUTE_DIRECTORY is-in attr
				directory,
			else
				file,
	else
		s mut stat = ()
		err = path stat &s
		if err == 0
			if s.st_mode & S_IFMT == S_IFDIR
				directory,
			elif s.st_mode & S_IFMT == S_IFREG
				file,
			else
				other,
		else
			assert err == -1
			# TODO: show error message
			assert errno == ENOENT : "error while testing path {path}"
			()

###
Returns all children of the directory `path`, as full paths.
Use `names-in-dir` if you just want their names.
###
+paths-in-dir string[](path string) summon
	for x : path names-in-dir
		path child-path x

###
Returns the basename of all children of the directory.
Does not include ".." or ".".
Use `paths-in-dir` if you want full paths.
###
+names-in-dir string[](path string) summon
	trusted path.to::c-string names-in-dir

-names-in-dir string[](path c-string) summon, unsafe
	if is-windows
		path-search c-string = "{path}\\*" to
		file-data mut WIN32_FIND_DATAA = ()
		file = path-search FindFirstFileA &file-data
		forbid file == INVALID_HANDLE_VALUE : "failed to open dir {path}"
		with : (() => file find-close path) finally
			path names-in-dir-windows file sort
	else
		dirp = path opendir
		forbid dirp == null : "failed to open dir {path}"
		with : (() => dirp close-dir path) finally
			dirp.names-in-dir-posix sort

-find-close void(file HANDLE, path c-string) summon, unsafe
	ok = file FindClose
	assert ok : "failed to close dir {path}"

-close-dir void(dirp DIR mut*, path c-string) summon, unsafe
	err = dirp closedir
	assert err == 0 : "failed to close dir {path}"

-names-in-dir-windows string[](dir-path c-string, file HANDLE) summon, unsafe
	with out : build
		loop
			file-data mut WIN32_FIND_DATAA = ()
			ok = file FindNextFileA &file-data
			if ok
				s string = (&file-data).cFileName.as-const to
				if s != ".."
					out ~= s
				continue
			else
				err = GetLastError
				assert err == ERROR_NO_MORE_FILES :
					"Error while reading directory {dir-path}: {err show-win32-error}"
				break

-names-in-dir-posix string[](dirp DIR mut*) summon, unsafe
	with out : build
		loop
			# Initial value of entry / result should not matter
			entry mut dirent = ()
			result mut dirent mut* = &entry
			err = dirp readdir_r &entry, &result
			# TODO: handle error
			assert err == 0
			if result == null
				break
			else
				assert result == &entry
				name string = result.as-const.d_name to
				unless name == "." || name == ".."
					out ~= name
				continue

# Gets the path a symbolic link refers to.
+read-link string(path string) summon
	trusted
		# TODO: smart small and retry if necessAry
		buff char8 mut-array = 1000 uninitialized-mut-array
		size = path.to readlink buff.begin-pointer, buff.size
		if size == -1
			check-errno
		buff.cast-immutable[0 .. size.to] to

# Create a symbolic link at `link` with the target `target`.
+make-symlink-to void(link string, target string) summon
	trusted if is-windows
		link-flags = SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE |
			(target.is-dir ? SYMBOLIC_LINK_FLAG_DIRECTORY : ())
		ok = link.to CreateSymbolicLinkA target.to, link-flags
		assert ok : "Error creating link {link}: {GetLastError show-win32-error}"
	else
		err = target.to symlink link.to
		unless err == 0
			assert err == -1
			check-errno

###
Gets the path of the current executable.
If this program was built to executable, this will return its path.
Otherwise, this will be the path where `crow` is installed.
###
+current-executable-path string() summon
	"/proc/self/exe" read-link

# Reads the full contents of the file.
+read-file string(path string) summon
	content nat8[] = path read-file
	with : "Reading file {path}" augment-exceptions
		content as-string

# Reads the full contents of the file as bytes.
+read-file nat8[](path string) summon
	path.try-read-file ?? throw "file does not exist: {path}"

###
Writes the full contents of the file as a string.
If the file already exists, overwrites it.
###
+write-file void(path string, content string) summon
	trusted path.to::c-string write-file content

-write-file void(path c-string, content string) summon, unsafe
	fd = path fopen "wb"
	forbid fd == null : "failed to open file for write: {path}"
	with : (() => fd close-fd path) finally
		fd write-fd path, content.to-bytes

-write-fd void(fd FILE mut*, path c-string, bytes nat8 array) summon, unsafe
	wrote-bytes = bytes.begin-pointer fwrite size-of@nat8, bytes.size, fd
	assert wrote-bytes == bytes.size : "error writing file {path}"

###
Like `read-file`, but returns an empty option if the file does not exist.
Will still throw on other errors, like permission errors.
###
+try-read-file string?(path string) summon
	(path.try-read-file :: nat8[]?)?.as-string

# Like `try-read-file` but returns binary data.
+try-read-file nat8[]?(path string) summon
	trusted path.to::c-string try-read-file

-try-read-file nat8[]?(path c-string) summon, unsafe
	if path is-file
		fd = path fopen "rb"
		if fd == null
			unless errno == ENOENT
				err print "failed to open file {path}"
				todo
		else
			with : (() => fd close-fd path) finally
				(fd read-fd path),

-read-fd nat8[](fd FILE mut*, path c-string) summon, unsafe
	err = fd fseek 0, SEEK_END
	assert err == 0 : "Error reading {path}"

	file-size = fd ftell
	# TODO: handle errors
	forbid file-size == -1
	if file-size != 0
		# Go back to beginning
		err2 = fd fseek 0, SEEK_SET
		# TODO: handle errors
		assert err2 == 0

		# TODO: allocation can fail, then 'fd' is left open. Need finalizers
		file-size-nat nat64 = file-size to
		res nat8 mut-array = file-size-nat uninitialized-mut-array
		n-bytes-read = res.begin-pointer.pointer-cast fread size-of@nat8, file-size-nat, fd
		assert n-bytes-read == file-size-nat
		forbid fd ferror : "Error reading {path}"
		res.cast-immutable to

-close-fd void(fd FILE mut*, path c-string) summon, unsafe
	err = fd fclose
	assert err == 0 : "Error closing {path}"

# Gets the current directory (of the user that ran the program).
+current-directory string() summon
	trusted
		buff char8 mut-array = 256 uninitialized-mut-array
		b = is-windows ? buff.begin-pointer _getcwd buff.size : buff.begin-pointer getcwd buff.size
		forbid b == null : "Error getting current directory"
		assert b == buff.begin-pointer
		res string = b.as-const to
		if is-windows
			res replace-all "\\", "/"
		else
			res

###
If `path` is a directory, calls `each-child-recursive` on every child of the directory.
Else, calls `f[path]`.
###
+each-child-recursive void(path string, f void mut(path string)) summon
	path each-child-recursive (_ => true), f

###
Like `each-child-recursive`, but calls `filter` on names of directory children
and skips them if `filter` returns false.
###
+each-child-recursive void(
	path string,
	filter bool mut(path string),
	f void mut(path string),
) summon
	if path is-dir
		for child-name : path names-in-dir
			if filter[child-name]
				path child-path child-name each-child-recursive filter, f
	else
		f[path]

# POSIX file permissions.
+file-permissions record(user permissions, group permissions, public permissions)

# Permissions for one of user, group, public.
+permissions record(read bool, write bool, execute bool)

-to-mode mode_t(a permissions)
	a.read.to << 2 | a.write.to << 1 | a.execute.to to

+no-permissions permissions()
	false, false, false

+all-permissions permissions()
	true, true, true

+user-only file-permissions(user-permissions permissions)
	user-permissions, no-permissions, no-permissions

# Converts permissions to an integer.
-to-mode mode_t(a file-permissions)
	a.user.to-mode << 6 | a.group.to-mode << 3 | a.public.to-mode

# TODO: this might not be the correct default permissions
# Creates a new empty directory at `path`.
+make-directory void(path string) summon
	path make-directory all-permissions.user-only

+make-directory void(path string, permissions file-permissions) summon
	unless path make-directory-inner permissions
		trusted check-errno

# Like 'make-directory', but OK if it already exists.
+ensure-directory void(path string) summon
	unless path make-directory-inner all-permissions.user-only
		err = trusted errno
		if err != EEXIST
			err throw-posix-error

-make-directory-inner bool(path string, permissions file-permissions) summon
	trusted
		mode = permissions to-mode
		err = is-windows ? path.to _mkdir mode : path.to mkdir mode
		err == 0

# Deletes the file at `path`.
+remove-file void(path string) summon
	trusted if is-windows
		ok = path.to DeleteFileA
		assert ok : "error removing file at {path}: {GetLastError show-win32-error}"
	else
		path.to.unlink check-posix-error

###
Deletes the directory at `path`.
It should be empty.
###
+remove-directory void(path string) summon
	trusted path.to.rmdir check-posix-error

# "/dev/null" or "NUL" on windows
+null-path string() unsafe
	if is-windows
		"NUL"
	else
		"/dev/null"

remove-directory-and-contents-non-recursive void(path string) summon
	path remove-directory-contents-non-recursive
	path remove-directory

remove-directory-contents-non-recursive void(path string) summon
	for child : path names-in-dir
		"{path}/{child}" remove-file

no-std
import
	dirent: dir, dirent, new, opendir, readdir_r
	errno: ENOENT, errno
	fcntl: O_CREAT, O_RDONLY, O_TRUNC, O_WRONLY, open
	stat: mkdir, S_IFDIR, S_IFMT, S_IFREG, stat, st_mode
	sys/types: ino_t, mode_t, off_t
	unistd: close, getcwd, lseek, read, readlink, rmdir, unlink, write
	../bits: &, |, <<
	../bytes-types: zero
	../bool: !, &&, bool, false, to-nat64, true
	../cell: *, cell, new
	../col/arr: arr, begin-ptr, subscript
	../col/arr-util: each
	../col/fix-arr: cast-immutable, begin-ptr, size, uninitialized-fix-arr
	../col/mut-arr: ~=, move-to-arr!, mut-arr, new
	../col/sort: sort
	../compare: !=, <
	../exception: assert, forbid, throw
	../fun: subscript
	../misc: void
	../number: ==, <=>, +, int32, nat8, nat16, nat32, to-int64, to-nat32, to-nat64
	../opt: is-empty, opt, some
	../ptr:
		==, +, any-const-ptr, as-any-const-ptr, as-const, null, ptr-cast, ptr-cast-from-extern,
		ref-eq, size-of
	../range: ..
	../str: ==, <=>, char, chars, c-str, size-bytes, str
	../str-conv: finish, interp, to-str, with-str, with-value
	../str-util: bytes, to-c-str, to-str
	../private/bootstrap: todo
	./path: child-path
	./posix-util: check-errno, check-posix-error
	./print: print

# True if this is the path of a directory.
is-dir bool(path str) summon trusted
	path.to-c-str is-dir

.is-dir bool(path c-str) summon unsafe
	if stat ?= path get-stat
		stat.st_mode & S_IFMT == S_IFDIR
	else
		throw: "path does not exist: {path}"

# True if this is the path of a file.
is-file bool(path str) summon
	path.to-c-str is-file

.is-file bool(path c-str) summon
	if stat ?= path get-stat
		stat.st_mode & S_IFMT == S_IFREG
	else
		false

# True if something (like a file or directory) exists at the path.
path-exists bool(path str) summon
	path.to-c-str path-exists

.path-exists bool(path c-str) summon
	!path.get-stat.is-empty

.get-dirent-name str(d dirent) unsafe
	# TODO: this is offsetof(d, d_name)
	name-offset = size-of@<ino_t> + size-of@<off_t> + size-of@<nat16> + size-of@<char>
	name-ptr = d.as-any-const-ptr + name-offset
	name-ptr.ptr-cast@<char, nat8> to-str

.seek-set int32()
	0
#.seek-cur int32()
#	1
.seek-end int32()
	2

###
Returns the basename of all children of the directory.
Does not include ".." or ".".
###
read-dir str[](path str) summon
	path.to-c-str read-dir

.read-dir str[](path c-str) trusted summon
	dirp = path opendir
	# TODO: handle errors
	assert: dirp.ptr-cast-from-extern@<any-const-ptr, dir> != null
	res str mut[] = ()
	dirp read-dir-recur res
	res.move-to-arr! sort

.read-dir-recur void(dirp dir, res str mut[]) unsafe summon
	# Initial value of entry / result should not matter
	entry dirent = 0, 0, 0, "\0", zero
	result cell dirent = entry,
	err = dirp readdir_r entry, result
	# TODO: handle error
	assert: err == 0
	if (*result).as-any-const-ptr != null
		assert: *result ref-eq entry
		name = entry.get-dirent-name
		if name != "." && name != ".."
			res ~= entry.get-dirent-name
		dirp read-dir-recur res

# Gets the path a link refers to.
read-link str(path str) summon trusted
	# TODO: smart small and retry if necessAry
	buff = 1000 uninitialized-fix-arr@<char>
	size = path.to-c-str readlink buff.begin-ptr, buff.size
	if size == -1
		check-errno
	buff.cast-immutable[0 .. size.to-nat64] str

###
Gets the path of the current executable.
If you did specify a built executable, this will be that.
If you didn't specify a built executable, this will be in a temp directory.
If you are using the interpreter, this will be the path to `crow`.
###
current-executable-path str() summon trusted
	"/proc/self/exe" read-link

read-file-binary nat8[](path str) summon
	path.read-file bytes

# Gets the full contents of the file as a string.
read-file str(path str) summon
	if res ?= path try-read-file
		res
	else
		# TODO: don't print, warn
		print: "file does not exist: {path}"
		""

###
Writes the full contents of the file as a string.
If the file already exists, overwrites it.
###
write-file void(path str, content str) summon
	path.to-c-str write-file content

.write-file void(path c-str, content str) summon trusted
	permission-rdwr nat32 = 6
	permission-rd nat32 = 4
	permission = permission-rdwr << 6 | permission-rd << 3 | permission-rd
	flags = O_CREAT | O_WRONLY | O_TRUNC
	fd = path open flags, permission
	if fd == -1
		print: "failed to open file for write: {path}"
		print: "errno: {errno}"
		print: "flags: {flags}"
		print: "permission: {permission}"
		todo
	else
		wrote-bytes = fd write content.chars.begin-ptr.ptr-cast@<nat8, char>, content.size-bytes
		if wrote-bytes != content.size-bytes.to-int64
			if wrote-bytes == -1
				todo
			else
				# didn't write all the bytes?
				todo
		err = fd close
		if err != 0
			todo

###
Like `read-file`, but returns `none` if the file does not exist.
Other errors (like permission errors) still throw.
###
try-read-file str?(path str) summon
	path.to-c-str try-read-file

.try-read-file str?(path c-str) summon trusted
	if path is-file
		fd = path open O_RDONLY, 0
		if fd == -1
			if errno != ENOENT
				print: "failed to open file {path}"
				todo
		else
			file-size = fd lseek 0, seek-end
			# TODO: handle errors
			forbid: file-size == -1
			# TODO: this is just a sanity check
			assert: file-size < 1000000000
			if file-size == 0
				some: ""
			else
				# Go back to beginning
				off = fd lseek 0, seek-set
				# TODO: handle errors
				assert: off == 0

				# TODO: allocation can fail, then 'fd' is left open. Need finalizers
				file-size-nat = file-size to-nat64
				res = file-size-nat uninitialized-fix-arr@<char>
				n-bytes-read = fd read res.begin-ptr.ptr-cast, file-size-nat
				# TODO: handle errors
				forbid: n-bytes-read == -1
				assert: n-bytes-read == file-size
				check-posix-error: fd close
				res.cast-immutable.str some

# Gets the current directory (of the user that ran the program).
current-directory str() summon trusted
	buff = 256 uninitialized-fix-arr@<char>
	b = buff.begin-ptr getcwd buff.size
	if b == null
		todo
	else
		assert: b == buff.begin-ptr
		b.as-const to-str

.get-stat stat?(path c-str) summon trusted
	# Initial value doesn't really matter
	s = stat
	err = path stat s
	if err == 0
		s some
	else
		assert: err == -1
		if errno != ENOENT
			todo

###
If `path` is a directory, calls `each-child-recursive` on every child of the directory.
Else, calls `f[path]`.
###
each-child-recursive void(path str, f act void(str)) summon
	filter act bool(str) = ignore => true
	path each-child-recursive filter, f

# `each-child-recursive` that does not descend into a child if `f[child_name]` returns false.
each-child-recursive void(path str, filter act bool(str), f act void(str)) summon
	if path is-dir
		path.read-dir each child_name =>
			if filter[child_name]
				path child-path child_name each-child-recursive filter, f
	else
		f[path]


permissions record
	read bool
	write bool
	execute bool

.to-mode mode_t(a permissions)
	a.read.to-nat64 << 2 | a.write.to-nat64 << 1 | a.execute.to-nat64 to-nat32

no-permissions permissions()
	false, false, false

all-permissions permissions()
	true, true, true

file-permissions record
	user permissions
	group permissions
	public permissions

user-only file-permissions(user-permissions permissions)
	user-permissions, no-permissions, no-permissions

to-mode mode_t(a file-permissions)
	a.user.to-mode << 6 | a.group.to-mode << 3 | a.public.to-mode

make-directory void(path str) summon
	# TODO: all-permissions.user-only instead of a number literal
	# TODO: 'to-nat32' should not be necessary
	path make-directory 0o777.to-nat32

make-directory void(path str, permissions file-permissions) summon
	path make-directory permissions.to-mode

make-directory void(path str, permissions mode_t) trusted summon
	check-posix-error: path.to-c-str mkdir permissions

remove-file void(path str) trusted summon
	check-posix-error: path.to-c-str unlink

remove-directory void(path str) trusted summon
	check-posix-error: path.to-c-str rmdir

remove-directory-and-contents-non-recursive void(path str) summon
	path remove-directory-contents-non-recursive
	path remove-directory

remove-directory-contents-non-recursive void(path str) summon
	path.read-dir each child =>
		"{path}/{child}" remove-file

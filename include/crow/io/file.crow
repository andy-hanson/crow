no-std
import
	dirent: dir, dirent, new, opendir, readdir_r
	errno: ENOENT, errno
	fcntl: O_CREAT, O_RDONLY, O_TRUNC, O_WRONLY, open
	stat: mkdir, S_IFDIR, S_IFMT, S_IFREG, stat, st_mode
	sys/types: ino_t, mode_t, off_t
	unistd: close, getcwd, lseek, read, readlink, rmdir, symlink, unlink, write
	../bits: &, |, <<
	../bytes-types: new
	../bool: !, ||, bool, false, new, to-nat64, true
	../cell: *, cell, new
	../col/arr: arr, new, size, subscript
	../col/arr-util: each, map
	../col/fix-arr: cast-immutable, begin-ptr, fix-arr, size, uninitialized-fix-arr
	../col/mut-arr: ~=, move-to-arr, mut-arr, new
	../col/private/arr-low-level: begin-ptr
	../col/sort: sort
	../compare: <
	../exception: assert, forbid, throw
	../fun-util: subscript
	../misc: new, void
	../number: ==, <=>, +, int32, nat8, nat16, nat32, to-int64, to-nat32, to-nat64
	../opt: is-empty, new, opt
	../ptr:
		==, +, any-const-ptr, as-any-const-ptr, as-const, const-ptr, mut-ptr, null, ptr-cast,
		ptr-cast-from-extern, ref-eq, size-of
	../range: ..
	../str: ==, <=>, char, c-str, literal, str
	../str-conv: finish, interp, to-str, with-str, with-value
	../str-util: as-str, to-bytes, to-c-str, to-str
	../private/bootstrap: todo
	./path: child-path
	./posix-util: check-errno, check-posix-error
	./print: print

# `true` iff `path` is the path of a directory.
is-dir bool(path str) summon trusted
	path.to-c-str is-dir

.is-dir bool(path c-str) summon unsafe
	if stat ?= path get-stat
		stat.st_mode & S_IFMT == S_IFDIR
	else
		"path does not exist: {path}" throw

# `true` iff `path` is the path of a file -- not a directory, possibly a symlink.
is-file bool(path str) summon trusted
	path.to-c-str is-file

.is-file bool(path c-str) summon
	if stat ?= path get-stat
		stat.st_mode & S_IFMT == S_IFREG

# `true` iff anything (like a file or directory) exists at the path.
path-exists bool(path str) summon trusted
	path.to-c-str path-exists

.path-exists bool(path c-str) summon
	!path.get-stat.is-empty

.get-dirent-name str(d dirent) unsafe
	# TODO: this is offsetof(d, d_name)
	name-offset = size-of@<ino_t> + size-of@<off_t> + size-of@<nat16> + size-of@<char>
	name-ptr char* = d.as-any-const-ptr + name-offset ptr-cast
	name-ptr to-str

.seek-set int32()
	0
#.seek-cur int32()
#	1
.seek-end int32()
	2

###
Returns all children of the directory `path`, as full paths.
Use `names-in-dir` if you just want their names.
###
paths-in-dir str[](path str) summon
	path.names-in-dir map x =>
		path child-path x

###
Returns the basename of all children of the directory.
Does not include ".." or ".".
Use `paths-in-dir` if you want full paths.
###
names-in-dir str[](path str) summon trusted
	path.to-c-str names-in-dir

.names-in-dir str[](path c-str) trusted summon
	dirp = path opendir
	if dirp.ptr-cast-from-extern::any-const-ptr mut* == null
		throw: "Failed to open dir {path}"
	res str mut[] = ()
	dirp names-in-dir-recur res
	res.move-to-arr sort

.names-in-dir-recur void(dirp dir, res str mut[]) unsafe summon
	# Initial value of entry / result should not matter
	entry dirent = 0, 0, 0, "\0", ()
	result cell dirent = entry,
	err = dirp readdir_r entry, result
	# TODO: handle error
	assert: err == 0
	unless result->as-any-const-ptr == null
		assert: *result ref-eq entry
		name = entry.get-dirent-name
		unless name == "." || name == ".."
			res ~= entry.get-dirent-name
		dirp names-in-dir-recur res

# Gets the path a symbolic link refers to.
read-link str(path str) summon trusted
	# TODO: smart small and retry if necessAry
	buff fix-arr char = 1000 uninitialized-fix-arr
	size = path.to-c-str readlink buff.begin-ptr, buff.size
	if size == -1
		check-errno
	buff.cast-immutable[0 .. size.to-nat64] str

# Create a symbolic link at `link` with the target `target`.
make-symlink-to void(link str, target str) summon trusted
	err = target.to-c-str symlink link.to-c-str
	unless err == 0
		assert: err == -1
		check-errno

###
Gets the path of the current executable.
If this program was built to executable, this will return its path.
Otherwise, this will be the path where `crow` is installed.
###
current-executable-path str() summon trusted
	"/proc/self/exe" read-link

# Reads the full contents of the file.
read-file str(path str) summon trusted
	path.read-file-binary as-str

# Reads the full contents of the file as a `nat8[]`.
read-file-binary nat8[](path str) summon
	if res ?= path try-read-file-binary
		res
	else
		throw: "file does not exist: {path}"

###
Writes the full contents of the file as a string.
If the file already exists, overwrites it.
###
write-file void(path str, content str) summon trusted
	path.to-c-str write-file content

.write-file void(path c-str, content str) summon trusted
	permission-rdwr nat32 = 6
	permission-rd nat32 = 4
	permission = permission-rdwr << 6 | permission-rd << 3 | permission-rd
	file-flags = O_CREAT | O_WRONLY | O_TRUNC
	fd = path open file-flags, permission
	if fd == -1
		print: "failed to open file for write: {path}"
		print: "errno: {errno}"
		print: "flags: {file-flags}"
		print: "permission: {permission}"
		todo
	else
		bytes = content to-bytes
		wrote-bytes = fd write bytes.begin-ptr, bytes.size
		unless wrote-bytes == bytes.size.to-int64
			if wrote-bytes == -1
				todo
			else
				# didn't write all the bytes?
				todo
		err = fd close
		unless err == 0
			todo

###
Like `read-file`, but returns an empty option if the file does not exist.
Will still throw on other errors, like permission errors.
###
try-read-file str?(path str) summon trusted
	if bytes ?= path.try-read-file-binary
		bytes.as-str,

# Like `try-read-file` but returns binary data.
try-read-file-binary nat8[]?(path str) summon trusted
	path.to-c-str try-read-file-binary

.try-read-file-binary nat8[]?(path c-str) summon trusted
	if path is-file
		fd = path open O_RDONLY, 0
		if fd == -1
			unless errno == ENOENT
				print: "failed to open file {path}"
				todo
		else
			file-size = fd lseek 0, seek-end
			# TODO: handle errors
			forbid: file-size == -1
			# TODO: this is just a sanity check
			assert: file-size < 1000000000
			if file-size == 0
				(),
			else
				# Go back to beginning
				off = fd lseek 0, seek-set
				# TODO: handle errors
				assert: off == 0

				# TODO: allocation can fail, then 'fd' is left open. Need finalizers
				file-size-nat = file-size to-nat64
				res fix-arr nat8 = file-size-nat uninitialized-fix-arr
				n-bytes-read = fd read res.begin-ptr.ptr-cast, file-size-nat
				# TODO: handle errors
				forbid: n-bytes-read == -1
				assert: n-bytes-read == file-size
				check-posix-error: fd close
				res.cast-immutable,
	else
		()

# Gets the current directory (of the user that ran the program).
current-directory str() summon trusted
	buff fix-arr char = 256 uninitialized-fix-arr
	b = buff.begin-ptr getcwd buff.size
	if b == null
		todo
	else
		assert: b == buff.begin-ptr
		b.as-const to-str

.get-stat stat?(path c-str) summon trusted
	# Initial value doesn't really matter
	s = stat
	err = path stat s
	if err == 0
		s,
	else
		assert: err == -1
		unless errno == ENOENT
			todo

###
If `path` is a directory, calls `each-child-recursive` on every child of the directory.
Else, calls `f[path]`.
###
each-child-recursive void(path str, f act void(str)) summon
	filter act bool(str) = ignore => true
	path each-child-recursive filter, f

###
Like `each-child-recursive`, but calls `filter` on names of directory children
and skips them if `filter` returns false.
###
each-child-recursive void(path str, filter act bool(str), f act void(str)) summon
	if path is-dir
		path.names-in-dir each child_name =>
			if filter[child_name]
				path child-path child_name each-child-recursive filter, f
	else
		f[path]

# POSIX file permissions.
file-permissions record
	user permissions
	group permissions
	public permissions

# Permissions for one of user, group, public.
permissions record
	read bool
	write bool
	execute bool

.to-mode mode_t(a permissions)
	a.read.to-nat64 << 2 | a.write.to-nat64 << 1 | a.execute.to-nat64 to-nat32

no-permissions permissions()
	false, false, false

all-permissions permissions()
	true, true, true

user-only file-permissions(user-permissions permissions)
	user-permissions, no-permissions, no-permissions

# Converts permissions to an integer.
to-mode mode_t(a file-permissions)
	a.user.to-mode << 6 | a.group.to-mode << 3 | a.public.to-mode

# TODO: this might not be the correct default permissions
# Creates a new empty directory at `path`.
make-directory void(path str) summon
	# TODO: all-permissions.user-only instead of a number literal
	# TODO: 'to-nat32' should not be necessary
	path make-directory 0o777.to-nat32

make-directory void(path str, permissions file-permissions) summon
	path make-directory permissions.to-mode

make-directory void(path str, permissions mode_t) trusted summon
	check-posix-error: path.to-c-str mkdir permissions

# Deletes the file at `path`.
remove-file void(path str) trusted summon
	check-posix-error: path.to-c-str unlink

###
Deletes the directory at `path`.
It should be empty.
###
remove-directory void(path str) trusted summon
	check-posix-error: path.to-c-str rmdir

remove-directory-and-contents-non-recursive void(path str) no-doc summon
	path remove-directory-contents-non-recursive
	path remove-directory

remove-directory-contents-non-recursive void(path str) no-doc summon
	path.names-in-dir each child =>
		"{path}/{child}" remove-file

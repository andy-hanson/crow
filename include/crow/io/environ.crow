no-std
import
	unistd: environ
	../bool: !
	../col/arr: begin-ptr, arr-from-begin-end
	../col/dict: dict, each
	../col/mut-dict: move-to-dict!, mut-dict, set-subscript
	../col/mut-list: ~=, move-to-arr!, mut-list
	../misc: ->, arrow, from, to, void
	../private/bootstrap: todo
	../ptr: +, null, null?, ptr, subscript
	../str: ==, <=>, ~, char, c-str, str
	../str-util: find-char-in-cstr, find-cstr-end, to-c-str

# Represents all environment variables.
environ alias
	dict<str, str>

# Get the environment variables for this process.
get-environ environ() summon trusted
	res = mut-dict<str, str>
	environ get-environ-recur res
	res move-to-dict!

.get-environ-recur void(env ptr c-str, res mut-dict<str, str>) unsafe
	if !env[].null?
		entry = env[].parse-environ-entry
		res[entry.from] := entry to
		env + 1 get-environ-recur res

.parse-environ-entry arrow<str, str>(entry c-str) unsafe
	if key-end ?= entry find-char-in-cstr "="
		key = entry arr-from-begin-end key-end str
		value-begin = key-end + 1
		value-end = value-begin find-cstr-end
		value = value-begin arr-from-begin-end value-end str
		key -> value
	else
		todo

# Get an environment string from environment variables.
convert-environ ptr c-str(environ environ)
	res = mut-list<c-str>
	environ each (key, value) =>
		res ~=: key ~ "=" ~ value to-c-str
	res ~= null<char>
	res.move-to-arr! begin-ptr

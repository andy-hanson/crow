no-std
import
	unistd: __environ
	../col/dict: dict, each
	../col/mut-dict: move-to-dict, mut-dict, new, set-subscript
	../col/mut-arr: ~=, move-to-arr, mut-arr, new
	../col/private/arr-low-level: begin-ptr, arr-from-begin-end
	../hash: hash-mix
	../misc: new, void
	../private/bootstrap: todo
	../private/c-str-util: find-char-in-c-str, find-c-str-end
	../ptr: ==, +, *, const-ptr, null
	../str: ==, <=>, c-str, literal, str
	../str-conv: finish, interp, to-str, with-str, with-value
	../str-util: to-c-str
	../tuple: from, new, pair, to

# Represents the environment variables available to this process.
environ alias
	str[str]

# Get all environment variables for this process.
get-environ environ() summon trusted
	res str mut[str] = ()
	__environ get-environ-recur res
	res move-to-dict

.get-environ-recur void(env c-str*, res str mut[str]) unsafe
	unless *env == null
		entry = env->parse-environ-entry
		res[entry from] := entry to
		env + 1 get-environ-recur res

.parse-environ-entry pair<str, str>(entry c-str) unsafe
	if key-end ?= entry find-char-in-c-str "="
		key = entry arr-from-begin-end key-end str
		value-begin = key-end + 1
		value-end = value-begin find-c-str-end
		value = value-begin arr-from-begin-end value-end str
		key, value
	else
		todo

# Get an environment string from environment variables.
convert-environ c-str*(environ environ) unsafe
	res c-str mut[] = ()
	environ each (key, value) =>
		res ~= "{key}={value}" to-c-str
	res ~= null
	res.move-to-arr begin-ptr

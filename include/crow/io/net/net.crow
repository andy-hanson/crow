no-std
import
	bits/socket_type: SOCK_STREAM
	netdb:
		addrinfo, ai_addr, ai_addrlen, ai_family, ai_next, ai-passive, ai_protocol, ai_socktype,
		freeaddrinfo, getaddrinfo
	sys/socket: AF_INET, AF_UNSPEC, bind, connect, socket
	unistd: close
	../../cell: cell, subscript
	../../compare: !=
	../../exception: assert
	../../extra-types: fd-t
	../../number: ==, nat16, to-int32
	../../opt: force, opt, some
	../../ptr: ==, as-ref, null, ptr, ptr-to, subscript
	../../str: str
	../../str-conv: finish, interp, to-str, with-str, with-value
	../../str-util: to-c-str
	../../private/bootstrap: todo
	../posix-util: check-posix-error
	../print: print

# Uniform Resource Identifier
uri record
	host str
	port nat16
	path-and-query str
	# Basically just ignored
	after-hash str

# Opens a socket, connects to the URI, and returns the fd.
connect-to-uri fd-t(u uri) trusted summon
	hints = addrinfo: 0, AF_UNSPEC.to-int32, SOCK_STREAM, 0, 0, null.as-ref, null, null
	result = null cell<ptr<addrinfo>>
	check-posix-error: u.host.to-c-str getaddrinfo u.port.to-str.to-c-str, hints.ptr-to, result
	op-sock = result[] find-and-connect-working-socket
	result[] freeaddrinfo
	# TODO: handle failure
	op-sock force

.find-and-connect-working-socket fd-t?(ap ptr addrinfo) unsafe summon
	if ap != null
		a = ap[]
		sock = socket: a.ai_family, a.ai_socktype, a.ai_protocol
		print: "sock is {sock}"
		if sock == -1
			# Ignore error and try again
			a.ai_next find-and-connect-working-socket
		else
			err = sock connect a.ai_addr, a.ai_addrlen
			print: "err is {err}"
			if err == -1
				print: "connect() failed: "
				check-posix-error: sock close
				# Ignore error and try again
				a.ai_next find-and-connect-working-socket
			else
				assert: err == 0
				sock some

# Returns an fd bound to the given port.
bind-to-port fd-t(port str) unsafe summon
	hints = addrinfo: ai-passive, AF_INET, SOCK_STREAM, 0, 0, null.as-ref, null, null
	result = null cell<ptr<addrinfo>>
	check-posix-error: getaddrinfo: null, port.to-c-str, hints.ptr-to, result
	op-sock = result[] find-and-bind-working-socket
	result[] freeaddrinfo
	if res ?= op-sock
		res
	else
		print: "Failed to bind to port {port}"
		todo

.find-and-bind-working-socket fd-t?(ap ptr addrinfo) unsafe summon
	if ap != null
		a = ap[]
		listen-fd = socket: a.ai_family, a.ai_socktype, 0
		if listen-fd != -1
			if (listen-fd bind a.ai_addr, a.ai_addrlen) == 0
				print: "Connected!"
				listen-fd some
			else
				check-posix-error: listen-fd close
				a.ai_next find-and-bind-working-socket
		else
			a.ai_next find-and-bind-working-socket

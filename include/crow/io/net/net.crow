###
Module for low-level networking.
###

import
	crow/version: is-windows
	system/bits/socket_type: SOCK_STREAM
	system/netdb:
		addrinfo, ai_addr, ai_addrlen, ai_family, ai_next, ai-passive, ai_protocol, ai_socktype,
		freeaddrinfo, getaddrinfo, new
	system/sys/socket:
		AF_INET, as-fd, bind, closesocket, connect, INVALID_SOCKET, socket, SOCKET
	system/unistd: close
	system/win32: new, MAKEWORD, WSADATA, WSAStartup
	../../private/bootstrap: todo
	../posix-util: check-posix-error
	../print: err, out, print

-wsa-init void() summon, unsafe
	wsa-data mut WSADATA = ()
	err = 2 MAKEWORD 2 WSAStartup &wsa-data
	out print "initialized WSA, err is {err}"
	if err != 0
		todo

-find-and-connect-working-socket SOCKET?(ap addrinfo*) summon, unsafe
	guard ap != null
	a = *ap
	sock = a.ai_family socket a.ai_socktype, a.ai_protocol
	if sock == INVALID_SOCKET
		# Ignore error and try again
		a.ai_next find-and-connect-working-socket
	else
		error = sock connect a.ai_addr, a.ai_addrlen
		if error == -1
			err print "connect() failed: "
			sock close-socket
			# Ignore error and try again
			a.ai_next find-and-connect-working-socket
		else
			assert error == 0
			sock,

# Returns a file descriptor bound to the given port.
bind-to-port SOCKET(port nat16) summon, unsafe
	if is-windows
		wsa-init

	hints addrinfo = ai-passive, AF_INET, SOCK_STREAM, 0, 0, null, null, null
	result mut addrinfo mut* = null
	null getaddrinfo "{port}", &hints, &result check-getaddrinfo-error
	op-sock = result.as-const find-and-bind-working-socket
	result freeaddrinfo
	op-sock ?? throw "Failed to bind to port {port}".error

close-socket void(sock SOCKET) summon, unsafe
	if is-windows
		err = sock closesocket
		if err != 0
			todo
	else
		sock.as-fd.close check-posix-error

-find-and-bind-working-socket SOCKET?(ap addrinfo*) summon, unsafe
	unless ap == null
		a = *ap
		listen-fd = a.ai_family socket a.ai_socktype, 0
		if listen-fd == INVALID_SOCKET
			a.ai_next find-and-bind-working-socket
		else
			if (listen-fd bind a.ai_addr, a.ai_addrlen) == 0
				listen-fd,
			else
				listen-fd close-socket
				a.ai_next find-and-bind-working-socket

-check-getaddrinfo-error void(err int32) summon, unsafe
	# TODO: convert to appropriate enum
	assert err == 0 : "getaddrinfo error: {err}".error

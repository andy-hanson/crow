no-std
import
	errno: EAGAIN, errno
	sys/socket: as-fd, SOCKET
	unistd: write
	../../bool: bool, false, true
	../../col/array: +, -, array, begin, begin-pointer, end, is-empty, iterate, size, slice
	../../col/collection:
		.., -, contains, end, for-loop, index-of, join, split, subscript, try-remove-end
	../../col/dict: in, iterate, size, to
	../../col/list: ~~, ~=, +, -, begin, build, end, is-empty, iterate, list, next, size, slice, to
	../../col/mut-dict: mut-dict, new, try-remove, set-subscript, subscript
	../../col/mut-list: ~=, ~~=, iterate, move-to, mut-list, new, pop-n-from-start, size
	../../compare: <=, >
	../../enum-util: to-enum
	../../exception: to
	../../future: delay, future, future-catch, future-finally, new, subscript, then, with-block
	../../hash: hash-mix
	../../log: error, log, warn
	../../misc: new, shared, void
	../../number: ==, <=>, +, nat8, nat64, to
	../../option: ??, new, option
	../../parse: nat, parse
	../../string:
		==, <=>, ~~, as-string, begin, char8, end, hash-mix, is-empty, iterate, literal, new, next,
		prev, slice, string, to-bytes, to
	../../tuple: new
	../../private/bootstrap: todo
	./http-types:
		==, enum-members, GET, headers, http-internal-server-error, http-method, http-request,
		http-response, new, response-body, status, status-desc
	./tcp-server: close-client, new, start-tcp-server, stop

# Reference to a running server.
+http-server record

# Type of a function that can respond to HTTP requests.
+http-handler alias
	ref http-response(http-request)

+http-server-options record shared
	port string
	handler http-handler
+http-server http-server-options(port string, handler http-handler)
	port, handler

###
Starts running an HTTP server. Stops it when `cb` returns.
###
+with-block[t] t^(a http-server-options, cb ref t(http-server)) summon, t shared
	client-states http-parse-state mut[SOCKET] = ()

	on-accepted-client ref void(SOCKET) = sock =>
		client-states[sock] := ()
		()
	on-received-chunk ref void(SOCKET, nat8 array) = (sock, bytes) =>
		if state ?= client-states[sock]
			closed <- trusted sock handle-chunk state, bytes, a.handler
			if closed
				_ = client-states try-remove sock
				()
			()
		else
			warn log "Ignoring unrecognized client"
			()

	trusted
		tcp-server = a.port start-tcp-server (on-accepted-client, on-received-chunk)
		with : tcp-server.stop future-finally
			cb[]

# Returns true when closed client
-handle-chunk bool^(sock SOCKET, state http-parse-state, chunk nat8 array, handler http-handler) summon, unsafe
	state.unparsed ~~= chunk
	finished-request = if state.content-length == 0
		state handle-http-initial
	else
		assert state.unparsed.size <= state.content-length
		state.unparsed.size == state.content-length

	if finished-request
		request = state finish-request
		handler-response <- handler[request] future-catch
		response = match handler-response
		as ok o
			o
		as err e
			error log "{e}"
			http-internal-server-error
		<- sock write-until-finished response.response-to-array
		sock close-client
		true,
	else
		false,

-write-until-finished void^(sock SOCKET, content nat8 array) unsafe
	unless content is-empty
		wrote = sock.as-fd write content.begin-pointer, content.size
		unless wrote == content.size.to
			if wrote == -1
				err = errno
				assert err == EAGAIN : "can't write to socket, errno {err}"
				<- delay
				sock write-until-finished content
			else
				assert wrote > 0
				<- delay
				sock write-until-finished content[wrote.to .. end]

-finish-request http-request(state http-parse-state)
	state.method, state.url, state.headers.move-to::(string, string)[].to, state.unparsed.move-to

-response-to-array nat8 array(a http-response)
	forbid a.status-desc contains "\n"
	# TODO: headers are case insensitive, maybe forbid any upper-case letters in headers to be consistent
	forbid "Content-Length" in a.headers
	headers = "" join for k, v : a headers
		forbid k contains "\n"
		forbid v contains "\n"
		"\r\n{k}: {v}"
	head = "HTTP/1.1 {a status} \r\n{a status-desc}{headers}"
	if a.response-body is-empty
		"{head}\r\n\r\n" to-bytes
	else
		"{head}\r\nContent-Length:{a.response-body size}\r\n\r\n".to-bytes ~~ a.response-body to

# returns true if ready to call handler
-handle-http-initial bool(state http-parse-state)
	loop
		if line ?= state.unparsed try-take-first-line
			if line is-empty
				break state.content-length == 0
			elif state.url is-empty
				# Expect something like "GET / HTTP/1.1"
				parts string[] = line split " "
				assert parts.size == 3
				state.method := parts[0].to-enum ?? todo
				state.url := parts[1]
				assert parts[2] == "HTTP/1.1"
				forbid state.url is-empty
				continue
			else
				parts string[] = line split ": "
				assert parts.size == 2
				key = parts[0]
				value = parts[1]
				state.headers ~= (key, value)
				if key == "content-length"
					match nat parse value
					as ok content-length
						state.content-length := content-length
					as err _
						# invalid content-length
						todo
				continue
		else
			break false

-try-take-first-line string?(a nat8 mut[])
	if index ?= a index-of "\n"::char8.to
		bytes = (a pop-n-from-start index + 1)[0 .. end - 1]
		line = bytes as-string
		(line try-remove-end "\r" ?? line),

-http-parse-state record mut
	method mut http-method
	url mut string
	headers (string, string) mut[]
	# This is not set until after the end of headers
	content-length mut nat64
	# TODO:PERF: Use a circular buffer as we often take content off the front
	unparsed nat8 mut[]

-new http-parse-state()
	GET, "", (), 0, ()

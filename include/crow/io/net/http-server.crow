no-std
import
	errno: EAGAIN, errno
	sys/socket: as-fd, SOCKET
	unistd: write
	../../bool: bool, false, true
	../../col/arr: ~~, arr, is-empty, new, size, subscript
	../../col/arr-util: rtail
	../../col/dict: each, in, new
	../../col/mut-dict: move-to-dict, mut-dict, new, try-remove, set-subscript, subscript
	../../col/mut-arr: ~~=, index-of, move-to-arr, mut-arr, new, pop-n-from-start, size
	../../col/private/arr-low-level: begin-ptr
	../../compare: <=, >
	../../exception: assert, forbid, throw, to-str
	../../fut: delay, fut, fut-catch, new, subscript, then, then-void
	../../hash: hash-mix
	../../log: error, log, warn
	../../misc: new, void
	../../number: ==, <=>, +, nat8, nat64, to-int64, to-nat64
	../../opt: ??, new, opt
	../../range: ..
	../../reader: parse-nat
	../../str: ==, <=>, hash-mix, is-empty, literal, str, to-nat8
	../../str-conv: finish, interp, to-str, with-str, with-value
	../../str-util: as-str, contains-substr, split-by, to-bytes, try-remove-end
	../../writer: ~=, ~~=, move-to-str, new, writer
	../../private/bootstrap: todo
	./http-types:
		headers, http-get, http-internal-server-error, http-method, http-post, http-request,
		http-response, new, response-body, status, status-desc
	./tcp-server: close-client, new, start-tcp-server, stop

# Reference to a running server.
http-server record sendable
	stop ref void()

# Type of a function that can respond to HTTP requests.
http-handler alias
	ref http-response(http-request)

###
Starts running an HTTP server on the given port.
The server will be running by the time the returned future is resolved.
###
start-http-server fut http-server(port str, handler http-handler) trusted summon
	client-states http-parse-state mut[SOCKET] = ()

	on-accepted-client ref void(SOCKET) = sock =>
		client-states[sock] := ()
		()
	on-received-chunk ref void(SOCKET, nat8[]) = (sock, bytes) =>
		if state ?= client-states[sock]
			closed <- sock handle-chunk state, bytes, handler
			if closed
				_ = client-states try-remove sock
				()
			()
		else
			warn log "Ignoring unrecognized client"
			()
	tcp-server = port start-tcp-server (on-accepted-client, on-received-chunk)

	# TODO: KILL
	_ <- handler[(http-get, "", (), ())]

	(tcp-server.stop,),

# Returns true when closed client
.handle-chunk fut bool(sock SOCKET, state http-parse-state, chunk nat8[], handler http-handler) summon trusted
	state.unparsed ~~= chunk
	finished-request = if state.content-length == 0
		state handle-http-initial
	else
		assert: state.unparsed.size <= state.content-length
		state.unparsed.size == state.content-length

	if finished-request
		request = state finish-request
		handler-response <- handler[request] fut-catch
		response = match handler-response
		as ok o
			o
		as err e
			error log e.to-str
			http-internal-server-error
		<- sock write-until-finished response.response-to-arr
		sock close-client
		true,
	else
		false,

.write-until-finished fut void(sock SOCKET, content nat8[]) summon trusted
	unless content is-empty
		wrote = sock.as-fd write content.begin-ptr, content.size
		unless wrote == content.size.to-int64
			if wrote == -1
				err = errno
				if err == EAGAIN
					<- delay
					sock write-until-finished content
				else
					"can't write to socket, errno {err}" throw
			else
				assert: wrote > 0
				<- delay
				sock write-until-finished content[wrote.to-nat64 .. content.size]

.finish-request http-request(state http-parse-state) trusted
	state.method, state.url, state.headers.move-to-dict, state.unparsed move-to-arr

.response-to-arr nat8[](a http-response)
	res writer = ()
	res ~~= "HTTP/1.1 "
	res ~~= a.status to-str
	res ~= " "
	forbid: a.status-desc contains-substr "\n"
	res ~~= "\r\n"
	res ~~= a status-desc
	# TODO: headers are case insensitive, maybe forbid any upper-case letters in headers to be consistent
	a.headers each (k, v) =>
		res ~~= "\r\n"
		forbid: k contains-substr "\n"
		forbid: v contains-substr "\n"
		res ~~= k
		res ~~= ": "
		res ~~= v
	forbid: "Content-Length" in a.headers
	unless a.response-body is-empty
		res ~~= "\r\n"
		res ~~= "Content-Length: "
		res ~~= a.response-body.size to-str
	res ~~= "\r\n\r\n"
	res.move-to-str.to-bytes ~~ a.response-body

# returns true if ready to call handler
.handle-http-initial bool(state http-parse-state)
	if line ?= state.unparsed try-take-first-line
		if line is-empty
			if content-length-str ?= state.headers["content-length"]
				# set state.content-length
				if content-length ?= content-length-str parse-nat
					state.content-length := content-length
					false
				else
					# invalid content-length
					todo
			else
				true
		elif state.url is-empty
			# Expect something like "GET / HTTP/1.1"
			parts = line split-by " "
			assert: parts.size == 3
			state.method := parts[0] parse-method
			state.url := parts[1]
			assert: parts[2] == "HTTP/1.1"
			forbid: state.url is-empty
			state handle-http-initial
		else
			parts = line split-by ": "
			assert: parts.size == 2
			key = parts[0]
			value = parts[1]
			state.headers[key] := value
			state handle-http-initial
	else
		false

.parse-method http-method(name str)
	if name == "GET"
		http-get
	elif name == "POST"
		http-post
	else
		todo

.try-take-first-line str?(a nat8 mut[]) trusted
	if index ?= a index-of "\n".to-nat8
		bytes = a pop-n-from-start index + 1 rtail
		line = bytes as-str
		(line try-remove-end "\r" ?? line),

.http-parse-state record mut
	method mut http-method
	url mut str
	headers str mut[str]
	# This is not set until after the end of headers
	content-length mut nat64
	# TODO:PERF: Use a circular buffer as we often take content off the front
	unparsed nat8 mut[]

.new http-parse-state()
	http-get, "", (), 0, ()

import
	system/errno: EAGAIN, errno
	system/sys/socket: as-fd, SOCKET
	system/unistd: write
	../../parse: ~~, grammar, map, nat, parse, separated-by, text-not-containing-any
	../../private/bootstrap: todo
	./http-types:
		==, enum-members, GET, headers, http-internal-server-error, http-method, http-request,
		http-response, new, response-body, status, status-desc
	./tcp-server: close-client, new, start-tcp-server, stop, tcp-handler, tcp-server

# Reference to a running server.
+http-server record

# Type of a function that can respond to HTTP requests.
+http-handler alias
	http-response shared(req http-request)

+http-server-options record(port nat16, handler http-handler) shared
+http-server http-server-options(port nat16, handler http-handler)
	port, handler

###
Starts running an HTTP server. Stops it when `cb` returns.
###
+with-block[t] t(
	a http-server-options,
	cb t mut(server http-server),
) summon, t shared, native extern
	assert trusted extern libc : not-implemented
	assert trusted extern posix : not-implemented
	server tcp-server future = with : parallel
		client-states http-parse-state mut[SOCKET] = ()
		handler tcp-handler = do
			on-accepted-client: sock =>
				client-states[sock] := ()
			on-received-chunk: (sock, bytes) =>
				opt-state http-parse-state? = client-states[sock]
				if state ?= opt-state
					trusted client-states handle-chunk sock, state, bytes, a.handler
				else
					warn log "Ignoring unrecognized client"
					()
		trusted a.port start-tcp-server handler
	tcp-server = server await
	finally tcp-server stop
	cb[]

-handle-chunk void(
	client-states http-parse-state mut[SOCKET],
	sock SOCKET,
	state http-parse-state,
	chunk nat8 array,
	handler http-handler,
) summon, unsafe, (libc, posix, native) extern
	state.unparsed ~~= chunk
	request-state = if state.content-length == 0
		state handle-http-initial
	else
		assert state.unparsed.size <= state.content-length
		state.unparsed.size == state.content-length ? finished : needs-more

	match request-state
	as needs-more
		()
	as finished
		request = state finish-request
		_ = (client-states remove sock)!
		with : fire-and-forget
			response = match (() => handler[request]) catch-all
			as ok o
				o
			as error e
				error log "{e}"
				http-internal-server-error
			sock write-until-finished response.response-to-array
			sock close-client
			()
	as abandon
		_ = (client-states remove sock)!

-write-until-finished void(
	sock SOCKET,
	content nat8 array,
) summon, unsafe, (libc, native, posix) extern
	remaining mut nat8 array = content
	until remaining.is-empty
		wrote = sock.as-fd write remaining.begin-pointer, remaining.size
		if wrote == -1
			err = errno
			assert err == EAGAIN : "can't write to socket, errno {err}".error
			yield-fiber
		else
			assert wrote > 0
			yield-fiber
			remaining := remaining[wrote.to .. end]

-finish-request http-request(state http-parse-state)
	path, query = state.path-and-query parse-path-and-query
	state.method, path, query, state.headers.move-to::(symbol, string)[].to, state.unparsed.move-to

-response-to-array nat8 array(a http-response) native extern
	forbid a.status-desc contains "\n"
	# TODO: headers are case insensitive,
	# maybe forbid any upper-case letters in headers to be consistent
	forbid "Content-Length"::symbol in a.headers
	headers = "" join for k, v : a headers
		"\r\n{k}: {v}"
	head string = "HTTP/1.1 {a status} \r\n{a status-desc}{headers}"
	if a.response-body is-empty
		"{head}\r\n\r\n" to-bytes
	else
		"{head}\r\nContent-Length:{a.response-body size}\r\n\r\n".to-bytes ~~ a.response-body to

http-initial-state enum(needs-more, finished, abandon)

-handle-http-initial http-initial-state(state http-parse-state)
	loop
		guard line ?= state.unparsed try-take-first-line : break needs-more
		guard !line.is-empty : break state.content-length == 0 ? finished : needs-more
		if state.path-and-query is-empty
			# Expect something like "GET / HTTP/1.1"
			parts string[] = line split " "
			assert parts.size == 3
			state.method := parts[0].to ?? todo
			state.path-and-query := parts[1]
			assert parts[2] == "HTTP/1.1"
			forbid state.path-and-query is-empty
			continue
		else
			parts string[] = line split ": "
			guard parts.size == 2 : break abandon
			key = parts[0]
			value = parts[1]
			state.headers ~= (key.lower-case.to, value)
			if key == "content-length"
				match nat parse value
				as ok content-length
					state.content-length := content-length
				as error _
					# invalid content-length
					todo
			continue

-try-take-first-line string?(a nat8 mut[])
	guard index ?= a index-of "\n"::char8.to
	bytes = (a pop-n-from-start index + 1)[0 .. end - 1]
	line = bytes as-string
	(line try-remove-end "\r" ?? line),

-http-parse-state record mut
	method mut http-method
	path-and-query mut string
	headers (symbol, string) mut[]
	# This is not set until after the end of headers
	content-length mut nat64
	# TODO:PERF: Use a circular buffer as we often take content off the front
	unparsed nat8 mut[]

-new http-parse-state()
	GET, "", (), 0, ()

-parse-path-and-query (string, string[symbol])(a string)
	if path, query ?= a try-split-once "?"
		path, query.parse-query
	else
		a, ()

-parse-query string[symbol](a string)
	(query parse a).ok ?? ()

-query string[symbol] grammar()
	query-part separated-by "&" map parts =>
		for part : parts; part
-query-part (symbol, string) grammar()
	identifier = ("=", "&") text-not-containing-any
	(identifier map x => x.to::symbol) ~~ "=" ~~ identifier

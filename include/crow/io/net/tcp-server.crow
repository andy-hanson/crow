import
	system/errno: EAGAIN, errno, EWOULDBLOCK
	system/fcntl: fcntl, F_GETFL, F_SETFL, O_NONBLOCK
	system/netinet/in: new, sockaddr_in
	system/stdio: perror
	system/sys/epoll:
		epoll_create1, epoll_ctl, EPOLL_CTL_ADD, EPOLLERR, EPOLLET, epoll_event, EPOLLHUP, EPOLLIN,
		epoll_wait, event_data, events, new
	system/sys/socket: accept, as-fd, as-socket, listen, shutdown, SHUT_RDWR, sockaddr, SOCKET
	system/sys/types: socklen_t
	system/unistd: close, read
	../../c-types: c-int, fd-t
	../../private/bootstrap: todo
	../duration: millisecond
	../posix-util: check-posix-error
	../print: err, print
	../time: delay
	./net: bind-to-port, close-socket

# Reference to a running server.
tcp-server record shared
	stop void shared()

# Interface that handles TCP requests.
tcp-handler record mut
	on-accepted-client void mut(socket SOCKET)
	###
	Gives the handler a chunk of data.
	Handler needs to parse to determine when it has all the chunks,
	then write a response and call 'close-client'.
	WARN: Due to asynchrony, this may be called on a client that was already closed.
	###
	on-received-chunk void mut(socket SOCKET, chunk nat8 array)

###
Starts running a TCP server on the given port.
Once the function returns, it is already serving requests.
###
start-tcp-server tcp-server(
	port nat16,
	handler tcp-handler,
) summon, unsafe, (libc, native, posix) extern
	sock = port bind-to-port
	max-connections int32 = 1000
	sock listen max-connections check-posix-error
	if extern windows
		todo
	elif extern linux
		sock.as-fd start-tcp-server-linux handler
	else
		todo

-start-tcp-server-linux tcp-server(
	port-fd fd-t,
	handler tcp-handler,
) summon, unsafe, (libc, linux, native, posix) extern
	port-fd set-non-blocking

	epoll-fd = 0 epoll_create1
	if epoll-fd < 0
		"epoll-create1 failed" perror
		todo
	else
		event-flags = EPOLLIN | EPOLLET
		accept-event mut epoll_event = event-flags, port-fd.to
		ctl-err = epoll-fd epoll_ctl EPOLL_CTL_ADD, port-fd, &accept-event
		unless ctl-err == 0
			"epoll_ctl failed" perror
			todo

		state tcp-server-state = false, false, 0, port-fd, epoll-fd, 0, handler
		_ = state pad-0
		_ = state pad-1
		_ = state pad-2

		done void future = with : later
			match (() => state tcp-server-loop-linux) catch-all
			as ok ()
				()
			as error e
				error log "tcp-server error: {e}"

		stop: shared () =>
			state.should-stop := true
			done await

# Close a TCP client.
close-client void(client SOCKET) summon, unsafe, (libc, posix) extern
	sd-err = client shutdown SHUT_RDWR
	assert sd-err == 0
	client close-socket

-tcp-server-state record by-ref, mut
	should-stop mut bool
	# TODO: my code wrongly thinks this should be packed!
	pad-0 bool
	pad-1 nat16
	port-fd fd-t
	epoll-fd fd-t
	# TODO: my code wrongly thinks this should be padded!
	pad-2 nat32
	handler tcp-handler

-tcp-server-loop-linux void(
	state tcp-server-state,
) summon, unsafe, (libc, linux, native, posix) extern
	unless state should-stop
		event mut epoll_event = ()
		timeout c-int = 0
		num-events = state.epoll-fd epoll_wait &event, 1, timeout
		match num-events
		as 0
			100.millisecond delay
			state tcp-server-loop-linux
		as 1
			event-flags = event events
			fd int32 = event.event_data to
			if event-flags bits-intersect (EPOLLERR | EPOLLHUP) ||
					!(event-flags bits-intersect EPOLLIN)
				err print "SOME KINDA ERROR"
				err = fd close
				assert err == 0
			elif fd == state.port-fd
				state.port-fd.as-socket accept-clients state.epoll-fd,
					state.handler.on-accepted-client
			else
				fd handle-client-linux state.handler.on-received-chunk
			state tcp-server-loop-linux
		else
			assert num-events < 0
			err print "error in epoll_wait"
			todo

-accept-clients void(
	listen-fd SOCKET,
	epoll-fd fd-t,
	on-accepted-client void mut(socket SOCKET),
) summon, unsafe, (libc, linux, native, posix) extern
	clientaddr mut sockaddr_in = ()
	clientaddr-as-sockaddr sockaddr mut* = (&clientaddr)::sockaddr_in mut* pointer-cast
	addrlen mut socklen_t = size-of@sockaddr_in to
	client-fd = listen-fd accept clientaddr-as-sockaddr, &addrlen
	if client-fd < 0
		e = errno
		unless e == EAGAIN || e == EWOULDBLOCK
			"accept() error" perror
			todo
	else
		client-fd set-non-blocking
		client-event mut epoll_event = EPOLLIN | EPOLLET, client-fd.to
		err = epoll-fd epoll_ctl EPOLL_CTL_ADD, client-fd, &client-event
		assert err == 0
		on-accepted-client[client-fd as-socket]
		listen-fd accept-clients epoll-fd, on-accepted-client

-handle-client-linux void(
	fd fd-t,
	on-received-chunk void mut(socket SOCKET, chunk nat8 array),
) summon, unsafe, (libc, native, posix) extern
	buf nat8 mut-array = 0x1000 gc-safe-mut-array
	count = fd read buf.begin-pointer, buf.size
	if count < 0
		err = errno
		unless err == EAGAIN
			"read() failed" perror
	elif count != 0
		chunk = buf.cast-immutable[0 .. count.to]
		on-received-chunk[fd.as-socket, chunk]
		fd handle-client-linux on-received-chunk

-set-non-blocking void(fd fd-t) bare, summon, unsafe, (libc, posix) extern
	file-flags = fd fcntl F_GETFL, 0
	if file-flags < 0
		"fcntl() error" perror
		todo
	else
		err = fd fcntl F_SETFL, file-flags | O_NONBLOCK
		if err < 0
			"fcntl() error" perror
			todo

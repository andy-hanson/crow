no-std
import
	errno: EAGAIN, errno, EWOULDBLOCK
	fcntl: fcntl, F_GETFL, F_SETFL, O_NONBLOCK
	netinet/in: sockaddr_in
	stdio: perror
	sys/epoll:
		data, epoll_create1, epoll_ctl, EPOLL_CTL_ADD, EPOLLERR, EPOLLET, epoll_event, EPOLLHUP,
		EPOLLIN, epoll_wait, events
	sys/socket: accept, listen, shutdown, SHUT_RDWR, sockaddr
	sys/types: socklen_t
	unistd: close, read
	../../bits: |, bits-intersect
	../../bool: !, &&, ||, bool, false, true
	../../cell: cell
	../../col/arr: arr, begin-ptr, subscript
	../../col/mut-arr: cast-immutable, begin-ptr, size, uninitialized-mut-arr
	../../compare: !=, <
	../../c-types: c-int
	../../exception: assert, message
	../../extra-types: fd-t
	../../fut: fut, handle-exceptions, then-void, fut-catch, resolved, subscript
	../../misc: ->, as, drop, void
	../../number: ==, <=>, int32, nat8, nat16, nat32, to-int32, to-int64, to-nat32, to-nat64
	../../opt: value
	../../private/bootstrap: todo
	# TODO: don't use this
	../../private/fut-low-level: callback!
	../../ptr: by-val, ptr-cast-to-extern, ptr-to, ref-of-val, size-of
	../../str: chars, str
	../duration: msec
	../posix-util: check-posix-error
	../print: print
	../time: delay
	./net: bind-to-port

# Represents the state of the server.
tcp-server record sendable
	stop ref void()

# Interface that handles TCP requests.
tcp-handler record sendable
	on-accepted-client ref void(fd-t)
	# Gives the handler a chunk of data.
	# Handler needs to parse to determine when it has all the chunks, then write a response and call 'close-client'.
	# WARN: Due to asynchrony, this may be called on a client that was already closed.
	on-received-chunk ref void(fd-t, nat8[])

###
Starts running a TCP server on the given port.
Once the function returns, it is already serving requests.
###
start-tcp-server tcp-server(port str, handler tcp-handler) unsafe summon
	port-fd = port bind-to-port
	max-connections = 1000 as<int32>
	check-posix-error: port-fd listen max-connections
	set-non-blocking: port-fd

	epoll-fd = 0 epoll_create1
	if epoll-fd < 0
		perror: "epoll-create1 failed\0".chars.begin-ptr
		todo
	else
		event-flags = as<nat32>: EPOLLIN | EPOLLET
		accept-event = epoll_event: event-flags, port-fd.to-int64.to-nat64
		ctl-err = epoll-fd epoll_ctl EPOLL_CTL_ADD, port-fd, accept-event.ptr-to
		if ctl-err != 0
			perror: "epoll_ctl failed\0".chars.begin-ptr
			todo

		state = tcp-server-state: false, false, 0, port-fd, epoll-fd, 0, handler
		drop: state.pad-0
		drop: state.pad-1
		drop: state.pad-2

		print: "starting the server loop"
		done = state tcp-server-loop
		done.fut-catch callback! r =>
			match r
			as ok
				print: "stopped normally"
			as err e
				print: "An exception occurred in server"
				print: e.value message

		done handle-exceptions

		tcp-server: () =>
			print: "STOP CALLED"
			state.should-stop := true
			done

# Close the fd for a TCP client.
close-client void(client-fd fd-t) unsafe summon
	sd-err = client-fd shutdown SHUT_RDWR
	assert: sd-err == 0
	close-err = client-fd close
	assert: close-err == 0

.tcp-server-state record mut
	by-ref
	should-stop mut bool
	# TODO: my code wrongly thinks this should be packed!
	pad-0 bool
	pad-1 nat16
	port-fd fd-t
	epoll-fd fd-t
	# TODO: my code wrongly thinks this should be padded!
	pad-2 nat32
	handler tcp-handler

.tcp-server-loop fut void(state tcp-server-state) unsafe summon
	if state should-stop
		void resolved
	else
		event = epoll_event: 0, 0
		timeout = 0 as<c-int>
		num-events = state.epoll-fd epoll_wait event.ptr-to, 1, timeout
		if num-events < 0
			print: "error in epoll_wait"
			todo
		elif num-events == 0
			<- 100.msec delay
			state tcp-server-loop
		else
			assert: num-events == 1
			flags = event.events
			fd = event.data.to-int64 to-int32
			if flags bits-intersect EPOLLERR | EPOLLHUP || !(flags bits-intersect EPOLLIN)
				print: "SOME KINDA ERROR"
				err = fd close
				assert: err == 0
			elif fd == state.port-fd
				accept-clients: state.port-fd, state.epoll-fd, state.handler.on-accepted-client
			else
				fd handle-client state.handler.on-received-chunk
			state tcp-server-loop

.accept-clients void(listen-fd fd-t, epoll-fd fd-t, on-accepted-client ref void(fd-t)) unsafe summon
	clientaddr = sockaddr_in
	clientaddr-as-sockaddr = clientaddr.ptr-to ptr-cast-to-extern<sockaddr, sockaddr_in>
	addrlen = as<by-val<cell<socklen_t>>>: cell<socklen_t>: size-of<sockaddr_in> to-nat32
	client-fd = listen-fd accept clientaddr-as-sockaddr, addrlen.ref-of-val
	if client-fd < 0
		e = errno
		if e != EAGAIN && e != EWOULDBLOCK
			perror: "accept() error\0".chars.begin-ptr
			todo
	else
		client-fd set-non-blocking
		client-event = epoll_event: EPOLLIN | EPOLLET, client-fd.to-int64.to-nat64
		err = epoll-fd epoll_ctl EPOLL_CTL_ADD, client-fd, client-event.ptr-to
		assert: err == 0
		on-accepted-client[client-fd] handle-exceptions
		accept-clients: listen-fd, epoll-fd, on-accepted-client

.handle-client void(fd fd-t, on-received-chunk ref void(fd-t, nat8[])) unsafe summon
	buf = uninitialized-mut-arr<nat8>: 256
	count = fd read buf.begin-ptr, buf.size
	if count < 0
		err = errno
		if err != EAGAIN
			perror: "read() failed\0".chars.begin-ptr
	elif count != 0
		chunk = buf.cast-immutable[0 -> count.to-nat64]
		on-received-chunk[fd, chunk] handle-exceptions
		fd handle-client on-received-chunk

.set-non-blocking void(fd fd-t) noctx unsafe summon
	flags = fd fcntl F_GETFL, 0
	if flags < 0
		perror: "fcntl() error\0".chars.begin-ptr
		todo
	else
		err = fd fcntl: F_SETFL, flags | O_NONBLOCK
		if err < 0
			perror: "fcntl() error\0".chars.begin-ptr
			todo

no-std
import
	../../col/arr: arr
	../../col/dict: dict, new
	../../hash: hash-mix
	../../number: nat8, nat64
	../../str: ==, <=>, literal, str
	../../str-util: as-str, to-bytes

# Parsed HTTP request.
http-request record
	method http-method
	url str
	headers str[str]
	request-body nat8[]

# TODO: should this be trusted?
# Request body as as string.
request-body-str str(a http-request) trusted
	a.request-body as-str

# Response to an HTTP request.
http-response record
	status nat64
	status-desc str
	headers str[str]
	response-body nat8[]

# Creates a 400 response with the message "Bad query".
http-bad-query http-response()
	"Bad query" http-bad-query

# Creates a 400 response with the given message.
http-bad-query http-response(message str)
	400, message, (), message.to-bytes

# Creates a 403 response with the message "Forbidden".
http-forbidden http-response()
	"Forbidden" http-forbidden

# Creates a 403 response with the given message.
http-forbidden http-response(message str)
	403, message, (), message.to-bytes

# Creates a 404 response with the message "Not found".
http-not-found http-response()
	"Not found" http-not-found

# Creates a 404 response with the given message.
http-not-found http-response(message str)
	404, message, (), message.to-bytes

http-internal-server-error http-response()
	"Internal server error" http-internal-server-error

http-internal-server-error http-response(message str)
	500, message, (), message.to-bytes

# Creates a 200 response with the message "OK".
http-ok http-response()
	"OK" http-ok

# Creates a 200 response with the given message.
http-ok http-response(message str)
	message http-ok ()

# Creates a 200 response with the given message and headers.
http-ok http-response(message str, headers str[str])
	200, "OK", headers, message.to-bytes

# Method used by an HTTP request.
http-method enum
	http-get
	http-post

# `"GET"` or `"POST"`.
to-str str(a http-method)
	match a
	as http-get
		"GET"
	as http-post
		"POST"

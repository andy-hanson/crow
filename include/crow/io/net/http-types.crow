import
	crow/parse: parse

region request

# Parsed HTTP request.
+http-request record
	method http-method
	path string
	# Parse URI query components, e.g. "?a=b" parses to `("a", "b"),`
	query string[symbol]
	headers string[symbol]
	body nat8[]

+body string(a http-request)
	a.body as-string

+body-json json(a http-request)
	json parse a.body ok ?? throw "Body must be JSON" http-bad-query

+cookies alias
	string[symbol]

+parse-cookies cookies(a http-request)
	(a.headers["cookie"] ?? "") parse-cookies

-parse-cookies cookies(cookies-string string)
	with out : build
		for part : cookies-string split "; "
			if name, value ?= part try-split-once "="
				out ~= (name.to, value)

+set-cookie-header (symbol, string)(cookies cookies)
	"set-cookie", cookies.cookies-string

+cookies-string string(cookies cookies)
	"; " join for key, value : cookies
		"{key}={value}"

region response

# Response to an HTTP request.
+http-response record
	status nat64
	status-desc string
	headers string[symbol]
	response-body nat8[]

+respond-error record(status nat, status-desc string) exception variant-member
+to http-response(a respond-error)
	a.status, a.status-desc, (), a.status-desc.to-bytes
+show string(a respond-error)
	"{a status} {a status-desc}"

# Creates a 400 response with the message "Bad query".
+http-bad-query exception()
	"Bad query" http-bad-query
# Creates a 400 response with the given message.
+http-bad-query exception(message string)
	400 respond-error message

# Creates a 403 response with the message "Forbidden".
+http-forbidden exception()
	"Forbidden" http-forbidden
# Creates a 403 response with the given message.
+http-forbidden exception(message string)
	403 respond-error message

# Creates a 404 response with the message "Not found".
+http-not-found exception()
	"Not found" http-not-found
# Creates a 404 response with the given message.
+http-not-found exception(message string)
	404 respond-error message

+http-internal-server-error respond-error()
	500, "Internal server error"

# Creates a 200 response with the message "OK".
+http-ok http-response()
	"OK" http-ok
# Creates a 200 response with the given message.
+http-ok http-response(content json)
	content.show http-ok ()
+http-ok http-response(message string)
	message http-ok ()
+http-ok http-response(content json, headers string[symbol])
	content.show http-ok headers
# Creates a 200 response with the given message and headers.
+http-ok http-response(message string, headers string[symbol])
	200, "OK", headers, message.to-bytes

# Method used by an HTTP request.
+http-method enum(GET, POST)
+show string(a http-method)
	a to

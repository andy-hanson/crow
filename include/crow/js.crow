###
Contains functions for JavaScript primitive operations.

Functions here are marked 'bare' even if they may allocate; 'bare' doesn't matter in JS,
but many functions that need to be 'bare' for native code need to use these functions.
###

no-std
import
	./private/bootstrap: array, bool, gc-safe-value, void, nat64, new-void, string, symbol

+js-any builtin

+as-js[t] js-any(a t) builtin, bare, unsafe, js extern
+cast[t] t(a js-any) builtin, bare, unsafe, js extern

+js-global js-any() builtin, bare, unsafe, js extern
+js-global js-any(name symbol) bare, unsafe, js extern
	js-global[name]
# `a[name]`
+subscript js-any(a js-any, name symbol) builtin, bare, unsafe, js extern
# `a[index]` (This converts 'index' to a string.)
+subscript js-any(a js-any, index nat64) builtin, bare, unsafe, js extern
# `a[name] = value`
+set-subscript[t] void(a js-any, name symbol, value t) builtin, bare, unsafe, js extern
# `a[index] = value` (This converts 'index' to a string.)
+set-subscript[t] void(a js-any, index nat64, value t) builtin, bare, unsafe, js extern
###
`a()`
WARN: This does not 'await' the result.
WARN: 'get' followed by 'call' may not work. Use 'call-property' instead.
###
+call js-any(a js-any) builtin, bare, unsafe, js extern
# `a(arg)`
+call[p0] js-any(a js-any, arg p0) builtin, bare, unsafe, js extern
# `a(arg0, arg1)`
+call[p0, p1] js-any(a js-any, arg0 p0, arg1 p1) builtin, bare, unsafe, js extern
# `a(arg0, arg1, arg2)`
+call[p0, p1, p2] js-any(a js-any, arg0 p0, arg1 p1, arg2 p2) builtin, bare, unsafe, js extern
# `new a()`
+call-new js-any(a js-any) builtin, bare, unsafe, js extern
# `new a(arg)`
+call-new[p0] js-any(a js-any, arg p0) builtin, bare, unsafe, js extern
# `new a(arg0, arg1)`
+call-new[p0, p1] js-any(a js-any, arg p0, arg1 p1) builtin, bare, unsafe, js extern
# `new a(arg0, arg1, arg2)`
+call-new[p0, p1, p2] js-any(a js-any, arg p0, arg1 p1, arg2 p2) builtin, bare, unsafe, js extern
# `a[name]()`
+call-property js-any(a js-any, name string) builtin, bare, unsafe, js extern
# TODO: rename to get-and-call ----------------------------------------------------------------------------------------------
# `a[name](arg)`
+call-property[p0] js-any(a js-any, name string, arg p0) builtin, bare, unsafe, js extern
# `a[name](arg0, arg1)`
+call-property[p0, p1] js-any(
	a js-any,
	name string,
	arg0 p0,
	arg1 p1,
) builtin, bare, unsafe, js extern
# `a[name](arg0, arg1, arg2)`
+call-property[p0, p1, p2] js-any(
	a js-any,
	name string,
	arg0 p0,
	arg1 p1,
	arg2 p2,
) builtin, bare, unsafe, js extern
# `a[name](...args)`
+call-property-spread[p] js-any(
	a js-any,
	name string,
	args p array,
) builtin, bare, unsafe, js extern
###
Treat one type as another. This is a noop in JS.

This should only be done if the input value can be treated as the output type.
For example, a `nat8` can be treated as a `nat64` since they are both represented as `BigInt`s
and every valid `nat8` value is a valid `nat64` value.

However, you should usually use a `to` function (such as `to nat64(a nat8)`)
since those are safe and cross-platform.
###
+js-cast[out, in] out(a in) bare, unsafe, js extern
	a.as-js cast

+null js-any() bare, js extern
	trusted gc-safe-value
+undefined js-any() bare, trusted, js extern
	new-void as-js

region Unary operators
+await js-any(a js-any) builtin, bare, unsafe, js extern
+typeof string(a js-any) builtin, bare, unsafe, js extern

region Binary operators
# NOTE: This is actually JavaScript's `===` operator.
+== bool(a js-any, b js-any) builtin, bare, unsafe, js extern
+instanceof bool(a js-any, b js-any) builtin, bare, unsafe, js extern
+< bool(a js-any, b js-any) builtin, bare, unsafe, js extern
++ js-any(a js-any, b js-any) builtin, bare, unsafe, js extern

region Utiliies

###
Don't count on anything being in the enclosing scope.
Instead, you should 'eval' a function literal, then 'call' it.
Remember to make the function 'async' and 'await' it if appropriate.
###
+eval js-any(source string) unsafe, js extern
	"eval".js-global call source

no-std
import
	./col/list: for-loop, list, size
	./exception: catch, exception
	./fun-util: subscript
	./misc: break-or-continue, loop-break, loop-continue, new, void
	./number: ==, -, nat64
	./private/bootstrap: action, exclusion, is-sendable, lk, new, rejected, resolved
	./private/future-low-level: add-task, get-result, forward-to, reject, resolve, unresolved
	./private/runtime: add-task, cur-exclusion, exception-handler, get-global-ctx, new-exclusion
	./private/task-queue: task
	./private/thread-utils: init, lock, uninit
	./result: !, result
	./tuple: a, b, new, pair
export
	./private/bootstrap: future

loop-break[t] t break-or-continue^(a t)
	a.loop-break,
loop-continue[t] t break-or-continue^()
	loop-continue,

.lock[t] lock(a t^) unsafe
	&a.lk

###
A future already resolved to void.
Writing `<- delay` will cause the code below to run in a new task.
This can be useful for breaking up big tasks.

`delay` from `crow/io/time` is useful for delaying for linger times.
###
delay void^()
	()

# Converts a value to a future resolved with that value.
new[t] t^(value t) trusted
	res t^ = uninit, value.resolved
	res.lock init
	res

# Future resolved to `()`.
new[t] t^() t new
	(),

# Future resolved with an exception.
rejected[t] t^(err exception) trusted
	res t^ = uninit, err.rejected
	res.lock init
	res

# TODO: t[] is-sendable should not be necessary
###
Waits for every one of `futures` to be resolved, then returns an array all of their results.

If one of `futures` resolves with an exception, this resolves to the leftmost exception (discarding others),
regardless of which exception happened first.
###
wait-all[t] t[]^(futures t^[]) trusted, t is-sendable, t[] is-sendable
	<- futures wait-all-complete
	(for x : futures; x.get-result!),

# Returns a future that is resolved once all inputs are resolved.
.wait-all-complete[t] void^(futures t^[]) trusted, t is-sendable
	res void^ = unresolved
	count mut nat64 = futures.size
	task task = cur-exclusion, () =>
		count := count - 1
		if count == 0
			res resolve ()
	for x : futures
		x add-task task
	res

###
Future resolved to `ok` if `a` succeeds and `err` if `a` fails with an exception.
###
future-catch[t] (t, exception) result^(a t^) trusted, t is-sendable
	res (t, exception) result^ = unresolved
	a add-task get-global-ctx.new-exclusion, () =>
		res resolve a.get-result
	res

.future-finally record mut
	cleanup ref void()
future-finally future-finally(cleanup ref void())
	cleanup,
with-block[t] t^(a future-finally, f ref t()) trusted, t is-sendable
	fut = f[]
	res t^ = unresolved
	fut add-task get-global-ctx.new-exclusion, () =>
		result = fut get-result
		cleanup-fut = a.cleanup[]
		cleanup-fut add-task get-global-ctx.new-exclusion, () =>
			match result
			as ok value
				match cleanup-fut get-result
				as ok _
					res resolve value
				as err e
					res reject e
			as err e
				res reject e
	res

###
Calls `f` once `a` is resolved.
Returns a future for the result of `f`.

If `a` is resolved with an exception, this never calls `f`,
and the result of `then` will have the same exception as `a`.
###
then[out, in] out^(a in^, f ref out(in)) trusted, out is-sendable, in is-sendable
	res out^ = unresolved
	action = f action
	a add-task f.exclusion, () =>
		match a get-result
		as ok value
			match (() => action[value]) catch
			as ok fut
				res forward-to fut
			as err e
				res reject e
		as err e
			res reject e
	res

# Like `then`, but `f` takes no parameter (since it will be `void` anyway.)
then[out] out^(a void^, f ref out()) out is-sendable
	a then _ =>
		f[]

# TODO: shouldn't need (in0, in1) is-sendable
###
Use like:
	x, y <- f | g
Where 'f' and 'g' are futures.
###
then[out, in0, in1] out^(
	a (in0, in1)^,
	f ref out(in0, in1),
) trusted, out is-sendable, in0 is-sendable, in1 is-sendable, (in0, in1) is-sendable
	pair <- a
	f[pair.a, pair.b]

# TODO: shouldn't need (t, u) is-sendable
|[t, u] (t, u)^(a t^, b u^) t is-sendable, u is-sendable, (t, u) is-sendable
	x <- a
	y <- b
	(x, y),

parallel record
parallel parallel()
	()
###
Run `f` in a task with a new exclusion and return a future for its result.

`f` must be a `fun` and not an `act` so that it can have a new exclusion,
which allows it to run in parallel.
###
with-block[t] t^(_ parallel, f fun t^()) trusted
	res t^ = unresolved
	gctx = get-global-ctx
	gctx add-task gctx.new-exclusion, () =>
		match (() => f[]) catch
		as ok fut
			res forward-to fut
		as err e
			res reject e
	res

###
Calls a `ref`.

This enqueues a task with the ref's exclusion for invoking its function,
and returns a future for the result of that task.
###
subscript[r] r^(f ref r()) trusted, r is-sendable
	res r^ = unresolved
	action = f action
	get-global-ctx add-task f.exclusion, () =>
		match action catch
		as ok fut
			res forward-to fut
		as err e
			res reject e
	res

# Calls a `ref` with one argument.
subscript[r, p0] r^(f ref r(p0), p0 p0) trusted, r is-sendable, p0 is-sendable
	res r^ = unresolved
	get-global-ctx add-task f.exclusion, () =>
		(() => res forward-to f.action[p0]) catch err => res reject err
	res

# Calls a `ref` with two arguments.
subscript[r, p0, p1] r^(
	f ref r(p0, p1),
	p0 p0,
	p1 p1,
) trusted, r is-sendable, p0 is-sendable, p1 is-sendable
	res r^ = unresolved
	get-global-ctx add-task f.exclusion, () =>
		(() => res forward-to f.action[p0, p1]) catch err => res reject err
	res

###
If the future resolves successfully, does nothing.
Else, this will call the default exception handler.
###
handle-exceptions[t] void(a t^) no-doc, trusted
	a add-task get-global-ctx.new-exclusion, () =>
		match a get-result
		as ok _
			()
		as err e
			get-global-ctx.exception-handler[e]

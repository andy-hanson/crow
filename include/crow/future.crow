no-std
import
	./bool: bool
	./col/collection:
		begin, build, concatenate, for-loop, iterate, join, next, size, subscript, with-block,
		with-index
	./col/list: +, ~=, ~~, begin, build, iterate, list, new, next, size
	./col/mut-list: ~=, hint-size, move-to, mut-list, new
	./exception: catch, exception
	./fun-util: subscript
	./misc: break-or-continue, shared, loop-break, loop-continue, new, void
	./number: ==, -, nat64
	./option: new, option
	./pointer: *, mut-pointer
	./private/bootstrap: action, exclusion, lk, new, rejected, resolved
	./private/future-low-level:
		add-task, add-task-no-exclusion, get-result, forward-to, reject, resolve, unresolved
	./private/runtime:
		enqueue-task, enqueue-task-no-exclusion, cur-exclusion, exception-handler, get-global-ctx
	./private/task-queue: task
	./private/thread-utils: init, lock, uninit
	./result: force, result
export
	./private/bootstrap: future

-lock[t] lock mut*(a t^) unsafe
	&a.lk

###
A future already resolved to void.
Writing `<- delay` will cause the code below to run in a new task.
This can be useful for breaking up big tasks.

`delay` from `crow/io/time` is useful for delaying for linger times.
###
+delay void^()
	()

# Converts a value to a future resolved with that value.
+new[t] t^(value t)
	res t^ = trusted uninit, value.resolved
	trusted res.lock init
	res

# Future resolved to `()`.
+new[t] t^() t new
	(),

# Future resolved with an exception.
+rejected[t] t^(err exception)
	res t^ = trusted uninit, err.rejected
	trusted res.lock init
	res

###
Future that completes when every one in the list completes.

If one of `futures` has exception, this resolves to the leftmost exception (discarding others),
regardless of which exception happened first.
###
+wait-all void^(futures void^[])
	<- futures wait-all-complete
	for x : futures
		trusted x.get-result!
	()

###
Waits for every one of `futures` to complete, then returns a list all of their results.

If one of `futures` has exception, this resolves to the leftmost exception (discarding others),
regardless of which exception happened first.
###
+wait-all[t] t[]^(futures t^[]) t shared
	<- futures wait-all-complete
	(for x : futures; trusted x.get-result!),

###
Returns a future that is resolved once all inputs are resolved.
WARN: This resolves successfully even if an input is rejected.
###
-wait-all-complete[t] void^(futures t^[]) t shared
	res void^ = trusted unresolved
	count mut nat64 = futures.size
	task task = trusted cur-exclusion, () =>
		count -:= 1
		if count == 0
			res resolve ()
	for x : futures
		trusted x add-task task
	res

###
Future resolved to `ok` if `a` succeeds and `err` if `a` fails with an exception.
###
+future-catch[t] (t, exception) result^(a t^) t shared
	res (t, exception) result^ = trusted unresolved
	trusted a add-task-no-exclusion () =>
		res resolve a.get-result
	res

+future-finally record mut
	-cleanup far void()
+future-finally future-finally(cleanup far void())
	cleanup,
+with-block[t] t^(a future-finally, f far t()) t shared
	fut = f[]
	res t^ = trusted unresolved
	trusted fut add-task-no-exclusion () =>
		result = fut get-result
		cleanup-fut = a.cleanup[]
		cleanup-fut add-task-no-exclusion () =>
			match result
			as ok value
				match cleanup-fut get-result
				as ok _
					res resolve value
				as error e
					res reject e
			as error e
				res reject e
	res

###
Calls `f` once `a` is resolved.
Returns a future for the result of `f`.

If `a` is resolved with an exception, this never calls `f`,
and the result of `then` will have the same exception as `a`.
###
+then[out, in] out^(a in^, f far out(in)) out shared, in shared
	res out^ = trusted unresolved
	action = f action
	trusted a add-task f.exclusion, () =>
		match a get-result
		as ok value
			match (() => action[value]) catch
			as ok fut
				res forward-to fut
			as error e
				res reject e
		as error e
			res reject e
	res

+|[t, u] (t, u)^(a t^, b u^) t shared, u shared
	x <- a
	y <- b
	(x, y),

# Concatenates the values inside the futures.
+~~[col] col^(a col^, b col^) col shared, col concatenate
	x <- a
	y <- b
	x ~~ y,

###
Calls a `ref`.

This enqueues a task with the ref's exclusion for invoking its function,
and returns a future for the result of that task.
###
+subscript[r, p] r^(function far r(p), params p) r shared, p shared
	res r^ = trusted unresolved
	action = function action
	trusted get-global-ctx enqueue-task function.exclusion, () =>
		match (() => action[params]) catch
		as ok fut
			res forward-to fut
		as error e
			res reject e
	res

###
If the future resolves successfully, does nothing.
Else, this will call the default exception handler.
###
handle-exceptions[t] void(a t^)
	trusted a add-task-no-exclusion () =>
		match a get-result
		as ok _
			()
		as error e
			get-global-ctx->exception-handler[e]

+loop-break[t] t break-or-continue^(a t)
	a.loop-break,
+loop-continue[t] t break-or-continue^()
	loop-continue,

+parallel record
+parallel parallel()
	()
###
Run `f` in a task with a new exclusion and return a future for its result.

`f` must be a `fun` and not an `act` so that it can have a new exclusion,
which allows it to run in parallel.
###
+with-block[t] t^(_ parallel, f fun t^())
	res t^ = trusted unresolved
	gctx = trusted get-global-ctx
	trusted gctx enqueue-task-no-exclusion () =>
		match (() => f[]) catch
		as ok fut
			res forward-to fut
		as error e
			res reject e
	res

+sequential-collection[col] record
	-inner col
+sequential[col] col sequential-collection(a col)
	a,

+for-break[in-col, in-iter, in-elem] void^(
	a in-col sequential-collection,
	f far void break-or-continue(in-elem),
) (in-iter, in-col) begin, (in-elem, in-iter) next, in-elem shared
	_ void? <- a for-break f

+for-break[out, in-col, in-iter, in-elem] out?^(
	a in-col sequential-collection,
	f far out break-or-continue(in-elem),
) (in-iter, in-col) begin, (in-elem, in-iter) next, out shared, in-elem shared
	a.inner.begin for-break-recur f
-for-break-recur[out, in-col, in-iter, in-elem] out?^(
	iter in-iter,
	f far out break-or-continue(in-elem),
) (in-iter, in-col) begin, (in-elem, in-iter) next, out shared, in-elem shared
	if x, next ?= iter next
		b-or-c <- f[x]
		match b-or-c
		as loop-break v
			(v,),
		as loop-continue
			next for-break-recur@(out, in-col, in-iter, in-elem) f

+for-loop[in-col, in-iter, in-elem] void^(
	a in-col sequential-collection,
	f far void(in-elem),
) (in-iter, in-col) begin, (in-elem, in-iter) next, in-elem shared
	for x : a
		<- f[x]
		continue

+for-loop[out-elem, in-col, in-iter, in-elem] out-elem[]^(
	a in-col sequential-collection,
	f far out-elem(in-elem),
) (in-iter, in-col) begin, (in-elem, in-iter) next, in-col size, out-elem shared, in-elem shared
	res out-elem mut[] = ()
	res hint-size a.inner.size
	<- for x : a
		y <- f[x]
		res ~= y
		()
	res.move-to,

+parallel-collection[col] record
	-inner col
+parallel[col] col parallel-collection(a col)
	a,
+for-loop[in-col, in-elem] void^(
	a in-col parallel-collection,
	f fun void^(in-elem),
) (in-col, in-elem) iterate, in-col size, in-elem shared
	tasks void^[] = for x : a inner
		with : parallel
			f[x]
	tasks wait-all
+for-loop[out-elem, in-col, in-elem] out-elem[]^(
	a in-col parallel-collection,
	f fun out-elem^(in-elem),
) (in-col, in-elem) iterate, in-col size, out-elem shared, in-elem shared
	tasks out-elem^[] = for x : a inner
		with : parallel
			f[x]
	tasks wait-all

+filter[out-col, in-col, elem, builder] out-col^(
	a in-col parallel-collection,
	f fun bool^(elem),
) (in-col, elem) iterate, in-col size, (out-col, elem, builder) build, elem shared, out-col shared
	bools bool[] <- for x : a; f[x]
	res out-col = with out : a.inner.size build
		# TODO: 'zip'
		for i, x : a.inner with-index
			if bools[i]
				out ~= x
	res,

+join[elem] elem[]^(joiner elem[], parts elem[][]^) elem shared
	x <- parts
	(joiner join x),

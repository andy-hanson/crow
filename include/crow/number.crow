no-std
import
	./bool: &&, bool, false, new, true
	./compare: !=, <, <=, >, >=
	./private/number-low-level:
		unsafe-add, unsafe-div, unsafe-mod, unsafe-mul, unsafe-sub, unsafe-to-int64,
		unsafe-to-int8, unsafe-to-int16, unsafe-to-int32, unsafe-to-nat8, unsafe-to-nat32,
		unsafe-to-nat64, wrap-add, wrap-mul, wrap-sub
export
	./private/number-low-level:
		==, <=>, float32, float64, int8, int16, int32, int64, is-even, is-odd, max-int8, max-int16,
		max-int32, max-int64, max-nat8, max-nat16, max-nat32, max-nat64, min-int8, min-int16,
		min-int32, min-int64, nat8, nat16, nat32, nat64, new, to-int64, to-nat16, to-nat64

int alias
	int64
nat alias
	nat64
float alias
	float64

region arithmetic

# `true` iff `b * x == a` for some `x`.
is-multiple-of bool(a nat64, b nat64) trusted noctx
	if b == 0
		a == 0
	else
		(a unsafe-mod b) == 0

###
Throws if the result would overflow.

"Overflow" means: be greater than the maximum possible value.
###
+ nat8(a nat8, b nat8) noctx
	res = a wrap-add b
	assert res >= a && res >= b : "integer overflow"
	res
+ nat16(a nat16, b nat16) noctx
	res = a wrap-add b
	assert res >= a && res >= b : "integer overflow"
	res
+ nat32(a nat32, b nat32) noctx
	res = a wrap-add b
	assert res >= a && res >= b : "integer overflow"
	res
+ nat64(a nat64, b nat64) noctx
	res = a wrap-add b
	assert res >= a && res >= b : "integer overflow"
	res

# Throws if the result would be negative.
- nat8(a nat8, b nat8) noctx
	assert a >= b : "integer overflow"
	a wrap-sub b
- nat16(a nat16, b nat16) noctx
	assert a >= b : "integer overflow"
	a wrap-sub b
- nat32(a nat32, b nat32) noctx
	assert a >= b : "integer overflow"
	a wrap-sub b
- nat64(a nat64, b nat64) noctx
	assert a >= b : "integer overflow"
	a wrap-sub b

# Throws if the result would overflow.
* nat64(a nat64, b nat64) noctx
	# TODO: better safety check
	if a != 0 && b != 0
		res = a wrap-mul b
		assert res / b == a : "integer overflow"
		assert res / a == b : "integer overflow"
		res


###
Flooring division of `a` divided by `b`.
Throws if `b == 0`.
###
/ nat64(a nat64, b nat64) noctx trusted
	forbid b == 0 : "divide by 0"
	a unsafe-div b

# Like 'a / b' but takes the ceil instead of the floor.
div-ceil nat64(a nat64, b nat64) noctx
	res = a / b
	res + (res * b == a ? 1)

###
Remainder of `a / b`.
Result will be in the range `0 .. b`.
Throws if `b == 0`.
###
% nat64(a nat64, b nat64) noctx trusted
	forbid b == 0 : "modulo by 0"
	a unsafe-mod b

# This returns a `nat64` since modulo always returns a non-negative number.
% nat64(a int64, b nat64) noctx
	forbid b == 0 : "modulo by 0"
	if a < 0
		abs-mod = a.abs % b
		if abs-mod != 0
			b - abs-mod
	else
		a.to-nat64 % b

round-down-to-multiple nat64(a nat64, b nat64) noctx
	a - (a % b)

###
Throws if the result would overflow.

"Overflow" means:
Be less than the least possible value or greater than the greatest possible value.
###
+ int32(a int32, b int32) noctx trusted
	a.to-int64 unsafe-add b.to-int64 to-int32
+ int64(a int64, b int64) noctx trusted
	forbid (b > 0 ? a > (max-int64 unsafe-sub b) : a < (min-int64 unsafe-sub b)) : "integer overflow"
	a unsafe-add b

- int32(a int32, b int32) noctx trusted
	a.to-int64 unsafe-sub b.to-int64 to-int32
- int64(a int64, b int64) noctx trusted
	overflow = if b > 0
		a < (min-int64 unsafe-add b)
	else
		a > (max-int64 unsafe-add b)
	forbid overflow : "integer overflow"
	a unsafe-sub b

* int8(a int8, b int8) noctx trusted
	a.to-int64 unsafe-mul b.to-int64 to-int8
* int16(a int16, b int16) noctx trusted
	a.to-int64 unsafe-mul b.to-int64 to-int16
* int32(a int32, b int32) noctx trusted
	a.to-int64 unsafe-mul b.to-int64 to-int32
* int64(a int64, b int64) noctx trusted
	overflow = if a == -1
		b == min-int64
	elif b == -1
		a == min-int64
	elif b == 0
		false
	elif a > max-int64 / b
		true
	elif a < min-int64 / b
		true
	forbid overflow : "integer overflow"
	a unsafe-mul b

###
Negates a number.
Same as `a * -1`.

Throws if `a` is the least possible value.
###
- int8(a int8) noctx
	a * -1
- int16(a int16) noctx
	a * -1
- int32(a int32) noctx
	a * -1
- int64(a int64) noctx trusted
	a * -1

###
Flooring division.
Throws if `b == 0`.
Throws if the result would overflow, which only happens if
`a` is the least possible value and `b` is `-1`.
###
/ int32(a int32, b int32) noctx trusted
	forbid b == 0 : "divide by 0"
	forbid a == min-int32 && b == -1 : "integer overflow"
	a unsafe-div b
/ int64(a int64, b int64) noctx trusted
	forbid b == 0 : "divide by 0"
	forbid a == min-int64 && b == -1 : "integer overflow"
	a unsafe-div b

region misc

###
Absolute value of an int, as a nat.

Throws for `min-int64`.
###
abs nat64(a int64) noctx
	(a < 0 ? -a : a) to-nat64

abs float32(a float32) noctx
	a < 0 ? -a : a
abs float64(a float64) noctx
	a < 0 ? -a : a

** nat64(a nat64, b nat64) noctx
	if b == 0
		1
	elif b is-even
		(a * a) ** (b / 2)
	else
		a * a ** (b - 1)


region float

# Never throws.
+ float32(a float32, b float32) noctx builtin
+ float64(a float64, b float64) noctx builtin
# Never throws.
- float32(a float32) noctx
	a * -1
- float64(a float64) noctx
	a * -1
# Never throws.
- float32(a float32, b float32) noctx builtin
- float64(a float64, b float64) noctx builtin
# Never throws.
* float32(a float32, b float32) noctx builtin
* float64(a float64, b float64) noctx builtin

# Divide two floats. UB if `b == 0`.
unsafe-div float32(a float32, b float32) no-doc noctx unsafe builtin
unsafe-div float64(a float64, b float64) no-doc noctx unsafe builtin

# Throws if `b == 0`.
/ float32(a float32, b float32) noctx trusted
	forbid b == 0 : "divide by 0"
	a unsafe-div b
/ float64(a float64, b float64) noctx trusted
	forbid b == 0 : "divide by 0"
	a unsafe-div b

# `a` to the power of `b`. Never throws.
** float32(a float32, b nat64) noctx
	if b == 0
		1.0
	else
		a * a ** (b wrap-sub 1)
** float64(a float64, b nat64) noctx
	# TODO:PERF
	if b == 0
		1.0
	else
		a * a ** (b wrap-sub 1)

square-root float64(a float64) noctx
	a sqrt
.sqrt float64(a float64) extern<m> trusted
square-root float32(a float32) noctx
	a.to-float64.sqrt to-float32

# `true` iff `a` is "Not A Number".
is-nan bool(a float64) noctx
	a != a
is-nan bool(a float32) noctx
	a != a

region conversion

to-float32 float32(a nat64) noctx
	a.to-float64 to-float32
to-float32 float32(a int64) noctx
	a.to-float64 to-float32
to-float32 float32(a float64) noctx builtin

# Never throws, but for very high values of `a`, the result will be approximate.
to-float64 float64(a nat64) noctx builtin
# Never throws, but for very low or very high values of `a`, the result will be approximate.
to-float64 float64(a int64) noctx builtin
to-float64 float64(a float32) noctx builtin


# Convert a float to int by discarding the fractional part.
truncate-to-int64 int64(a float64) noctx builtin

to-nat64 nat64(a float64)
	a.truncate-to-int64 to-nat64

# Throws if the result would overflow.
to-int64 int64(a nat64) noctx trusted
	assert a < max-int64.to-nat64 : "integer overflow"
	a unsafe-to-int64

to-int8 int8(a int64) noctx trusted
	assert a >= min-int8.to-int64 : "integer overflow"
	assert a <= max-int8.to-int64 : "integer overflow"
	a unsafe-to-int8

to-int16 int16(a int64) noctx trusted
	assert a >= min-int16.to-int64 : "integer overflow"
	assert a <= max-int16.to-int64 : "integer overflow"
	a unsafe-to-int16

# Convert an int to 32 bits. Fail if the result would overflow.
to-int32 int32(a int64) noctx trusted
	assert a >= min-int32.to-int64 : "integer overflow"
	assert a <= max-int32.to-int64 : "integer overflow"
	a unsafe-to-int32
to-int32 int32(a nat32) noctx
	a.to-nat64 to-int32
to-int32 int32(a nat16) noctx trusted
	a.to-nat64.unsafe-to-int64 unsafe-to-int32
to-int32 int32(a nat64) noctx
	a.to-int64 to-int32

# Return the closest `nat8`. Never throws.
clamp-to-nat8 nat8(a nat64) noctx trusted
	if a > 255
		255
	else
		a unsafe-to-nat8

# Return the closest `nat64`. Never throws.
clamp-to-nat64 nat64(a int64) noctx trusted
	if a >= 0
		a unsafe-to-nat64

clamp-to-int32 int32(a int64) noctx trusted
	if a < min-int32.to-int64
		min-int32
	elif a > max-int32.to-int64
		max-int32
	else
		a unsafe-to-int32

# Return the closest possible value to `a + b`. Never throws.
clamp-add int32(a int32, b int32) noctx trusted
	a.to-int64 unsafe-add b.to-int64 clamp-to-int32

# Throws if `a` is negative.
to-nat64 nat64(a int64) noctx trusted
	assert a >= 0 : "integer overflow"
	a unsafe-to-nat64
to-nat64 nat64(a int32) noctx
	a.to-int64 to-nat64

to-nat8 nat8(a nat64) noctx trusted
	assert a <= max-nat8.to-nat64 : "integer overflow"
	a unsafe-to-nat8
to-nat32 nat32(a nat16) noctx trusted
	a.to-nat64 unsafe-to-nat32

# Convert a nat to 32 bits. Fail if the result would overflow.
to-nat32 nat32(a nat64) noctx trusted
	assert a < max-nat32.to-nat64 : "integer overflow"
	a unsafe-to-nat32

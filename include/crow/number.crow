no-std
import
	./bool: &&, ||, bool
	./compare: <, <=, >, >=
	./private/number-low-level:
		unsafe-div, unsafe-to-int64, unsafe-to-int8, unsafe-to-int16, unsafe-to-int32,
		unsafe-to-nat64, unsafe-to-nat32, unsafe-mod, wrap-add, wrap-mul, wrap-sub
	./private/exception-low-level: assert, forbid
export
	./private/number-low-level:
		==, <=>, float32, float64, int8, int16, int32, int64, is-even, is-odd, max-int8, max-int16,
		max-int32, max-int64, max-nat8, max-nat16, max-nat32, max-nat64, min-int8, min-int16,
		min-int32, min-int64, nat8, nat16, nat32, nat64, new, to-int64, to-nat64, unsafe-to-nat8

int alias
	int64
nat alias
	nat64
float alias
	float64

region conversion

###
Convert a nat64 to float64.
Result is approximate for high values.
###
to-float64 float64(a nat64) noctx builtin
###
Convert an int64 to float64.
Result is approximate for high values.
###
to-float64 float64(a int64) noctx builtin
to-float64 float64(a float32) noctx builtin
###
Convert a float to int by tossing any fractional part.
###
truncate-to-int64 int64(a float64) noctx builtin

region arithmetic

# True if `b * c == a` for some `c`.
is-multiple-of bool(a nat64, b nat64)
	(a mod b) == 0

# Add two nats. Fail if the result would overflow.
+ nat8(a nat8, b nat8)
	res = a wrap-add b
	assert: res >= a && res >= b
	res
+ nat16(a nat16, b nat16)
	res = a wrap-add b
	assert: res >= a && res >= b
	res
+ nat32(a nat32, b nat32)
	res = a wrap-add b
	assert: res >= a && res >= b
	res
+ nat64(a nat64, b nat64)
	res = a wrap-add b
	assert: res >= a && res >= b
	res

# Subtract two nats. Fail if the result would be negative.
- nat8(a nat8, b nat8)
	assert: a >= b
	a wrap-sub b
- nat16(a nat16, b nat16)
	assert: a >= b
	a wrap-sub b
- nat32(a nat32, b nat32)
	assert: a >= b
	a wrap-sub b
- nat64(a nat64, b nat64)
	assert: a >= b
	a wrap-sub b

# Multiply two nats. Fail if the result would overflow.
* nat64(a nat64, b nat64)
	# TODO: better safety check
	if a == 0 || b == 0
		0
	else
		res = a wrap-mul b
		assert: res / b == a
		assert: res / a == b
		res

###
a divided by b, taking the floor.
Throws if `b == 0`.
###
/ nat64(a nat64, b nat64) trusted
	forbid: b == 0
	a unsafe-div b

# Like 'a / b' but takes the ceil instead of the floor.
div-ceil nat64(a nat64, b nat64)
	res = a / b
	if res * b == a
		res
	else
		res + 1

# Remainder of `a / b`.
mod nat64(a nat64, b nat64) trusted
	forbid: b == 0
	a unsafe-mod b

# Remainder of `a / b.to-int64`.
mod nat64(a int64, b nat64)
	forbid: b == 0
	if a < 0
		abs-mod = a.abs mod b
		if abs-mod == 0
			0
		else
			b - abs-mod
	else
		a.to-nat64 mod b

+ int32(a int32, b int32)
	a.to-int64 wrap-add b.to-int64 to-int32
+ int64(a int64, b int64)
	# TODO: safety check
	a wrap-add b

- int32(a int32, b int32)
	a.to-int64 wrap-sub b.to-int64 to-int32
- int64(a int64, b int64)
	# TODO: safety check
	a wrap-sub b

* int8(a int8, b int8)
	a.to-int64 wrap-mul b.to-int64 to-int8
* int16(a int16, b int16)
	a.to-int64 wrap-mul b.to-int64 to-int16
* int32(a int32, b int32)
	a.to-int64 wrap-mul b.to-int64 to-int32
* int64(a int64, b int64)
	# TODO: safety check
	a wrap-mul b

- int8(a int8)
	a * -1
- int16(a int16)
	a * -1
- int32(a int32)
	a * -1
- int64(a int64)
	a * -1

/ int64(a int64, b int64) trusted
	forbid: b == 0
	forbid: a == min-int64 && b == -1
	a unsafe-div b

# Convert a nat64 to an int64. Fail if the result would overflow.
to-int64 int64(a nat64) trusted
	assert: a < max-int64.to-nat64
	a unsafe-to-int64

to-int8 int8(a int64) trusted
	assert: a >= min-int8.to-int64
	assert: a <= max-int8.to-int64
	a unsafe-to-int8
to-int16 int16(a int64) trusted
	assert: a >= min-int16.to-int64
	assert: a <= max-int16.to-int64
	a unsafe-to-int16
# Convert an int to 32 bits. Fail if the result would overflow.
to-int32 int32(a int64) trusted
	assert: a >= min-int32.to-int64
	assert: a <= max-int32.to-int64
	a unsafe-to-int32
to-int32 int32(a nat32)
	a.to-nat64 to-int32
to-int32 int32(a nat16)
	a.to-nat64 to-int32
to-int32 int32(a nat64)
	a.to-int64 to-int32

clamp-to-nat64 nat64(a int64) trusted
	if a < 0
		0
	else
		a unsafe-to-nat64

clamp-to-int32 int32(a int64) noctx trusted
	if a < min-int32.to-int64
		min-int32
	elif a > max-int32.to-int64
		max-int32
	else
		a unsafe-to-int32

clamp-add int32(a int32, b int32) noctx
	a.to-int64 wrap-add b.to-int64 clamp-to-int32

# Convert an int to a nat. Fail if it's negative.
to-nat64 nat64(a int64) trusted
	forbid: a < 0
	a unsafe-to-nat64
to-nat64 nat64(a int32)
	a.to-int64 to-nat64

to-nat8 nat8(a nat64) trusted
	assert: a <= max-nat8.to-nat64
	a unsafe-to-nat8
to-nat32 nat32(a nat16) noctx trusted
	a.to-nat64 unsafe-to-nat32

# Convert a nat to 32 bits. Fail if the result would overflow.
to-nat32 nat32(a nat64) trusted
	assert: a < max-nat32.to-nat64
	a unsafe-to-nat32

wrap-to-nat32 nat32(a nat64) noctx trusted
	# TODO: safe ?
	a unsafe-to-nat32

# Absolute value of an int, as a nat.
abs nat64(a int64)
	to-nat64: if a < 0
		-a
	else
		a

abs float32(a float32) noctx
	if a < 0
		-a
	else
		a
abs float64(a float64) noctx
	if a < 0
		-a
	else
		a

** nat64(a nat64, b nat64)
	if b == 0
		1
	elif b is-even
		(a * a) ** (b / 2)
	else
		a * a ** (b - 1)

region float

# Add two floats. Never fails.
+ float32(a float32, b float32) noctx builtin
+ float64(a float64, b float64) noctx builtin
# Negate a float. Never fails.
- float32(a float32) noctx
	a * -1
- float64(a float64) noctx
	a * -1
# Subtract two floats. Never fails.
- float32(a float32, b float32) noctx builtin
- float64(a float64, b float64) noctx builtin
# Multiply two floats. Never fails.
* float32(a float32, b float32) noctx builtin
* float64(a float64, b float64) noctx builtin
# Divide two floats. UB if `b == 0`.
unsafe-div float32(a float32, b float32) noctx unsafe builtin
unsafe-div float64(a float64, b float64) noctx unsafe builtin
# Divide two floats. Fail if `b == 0`.
/ float32(a float32, b float32) trusted
	forbid: b == 0.0
	a unsafe-div b
/ float64(a float64, b float64) trusted
	forbid: b == 0.0
	a unsafe-div b

# Raise a float to a power.
** float64(a float64, b nat64) noctx
	if b == 0
		1.0
	else
		a * a ** (b wrap-sub 1)
# Raise a float to a power.
** float32(a float32, b nat64) noctx
	if b == 0
		1.0
	else
		a * a ** (b wrap-sub 1)

square-root float64(a float64) noctx
	a sqrt
.sqrt float64(a float64) noctx extern
square-root float32(a float32) noctx
	a sqrt
.sqrt float32(a float32) noctx extern

# True if the float is "Not A Number".
is-nan bool(a float64) noctx builtin
is-nan bool(a float32) noctx builtin

###
Other functions are in 'math.crow'
###

no-std
import
	./bool: &&, ||, bool, false, new, true
	./compare: !=, <, <=, >, >=, min
	./private/bootstrap: exception, string
	./private/number-low-level:
		unsafe-add, unsafe-div, unsafe-mod, unsafe-mul, unsafe-sub, unsafe-to, wrap-add, wrap-mul
export
	./private/number-low-level:
		==, <=>, float32, float64, int8, int16, int32, int64, is-even, is-odd, max-value, min-value,
		nat8, nat16, nat32, nat64, new, round-up-to-power-of-two, to, wrap-to

+int alias
	int64
+nat alias
	nat64
+float alias
	float64

region arithmetic

# Used to store values for exceptions
+integral-value union
	unsigned nat64
	signed int64
+to integral-value(a nat8) bare
	a.to unsigned
+to integral-value(a nat16) bare
	a.to unsigned
+to integral-value(a nat32) bare
	a.to unsigned
+to integral-value(a nat64) bare
	a unsigned
+to integral-value(a int8) bare
	a.to signed
+to integral-value(a int16) bare
	a.to signed
+to integral-value(a int32) bare
	a.to signed
+to integral-value(a int64) bare
	a signed

+unary-out-of-range record(input integral-value) by-val, exception variant-member
+show string(_ unary-out-of-range)
	"Output of unary function does not fit in the result type"
+binary-out-of-range record(a integral-value, b integral-value) by-val, exception variant-member
+show string(_ binary-out-of-range)
	"Output of binary function does not fit in the result type"
+divide-by-0 record exception variant-member
+show string(_ divide-by-0)
	"Division by 0"

###
Throws if the result would overflow.

"Overflow" means: be greater than the maximum possible value.
###
+ + nat8(a nat8, b nat8) bare
	res = a wrap-add b
	assert res >= a && res >= b : a.to binary-out-of-range b.to
	res
+ + nat16(a nat16, b nat16) bare
	res = a wrap-add b
	assert res >= a && res >= b : a.to binary-out-of-range b.to
	res
+ + nat32(a nat32, b nat32) bare
	res = a wrap-add b
	assert res >= a && res >= b : a.to binary-out-of-range b.to
	res
+ + nat64(a nat64, b nat64) bare
	res = a wrap-add b
	assert res >= a && res >= b : a.to binary-out-of-range b.to
	res

# Throws if the result would be negative.
+- nat8(a nat8, b nat8) bare
	assert a >= b : a.to binary-out-of-range b.to
	trusted a unsafe-sub b
+- nat16(a nat16, b nat16) bare
	assert a >= b : a.to binary-out-of-range b.to
	trusted a unsafe-sub b
+- nat32(a nat32, b nat32) bare
	assert a >= b : a.to binary-out-of-range b.to
	trusted a unsafe-sub b
+- nat64(a nat64, b nat64) bare
	assert a >= b : a.to binary-out-of-range b.to
	trusted a unsafe-sub b

# Throws if the result would overflow.
+* nat64(a nat64, b nat64) bare
	# TODO:PERF better safety check
	guard a != 0 && b != 0
	res = a wrap-mul b
	assert res / b == a : a.to binary-out-of-range b.to
	assert res / a == b : a.to binary-out-of-range b.to
	res

###
Flooring division of `a` divided by `b`.
Throws if `b == 0`.
###
+/ nat64(a nat64, b nat64) bare
	forbid b == 0 : divide-by-0
	trusted a unsafe-div b

# Like 'a / b' but takes the ceil instead of the floor.
+div-ceil nat64(a nat64, b nat64) bare
	res = a / b
	res + (res * b == a ? 1)

###
Remainder of `a / b`.
Result will be in the range `0 .. b`.
Throws if `b == 0`.
###
+% nat64(a nat64, b nat64) bare
	forbid b == 0 : divide-by-0
	trusted a unsafe-mod b
+% nat32(a nat32, b nat32) bare
	forbid b == 0 : divide-by-0
	trusted (a.to unsafe-mod b.to) to

# This returns a `nat64` since modulo always returns a non-negative number.
+% nat64(a int64, b nat64) bare
	forbid b == 0 : divide-by-0
	if a < 0
		abs-mod = a.abs % b
		if abs-mod != 0
			b - abs-mod
	else
		a.to::nat64 % b

# `true` iff `b * x == a` for some `x`.
+is-multiple-of bool(a nat64, b nat64) bare
	if b == 0
		a == 0
	else
		(trusted a unsafe-mod b) == 0

+round-down-to-multiple-of nat64(a nat64, b nat64) bare
	a - (a % b)

###
Throws if the result would overflow.

"Overflow" means:
Be less than the least possible value or greater than the greatest possible value.
###
+ + int8(a int8, b int8) bare
	trusted a.to unsafe-add b.to to
+ + int16(a int16, b int16) bare
	trusted a.to unsafe-add b.to to
+ + int32(a int32, b int32) bare
	trusted a.to::int64 unsafe-add b.to to
+ + int64(a int64, b int64) bare
	overflow = if b > 0
		a > (trusted max-value unsafe-sub b)
	else
		a < (trusted min-value unsafe-sub b)
	forbid overflow : a.to binary-out-of-range b.to
	trusted a unsafe-add b

+- int32(a int32, b int32) bare
	trusted a.to::int64 unsafe-sub b.to to
+- int64(a int64, b int64) bare
	overflow = if b > 0
		a < (trusted min-value unsafe-add b)
	else
		a > (trusted max-value unsafe-add b)
	forbid overflow : a.to binary-out-of-range b.to
	trusted a unsafe-sub b

+* int8(a int8, b int8) bare
	trusted a.to unsafe-mul b.to to
+* int16(a int16, b int16) bare
	trusted a.to unsafe-mul b.to to
+* int32(a int32, b int32) bare
	trusted a.to::int64 unsafe-mul b.to to
+* int64(a int64, b int64) bare
	overflow = if a == -1
		b == min-value
	elif b == -1
		a == min-value
	elif b == 0
		false
	elif a > max-value / b
		true
	elif a < min-value / b
		true
	forbid overflow : a.to binary-out-of-range b.to
	trusted a unsafe-mul b

###
Negates a number.
Same as `a * -1`.

Throws if `a` is the least possible value.
###
+- int8(a int8) bare
	a * -1
+- int16(a int16) bare
	a * -1
+- int32(a int32) bare
	a * -1
+- int64(a int64) bare
	a * -1

###
Flooring division.
Throws if `b == 0`.
Throws if the result would overflow, which only happens if
`a` is the least possible value and `b` is `-1`.
###
+/ int32(a int32, b int32) bare
	forbid b == 0 : divide-by-0
	forbid a == min-value && b == -1 : a.to binary-out-of-range b.to
	trusted a unsafe-div b
+/ int64(a int64, b int64) bare
	forbid b == 0 : divide-by-0
	forbid a == min-value && b == -1 : a.to binary-out-of-range b.to
	trusted a unsafe-div b

region misc

###
Absolute value.
For an integer type, throws for `min-value`.
###
+abs nat64(a int64) bare
	(a < 0 ? -a : a) to

+abs float32(a float32) bare
	a < 0 ? -a : a
+abs float64(a float64) bare
	a < 0 ? -a : a

+** nat64(a nat64, b nat64) bare
	if b == 0
		1
	elif b is-even
		(a * a) ** (b / 2)
	else
		a * a ** (b - 1)


region float

# Never throws.
+ + float32(a float32, b float32) builtin, bare
+ + float64(a float64, b float64) builtin, bare
# Never throws.
+- float32(a float32) bare
	a * -1
+- float64(a float64) bare
	a * -1
# Never throws.
+- float32(a float32, b float32) builtin, bare
+- float64(a float64, b float64) builtin, bare
# Never throws.
+* float32(a float32, b float32) builtin, bare
+* float64(a float64, b float64) builtin, bare

# Divide two floats. Undefined behavior if `b == 0`.
unsafe-div float32(a float32, b float32) builtin, bare, unsafe
unsafe-div float64(a float64, b float64) builtin, bare, unsafe

# Throws if `b == 0`.
+/ float32(a float32, b float32) bare
	forbid b == 0 : divide-by-0
	trusted a unsafe-div b
+/ float64(a float64, b float64) bare
	forbid b == 0 : divide-by-0
	trusted a unsafe-div b

# `a` to the power of `b`. Never throws.
+** float32(a float32, b int64) bare
	if b < 0
		1 / (a ** -b)
	elif b == 0
		1.0
	else
		a * a ** (b - 1)
+** float64(a float64, b int64) bare
	# TODO:PERF
	if b < 0
		1 / (a ** -b)
	elif b == 0
		1.0
	else
		a * a ** (b - 1)

###
Not-a-Number value.
'unsafe' because Crow generally throws exceptions instead of returning NaN.
###
+nan float32() builtin, unsafe
+nan float64() builtin, unsafe
+infinity float32() builtin
+infinity float64() builtin

# `true` iff `a` is "Not A Number".
+is-nan bool(a float32) builtin
+is-nan bool(a float64) builtin

+is-near-int bool(a float64)
	a.round is-near a
+is-near bool(a float64, b float64)
	diff = a - b abs
	a == b || diff <= epsilon || diff <= epsilon * (a.abs min b.abs)
+epsilon float64()
	2.22 * 10 ** (-16)

region conversion

###
Conversions between integral types throw on overflow or underflow.
Conversions involving floats (in either direction) are approximate and never throw.
###
+to float32(a nat64) bare
	a.to::float64 to
+to float32(a int64) bare
	a.to::float64 to
+to float32(a float64) builtin, bare

+to float64(a nat64) builtin, bare
+to float64(a int64) builtin, bare
+to float64(a float32) builtin, bare

+to int64(a float64) bare
	a.round truncate-to

+round float32(a float32) bare, builtin
+round float64(a float64) bare, builtin
# floor
+round-down float32(a float32) bare, builtin
+round-down float64(a float64) bare, builtin
# ceiling
+round-up float32(a float32) bare, builtin
+round-up float64(a float64) bare, builtin

+to nat64(a float64) bare
	a.to::int64 to
+to nat32(a float64) bare
	a.to::nat64 to

# Throws if the result would overflow.
+to int64(a nat64) bare
	assert a < max-value::int64.to : a.to unary-out-of-range
	trusted a unsafe-to

+to int8(a int64) bare
	assert a >= min-value::int8.to : a.to unary-out-of-range
	assert a <= max-value::int8.to : a.to unary-out-of-range
	trusted a unsafe-to

+to int16(a int64) bare
	assert a >= min-value::int16.to : a.to unary-out-of-range
	assert a <= max-value::int16.to : a.to unary-out-of-range
	trusted a unsafe-to

# Convert an int to 32 bits. Fail if the result would overflow.
+to int32(a int64) bare
	assert a >= min-value::int32.to : a.to unary-out-of-range
	assert a <= max-value::int32.to : a.to unary-out-of-range
	trusted a unsafe-to
+to int32(a nat32) bare
	a.to::nat64 to
+to int32(a nat16) bare
	trusted a.to::nat64.unsafe-to
+to int32(a nat64) bare
	a.to::int64 to

+clamp-sub nat64(a nat64, b nat64)
	if a >= b
		a - b
	else
		0

# Return the closest value. Never throws.
+clamp-to int32(a int64) bare
	if a < min-value::int32.to
		min-value
	elif a > max-value::int32.to
		max-value
	else
		trusted a unsafe-to
+clamp-to int32(a nat64) bare
	a.clamp-to::int64 clamp-to
+clamp-to int64(a nat64) bare
	if a > max-value::int64.to
		max-value
	else
		trusted a unsafe-to
+clamp-to nat8(a nat64) bare
	if a > 255
		255
	else
		trusted a unsafe-to
+clamp-to nat64(a int64) bare
	if a >= 0
		trusted a unsafe-to
+clamp-to nat64(a float64) bare
	a.to::int64 clamp-to

# Return the closest possible value to `a + b`. Never throws.
+clamp-add int32(a int32, b int32) bare
	trusted a.to::int64 unsafe-add b.to clamp-to

# Throws if the result would not have the same value as the input (due to overflow or underflow)
+to nat64(a int64) bare
	assert a >= 0 : a.to unary-out-of-range
	trusted a unsafe-to
+to nat64(a int32) bare
	a.to::int64 to
+to nat8(a nat32) bare
	a.to::nat64 to
+to nat8(a nat64) bare
	assert a <= max-value::nat8.to : a.to unary-out-of-range
	trusted a unsafe-to
+to nat8(a float64) bare
	a.to clamp-to
+to nat32(a nat8) bare
	trusted a.to::nat64 unsafe-to
+to nat32(a nat16) bare
	trusted a.to::nat64 unsafe-to
+to nat32(a nat64) bare
	assert a < max-value::nat32.to : a.to unary-out-of-range
	trusted a unsafe-to

+truncate-to int64(a float64) builtin, bare

no-std
import
	../bool: ==, bool
	../compare: !=
	../misc: new, void
	../number: ==, max-value, nat64
	../option: force, new, option
	../pointer: ==, *, as-const, const-pointer, mut-pointer, null, set-deref
	../tuple: new
	./alloc: gc
	./bare-map:
		add-gc-roots, bare-map, destroy, find-or-insert-and-inserted, key, map-pair, must-find,
		new, remove, slow-is-empty, value
	./bare-queue: add-gc-roots, bare-queue, dequeue, destroy, enqueue, is-empty, new
	./bootstrap: exclusion

###
Queue that stores values by exclusions.
It prevents multiple values with the same exclusion from being dequeued
before 'release-exclusion' is called.

This is not thread-safe.
This is not traceable, so you must call `add-gc-roots`.
###
exclusion-queue[v] record by-val, mut
	###
	Lets you quickly look up a queue entry by exclusion.
	Queue nodes are stored directly in the map, which is why they must implement 'move-from'.
	###
	-by-exclusion mut (exclusion, v entry) bare-map
	###
	The queue is a circular linked list, where this sentinel is always present.
	The sentinel exists just to have 'prev' and 'next'; its 'exclusion' and 'values' is unused.

	When the map calls 'move-from', that will update the sentinel
	(if it is the 'prev' or 'next' of the moved node).
	###
	-queue mut (exclusion, v entry) map-pair

-entry[v] record by-val, mut
	###
	This is always validly allocated, even for an unused entry.
	###
	values mut v bare-queue
	###
	Previous and next values in the queue.
	We need 'prev' because:
	When we have to move an entry after removing the entry to its left in the table (not the prev)\,
	we must update the previous queue entry's pointer to it.
	###
	prev mut (exclusion, v entry) map-pair mut*
	next mut (exclusion, v entry) map-pair mut*

-invalid exclusion() bare
	max-value
-hash nat64(a exclusion) bare
	a

uninit[v] v exclusion-queue() bare, unsafe
	(4,), (invalid, ((), null, null))
init[v] void(a v exclusion-queue mut*) bare, unsafe
	a.queue.value->prev := a.queue
	a.queue.value->next := a.queue

destroy[v] void(a v exclusion-queue mut*) bare, unsafe
	a.by-exclusion destroy

# Even if the queue is empty, there may be unlinked elements in the map.
queue-is-empty[v] bool(a v exclusion-queue*) bare, unsafe
	# Queue is empty if the sentinel node is the only one.
	a->queue.value.next.as-const == a.queue

-destroy[v] void(a v entry mut*) bare, unsafe
	a.values destroy

-new[v] v entry() bare, unsafe
	(), null, null

-is-in-queue[v] bool(entry v entry*) bare, unsafe
	# If there is only one entry, it won't have 'prev' or 'next'
	res = entry->prev != null
	assert res == (entry->next != null)
	res

enqueue[v] void(a v exclusion-queue mut*, key exclusion, value v) bare, unsafe
	entry, fi = a.by-exclusion find-or-insert-and-inserted key
	match fi
	as found
		()
	as inserted
		a add-to-queue entry
	entry.value.values enqueue value

-add-to-queue[v] void(
	a v exclusion-queue mut*,
	entry (exclusion, v entry) map-pair mut*,
) bare, unsafe
	forbid entry.value.as-const is-in-queue
	last = a.queue.value->prev
	last.value->next := entry
	a.queue.value->prev := entry
	entry.value->prev := last
	entry.value->next := a.queue

###
Takes the first runnable value out of the queue.
This acquires the exclusion; call `release-exclusion` when done.
###
dequeue[v] (exclusion, v)?(a v exclusion-queue mut*) bare, unsafe
	unless a.as-const queue-is-empty
		first = a.queue.value->next
		value = first.value.values.dequeue!
		a.queue.value->next := first.value->next
		a.queue.value->next.value->prev := a.queue
		first.value->prev := null
		first.value->next := null
		forbid first.as-const.value is-in-queue
		(first->key, value),

# Make the exclusion available so that `dequeue` can call it.
release-exclusion[v] void(a v exclusion-queue mut*, key exclusion) bare, unsafe
	entry = a.by-exclusion must-find key
	forbid entry.as-const.value is-in-queue
	if entry.as-const.value.values is-empty
		a.by-exclusion remove entry
	else
		a add-to-queue entry

-move-from[v] void(
	dest (exclusion, v entry) map-pair mut*,
	src (exclusion, v entry) map-pair*,
) bare, unsafe
	*dest := *src
	if src.value->prev == null
		assert src.value->next == null
	elif src.value->prev.as-const == src
		assert src.value->next.as-const == src
		dest.value->prev := dest
		dest.value->next := dest
	else
		dest.value->prev.value->next := dest
		dest.value->next.value->prev := dest

###
True if there are no values in the queue (whether their exclusion is available or not).
This is slow as it walks the whole map.
###
slow-is-empty[v] bool(a v exclusion-queue*) bare, unsafe
	a.by-exclusion slow-is-empty

add-gc-roots[v] void(a v exclusion-queue*, gc gc mut*) bare, unsafe
	a.by-exclusion add-gc-roots gc
-add-gc-roots[v] void(a v entry*, gc gc mut*) bare, unsafe
	a.values add-gc-roots gc

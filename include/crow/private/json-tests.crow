no-std
import
	../bool: false, true
	../col/dict: dict, new
	../col/list: list, new
	../json: ==, new, null, json, to-string
	../misc: void
	../number: nat64
	../parse: ==, expected, new, parse, parse-error
	../result: ==, err, ok
	../string: ==, begin, literal, string
	../symbol: ==, <=>, hash-mix, symbol
	../test-util: is
	../tuple: new

dummy-json-tests nat64()
	0

#TODO:MOVE
.json json(a parse-error)
	# TODO: include input/iter
	("expected", a.expected.json),

.verify void(a json, s string)
	json parse s is a.ok
	a.to-string is s

test
	json parse "potato" is ("potato", "potato".begin, "expected 'null'").err
	null verify "null"
	true.json verify "true"
	false.json verify "false"
	-3.0.json verify "-3"
	1.5.json verify "1.5"
	-1.5.json verify "-1.5"
	"j".json verify "\"j\""
	"a\nb".json verify "\"a\\nb\""
	"a\\nb".json verify "\"a\\\\nb\""

	()::json[].json verify "[]"
	(1.0.json,).json verify "[1]"
	(1.0.json, true.json)::json[].json verify "[1,true]"

	()::json[symbol].json verify "\{}"
	(("a", 1.0.json),)::json[symbol].json verify "\{\"a\":1}"
	(("a", 1.0.json), ("x\ny", true.json))::json[symbol].json verify "\{\"a\":1,\"x\\ny\":true}"

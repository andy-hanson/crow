no-std
import
	../bool: false, true
	../col/dict: dict, new
	../col/list: list, new
	../json: ==, new, null, json, to
	../misc: to, void
	../number: nat64
	../parse: ==, expected, new, parse, parse-error
	../result: ==, err, ok
	../string: ==, begin, literal, string
	../symbol: ==, <=>, hash-mix, symbol
	../test-util: is
	../tuple: new

dummy-json-tests nat64()
	0

#TODO:MOVE
-to json(a parse-error)
	# TODO: include input/iter
	("expected", a.expected.to),

-verify[t] void(a t, s string) (json, t) to
	json parse s is a.to.ok
	json json = a to
	json.to::string is s

test
	json parse "potato" is ("potato", "potato".begin, "expected 'null'").err
	null verify "null"
	true verify "true"
	false verify "false"
	-3.0 verify "-3"
	1.5 verify "1.5"
	-1.5 verify "-1.5"
	"j" verify "\"j\""
	"a\nb" verify "\"a\\nb\""
	"a\\nb" verify "\"a\\\\nb\""

	()::json[] verify "[]"
	(1.0.to,) verify "[1]"
	(1.0.to, true.to)::json[] verify "[1,true]"

	()::json[symbol] verify "\{}"
	(("a", 1.0.to),)::json[symbol] verify "\{\"a\":1}"
	(("a", 1.0.to), ("x\ny", true.to))::json[symbol] verify "\{\"a\":1,\"x\\ny\":true}"

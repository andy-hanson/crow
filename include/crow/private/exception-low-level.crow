no-std
import
	system/setjmp: jmp_buf, __jmp_buf_tag, longjmp, new, setjmp, _setjmp
	../fun-util: subscript
	../misc: new, void
	../number: ==, nat64
	../pointer: ==, null, zeroed
	../result: error, ok, result
	../version: is-interpreted, is-windows
	./alloc: try-get-cur-gc-ctx
	./backtrace: get-backtrace
	./bootstrap: abort, array, new, string
export
	./bootstrap: backtrace, error, exception, exception-and-backtrace

+test-failure variant-member(exception, string)

-cur-jmp-buf thread-local(jmp_buf)
-cur-thrown thread-local(exception)
-cur-backtrace thread-local(backtrace)

# Used by the compiler when implementing 'try-catch' and 'finally'
rethrow-current-exception void() bare, unsafe
	if cur-jmp-buf == null
		abort
	else
		cur-jmp-buf longjmp 1

+catch-all[t] (t, exception-and-backtrace) result(tried t mut())
	trusted
		old-jmp-buf = cur-jmp-buf
		store mut __jmp_buf_tag = ()
		setjmp-result = if is-interpreted
			&store setjmp
		elif is-windows
			&store _setjmp
		else
			&store setjmp
		if setjmp-result == 0
			# Get here after setting the jump
			cur-jmp-buf := &store
			# If it throws, we'll go to the above branch.
			res = tried[]
			cur-jmp-buf := old-jmp-buf
			res ok
		else
			cur-jmp-buf := old-jmp-buf
			thrown = cur-thrown
			cur-thrown := zeroed
			backtrace = cur-backtrace
			cur-backtrace := zeroed
			(thrown, backtrace) error

###
Fail unconditionally.
This function is used to mark part of an `if` or `match` that should not be possible.
###
+unreachable[t] t() bare
	throw "Should be unreachable" error

# This is called by the compiler on 'throw'
throw-impl void(a exception) bare
	a throw-with-skip 2

throw-with-skip void(a exception, skip nat64) bare
	backtrace = trusted if ctx ?= try-get-cur-gc-ctx
		ctx get-backtrace skip
	else
		(),
	(a, backtrace) rethrow

-new[t] t array(...a t array) bare
	a

###
Throw an existing exception object.

This is useful for rethrowing an exception that was already caught.
Throwing an exception does not modify its backtrace.
###
+rethrow[t] t(e exception-and-backtrace) bare
	trusted
		cur-thrown := e exception
		cur-backtrace := e backtrace
		rethrow-current-exception
		# unreachable
		zeroed

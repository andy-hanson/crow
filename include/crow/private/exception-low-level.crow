no-std
import
	../bool: bool
	../fun-util: subscript
	../misc: new, void
	../pointer: const-pointer, mut-pointer, pointer-cast, zeroed
	../result: error, ok, result
	./alloc: gc-root, set-gc-root, try-get-cur-gc-ctx
	./backtrace: get-backtrace
	./bootstrap:
		abandon, array, catch-point, cur-fiber, cur-catch-point, must-cur-fiber, new,
		set-cur-catch-point
export
	./bootstrap: backtrace, describe, error, exception, exception-and-backtrace

# 'setup-catch' is like 'setjmp' and 'jump-to-catch' is like 'longjmp'.
# ('setjmp' and 'longjmp' don't work with fibers on Windows.)
# This is visible for use by the compiler, which uses it in 'try' expressions.
~setup-catch bool(env catch-point mut*) bare, builtin
~jump-to-catch void(env catch-point*) bare, builtin

# Just use a thread-local for these, since they will be handled immediately
# (not giving the fiber a chance to yield)
-cur-thrown thread-local(exception)
-cur-backtrace thread-local(backtrace)

# Visible for use by compiler
~cur-catch-point catch-point*() unsafe, native extern
	must-cur-fiber cur-catch-point
~set-cur-catch-point void(value catch-point*) unsafe, native extern
	must-cur-fiber.cur-catch-point := value.pointer-cast

# Used by the compiler when implementing 'try-catch' and 'finally'
rethrow-current-exception void() bare, unsafe
	if fiber ?= cur-fiber
		fiber.cur-catch-point jump-to-catch
	else
		# Throwing outside of a fiber aborts
		abandon

+catch-all[t] (t, exception-and-backtrace) result(tried t mut()) native extern
	trusted
		old-gc-root = gc-root
		old-catch-point = cur-catch-point
		store mut catch-point = zeroed
		if &store setup-catch
			# Get here if something is thrown
			cur-catch-point := old-catch-point
			gc-root := old-gc-root
			thrown = cur-thrown
			cur-thrown := zeroed
			backtrace = cur-backtrace
			cur-backtrace := zeroed
			(thrown, backtrace) error
		else
			# Get here after initial call to 'setup-catch'
			cur-catch-point := &store
			# If it throws, we'll go to the above branch.
			res = tried[]
			cur-catch-point := old-catch-point
			res ok

###
Fail unconditionally.
This function is used to mark part of an `if` or `match` that should not be possible.
###
+unreachable[t] t() bare
	throw "Should be unreachable" error

# This is called by the compiler on 'throw'
throw-impl void(a exception) bare, native extern
	backtrace = trusted if ctx ?= try-get-cur-gc-ctx
		ctx get-backtrace 1
	else
		(),
	(a, backtrace) rethrow

-new[t] t array(...a t array) bare
	a

###
Throw an existing exception object.

This is useful for rethrowing an exception that was already caught.
Throwing an exception does not modify its backtrace.
###
+rethrow[t] t(e exception-and-backtrace) bare
	trusted
		cur-thrown := e exception
		cur-backtrace := e backtrace
		rethrow-current-exception
		# unreachable
		zeroed

import
	../future-low-level: is-completed, resolve, unresolved

dummy-future-tests nat64()
	0

# This tests 'shared-of-mut-lambda', which the compiler uses to implement 'shared' lambdas.
test
	out nat mut[] = ()
	f void^ shared(x nat) = shared x =>
		out ~= x
		()
	<- for x : 0::nat .. 10 parallel
		f[x]
	out.move-to.sort::nat[] is for x : 0::nat .. 10; x
	()

test
	out nat mut[] = ()
	<- for x : 0::nat64 .. 10 sequential
		out ~= x
		()
	out.move-to::nat[] is (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
	()

test
	<- () wait-all
	xs <- ()::nat^[] wait-all
	xs is ()
	()

test trusted
	a nat64^ = unresolved
	b nat64^ = unresolved
	both = (a, b) wait-all
	a resolve 1
	forbid both is-completed
	b resolve 2
	res <- both
	res is (1, 2)
	()

import
	../bare-map

dummy-bare-map-tests nat()
	0

-bm record nominal
-with-block void(_ bm, cb void mut(map value bare-map mut*)) unsafe, native extern
	map mut value bare-map = 1,
	a value bare-map mut* = &map
	finally a destroy
	cb[a]


-value record(key nat, id mut string, moved mut nat, destroyed mut bool) by-val, mut

-invalid-key nat()
	max-value
-new value(key nat) bare
	key, "default", 0, false

-move-from void(dest value mut*, src value*) bare, unsafe, native extern
	*dest := *src
	dest->moved +:= 1

-destroy void(a value mut*) bare, unsafe, native extern
	forbid a->destroyed
	a->destroyed := true

-to[t] json(a t mut*) unsafe, native extern
	a.to::nat64 to

test trusted, native extern
	with a : bm
		ptr, f = a find-or-insert-and-inserted 0
		f is inserted
		ptr->id is "default"
		ptr->id := "a"

		ptr2, f2 = a find-or-insert-and-inserted 0
		f2 is found
		assert ptr2 == ptr

		a must-find 0 is ptr
		a.as-const.slow-is-empty is false
		a remove ptr
		a.as-const.slow-is-empty is true

test trusted, native extern
	with a : bm
		p3 = a find-or-insert 3
		p7 = a find-or-insert 7
		assert (a must-find 3) == p3
		assert (a must-find 7) == p7
		a remove p3

		assert a find 3 is-empty
		assert (a must-find 7) == p7
		a find-or-insert 7 is p7
		()

test trusted, native extern
	with a : bm
		for i : 0::nat64 .. 10
			p = a find-or-insert i * 4
			p->id := "{i}"
		for i : 0::nat64 .. 10
			(a.as-const must-find i * 4)->id is "{i}"

test trusted, native extern
	with a : bm
		for i : 0::nat64 .. 10
			p = a find-or-insert i
			p->id := "{i}"
		for i : 0::nat64 .. 10
			a remove (a must-find i)
		assert a.as-const slow-is-empty

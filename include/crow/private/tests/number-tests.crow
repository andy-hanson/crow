no-std
import
	../../json: to
	../../number: ==, +, -, *, /, int64, max-value, min-value, nat64, to
	../../string: literal
	../../test-util: is, throws

dummy-number-tests nat64()
	0

test
	1::int64 + 1 is 2
	(() => max-value::int64 + 1) throws "integer overflow"
	(() => min-value::int64 + -1) throws "integer overflow"
	(() => min-value::int64 + min-value) throws "integer overflow"

test
	1::int64 - 2 is -1
	(() => max-value::int64 - -1) throws "integer overflow"
	(() => min-value::int64 - 1) throws "integer overflow"
	min-value::int64 - min-value is 0

test
	# TODO: should not need parens
	(max-value::int64) * 0 is 0
	(-1::int64) * -1 is 1
	(() => (max-value::int64 / 3) * 4) throws "integer overflow"
	(() => (4::int64) * (max-value / 3)) throws "integer overflow"
	# TODO: should not need parens
	(() => (min-value::int64) * -1) throws "integer overflow"
	(() => (-1::int64) * min-value) throws "integer overflow"

test
	-1.5.to::int64 is -2
	-1.49.to::int64 is -1
	1.49.to::int64 is 1
	1.5.to::int64 is 2

	4.1.to::nat64 is 4
	4.5.to::nat64 is 5
	5.5.to::nat64 is 6

no-std
import
	stdlib: free, malloc
	string: memcpy, memset
	../bits: ~, &
	../bool: !, ||, bool, false, to-nat64, true
	../compare: !=, <, <=, >
	../fun-util: subscript
	../misc: new
	../ptr:
		==, <=>, +, -, *, any-const-ptr, any-mut-ptr, as-any-const-ptr, as-any-mut-ptr, as-const,
		as-mut, as-ref, by-val, const-ptr, mut-ptr, null, ptr-cast, ref-of-val, set-deref,
		set-subscript, size-of, to-nat64
	./bootstrap:
		gc-ctx-ptr, get-ctx, hard-assert, lock, nat64, none, opt, some, todo, void
	./number-low-level: ==, <=>, nat8, unsafe-div, wrap-add, wrap-mul, wrap-sub
	./thread-utils: acquire, barrier, init, release, wait-barrier, uninit

mem-copy<a> void(dest a mut*, src a*, size nat64) unsafe noctx
	_ = dest.as-any-mut-ptr memcpy src.as-any-const-ptr, (size wrap-mul size-of@<a>)
	()

set-zero-range<a> void(begin a mut*, size nat64) noctx unsafe
	# TODO: wrap-mul is unsafe
	_ = begin.as-any-mut-ptr memset 0, (size wrap-mul size-of@<a>)
	()

mark-ctx record mut
	memory-size-words nat64
	marks bool mut*
	memory-start nat64 mut*

# Returns true if the range is GC-allocated memory and was not already marked
mark bool(ctx mark-ctx, ptr-any any-const-ptr, size-bytes nat64) noctx unsafe summon
	size-words = size-bytes words-of-bytes
	ptr nat64* = ptr-any ptr-cast
	index = ptr - ctx.memory-start.as-const
	if index < ctx.memory-size-words
		hard-assert: ptr-any is-word-aligned
		hard-assert: (index wrap-add size-words) <= ctx.memory-size-words
		mark-start = ctx.marks + index
		mark-end = mark-start + size-words
		false mark-range-recur mark-start, mark-end
	else
		hard-assert: (index wrap-add size-words) > ctx.memory-size-words
		false

.is-word-aligned bool(a any-const-ptr) noctx unsafe
	a.as-mut is-word-aligned
.is-word-aligned bool(a any-mut-ptr) noctx unsafe
	a.to-nat64 & 7 == 0

words-of-bytes nat64(size-bytes nat64) noctx trusted
	size-bytes.round-up-to-multiple-of-8 unsafe-div 8

round-up-to-multiple-of-8 nat64(n nat64) noctx
	(n wrap-add 7) & ~7

mark-range-recur bool(marked-anything bool, cur bool mut*, end bool mut*) noctx unsafe
	if cur == end
		marked-anything
	else
		new-marked-anything = marked-anything || !*cur
		*cur := true
		new-marked-anything mark-range-recur cur + 1, end

mark-visit<a> void(mark-ctx mark-ctx, value a) noctx unsafe builtin

gc record mut
	.lk by-val lock
	.barrier by-val barrier
	.gc-count mut nat64
	.context-head mut gc-ctx?
	needs-gc .mut bool
	.size-words mut nat64
	# 'mark-cur' and 'data-cur' run in parallel
	# mark-end must be `mark-begin + size-words` and similar for data-end
	.mark-begin bool mut*
	.mark-cur mut bool mut*
	.mark-end mut bool mut*
	# We allocate data in increments of nat64
	.data-begin nat64 mut*
	.data-cur mut nat64 mut*
	.data-end mut nat64 mut*

gc-stats record by-val
	gc-count nat64
	cur-word nat64
	total-words nat64
	words-used nat64

words-free nat64(a gc-stats) noctx
	a.total-words wrap-sub a.words-used

# Super unsafe
# WARN: Unfortunately this doesn't prevent the original allocation in new-gc, just forbids us to use it
set-hard-limit void(gc gc, size-words nat64) noctx unsafe
	gc validate-gc
	hard-assert: size-words <= gc.size-words
	cur-index = gc.mark-cur - gc.mark-begin
	hard-assert: cur-index < size-words
	gc.size-words := size-words
	gc.mark-end := gc.mark-begin + size-words
	gc.data-end := gc.data-begin + size-words
	gc validate-gc

# WARN: this locks up the GC for a long time
get-stats gc-stats(gc gc) noctx unsafe
	gc validate-gc
	gc.lk.ref-of-val acquire
	gc-count = gc gc-count
	cur-word = gc.mark-cur - gc.mark-begin
	used-words-remaining = 0 words-used-in-range gc.mark-cur, gc.mark-end
	total-words = gc.mark-end - gc.mark-begin
	gc.lk.ref-of-val release
	gc-count, cur-word, total-words, (cur-word wrap-add used-words-remaining)

words-used-in-range nat64(acc nat64, cur bool mut*, end bool mut*) noctx unsafe
	if cur == end
		acc
	else
		acc wrap-add cur->to-nat64 words-used-in-range cur + 1, end

uninit by-val gc() noctx unsafe
	# TODO: handle malloc failure
	# 3 * 2**24 words = 3 * 2**27 bytes = 3 * 2**8 MB = 1.5 GB
	# If changing this, be sure `globalBuffer` in `wasm.d` is big enough
	size-words = 0x3000000
	# 8 GB
	#size-words = 0x40000000
	hard-assert: size-of@<bool> == size-of@<nat8>
	mark bool mut* = size-words.malloc ptr-cast@<bool, nat8>
	mark-end = mark + size-words
	bytes nat64 mut* = (size-words wrap-mul size-of@<nat64>).malloc ptr-cast@<nat64, nat8>
	hard-assert: bytes.as-any-mut-ptr is-word-aligned
	bytes-end = bytes + size-words

	_ = mark.as-any-mut-ptr memset 0, size-words

	res by-val gc = uninit, uninit, 0, none, false, size-words, mark, mark, mark-end, bytes, bytes, bytes-end
	res.ref-of-val validate-gc
	res

init void(a gc, n-threads nat64) noctx unsafe
	a.lk.ref-of-val init
	a.barrier.ref-of-val init n-threads

# WARN: This should be called by all threads.
run-garbage-collection<a> void(gc gc, gc-root a) noctx unsafe
	hard-assert: gc needs-gc
	if gc.barrier.ref-of-val wait-barrier
		gc.gc-count := gc.gc-count wrap-add 1
		_ = gc.mark-begin.as-any-mut-ptr memset 0, gc.size-words
		mark-ctx by-val mark-ctx = gc.size-words, gc.mark-begin, gc.data-begin
		mark-ctx.ref-of-val mark-visit gc-root
		prev-mark-cur = gc.mark-cur
		gc.mark-cur := gc.mark-begin
		gc.data-cur := gc.data-begin
		gc.mark-begin clear-free-mem prev-mark-cur, gc.data-begin
		gc validate-gc
		gc.needs-gc := false
	_ = gc.barrier.ref-of-val wait-barrier
	()

# TODO: use memset
.clear-free-mem void(mark-ptr bool mut*, mark-end bool mut*, data-ptr nat64 mut*) noctx unsafe
	unless mark-ptr == mark-end
		unless *mark-ptr
			*data-ptr := 0xfadefadefadefade
		mark-ptr + 1 clear-free-mem mark-end, data-ptr

###
GC info specific to a ctx.
Currently they all share the common GC and must take a lock every time they allocate.
###
gc-ctx record mut
	gc mut gc
	next-ctx mut gc-ctx?

force-needs-gc void(gc gc) unsafe
	gc.needs-gc := true

get-gc-ctx gc-ctx(gc gc) noctx unsafe
	gc.lk.ref-of-val acquire
	res = if c ?= gc.context-head
		gc.context-head := c next-ctx
		c.next-ctx := none
		c
	else
		# NOTE: malloc'd memory is not traced for garbage col.
		# This is fine as 'gc' is kept alive anyway.
		# TODO: `size-of@<by-val<gc-ctx>>.malloc` should be legal
		c gc-ctx = (size-of@<by-val<gc-ctx>> malloc) as-ref
		c.gc := gc
		c.next-ctx := none
		c
	gc.lk.ref-of-val release
	res

return-gc-ctx void(gc-ctx gc-ctx) noctx unsafe
	gc = gc-ctx.gc
	gc.lk.ref-of-val acquire
	gc-ctx.next-ctx := gc context-head
	gc.context-head := gc-ctx some
	gc.lk.ref-of-val release

get-gc-ctx gc-ctx() unsafe
	get-ctx.gc-ctx-ptr as-ref

get-gc gc() unsafe
	get-gc-ctx gc

# TODO: use memset
fill-ptr-range<a> void(cur a mut*, end a mut*, value a) noctx unsafe
	unless cur == end
		*cur := value
		cur + 1 fill-ptr-range end, value

validate-gc void(gc gc) noctx unsafe
	hard-assert: gc.mark-begin.as-any-mut-ptr is-word-aligned
	hard-assert: gc.data-begin.as-any-mut-ptr is-word-aligned
	hard-assert: gc.data-cur.as-any-mut-ptr is-word-aligned
	hard-assert: gc.mark-begin <= gc.mark-cur
	hard-assert: gc.mark-cur <= gc.mark-end
	hard-assert: gc.data-begin <= gc.data-cur
	hard-assert: gc.data-cur <= gc.data-end
	mark-idx = gc.mark-cur - gc.mark-begin
	data-idx = gc.data-cur - gc.data-begin
	hard-assert: gc.mark-end - gc.mark-begin == gc.size-words
	hard-assert: gc.data-end - gc.data-begin == gc.size-words
	hard-assert: mark-idx == data-idx

.try-gc-alloc any-mut-ptr?(gc gc, size-bytes nat64) noctx trusted
	gc.lk.ref-of-val acquire
	res = gc try-gc-alloc-recur size-bytes
	gc maybe-set-needs-gc
	gc.lk.ref-of-val release
	res

.maybe-set-needs-gc void(gc gc) noctx unsafe
	cur-word = gc.mark-cur - gc.mark-begin
	if cur-word > (gc.size-words unsafe-div 2)
		gc.needs-gc := true

.try-gc-alloc-recur any-mut-ptr?(gc gc, size-bytes nat64) noctx unsafe
	# TODO: support larger allocations than 256MB
	hard-assert: size-bytes < 0x10000000
	# gc validate-gc
	size-words = size-bytes words-of-bytes
	cur = gc data-cur
	next = cur + size-words
	if next < gc.data-end
		if gc.mark-cur range-free gc.mark-cur + size-words
			gc.mark-cur := gc.mark-cur + size-words
			gc.data-cur := next
			cur.ptr-cast some
		else
			gc.mark-cur := gc.mark-cur + 1
			gc.data-cur := gc.data-cur + 1
			gc try-gc-alloc-recur size-bytes
	else
		none

.range-free bool(mark bool mut*, end bool mut*) noctx unsafe
	if mark == end
		true
	elif *mark
		false
	else
		mark + 1 range-free end

gc-alloc any-mut-ptr(gc gc, size nat64) noctx trusted
	if res ?= gc try-gc-alloc size
		res
	else
		# TODO: throw an exception on OOM
		todo

alloc any-mut-ptr(size-bytes nat64) unsafe
	get-gc gc-alloc size-bytes

try-alloc any-mut-ptr?(size-bytes nat64) unsafe
	get-gc try-gc-alloc size-bytes

alloc-uninitialized<a> a mut*(count nat64) unsafe
	get-gc alloc-uninitialized count

alloc-uninitialized<a> a mut*(gc gc, count nat64) noctx unsafe
	gc gc-alloc (count wrap-mul size-of@<a>) ptr-cast

alloc-uninitialized<a> a mut*(gc gc) noctx unsafe
	gc alloc-uninitialized 1

try-alloc-uninitialized<a> a mut*?(size nat64) unsafe
	if res ?= size wrap-mul size-of@<a> try-alloc
		res.ptr-cast some
	else
		none

unmanaged-alloc-uninitialized<a> a mut*() noctx unsafe
	1 unmanaged-alloc-elements

unmanaged-alloc-bytes any-mut-ptr(size nat64) noctx unsafe
	res = size malloc
	hard-assert: res != null
	res

unmanaged-alloc-zeroed-elements<a> a mut*(size-elements nat64) noctx unsafe
	res a mut* = size-elements unmanaged-alloc-elements
	res set-zero-range size-elements
	res

unmanaged-alloc-elements<a> a mut*(size-elements nat64) noctx unsafe
	# TODO: wrap-mul is unsafe!
	ptr-cast: size-elements wrap-mul size-of@<a> unmanaged-alloc-bytes

unmanaged-free<a> void(p a mut*) noctx unsafe
	p.as-any-mut-ptr free

copy-data-from<a> void(to a mut*, from a*, len nat64) unsafe
	_ = to.as-any-mut-ptr memcpy from.as-any-const-ptr, (len wrap-mul size-of@<a>)
	()

fill-ptr-range<a> void(begin a mut*, size nat64, f act a(nat64)) unsafe
	begin fill-ptr-range-recur 0, size, f

.fill-ptr-range-recur<a> void(begin a mut*, i nat64, size nat64, f act a(nat64)) unsafe
	unless i == size
		begin[i] := f[i]
		begin fill-ptr-range-recur (i wrap-add 1), size, f

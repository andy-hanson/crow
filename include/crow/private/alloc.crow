no-std
import
	system/stdlib: calloc, free, malloc
	../bits: ~, &
	../bool: bool, false, new, not, to, true
	../compare: !=, <, <=, >, >=
	../fun-util: subscript
	../misc: new
	../number: +, -
	../option: new, option
	../pointer:
		==, <=>, +, -, *, any-const-pointer, any-mut-pointer, as-const, const-pointer, mem-clear,
		mut-pointer, null, pointer-cast, set-deref, size-of, to-const-pointer, to
	../version: is-wasm
	./bootstrap:
		gc-root, hard-assert, hard-unreachable, lock, mark-ctx, marks, memory-size-words,
		memory-start, must-cur-fiber, nat64, next, new, set-gc-root, todo, void
	./number-low-level: ==, <=>, nat8, unsafe-div, wrap-add, wrap-mul
	./range-low-level: .., high, low, range
	./thread-utils: acquire, barrier, init, release, wait-barrier, uninit

# Called by the compiler.
~gc-root gc-root mut*() unsafe
	must-cur-fiber gc-root

# Called by the compiler. 'value' is allocated on the stack and passed here by pointer.
~set-gc-root void(value gc-root mut*) unsafe
	must-cur-fiber.gc-root := value

# Called by the compiler.
~pop-gc-root void() unsafe
	fiber = must-cur-fiber
	fiber.gc-root := fiber.gc-root->next

~gc-roots record nominal
~for-loop void(_ gc-roots, cb void mut(x gc-root mut*)) unsafe
	cur mut = gc-root
	while cur != null
		cb[cur]
		cur := cur->next

-to-word-aligned-range nat64* range(a any-const-pointer, size-bytes nat64) bare, unsafe
	a.round-down-to-word .. (a + size-bytes).round-up-to-word

# Returns true if the range is GC-allocated memory and was not already marked
mark bool(ctx mark-ctx, pointer-any any-const-pointer, size-bytes nat64) bare, summon, unsafe
	words = pointer-any to-word-aligned-range size-bytes
	guard words.low >= ctx.memory-start.as-const
	indices = words.low - ctx.memory-start.as-const .. words.high - ctx.memory-start.as-const
	if indices.low < ctx.memory-size-words
		assert indices.high <= ctx.memory-size-words
		ctx.marks + indices.low mark-range ctx.marks + indices.high
	else
		assert indices.high >= ctx.memory-size-words
		false

-is-word-aligned[t] bool(a t*) bare, unsafe
	a.to::nat64 & 7 == 0
-is-word-aligned[t] bool(a t mut*) bare, unsafe
	a.as-const is-word-aligned

words-of-bytes nat64(size-bytes nat64) bare
	trusted size-bytes.round-up-to-multiple-of-8 unsafe-div 8

round-up-to-multiple-of-8 nat64(n nat64) bare
	(n wrap-add 7) & ~7
round-down-to-word nat64*(a nat8*) bare, unsafe
	a - (a.to & 7) pointer-cast
round-up-to-word nat64*(a nat8*) bare, unsafe
	a.to.round-up-to-multiple-of-8 to-const-pointer

mark-range bool(start bool mut*, end bool mut*) bare, unsafe
	cur mut = start
	marked-anything mut = false
	until cur == end
		if !*cur
			*cur := true
			marked-anything := true
		cur +:= 1
	marked-anything

###
Normally this is used by the compiler to provide function pointer for a 'gc-root'.
Available as a regular function for debugging.

This is only defined for record or union types.
For a pointer type, it uses 'mark-visit' directly instead.
###
~mark-root[t] void(mark-ctx mark-ctx, pointer void*) builtin, bare, unsafe

~mark-visit[t] void(mark-ctx mark-ctx, value t) builtin, bare, unsafe

gc record by-val, mut
	-lk mut lock
	-barrier mut barrier
	-gc-count mut nat64
	-context-head mut gc-ctx?
	needs-gc -mut bool
	-size-words mut nat64
	# 'mark-cur' and 'data-cur' run in parallel
	# mark-end must be `mark-begin + size-words` and similar for data-end
	-mark-begin bool mut*
	-mark-cur mut bool mut*
	-mark-end mut bool mut*
	# We allocate data in increments of nat64
	-data-begin nat64 mut*
	-data-cur mut nat64 mut*
	-data-end mut nat64 mut*

+gc-stats record by-val
	gc-count nat64
	cur-word nat64
	words-used nat64
	words-free nat64

# Super unsafe
# WARN: Unfortunately this doesn't prevent the original allocation in new-gc,
# just forbids us to use it
+set-hard-limit void(gc gc mut*, size-words nat64) bare, unsafe
	# TODO: get a lock
	gc.as-const validate-gc
	size-words <= gc->size-words hard-assert
	cur-index = gc->mark-cur - gc->mark-begin
	cur-index < size-words hard-assert
	gc->size-words := size-words
	gc->mark-end := gc->mark-begin + size-words
	gc->data-end := gc->data-begin + size-words
	gc.as-const validate-gc

# WARN: this locks up the GC for a long time
+get-stats gc-stats(gc gc mut*) bare, unsafe
	gc.lk acquire
	gc.as-const validate-gc
	gc-count = gc->gc-count
	cur-word = gc->mark-cur - gc->mark-begin
	used-words-remaining = 0 words-used-in-range gc->mark-cur, gc->mark-end
	total-words = gc->mark-end - gc->mark-begin
	gc.lk release
	words-used = cur-word wrap-add used-words-remaining
	gc-count, cur-word, words-used, total-words - words-used

words-used-in-range nat64(acc nat64, cur bool mut*, end bool mut*) bare, unsafe
	if cur == end
		acc
	else
		acc wrap-add cur->to words-used-in-range cur + 1, end

uninit gc() bare, unsafe, native extern
	# TODO: handle malloc failure
	# If changing this, be sure `serverBuffer` in `wasm.d` is big enough
	size-words nat64 = if is-wasm
		# 0.5 GB
		0x4000000
	else
		# 8 GB
		0x40000000
	size-of@bool == size-of@nat8 hard-assert
	mark bool mut* = size-words unmanaged-alloc-zeroed-elements
	mark != null hard-assert
	mark-end = mark + size-words
	bytes nat64 mut* = size-words unmanaged-alloc-zeroed-elements
	bytes != null hard-assert
	bytes.is-word-aligned hard-assert
	bytes-end = bytes + size-words

	_ = mark mem-clear size-words

	res gc = uninit, uninit, 0, (), false, size-words, mark, mark, mark-end, bytes, bytes, bytes-end
	&res validate-gc
	res

init void(a gc mut*, n-threads nat64) bare, unsafe
	a.lk init
	a.barrier init n-threads

###
This must be called like so:
* All threads run 'gc-begin'.
* It will return 'true' for one thread.
	- That thread can call 'gc-add-root' many times.
	- Then it should call 'gc-complete'.
* All threads run 'gc-end' that makes them wait for the end.
###
gc-begin bool(gc gc mut*) bare, unsafe, native extern
	gc->needs-gc hard-assert
	res = gc.barrier wait-barrier
	if res
		gc->gc-count +:= 1
		_ = gc->mark-begin mem-clear gc->size-words
	res

# See comment on 'gc-begin'
gc-add-root[t] void(gc gc mut*, root t) bare, unsafe
	(gc->size-words, gc->mark-begin, gc->data-begin) mark-visit root

# See comment on 'garbage-collection-begin'
gc-complete void(gc gc mut*) bare, unsafe
	prev-mark-cur = gc->mark-cur
	gc->mark-cur := gc->mark-begin
	gc->data-cur := gc->data-begin
	if false
		# Expensive safety check
		gc->mark-begin clear-free-mem prev-mark-cur, gc->data-begin, gc->data-end
	gc.as-const validate-gc
	gc->needs-gc := false

# See comment on 'garbage-collection-begin'
gc-end void(gc gc mut*) bare, unsafe, native extern
	_ = gc.barrier wait-barrier

-clear-free-mem void(
	mark-begin bool mut*,
	mark-end bool mut*,
	data-begin nat64 mut*,
	data-end nat64 mut*,
) bare, unsafe
	assert mark-end - mark-begin == data-end - data-begin
	mark mut = mark-begin
	word mut = data-begin
	until mark == mark-end
		unless *mark
			*word := 0xfadefadefadefade
		mark +:= 1
		word +:= 1
	assert word == data-end

###
GC info specific to a ctx.
Currently they all share the common GC and must take a lock every time they allocate.
###
gc-ctx record by-val, mut
	-gc gc mut*

+force-needs-gc void(gc gc mut*) unsafe, native extern
	gc->needs-gc := true

# TODO: Support making a thread-local 'native extern', since it shouldn't be used otherwise
-cur-gc-ctx thread-local(gc-ctx?)

try-get-cur-gc-ctx gc-ctx?() bare, unsafe, native extern
	cur-gc-ctx

-get-gc-ctx gc-ctx() unsafe, native extern
	cur-gc-ctx!

-force[t] t(a t?) bare, unsafe
	if res ?= a
		res
	else
		hard-unreachable

mutator-begin void(a gc mut*) bare, unsafe, native extern
	cur-gc-ctx := (a,),

mutator-end void() bare, unsafe, native extern
	cur-gc-ctx := ()

+get-gc gc mut*() unsafe, native extern
	get-gc-ctx gc

validate-gc void(gc gc*) bare, unsafe
	gc->mark-begin.is-word-aligned hard-assert
	gc->data-begin.is-word-aligned hard-assert
	gc->data-cur.is-word-aligned hard-assert
	gc->mark-begin <= gc->mark-cur hard-assert
	gc->mark-cur <= gc->mark-end hard-assert
	gc->data-begin <= gc->data-cur hard-assert
	gc->data-cur <= gc->data-end hard-assert
	mark-idx = gc->mark-cur - gc->mark-begin
	data-idx = gc->data-cur - gc->data-begin
	gc->mark-end - gc->mark-begin == gc->size-words hard-assert
	gc->data-end - gc->data-begin == gc->size-words hard-assert
	mark-idx == data-idx hard-assert

-try-gc-alloc any-mut-pointer?(gc-ctx gc-ctx, size-bytes nat64) bare, native extern
	trusted
		gc = gc-ctx gc
		gc.lk acquire
		res any-mut-pointer? = loop
			# TODO: support larger allocations than 256MB
			size-bytes < 0x10000000 hard-assert
			# gc validate-gc
			size-words = size-bytes words-of-bytes
			cur = gc->data-cur
			next = cur + size-words
			guard next < gc->data-end : break
			if non-free ?= gc->mark-cur first-non-free gc->mark-cur + size-words
				gc->data-cur +:= (non-free - gc->mark-cur) wrap-add 1
				gc->mark-cur := non-free + 1
				continue
			else
				gc->mark-cur +:= size-words
				gc->data-cur := next
				break cur.pointer-cast,
		gc maybe-set-needs-gc
		gc.lk release
		if x ?= res
			x mem-clear size-bytes
		res

-maybe-set-needs-gc void(gc gc mut*) bare, unsafe
	cur-word = gc->mark-cur - gc->mark-begin
	if cur-word > (gc->size-words unsafe-div 2)
		gc->needs-gc := true

-first-non-free bool mut*?(mark bool mut*, end bool mut*) bare, unsafe
	if mark == end
		()
	elif *mark
		mark,
	else
		mark + 1 first-non-free end

gc-alloc any-mut-pointer(gc gc-ctx, size nat64) bare, native extern
	if res ?= gc try-gc-alloc size
		res
	else
		# TODO: throw an exception on OOM
		todo

# Called by the compiler
allocate any-mut-pointer(size-bytes nat64) unsafe, native extern
	get-gc-ctx gc-alloc size-bytes

allocate[t] t mut*() unsafe, native extern
	1 allocate

allocate[t] t mut*(count nat64) unsafe, native extern
	get-gc-ctx allocate count

allocate[t] t mut*(gc gc-ctx, count nat64) bare, unsafe, native extern
	gc gc-alloc (count wrap-mul size-of@t) pointer-cast

allocate[t] t mut*(gc gc-ctx) bare, unsafe, native extern
	gc allocate 1

try-allocate[t] t mut*?(size nat64) unsafe, native extern
	get-gc-ctx try-allocate size

try-allocate[t] t mut*?(gc gc-ctx, size nat64) bare, unsafe, native extern
	(gc try-gc-alloc (size wrap-mul size-of@t))?.pointer-cast

try-allocate[t] t mut*?() unsafe, native extern
	1 try-allocate

try-allocate[t] t mut*?(gc gc-ctx) bare, unsafe, native extern
	gc try-allocate 1

unmanaged-alloc-uninitialized[t] t mut*() bare, unsafe, native extern
	1 unmanaged-alloc-uninitialized-elements

+unmanaged-alloc[t] t mut*(value t) bare, unsafe, native extern
	res t mut* = unmanaged-alloc-uninitialized
	*res := value
	res

unmanaged-alloc-zeroed-bytes any-mut-pointer(size nat64) bare, unsafe, native extern
	if extern libc
		res = size calloc 1
		res != null hard-assert
		res
	else
		todo

unmanaged-alloc-uninitialized-bytes any-mut-pointer(size nat64) bare, unsafe, native extern
	if extern libc
		res = size malloc
		res != null hard-assert
		res
	else
		todo

unmanaged-alloc-zeroed-elements[t] t mut*(size-elements nat64) bare, unsafe, native extern
	# TODO: wrap-mul is unsafe!
	(size-elements wrap-mul size-of@t).unmanaged-alloc-zeroed-bytes pointer-cast

unmanaged-alloc-uninitialized-elements[t] t mut*(size-elements nat64) bare, unsafe, native extern
	# TODO: wrap-mul is unsafe!
	(size-elements wrap-mul size-of@t).unmanaged-alloc-uninitialized-bytes pointer-cast

unmanaged-free-elements[t] void(begin t mut*, _ nat64) bare, unsafe, native extern
	if extern libc
		begin.pointer-cast free
	else
		todo

+unmanaged-free[t] void(p t mut*) bare, unsafe, native extern
	if extern libc
		p.pointer-cast free
	else
		todo

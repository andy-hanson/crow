no-std
import
	../io/print: out, print
	../ptr: *, set-deref
	../misc: void
	../ptr: mut-ptr
	../string: ~~, literal, string

###
Log severity.
The log handler can use this any way it wants.
The default log handler just prints the level at the beginning of each log.
###
log-level enum
	# Any log message not fitting in other levels can be 'info'.
	info
	###
	This is useful for anything that seems like it might be a problem in the future.

	For example: Something took an unusually long time; or some resource like memory is running low.
	###
	warn
	###
	An error is for when something has gone wrong (but wasn't worthy of an exception).

	For example: An HTTP request that is expected to normally succeed failed.
	###
	error

###
`"info"`, `"warn"`, or `"error"`.
###
to-string string(a log-level)
	match a
	as info
		"info"
	as warn
		"warn"
	as error
		"error"

# Represents a single call to `log`.
logged record
	level log-level
	message string

###
Function that handles a log message.

For example, this might write it to the console.
###
log-handler alias
	fun void(logged)

default-log-handler void(a logged) summon
	out print a.level.to-string ~~ ": " ~~ a.message

# GC doesn't trace thread-locals, but won't outlive a task anyway.
.cur-log-handler log-handler mut*() thread-local

###
This gets the current log handler.
This is useful if you want to use `with-log-handler` to add a little extra information,
then fall back to the original log handler.

If you just want to call the curent log handler, you could just use `log`.
###
get-log-handler log-handler() noctx trusted
	*cur-log-handler

set-log-handler void(handler log-handler) noctx unsafe
	*cur-log-handler := handler

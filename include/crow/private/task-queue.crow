no-std
import
	../bool: bool, false, true
	../col/mut-list:
		in, mut-list, mut-list-by-val-with-capacity-from-unmanaged-memory,
		noctx-must-remove-unordered!, push-capacity-must-be-sufficient!
	../compare: !=, <=
	../io/time-low-level: timestamp
	../misc: as, void
	../opt: is-empty, none, opt, some
	../ptr: by-val, ref-of-val
	./bootstrap: exclusion, hard-assert
	./number-low-level: ==, <=>, nat64, wrap-add

# TODO: use a heap, not a list

no-timestamp nat64() noctx
	0

task record mut
	by-val
	# 0 for non-timed tasks
	time timestamp
	exclusion exclusion
	action act void()

task-queue record mut
	# TODO:PRIVATE
	# Very first node is a sentinel
	head mut task-queue-node?
	# This is allocated with max-threads capacity on init, so never needs further allocation
	currently-running-exclusions by-val mut-list exclusion

.task-queue-node record mut
	task task
	next mut task-queue-node?

is-empty bool(a task-queue) noctx
	a.head is-empty

task-queue by-val task-queue(max-threads nat64) unsafe noctx
	task-queue: none, max-threads mut-list-by-val-with-capacity-from-unmanaged-memory<exclusion>

# Expose construction of nodes, because it's better to do this outside of a lock
task-queue-node task-queue-node(task task)
	task-queue-node: task, none

no-task record
	by-val
	any-tasks bool
	first-task-time timestamp?

pop-task-result union mut
	task
	no-task

# Caller should call 'return-task' after running the task
pop-task! pop-task-result(a task-queue, cur-time timestamp) noctx unsafe
	exclusions = a.currently-running-exclusions ref-of-val
	res = as<pop-task-result>: if head ?= a.head
		task = head task
		if task.time <= cur-time
			if task.exclusion in exclusions
				pop-recur!: head, exclusions, cur-time, task.time to-opt-time
			else
				a.head := head.next
				head.task
		else
			no-task: true, task.time some
	else
		no-task: false, none

	match res
	as task t
		exclusions push-capacity-must-be-sufficient! t.exclusion
	as no-task
		void

	res

to-opt-time timestamp?(a timestamp) noctx
	if a != no-timestamp
		a some

return-task! void(a task-queue, task task) noctx unsafe
	a.currently-running-exclusions.ref-of-val noctx-must-remove-unordered! task.exclusion

.pop-recur! pop-task-result
	prev task-queue-node
	exclusions mut-list exclusion
	cur-time timestamp
	first-task-time timestamp?
spec
	noctx
	unsafe
body
	if cur ?= prev next
		task = cur task
		if task.time <= cur-time
			if task.exclusion in exclusions
				pop-recur!: cur, exclusions, cur-time, if t ?= first-task-time
					t some
				else
					task.time to-opt-time
			else
				prev.next := cur.next
				task
		else
			no-task: true, task.time some
	else
		no-task: true, first-task-time

insert-task! void(a task-queue, inserted task-queue-node) noctx unsafe
	size-before = a size
	if head ?= a head
		if head.task.time <= inserted.task.time
			insert-recur: head, inserted
		else
			inserted.next := head some
			a.head := inserted some
	else
		a.head := inserted.some
	size-after = a size
	hard-assert: (size-before wrap-add 1) == size-after

.insert-recur void(prev task-queue-node, inserted task-queue-node) noctx
	if cur ?= prev next
		if cur.task.time <= inserted.task.time
			insert-recur: cur, inserted
		else
			inserted.next := cur some
			prev.next := inserted some
	else
		prev.next := inserted some


.size nat64(a task-queue) noctx
	a.head size-recur 0

.size-recur nat64(node task-queue-node?, acc nat64) noctx
	if n ?= node
		n.next size-recur: acc wrap-add 1
	else
		acc

no-std
import
	../compare: <=, equal, compare
	./number-low-level: nat64

###
Range of values. `low` is inclusive and `high` is exclusive.

Usable for any type with a comparison function.
###
!range[t] record by-val
	low t
	high t

!forward-rangeable[t] spec t equal
	+ t(a t, distance nat64)

!subtract-to-nat[t] spec
	- nat64(a t, b t)

# Spec for types that support most range operations
!rangeable[t] spec t forward-rangeable, t subtract-to-nat
	- t(a t, distance nat64)

# Create a range from `low` (inclusive) to `high` (exclusive).
!..[t] t range(low t, high t) noctx, t compare
	assert low <= high
	low, high

# Size of the range; depends on a `-` function existing.
!size[t] nat64(a t range) noctx, t subtract-to-nat
	a.high - a.low

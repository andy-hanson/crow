no-std
import
	../bool: bool, false, true
	../compare: <=, >=, compare
	../fun-util: subscript
	./number-low-level: nat64

###
Range of values. `low` is inclusive and `high` is exclusive.

Usable for any type with a comparison function.
###
+range[t] record by-val
	low t
	high t

+forward-rangeable[t] spec t compare
	+ t(a t, distance nat64)

+subtract-to-nat[t] spec
	- nat64(a t, b t)

# Spec for types that support most range operations
+rangeable[t] spec t forward-rangeable, t subtract-to-nat
	- t(a t, distance nat64)

# Create a range from `low` (inclusive) to `high` (exclusive).
+..[t] t range(low t, high t) bare, t compare
	assert low <= high
	low, high

# Size of the range; depends on a `-` function existing.
+size[t] nat64(a t range) bare, t subtract-to-nat
	a.high - a.low

# Calls `f` for each value in the range, from `a.low` to `a.high - 1`.
+iterate[t] bool(a t range, f act bool(t)) t forward-rangeable
	cur mut = a low
	loop
		if cur >= a.high
			break false
		elif f[cur]
			break true
		else
			cur +:= 1
			continue

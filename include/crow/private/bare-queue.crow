no-std
import
	../bool: &&, bool
	../compare: !=, <
	../misc: new, void
	../number: ==, +, *, nat64
	../option: new, option
	../pointer: ==, <=>, +, -, *, as-const, const-pointer, mut-pointer, null, set-deref
	./alloc: gc, gc-add-root, mem-copy, unmanaged-alloc-elements, unmanaged-free-elements
	./bootstrap: hard-assert

bare-queue[t] record by-val, mut
	-magic-number nat64 # --------------------------------------------------------------------------------------------------------------
	-alloc-begin mut t mut*
	-alloc-end mut t mut*
	# For an empty queue, begin == end == null.
	# For a full queue, begin == end and they are not null.
	-begin mut t mut*
	-end mut t mut*

new[t] t bare-queue() bare, unsafe
	42, null, null, null, null

destroy[t] void(a t bare-queue mut*) bare, unsafe
	a->alloc-begin unmanaged-free-elements (a->alloc-end - a->alloc-begin)

is-empty[t] bool(a t bare-queue*) bare, unsafe
	a->begin == null

size[t] nat64(a t bare-queue*) bare, unsafe
	if a->begin < a->end
		a->end - a->begin
	else
		(a->alloc-end - a->begin) + (a->end - a->alloc-begin)

dequeue[t] t?(a t bare-queue mut*) bare, unsafe
	a->magic-number == 42 hard-assert
	unless a->begin == null
		res = *a->begin
		a->begin := a.as-const advance a->begin
		if a->begin == a->end
			a->begin := null
			a->end := null
		res,

enqueue[t] void(a t bare-queue mut*, value t) bare, unsafe
	a->magic-number == 42 hard-assert
	if a->end == a->begin
		if a->begin == null && a->alloc-begin != null
			a->begin := a->alloc-begin
			a->end := a->begin
		else
			a increase-capacity
		*a->end := value
		a->end +:= 1
	else
		forbid a->end == a->alloc-end
		*a->end := value
		a->end := a.as-const advance a->end

-increase-capacity[t] void(a t bare-queue mut*) bare, unsafe
	old-capacity = a->alloc-end - a->alloc-begin
	new-capacity nat64 = old-capacity == 0 ? 2 : old-capacity * 2
	new-begin t mut* = new-capacity unmanaged-alloc-elements
	new-end = if a->begin < a->end
		size = a->end - a->begin
		new-begin mem-copy a->begin.as-const, size
		new-begin + size
	else
		size1 = a->alloc-end - a->begin
		new-begin mem-copy a->begin.as-const, size1
		size2 = a->end - a->alloc-begin
		new-begin + size1 mem-copy a->alloc-begin.as-const, size2
		new-begin + size1 + size2
	a->alloc-begin unmanaged-free-elements a->alloc-end - a->alloc-begin
	*a := 42, new-begin, new-begin + new-capacity, new-begin, new-end

-advance[t] t mut*(a t bare-queue*, ptr t mut*) bare, unsafe
	res = ptr + 1
	if res == a->alloc-end
		a->alloc-begin
	else
		res

add-gc-roots[t] void(a t bare-queue*, gc gc mut*) bare, unsafe
	ptr mut = a->begin
	until ptr == a->end
		gc gc-add-root *ptr
		ptr := a advance ptr

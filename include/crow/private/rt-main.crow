no-std
import
	../compare: <
	../col/array: array, size, subscript
	../col/mut-slice: cast-immutable, gc-safe-mut-slice, mut-slice, set-subscript
	../exception: catch-all, show
	../fun-util: subscript
	../io/print: err, print
	../misc: new, void
	../number: ==, <=>, +, -, int32, max-value, nat64, to, unary-out-of-range
	../option: new
	../parallel: future, parallel, with-block
	../pointer:
		+, *, any-mut-pointer, as-const, const-pointer, mut-pointer, null, pointer-cast,
		set-deref, set-subscript, subscript
	../range: ..
	../string: c-string, interpolate, show, string, to
	./alloc: mutator-begin, mutator-end, unmanaged-alloc-uninitialized-elements, unmanaged-free
	./bootstrap: set-cur-fiber
	./future-low-level: as-future-impl, must-get-result
	./runtime:
		destroy, gc, get-global-ctx, global-ctx, init, set-dummy-fiber, set-global-ctx,
		thread-function, uninit
	./symbol-low-level: init-symbol-table
	./thread-utils: count-processors, create-one-thread, join-one-thread, thread-handle

-main-pointer alias
	nat64 function(args string[])

# Treated specially by the compiler
rt-main int32(
	argc int32,
	argv c-string*,
	main-pointer main-pointer,
) bare, summon, unsafe, (libc, native) extern
	global-init
	per-thread-init
	n-threads = count-processors
	gctx mut global-ctx = n-threads uninit
	&gctx init
	global-ctx := &gctx
	main-fut = &gctx add-main-task argc, argv, main-pointer
	n-threads run-threads &gctx
	res = main-fut.as-future-impl must-get-result
	&gctx destroy
	res

# Call this once at start of program
-global-init void() builtin, bare, summon, unsafe
# Call this once at start of each thread
-per-thread-init void() builtin, bare, summon, unsafe

-add-main-task int32 future(
	gctx global-ctx mut*,
	argc int32,
	argv c-string*,
	main-pointer main-pointer,
) bare, summon, trusted, native extern
	all-args = argv[1 .. argc.to] # First arg is the executable
	gctx.gc mutator-begin
	res = all-args invoke-main main-pointer
	mutator-end
	res

-invoke-main int32 future(
	args c-string[],
	main-pointer main-pointer,
) force-ctx, summon, unsafe, native extern
	set-dummy-fiber
	res int32 future = with : parallel
		get-global-ctx init-symbol-table
		match (() => main-pointer[args convert-args]) catch-all
		as ok x
			try
				x to
			catch unary-out-of-range _
				err print "'main' must return a number <= {max-value::int32}; got {x}"
				max-value
		as error x
			err print "Uncaught exception: {x}"
			1
	cur-fiber := ()
	res

# Avoiding a lambda here or the compiler may erroneously think this may yield
-convert-args string[](args c-string[]) trusted, native extern
	res string mut-slice = args.size gc-safe-mut-slice
	i mut nat64 = 0
	while i < args.size
		res[i] := args[i] to
		i +:= 1
	res cast-immutable

-thread-args record(thread-id nat64, gctx global-ctx mut*) by-val, mut

# Each thread will get the thread ID, and the common arguments.
-run-threads void(n-threads nat64, gctx global-ctx mut*) bare, summon, unsafe, native extern
	threads thread-handle mut* = n-threads unmanaged-alloc-uninitialized-elements
	thread-args thread-args mut* = n-threads unmanaged-alloc-uninitialized-elements

	actual-n-threads = n-threads - 1

	actual-n-threads start-threads threads, thread-args, gctx
	actual-n-threads thread-function gctx
	actual-n-threads join-threads threads.as-const

	threads unmanaged-free
	thread-args unmanaged-free

-start-threads void(
	n-threads nat64,
	threads thread-handle mut*,
	thread-args-begin thread-args mut*,
	gctx global-ctx mut*,
) bare, summon, unsafe, native extern
	i mut nat64 = 0
	until i == n-threads
		thread-arg-pointer = thread-args-begin + i
		*thread-arg-pointer := i, gctx
		threads[i] := thread-arg-pointer.pointer-cast create-one-thread &thread-fun
		i +:= 1

-thread-fun any-mut-pointer(args-pointer any-mut-pointer) bare, summon, unsafe, native extern
	per-thread-init
	args thread-args mut* = args-pointer pointer-cast
	args->thread-id thread-function args->gctx
	null

-join-threads void(n-threads nat64, threads thread-handle*) bare, summon, unsafe, native extern
	i mut nat64 = 0
	until i == n-threads
		threads[i] join-one-thread
		i +:= 1

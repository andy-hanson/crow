no-std
import
	../col/array: +, -, array, begin, end, iterate, size, slice, subscript
	../col/collection: .., end, for-loop, subscript
	../col/list: ~=, build, list
	../fun-util: subscript
	../future: delay, future, handle-exceptions, then
	../misc: void
	../number: ==, <=>, +, -, int32, nat64, to
	../pointer:
		+, *, any-mut-pointer, as-const, const-pointer, mut-pointer, null, pointer-cast,
		set-deref, set-subscript, subscript
	../range: ..
	../string: c-string, string, to
	./alloc: unmanaged-alloc-elements, unmanaged-free
	./future-low-level: get-result
	./runtime:
		after-task, any-unhandled-exceptions, before-task, destroy, get-global-ctx, global-ctx,
		init, thread-function, uninit
	./symbol-low-level: init-symbol-table
	./thread-utils: count-processors, create-one-thread, join-one-thread, thread-handle

-main-pointer alias
	nat64^ function(args string[])

# Treated specially by the compiler
rt-main int32(argc int32, argv c-string*, main-pointer main-pointer) bare, summon, unsafe
	do-init-constants
	n-threads = count-processors
	gctx mut global-ctx = n-threads uninit
	&gctx init
	main-fut = &gctx add-main-task argc, argv, main-pointer
	n-threads run-threads &gctx
	res = &gctx exit-code-from-main-fut main-fut
	&gctx destroy
	res

-exit-code-from-main-fut int32(gctx global-ctx*, main-fut nat64^) bare, unsafe
	match main-fut get-result
	as ok v
		# TODO: handle nat64 too big for int32
		if gctx->any-unhandled-exceptions
			1
		else
			v to
	as error _
		# 'handle-exceptions' should have logged the error
		1

# TODO:KILL (using this to narrow down scope of error)
-do-init-constants void() bare, summon, unsafe
	init-constants

init-constants void() builtin, bare, summon, unsafe

-add-main-task nat64^(
	gctx global-ctx mut*,
	argc int32,
	argv c-string*,
	main-pointer main-pointer,
) bare
	# Create a ctx manually so we can call functions that need it when creating the task
	trusted
		gctx before-task 0
		all-args = argv[0 .. argc.to]
		res = all-args invoke-main main-pointer
		after-task
		res

-invoke-main nat64^(all-args c-string array, main-pointer main-pointer) force-ctx, unsafe
	all-args add-first-task main-pointer

-thread-args record by-val, mut
	thread-id nat64
	gctx global-ctx mut*

# TODO: if mut-bag-node is in unmanaged memory, don't need ctx for this
# We want main-fut to be available immediately, not after having run some user code.
# So we create main-fut now, and forward the result of 'main' to that.
-add-first-task nat64^(all-args c-string array, main-pointer main-pointer) unsafe
	# 'then' is useful here -- it handles any errors in 'main' and gets us main-fut immediately.
	# TODO: 'then' overload for void^ taking lambda with 0 params
	res nat64^ = delay then () =>
		get-global-ctx init-symbol-table
		# First argument is the path to this executable; omit from crow main
		main-pointer[for arg : all-args[1 .. end]; arg to]
	res handle-exceptions
	res

# Each thread will get the thread ID, and the common arguments.
-run-threads void(n-threads nat64, gctx global-ctx mut*) bare, summon, unsafe
	threads thread-handle mut* = n-threads unmanaged-alloc-elements
	thread-args thread-args mut* = n-threads unmanaged-alloc-elements

	actual-n-threads = n-threads - 1

	actual-n-threads start-threads threads, thread-args, gctx
	actual-n-threads thread-function gctx
	actual-n-threads join-threads threads.as-const

	threads unmanaged-free
	thread-args unmanaged-free

-start-threads void(
	n-threads nat64,
	threads thread-handle mut*,
	thread-args-begin thread-args mut*,
	gctx global-ctx mut*,
) bare, summon, unsafe
	i mut nat64 = 0
	until i == n-threads
		thread-arg-pointer = thread-args-begin + i
		*thread-arg-pointer := i, gctx
		threads[i] := thread-arg-pointer.pointer-cast create-one-thread &thread-fun
		i +:= 1

-thread-fun any-mut-pointer(args-pointer any-mut-pointer) bare, summon, unsafe
	args thread-args mut* = args-pointer pointer-cast
	args->thread-id thread-function args->gctx
	null

-join-threads void(n-threads nat64, threads thread-handle*) bare, summon, unsafe
	i mut nat64 = 0
	until i == n-threads
		threads[i] join-one-thread
		i +:= 1

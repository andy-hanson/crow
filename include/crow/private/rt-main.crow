no-std
import
	../col/array: array, subscript
	../col/list: for-loop, list, tail, to-list
	../fun-util: subscript
	../future: delay, future, handle-exceptions, then
	../misc: new, void
	../number: ==, <=>, +, -, int32, nat64, to-int32, to-int64, to-nat64
	../pointer:
		+, any-mut-pointer, as-any-mut-pointer, as-const, as-ref, by-val, const-pointer, mut-pointer, null,
		set-deref, set-subscript, subscript
	../range: ..
	../string: c-string, string, to-string
	./alloc: unmanaged-alloc-elements, unmanaged-free
	./bootstrap: call-with-ctx
	./future-low-level: get-result
	./runtime:
		after-task, any-unhandled-exceptions, before-task, free, get-global-ctx, global-ctx, init,
		thread-function, uninit
	./symbol-low-level: init-symbol-table
	./thread-utils: count-processors, create-one-thread, join-one-thread, thread-handle

.main-pointer alias
	fun* nat64^(string[])

# Treated specially by the compiler
rt-main int32(argc int32, argv c-string*, main-pointer main-pointer) trusted noctx summon
	do-init-constants
	n-threads = count-processors
	gctx-by-val mut by-val global-ctx = n-threads uninit
	gctx global-ctx = &gctx-by-val
	gctx init
	main-fut = gctx add-main-task argc, argv, main-pointer
	n-threads run-threads gctx
	res = gctx exit-code-from-main-fut main-fut
	gctx free
	res

.exit-code-from-main-fut int32(gctx global-ctx, main-fut nat64^) unsafe noctx
	match main-fut get-result
	as ok v
		# TODO: handle nat64 too big for int32
		if gctx any-unhandled-exceptions
			1
		else
			v.to-int64 to-int32
	as err _
		# 'handle-exceptions' should have logged the error
		1

# TODO:KILL (using this to narrow down scope of error)
.do-init-constants void() unsafe noctx summon
	init-constants

init-constants void() unsafe noctx summon builtin

.add-main-task nat64^(
	gctx global-ctx,
	argc int32,
	argv c-string*,
	main-pointer main-pointer,
) trusted noctx
	# Create a ctx manually so we can call functions that need it when creating the task
	gctx before-task 0
	add act nat64^(array c-string, main-pointer) = (all-args, main-pointer-2) =>
		all-args add-first-task main-pointer-2
	all-args = argv[0 .. argc.to-int64.to-nat64]
	res = add call-with-ctx all-args, main-pointer
	after-task
	res

.thread-args record mut by-ref
	thread-id nat64
	gctx global-ctx

# TODO: if mut-bag-node is in unmanaged memory, don't need ctx for this
# We want main-fut to be available immediately, not after having run some user code.
# So we create main-fut now, and forward the result of 'main' to that.
.add-first-task nat64^(all-args array c-string, main-pointer fun* nat64^(string[])) unsafe
	# 'then' is useful here -- it handles any errors in 'main' and gets us main-fut immediately.
	# TODO: 'then' overload for void^ taking lambda with 0 params
	res = delay then () =>
		get-global-ctx init-symbol-table
		# First argument is the path to this executable; omit from crow main
		main-pointer[for arg : all-args.to-list.tail; arg to-string]
	res handle-exceptions
	res

# Each thread will get the thread ID, and the common arguments.
.run-threads void(n-threads nat64, gctx global-ctx) noctx unsafe summon
	threads thread-handle mut* = n-threads unmanaged-alloc-elements
	thread-args by-val<thread-args> mut* = n-threads unmanaged-alloc-elements

	actual-n-threads = n-threads - 1

	0 start-threads-recur actual-n-threads, threads, thread-args, gctx
	actual-n-threads thread-function gctx
	0 join-threads-recur actual-n-threads, threads.as-const

	threads unmanaged-free
	thread-args unmanaged-free

.start-threads-recur void(
	i nat64,
	n-threads nat64,
	threads thread-handle mut*,
	thread-args-begin by-val<thread-args> mut*,
	gctx global-ctx,
) noctx unsafe summon
	unless i == n-threads
		thread-arg-pointer = thread-args-begin + i
		*thread-arg-pointer := i, gctx
		threads[i] := thread-arg-pointer.as-any-mut-pointer create-one-thread &thread-fun
		i + 1 start-threads-recur n-threads, threads, thread-args-begin, gctx

.thread-fun any-mut-pointer(args-pointer any-mut-pointer) noctx unsafe summon
	args thread-args = args-pointer as-ref
	args.thread-id thread-function args.gctx
	null

.join-threads-recur void(i nat64, n-threads nat64, threads thread-handle*) noctx unsafe summon
	unless i == n-threads
		threads[i] join-one-thread
		i + 1 join-threads-recur n-threads, threads

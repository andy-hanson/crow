no-std
import
	../col/array: +, -, array, begin, end, iterate, size, slice, subscript
	../col/collection: .., end, for-loop, subscript
	../col/list: ~=, build, list
	../exception: catch-all, to
	../fun-util: subscript
	../future: future, parallel, with-block
	../io/print: err, print, print-no-newline
	../misc: new, void
	../number: ==, <=>, +, -, int32, nat64, to
	../pointer:
		+, *, any-mut-pointer, as-const, const-pointer, mut-pointer, null, pointer-cast,
		set-deref, set-subscript, subscript
	../range: ..
	../string: c-string, interpolate, string, to
	./alloc: unmanaged-alloc-elements, unmanaged-free
	./future-low-level: must-get-result
	./runtime: before-task, destroy, get-global-ctx, global-ctx, init, thread-function, uninit
	./symbol-low-level: init-symbol-table
	./thread-utils: count-processors, create-one-thread, join-one-thread, thread-handle

-main-pointer alias
	nat64 function(args string[])

# Treated specially by the compiler
rt-main int32(argc int32, argv c-string*, main-pointer main-pointer) bare, summon, unsafe
	do-init-constants
	n-threads = count-processors
	gctx mut global-ctx = n-threads uninit
	&gctx init
	main-fut = &gctx add-main-task argc, argv, main-pointer
	n-threads run-threads &gctx
	res int32 = main-fut.must-get-result.to # TODO: appropriate error for exit code too big for int32
	&gctx destroy
	res

# TODO:KILL (using this to narrow down scope of error)
-do-init-constants void() bare, summon, unsafe
	init-constants

init-constants void() builtin, bare, summon, unsafe

-add-main-task nat64 future(
	gctx global-ctx mut*,
	argc int32,
	argv c-string*,
	main-pointer main-pointer,
) bare, summon, trusted
	all-args = argv[0 .. argc.to]
	gctx before-task # Fake a ctx
	all-args invoke-main main-pointer

-invoke-main nat64 future(all-args c-string array, main-pointer main-pointer) force-ctx, summon, unsafe
	with : parallel
		get-global-ctx init-symbol-table
		match (() => main-pointer[for arg : all-args[1 .. end]; arg to]) catch-all
		as ok x
			x
		as error x
			err print-no-newline "Uncaught exception: "
			err print "{x}"
			1

-thread-args record(thread-id nat64, gctx global-ctx mut*) by-val, mut

# Each thread will get the thread ID, and the common arguments.
-run-threads void(n-threads nat64, gctx global-ctx mut*) bare, summon, unsafe
	threads thread-handle mut* = n-threads unmanaged-alloc-elements
	thread-args thread-args mut* = n-threads unmanaged-alloc-elements

	actual-n-threads = n-threads - 1

	actual-n-threads start-threads threads, thread-args, gctx
	actual-n-threads thread-function gctx
	actual-n-threads join-threads threads.as-const

	threads unmanaged-free
	thread-args unmanaged-free

-start-threads void(
	n-threads nat64,
	threads thread-handle mut*,
	thread-args-begin thread-args mut*,
	gctx global-ctx mut*,
) bare, summon, unsafe
	i mut nat64 = 0
	until i == n-threads
		thread-arg-pointer = thread-args-begin + i
		*thread-arg-pointer := i, gctx
		threads[i] := thread-arg-pointer.pointer-cast create-one-thread &thread-fun
		i +:= 1

-thread-fun any-mut-pointer(args-pointer any-mut-pointer) bare, summon, unsafe
	args thread-args mut* = args-pointer pointer-cast
	args->thread-id thread-function args->gctx
	null

-join-threads void(n-threads nat64, threads thread-handle*) bare, summon, unsafe
	i mut nat64 = 0
	until i == n-threads
		threads[i] join-one-thread
		i +:= 1

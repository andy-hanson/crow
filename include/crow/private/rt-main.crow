no-std
import
	pthread: pthread_t
	sys/sysinfo: get_nprocs
	../bool: false
	../cell: as-cell
	../col/arr: arr, empty-arr, subscript
	../col/arr-util: map, tail
	../compare: !=
	../fun-util: fun-ptr2, subscript
	../fut: delay, fut, handle-exceptions, then-void
	../io/process: exit-code
	../misc: new, void
	../opt: new
	../ptr:
		+, any-mut-ptr, arr-of-single, as-any-mut-ptr, as-const, as-ref, by-val, const-ptr,
		mut-ptr, null, ptr-to, ref-of-val, set-deref, subscript
	../range: ..
	../str: c-str, str
	../str-util: to-str
	./alloc: unmanaged-alloc-elements, unmanaged-free
	./bootstrap: call-with-ctx, ctx, get-ctx, lock, new, state, thread-local-stuff
	./exception-low-level: exception-ctx
	./log-low-level: log-ctx
	./number-low-level:
		==, <=>, int32, int64, nat64, to-int64, unsafe-to-int32, unsafe-to-int64, unsafe-to-nat64,
		wrap-add, wrap-sub
	./perf-low-level: perf-ctx
	./runtime:
		any-unhandled-exceptions, global-ctx, island, may-be-work-to-do, new, new-ctx, print-lock,
		set-islands, thread-function
	./thread-utils:
		create-one-thread, create-condition, destroy-condition, join-one-thread, lock-by-val

.main-ptr alias
	fun-ptr2<fut nat64, ctx, str[]>

# Treated specially by the compiler
rt-main exit-code(argc int32, argv c-str*, main-ptr main-ptr) trusted noctx summon
	do-init-constants
	n-threads = get_nprocs
	f = false
	gctx-by-val by-val global-ctx = lbv, lbv, lbv, (), empty-arr, n-threads, create-condition, f, f
	gctx = gctx-by-val ref-of-val
	island-by-val = gctx island 0, n-threads
	island = island-by-val ref-of-val

	gctx.islands := island.ptr-to.arr-of-single

	main-fut = gctx add-main-task (n-threads wrap-sub 1), island, argc, argv, main-ptr

	n-threads run-threads gctx

	gctx.may-be-work-to-do.ref-of-val destroy-condition

	gctx exit-code-from-main-fut main-fut

.exit-code-from-main-fut exit-code(gctx global-ctx, main-fut fut nat64) unsafe noctx
	match main-fut state
	as fut-state-no-callbacks
		# Should never happen
		1
	as fut-state-callbacks _
		# Should never happen
		1
	as fut-state-resolved r
		# TODO: handle nat64 too big for int32
		if gctx any-unhandled-exceptions
			1
		else
			r.nat64-to-int64 unsafe-to-int32
	as fut-state-exception _
		# 'handle-exceptions' should have logged the error
		1

# TODO:INLINE
nat64-to-int64 int64(a nat64) unsafe noctx
	a unsafe-to-int64

# TODO:KILL (using this to narrow down scope of error)
.do-init-constants void() unsafe noctx summon
	init-constants

init-constants void() unsafe noctx summon builtin

.lbv by-val lock() noctx
	lock-by-val

.add-main-task fut nat64
	gctx global-ctx
	thread-id nat64
	island island
	argc int32
	argv c-str*
	main-ptr main-ptr
spec
	trusted
	noctx
body
	# Before we start the engine, add a task.
	# Create a ctx manually so we can call functions that need it when creating the task
	ectx = exception-ctx
	log-ctx = log-ctx
	perf-ctx = perf-ctx
	ectx-ptr = ectx.ref-of-val as-any-mut-ptr
	log-ctx-ptr = log-ctx.ref-of-val as-any-mut-ptr
	perf-ptr = perf-ctx.ref-of-val as-any-mut-ptr
	print-lock = gctx.print-lock.ref-of-val
	tls by-val thread-local-stuff = thread-id, print-lock, ectx-ptr, log-ctx-ptr, perf-ptr
	ctx-by-val = gctx new-ctx tls.ref-of-val, island, 0
	ctx = ctx-by-val ref-of-val

	add act fut nat64(c-str[], main-ptr) = (all-args, main-ptr) =>
		all-args add-first-task main-ptr
	all-args = argv[0 .. argc.to-int64.unsafe-to-nat64]
	add call-with-ctx ctx, all-args, main-ptr

.thread-args record mut
	by-ref
	thread-id nat64
	gctx global-ctx

# TODO: if mut-bag-node is in unmanaged memory, don't need ctx for this
# We want main-fut to be available immediately, not after having run some user code.
# So we create main-fut now, and forward the result of 'main' to that.
.add-first-task fut nat64(all-args c-str[], main-ptr fun-ptr2<fut nat64, ctx, str[]>) unsafe
	# 'then' is useful here -- it handles any errors in 'main' and gets us main-fut immediately.
	# TODO: 'then' overload for fut<void> taking lambda with 0 params
	res = delay then-void () =>
		# First argument is the path to this executable; omit from crow main
		main-ptr[get-ctx, all-args.tail map arg => arg to-str]
	res handle-exceptions
	res

# Each thread will get the thread ID, and the common arguments.
.run-threads void(n-threads nat64, gctx global-ctx) noctx unsafe summon
	threads pthread_t mut* = n-threads unmanaged-alloc-elements
	thread-args by-val<thread-args> mut* = n-threads unmanaged-alloc-elements

	actual-n-threads = n-threads wrap-sub 1

	0 start-threads-recur actual-n-threads, threads, thread-args, gctx
	actual-n-threads thread-function gctx
	0 join-threads-recur actual-n-threads, threads.as-const

	threads unmanaged-free
	thread-args unmanaged-free

.start-threads-recur void
	i nat64
	n-threads nat64
	threads pthread_t mut*
	thread-args-begin by-val<thread-args> mut*
	gctx global-ctx
spec
	noctx
	unsafe
	summon
body
	if i != n-threads
		thread-arg-ptr = thread-args-begin + i
		*thread-arg-ptr := i, gctx
		thread-ptr = threads + i
		thread-ptr.as-cell create-one-thread thread-arg-ptr.as-any-mut-ptr, &thread-fun
		i wrap-add 1 start-threads-recur n-threads, threads, thread-args-begin, gctx

.thread-fun any-mut-ptr(args-ptr any-mut-ptr) noctx unsafe summon
	args thread-args = args-ptr as-ref
	args.thread-id thread-function args.gctx
	null

.join-threads-recur void(i nat64, n-threads nat64, threads pthread_t*) noctx unsafe summon
	if i != n-threads
		threads[i] join-one-thread
		i wrap-add 1 join-threads-recur n-threads, threads

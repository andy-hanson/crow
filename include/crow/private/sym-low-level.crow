no-std
import
	../bool: bool
	../col/dict: get-or-add, to-dict
	../col/list: fold, for-loop, size, to-list
	../compare: comparison
	../misc: void
	../number: +
	../ptr: ==, +, as-const, mut-ptr, set-deref
	../str: ==, <=>, char8, char8s, c-str, hash-mix, literal, str
	../tuple: a, b, new
	./alloc: unmanaged-alloc-elements
	./bootstrap: new-sym, static-syms
	./runtime: get-global-ctx, global-ctx, set-syms-table, syms-lock, syms-table
	./thread-utils: with-lock
export
	# TODO: ensure that 'sym' constructor from c-str is not exported
	../private/bootstrap: sym, to-c-str

== bool(a sym, b sym) noctx trusted
	# (this is pointer equality)
	a.to-c-str == b.to-c-str

# Same as `a.to-str <=> b.to-str`.
<=> comparison(a sym, b sym)
	a.to-str <=> b.to-str

to-str str(a sym) noctx trusted
	a.to-c-str literal

init-symbol-table void(a global-ctx)
	a.syms-table := (for x : static-syms.to-list; (x.to-str, x)) to-dict

# TODO: name 'to-sym'
###
Interns a string.
This is O(log n), where 'n' is the number of unique syms that exist.
###
str-to-sym sym(a str) trusted
	gctx = get-global-ctx
	&gctx.syms-lock with-lock () =>
		match gctx.syms-table get-or-add a, () => a.to-malloced-c-str new-sym
		as got x
			x
		as added pair
			gctx.syms-table := pair a
			pair b

.to-malloced-c-str c-str(a str) unsafe
	res char8 mut* = a.char8s.size + 1 unmanaged-alloc-elements
	end = res fold a.char8s, (cur, x) =>
		*cur := x
		cur + 1
	assert end == res + a.char8s.size
	*end := "\0"
	res as-const

no-std
import
	sys/execinfo: backtrace
	../col/private/arr-low-level: new, subscript
	../compare: <, <=, >
	../misc: new, void
	../ptr:
		==, <=>, +, *, any-const-ptr, as-const, const-ptr, mut-ptr, set-deref, set-subscript,
		subscript
	../version: is-windows
	./alloc: copy-data-from, try-alloc-uninitialized
	./bootstrap:
		all-funs, begin-ptr, c-str, fun-name, fun-name-and-ptr, fun-ptr, hard-assert, new, none,
		opt, size, some
	./number-low-level:
		==, <=>, nat64, to-int64, unsafe-div, unsafe-to-int64, unsafe-to-int32,
		unsafe-to-nat64, wrap-add, wrap-sub
	./range-low-level: ..
export
	./bootstrap: backtrace, return-stack

get-backtrace backtrace() unsafe
	# Being careful to avoid calling functions that may throw here
	if is-windows
		(),
	elif arrs ?= try-alloc-backtrace-arrs
		n-code-ptrs = arrs backtrace-and-get-n-code-ptrs
		hard-assert: n-code-ptrs <= code-ptrs-size
		arrs fill-arrs n-code-ptrs
	else
		(),

# TODO:INLINE
.backtrace-and-get-n-code-ptrs nat64(arrs backtrace-arrs) unsafe
	(arrs.code-ptrs backtrace code-ptrs-size.unsafe-to-int64.unsafe-to-int32).to-int64 unsafe-to-nat64

# TODO:INLINE
.fill-arrs backtrace(arrs backtrace-arrs, n-code-ptrs nat64) unsafe
	arrs.funs copy-data-from all-funs.begin-ptr, all-funs.size
	arrs.funs set-sort all-funs.size
	end-code-names = arrs.code-names + n-code-ptrs
	arrs.code-names fill-code-names end-code-names, arrs.code-ptrs.as-const, arrs.funs.as-const
	arrs.code-names.as-const[0 .. n-code-ptrs],

.fill-code-names void
	code-names c-str mut*
	end-code-names c-str mut*
	code-ptrs any-const-ptr*
	funs fun-name-and-ptr*
spec
	unsafe
body
	if code-names < end-code-names
		*code-names := *code-ptrs get-fun-name funs, all-funs.size
		code-names + 1 fill-code-names end-code-names, code-ptrs + 1, funs

.code-ptrs-size nat64()
	8

.backtrace-arrs record mut
	code-ptrs any-const-ptr mut*
	code-names c-str mut*
	funs fun-name-and-ptr mut*

.try-alloc-backtrace-arrs backtrace-arrs?() unsafe
	size = 8
	# TODO: support type on left of '?='
	if code-ptrs ?= size.try-alloc-uninitialized :: any-const-ptr mut*?
		if code-names ?= size.try-alloc-uninitialized :: c-str mut*?
			if funs ?= all-funs.size.try-alloc-uninitialized :: fun-name-and-ptr mut*?
				(code-ptrs, code-names, funs) some
			else
				none
		else
			none
	else
		none

.get-fun-name c-str(code-ptr any-const-ptr, funs fun-name-and-ptr*, size nat64) unsafe noctx
	# TODO: this will fail to give a name for the last function
	if size < 2
		"<<UNKNOWN>>"
	elif code-ptr < funs[1].fun-ptr
		funs->fun-name
	else
		code-ptr get-fun-name funs + 1, (size wrap-sub 1)

# TODO: use the one from sort.crow
.set-sort void(a fun-name-and-ptr mut*, size nat64) noctx unsafe
	if size > 1
		a swap 0, (size unsafe-div 2)
		after-pivot = a set-partition a->fun-ptr, 1, (size wrap-sub 1)
		new-pivot-index = after-pivot wrap-sub 1
		a swap 0, new-pivot-index
		a set-sort new-pivot-index
		a + after-pivot set-sort (size wrap-sub after-pivot)

.set-partition nat64(a fun-name-and-ptr mut*, pivot any-const-ptr, l nat64, r nat64) noctx unsafe
	if l <= r
		if a[l].fun-ptr < pivot
			a set-partition pivot, (l wrap-add 1), r
		else
			a swap l, r
			a set-partition pivot, l, (r wrap-sub 1)
	else
		l

.swap<a> void(a a mut*, lo nat64, hi nat64) noctx unsafe
	temp = a[lo]
	a[lo] := a[hi]
	a[hi] := temp

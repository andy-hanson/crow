no-std
import
	system/win32:
		CONTEXT, CONTEXT_FULL, GetCurrentProcess, GetCurrentThread, HANDLE,
		IMAGE_FILE_MACHINE_AMD64, new, RtlCaptureContext
	system/windows/DbgHelp:
		AddrPC, FileName, IMAGEHLP_LINE64, IMAGEHLP_SYMBOL64, LineNumber, Name, new, Offset,
		STACKFRAME64, StackWalk64, SymCleanup, SymGetLineFromAddr64, SymGetSymFromAddr64,
		SymFunctionTableAccess64, SymInitialize, SYMOPT_LOAD_LINES, SymSetOptions
	../bool: &&, true
	../col/array: array, new
	../col/mut-array: as-mut-array, cast-immutable
	../compare: !=, >
	../misc: new, void
	../option: new, option
	../pointer:
		==, <=>, +, *, as-const, mem-copy, mut-pointer, null, pointer-cast, set-deref, size-of
	../version: is-interpreted, is-stack-trace-enabled
	./alloc: gc-ctx, try-allocate
	./bootstrap: hard-assert
	./c-string-util: char8, c-string, c-string-size-incl-nul
	./libunwind:
		new, unw_context_t, unw_cursor_t, unw_getcontext, unw_get_proc_name, unw_init_local,
		unw_step, unw_word_t
	./number-low-level: ==, <=>, nat8, nat32, nat64, unsafe-to, wrap-add, wrap-sub
	./range-low-level: ..
	./thread-utils: acquire, global-lock, release

+native-backtrace alias
	backtrace-entry array
# 'extern' because interpreter also declares this type
# TODO:PRIVATE? ---------------------------------------------------------------------------------------------------------
+backtrace-entry record extern
	# These point into either GC or permanent memory. May be empty strings, never null.
	function-name c-string
	file-path c-string
	# 1-indexed. 0 if unknown.
	line-number nat32
	# 1-indexed. 0 if unknown.
	column-number nat32

# Taking 'gc' explicitly to avoid accidental uses
native-backtrace native-backtrace(gc gc-ctx, skip nat64) bare, unsafe, native extern
	guard is-stack-trace-enabled
	max-entries nat64 = 16
	guard entries ?= (gc try-allocate max-entries)::backtrace-entry mut*?
	if is-interpreted
		end = entries interpreter-backtrace max-entries, skip
		gc copy-strings entries, end
		(entries .. end).as-mut-array.cast-immutable
	elif extern windows
		if extern DbgHelp
			gc native-backtrace-windows entries, max-entries, (skip wrap-add 2)
	elif extern unwind
		gc native-backtrace-libunwind entries, max-entries, (skip wrap-add 1)

###
Implemented by interpreter only.
Returns the pointer to after the last entry written.
Result entries are temporary, must copy!
###
-interpreter-backtrace backtrace-entry mut*(
	out backtrace-entry mut*,
	max-entries nat64,
	skip nat64,
) builtin, bare, unsafe

-copy-strings void(
	gc gc-ctx,
	begin backtrace-entry mut*,
	end backtrace-entry mut*,
) bare, unsafe, native extern
	cur mut = begin
	until cur == end
		*cur := gc copy-c-strings *cur
		cur +:= 1

-copy-c-strings backtrace-entry(gc gc-ctx, a backtrace-entry) bare, unsafe, native extern
	(gc copy-c-string-or-empty a.function-name), (gc copy-c-string-or-empty a.file-path),
		a.line-number, a.column-number

-native-backtrace-windows native-backtrace(
	gc gc-ctx,
	entries backtrace-entry mut*,
	max-entries nat64,
	skip nat64,
) bare, unsafe, (DbgHelp, native, windows) extern
	global-lock acquire
	finally global-lock release
	guard vars ?= gc try-alloc-windows-backtrace-vars
	gc get-windows-backtrace-with-vars entries, max-entries, (skip wrap-add 1), vars

-get-windows-backtrace-with-vars native-backtrace(
	gc gc-ctx,
	entries backtrace-entry mut*,
	max-entries nat64,
	skip nat64,
	vars windows-backtrace-vars,
) bare, unsafe, (DbgHelp, native, windows) extern
	process = GetCurrentProcess
	thread = GetCurrentThread
	if process SymInitialize null, true
		# For some reason this has to be on the stack. Failed when in 'windows-backtrace-vars'
		context mut CONTEXT = CONTEXT_FULL,
		&context RtlCaptureContext
		frame mut STACKFRAME64 = &context,

		_ = SYMOPT_LOAD_LINES SymSetOptions
		max-end = entries + max-entries
		end = gc windows-walk-backtrace entries,
			max-end, skip, process, thread, &context, &frame, vars
		ok = process SymCleanup
		ok hard-assert
		(entries .. end).as-mut-array cast-immutable

-windows-backtrace-vars record by-val, mut
	offset nat64 mut*
	displacement nat32 mut*
	symbol IMAGEHLP_SYMBOL64 mut*
	line IMAGEHLP_LINE64 mut*

-try-alloc-windows-backtrace-vars windows-backtrace-vars?(
	gc gc-ctx,
) bare, unsafe, (native, windows) extern
	guard offset ?= gc.try-allocate :: nat64 mut*?
	guard displacement ?= gc.try-allocate :: nat32 mut*?
	symbol-max-name-length nat64 = 255
	symbol-size = size-of@IMAGEHLP_SYMBOL64 wrap-add symbol-max-name-length wrap-add 1
	guard symbol-buffer ?= (gc try-allocate symbol-size) :: nat8 mut*?
	symbol IMAGEHLP_SYMBOL64 mut* = symbol-buffer pointer-cast
	*symbol := symbol-max-name-length.unsafe-to,
	guard line ?= gc.try-allocate :: IMAGEHLP_LINE64 mut*?
	*line := ()
	(offset, displacement, symbol, line),

-windows-walk-backtrace backtrace-entry mut*(
	gc gc-ctx,
	out backtrace-entry mut*,
	out-end backtrace-entry mut*,
	skip nat64,
	process HANDLE,
	thread HANDLE,
	context CONTEXT mut*,
	frame STACKFRAME64 mut*,
	vars windows-backtrace-vars,
) bare, unsafe, (DbgHelp, native, windows) extern
	if out == out-end
		out
	elif IMAGE_FILE_MACHINE_AMD64 StackWalk64 process, thread, frame,
			context.as-const.pointer-cast, null, &SymFunctionTableAccess64, null, null
		if skip == 0
			*out := gc windows-backtrace-entry process, frame, vars
			gc windows-walk-backtrace out + 1, out-end, 0, process, thread, context, frame, vars
		else
			gc windows-walk-backtrace out, out-end, (skip wrap-sub 1),
				process, thread, context, frame, vars
	else
		out

-windows-backtrace-entry backtrace-entry(
	gc gc-ctx,
	process HANDLE,
	frame STACKFRAME64 mut*,
	vars windows-backtrace-vars,
) bare, unsafe, (DbgHelp, native, windows) extern
	name c-string = if process SymGetSymFromAddr64 frame->AddrPC.Offset, vars.offset, vars.symbol
		gc copy-c-string-or-empty &vars.symbol->Name
	else
		""
	if process SymGetLineFromAddr64 frame->AddrPC.Offset, vars.displacement, vars.line
		name, (gc copy-c-string-or-empty vars.line->FileName), vars.line->LineNumber, 0
	else
		name, "", 0, 0

-copy-c-string-or-empty c-string(gc gc-ctx, a c-string) bare, unsafe, native extern
	size = a c-string-size-incl-nul
	if out ?= (gc try-allocate size) :: char8 mut*?
		out mem-copy a, size
		out as-const
	else
		""

-native-backtrace-libunwind native-backtrace(
	gc gc-ctx,
	entries backtrace-entry mut*,
	max-entries nat64,
	skip nat64,
) bare, unsafe, (native, unwind) extern
	cursor mut unw_cursor_t = ()
	context mut unw_context_t = ()
	err0 = &context unw_getcontext
	err0 == 0 hard-assert
	err1 = &cursor unw_init_local &context
	err1 == 0 hard-assert
	# omit 'native-backtrace' in addition to other skipped
	&cursor unwind-skip (skip wrap-add 1)
	end = gc unwind entries, entries + max-entries, &cursor
	(entries .. end).as-mut-array cast-immutable

-unwind-skip void(cursor unw_cursor_t mut*, skip nat64) bare, unsafe, unwind extern
	unless skip == 0
		_ = cursor unw_step
		cursor unwind-skip (skip wrap-sub 1)

# Returns one past the last entry written to
-unwind backtrace-entry mut*(
	gc gc-ctx,
	out-begin backtrace-entry mut*,
	out-end backtrace-entry mut*,
	cursor unw_cursor_t mut*,
) bare, unsafe, (native, unwind) extern
	out-cur mut = out-begin
	loop
		guard out-cur != out-end && cursor.unw_step > 0 : break out-cur
		offset mut unw_word_t = 0
		buf-size nat64 = 256
		buf-try char8 mut*? = gc try-allocate buf-size
		if buf ?= buf-try
			err = cursor unw_get_proc_name buf, buf-size, &offset
			*out-cur := if err == 0
				# TODO: get filename and line number too
				buf.as-const, "", 0, 0
			else
				"", "", 0, 0
			out-cur +:= 1
			continue
		else
			*out-cur := "<<out of memory for backtrace>>", "", 0, 0
			break out-cur + 1

no-std
import
	../bool: bool
	../col/array: iterate, size
	../col/collection: for-loop
	../col/map: ~=, build, get-or-add
	../compare: comparison
	../misc: void
	../number: +
	../pointer: ==, +, *, as-const, mut-pointer, set-deref
	../string: ==, <=>, char8, c-string, hash-mix, iterate, literal, size, string
	../tuple: new
	./alloc: unmanaged-alloc-elements
	./bootstrap: static-symbols, symbol-to-c-string
	./runtime: get-global-ctx, global-ctx, set-deref-symbols-table, symbols-lock, symbols-table
	./thread-utils: with-lock
export
	../private/bootstrap: symbol

+== bool(a symbol, b symbol) bare
	# (this is pointer equality)
	trusted a.symbol-to-c-string == b.symbol-to-c-string

# Same as `a.to::string <=> b.to::string`.
+<=> comparison(a symbol, b symbol)
	a.to::string <=> b.to

+to string(a symbol) bare
	a.symbol-to-c-string literal

init-symbol-table void(a global-ctx mut*) unsafe
	a->symbols-table := for x : static-symbols
		x.to, x

###
Interns a string.
This is O(log n), where 'n' is the number of unique symbols that exist.
###
+to symbol(a string)
	gctx = trusted get-global-ctx
	trusted gctx.symbols-lock with-lock () =>
		match gctx->symbols-table get-or-add a, () => a.to-malloced-c-string,
		as got x
			x
		as added new-table, symbol
			gctx->symbols-table := new-table
			symbol

-to-malloced-c-string c-string(a string) unsafe
	res char8 mut* = a.size + 1 unmanaged-alloc-elements
	cur mut = res
	for x : a
		*cur := x
		cur +:= 1
	assert cur == res + a.size
	*cur := "\0"
	res as-const

no-std
import
	../bool: bool
	../col/dict: get-or-add, to-dict
	../col/list: fold, for-loop, size, to-list
	../compare: comparison
	../misc: void
	../number: +
	../ptr: ==, +, as-const, mut-ptr, set-deref
	../string: ==, <=>, char8, char8s, c-string, hash-mix, literal, string
	../tuple: a, b, new
	./alloc: unmanaged-alloc-elements
	./bootstrap: new-symbol, static-symbols
	./runtime: get-global-ctx, global-ctx, set-symbols-table, symbols-lock, symbols-table
	./thread-utils: with-lock
export
	# TODO: ensure that 'symbol' constructor from c-string is not exported
	../private/bootstrap: symbol, to-c-string

== bool(a symbol, b symbol) noctx trusted
	# (this is pointer equality)
	a.to-c-string == b.to-c-string

# Same as `a.to-string <=> b.to-string`.
<=> comparison(a symbol, b symbol)
	a.to-string <=> b.to-string

to-string string(a symbol) noctx trusted
	a.to-c-string literal

init-symbol-table void(a global-ctx)
	a.symbols-table := (for x : static-symbols.to-list; (x.to-string, x)) to-dict

# TODO: name 'to-symbol'
###
Interns a string.
This is O(log n), where 'n' is the number of unique symbols that exist.
###
string-to-symbol symbol(a string) trusted
	gctx = get-global-ctx
	&gctx.symbols-lock with-lock () =>
		match gctx.symbols-table get-or-add a, () => a.to-malloced-c-string new-symbol
		as got x
			x
		as added pair
			gctx.symbols-table := pair a
			pair b

.to-malloced-c-string c-string(a string) unsafe
	res char8 mut* = a.char8s.size + 1 unmanaged-alloc-elements
	end = res fold a.char8s, (cur, x) =>
		*cur := x
		cur + 1
	assert end == res + a.char8s.size
	*end := "\0"
	res as-const

no-std
import
	../bool: bool
	../col/array: array, iterate, size
	../col/collection: for-loop
	../col/list: iterate, list
	../col/map: ~=, build, get-or-add
	../compare: comparison
	../misc: void
	../number: +
	../pointer: ==, +, *, as-const, mut-pointer, set-deref
	../string: ==, <=>, as-string, char8, c-string, hash-mix, size-char8s, string, to
	../tuple: new
	./alloc: unmanaged-alloc-uninitialized-elements
	./bootstrap: symbol-to-c-string, todo
	./runtime: get-global-ctx, global-ctx, set-deref-symbols-table, symbols-lock, symbols-table
	./thread-utils: with-lock
export
	../private/bootstrap: symbol

+== bool(a symbol, b symbol) bare
	# (this is pointer equality)
	trusted a.symbol-to-c-string == b.symbol-to-c-string

# Same as `a.to::string <=> b.to::string`.
+<=> comparison(a symbol, b symbol)
	a.to::string <=> b.to

+to string(a symbol)
	trusted a.symbol-to-c-string as-string

init-symbol-table void(a global-ctx mut*) unsafe
	a->symbols-table := for x : static-symbols
		x.to, x

# All symbols that exist in the compiled code, in arbitrary order
-static-symbols symbol array() builtin, bare

###
Interns a string.
This is O(log n), where 'n' is the number of unique symbols that exist.
###
+to symbol(a string) trusted
	if extern native
		gctx = get-global-ctx
		gctx.symbols-lock with-lock () =>
			match gctx->symbols-table get-or-add a, () => a.to-malloced-c-string,
			as got x
				x
			as added new-table, symbol
				gctx->symbols-table := new-table
				symbol
	else
		# TODO: In JS, 'symbol' and 'string' will just be the same type ---------------------------------------------------
		todo

-to-malloced-c-string c-string(a string) unsafe, native extern
	res char8 mut* = a.size-char8s + 1 unmanaged-alloc-uninitialized-elements
	cur mut = res
	for x : a.to::char8[]
		*cur := x
		cur +:= 1
	assert cur == res + a.size-char8s
	*cur := "\0"
	res as-const

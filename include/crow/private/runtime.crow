no-std
import
	../bool: &&, ||, bool, false, true
	../col/array: array
	../col/map: empty-map, map
	../exception: exception, to
	../fun-util: subscript
	../io/print: err, print, print-no-newline
	../io/private/time-low-level: get-monotime-nsec, timestamp
	../log: default-log-handler, set-log-handler, log-handler
	../misc: new, void
	../number: ==, nat64
	../option: is-empty, option
	../pointer: *, as-const, mut-pointer
	../string: literal, string
	../version: is-wasm
	./alloc:
		gc, gc-add-root, gc-begin, gc-complete, gc-end, init, needs-gc, mutator-begin, mutator-end,
		uninit
	./bootstrap: hard-assert, new, symbol
	./task-queue:
		action, add-gc-roots, destroy, enqueue-task, enqueue-tasks, enqueue-timed-task, exclusion,
		init, pop-task, release-exclusion, slow-is-empty, task, task-queue, uninit
	./thread-utils:
		acquire, broadcast, condition, decrement, destroy-condition, get-and-increment,
		get-sequence, increment-and-get, init, lock, release, thread-safe-counter, uninit, wait-on

get-global-ctx global-ctx mut*() unsafe
	global-ctx-var

# TODO: this should be a global instead
-global-ctx-var thread-local(global-ctx mut*)

# This fun is required by the compiler.
cur-exclusion exclusion() unsafe
	cur-exclusion-var

-cur-exclusion-var thread-local(exclusion)

global-ctx record by-val, mut
	global-lock mut lock
	may-be-work-to-do mut condition
	# Set to true the first time the default exception handler is invoked.
	# Can never be unset.
	any-unhandled-exceptions mut bool

	gc mut gc

	# protected by 'tasks-lock'
	tasks mut task-queue
	symbols-table mut symbol[string]
	# If there's an uncaught exception (e.g. in 'call-ref-and-drop'), we'll call this.
	# Default is to print it and set `gctx.any-unhandled-exceptions`
	exception-handler mut fun void(exception)
	# TODO: this should be a `global`. But need to atomically set.
	default-log-handler mut log-handler

	# All below must not be GC allocated

	symbols-lock mut lock
	# protects 'tasks'
	-tasks-lock mut lock
	-n-threads nat64
	-n-waiting-threads mut thread-safe-counter
	-next-exclusion mut thread-safe-counter
	-is-shut-down mut bool

get-global-lock lock mut*() unsafe
	get-global-ctx.global-lock

-thread-id-var thread-local(nat64)

# This is not 'bare' since a non-crow thread won't have an ID
+cur-thread-id nat64() unsafe
	thread-id-var

uninit global-ctx(n-threads nat64) bare, summon, unsafe
	uninit, uninit, false, uninit, uninit, empty-map, (exn => exn default-exception-handler), \
		(log => log default-log-handler), uninit, uninit, n-threads, uninit, uninit, false

init void(a global-ctx mut*) bare, unsafe
	a.global-lock init
	a.may-be-work-to-do init
	a.gc init a->n-threads
	a.tasks init
	a.symbols-lock init
	a.tasks-lock init
	a.n-waiting-threads init
	a.next-exclusion init

destroy void(a global-ctx mut*) bare, unsafe
	a.tasks destroy
	a.may-be-work-to-do destroy-condition

new-exclusion exclusion(a global-ctx mut*) bare
	trusted a.next-exclusion get-and-increment

default-exception-handler void(e exception) summon, unsafe
	err print-no-newline "Uncaught exception: "
	err print "{e}"
	get-global-ctx->any-unhandled-exceptions := true

enqueue-task-no-exclusion void(a global-ctx mut*, action act void()) unsafe
	a enqueue-task a.new-exclusion, action

enqueue-task void(a global-ctx mut*, exclusion exclusion, action act void()) unsafe
	a enqueue-task (exclusion, action)

enqueue-task void(a global-ctx mut*, task task) bare, unsafe
	a.tasks-lock acquire
	a.tasks enqueue-task task
	a.tasks-lock release
	a.may-be-work-to-do broadcast

enqueue-tasks void(a global-ctx mut*, tasks task array) bare, unsafe
	a.tasks-lock acquire
	a.tasks enqueue-tasks tasks
	a.tasks-lock release
	a.may-be-work-to-do broadcast

enqueue-timed-task-no-exclusion void(a global-ctx mut*, time timestamp, action act void()) unsafe
	a.tasks-lock acquire
	a.tasks enqueue-timed-task time, (a.new-exclusion, action)
	a.tasks-lock release
	a.may-be-work-to-do broadcast

thread-function void(thread-id nat64, gctx global-ctx mut*) bare, summon, unsafe
	thread-id-var := thread-id
	loop
		# Get a task to do; or sleep.
		last-checked = gctx.may-be-work-to-do get-sequence
		match gctx choose-task
		as task t
			gctx do-task t
			continue
		as gc
			gctx.may-be-work-to-do broadcast
			gctx do-gc
			continue
		as wait-for-task wait-until-time
			gctx.may-be-work-to-do wait-on wait-until-time, last-checked
			gctx.n-waiting-threads decrement
			continue
		as shut-down
			break gctx thread-shut-down

-do-task void(gctx global-ctx mut*, task task) bare, summon, unsafe
	gctx before-task task.exclusion
	task.action invoke-action
	gctx.tasks-lock acquire
	gctx.tasks release-exclusion task.exclusion
	gctx.tasks-lock release
	after-task

-do-gc void(gctx global-ctx mut*) bare, unsafe
	gc = gctx gc
	if gc gc-begin
		gctx.as-const.tasks add-gc-roots gc
		gc gc-add-root gctx->symbols-table
		gc gc-complete
	gc gc-end

-invoke-action void(action act void()) force-ctx
	action[]

-thread-shut-down void(gctx global-ctx mut*) bare, summon, unsafe
	gctx.may-be-work-to-do broadcast
	gctx.tasks-lock acquire
	gctx.as-const.tasks.slow-is-empty hard-assert
	gctx.tasks-lock release

before-task void(gctx global-ctx mut*, exclusion exclusion) bare, unsafe
	global-ctx-var := gctx
	cur-exclusion-var := exclusion
	gctx.gc mutator-begin
	gctx->default-log-handler set-log-handler

after-task void() bare, unsafe
	mutator-end

-choose-task-result union mut
	task task
	gc
	# No task to do now, but wait on 'may-be-work-to-do'.
	# Timestamp is time of the first first timed task, if any.
	wait-for-task timestamp?
	# No task to do now or ever, so shut down
	shut-down

-choose-task choose-task-result(gctx global-ctx mut*) bare, summon, unsafe
	cur-time = if is-wasm
		0
	else
		get-monotime-nsec
	gctx.tasks-lock acquire

	res = if gctx.gc->needs-gc
		gc
	else
		match gctx.tasks pop-task cur-time
		as task t
			t task
		as no-task first-task-time
			n-waiting = gctx.n-waiting-threads increment-and-get
			if (n-waiting == gctx->n-threads && first-task-time.is-empty) || gctx->is-shut-down
				# Can't possibly be any more tasks:
				# No timed tasks, no threads doing work to add tasks.
				gctx->is-shut-down := true
				shut-down
			else
				first-task-time wait-for-task

	gctx.tasks-lock release
	res

no-std
import
	../col/arr: arr, noctx-at, size, subscript
	../compare: >, min
	../exception: exception, to-str
	../io/print: print-err, print-err-no-newline
	../io/time-low-level: get-monotime-nsec, timestamp
	../misc: new, void
	../opt: new, opt
	../ptr: as-any-mut-ptr, as-ref, by-val, ref-of-val
	./alloc: gc, get-gc-ctx, needs-gc, return-gc-ctx, run-garbage-collection
	./bool-low-level: !, &&, ||, bool, false, true
	./bootstrap:
		call-with-ctx, ctx, exclusion, gc-ctx-ptr, gctx-ptr, get-ctx, hard-assert, hard-forbid,
		island-and-exclusion, island-id, lock, log-ctx-ptr, nat64, new, sym, thread-local-stuff
	./exception-low-level: exception-ctx
	./log-low-level: default-log-handler, log-ctx, log-handler, set-handler
	./number-low-level: ==, <=>, wrap-add, wrap-sub
	./perf-low-level: perf-ctx
	./task-queue:
		action, any-tasks, exclusion, first-task-time, insert-task, is-empty, new, no-task,
		no-timestamp, pop-task, return-task, task, task-queue, task-queue-node
	./thread-utils:
		acquire, broadcast, condition, get-and-increment, get-sequence, lock-by-val, new,
		release, thread-safe-counter, wait-on

get-global-ctx global-ctx() unsafe
	get-ctx.gctx-ptr as-ref

get-island island(island-id island-id) unsafe
	get-global-ctx.islands[island-id]

get-cur-island island() unsafe
	get-ctx.island-id get-island

# This fun is required by the compiler.
cur-island-and-exclusion island-and-exclusion() unsafe
	c = get-ctx
	c.island-id, c.exclusion

dynamic-sym-node record
	by-ref
	sym sym
	next dynamic-sym-node?

global-ctx record mut
	lk by-val lock
	print-lock by-val lock
	syms-lock by-val lock
	# Dynamically allocated array. Terminated by a null sym. Capacity is a power of 2.
	dynamic-syms mut dynamic-sym-node?
	# TODO: fix-arr
	islands mut island[]
	# if a thread finds no work to do, it decrements this and waits on 'may-be-work-to-do'.
	# if the last thread decrements this, it can't go to sleep!
	# But if there's no work to do, it can set 'is-shut-down' and wake up the other threads so they can shut down too.
	n-live-threads mut nat64
	may-be-work-to-do by-val condition
	is-shut-down mut bool
	# Set to true the first time the default exception handler is invoked.
	# Can never be unset.
	any-unhandled-exceptions mut bool

island record mut
	gctx global-ctx
	id island-id
	gc by-val gc
	gc-root by-val island-gc-root
	# All below must not be GC allocated

	# these variables are all protected by tasks-lock
	tasks-lock by-val lock
	# Number of threads currently performing tasks in this island
	n-threads-running mut nat64
	# not protected by tasks-lock, thread-safe on its own
	next-exclusion by-val thread-safe-counter

island-gc-root record mut
	tasks by-val task-queue
	# If there's an uncaught exception (e.g. in 'call-ref-and-drop'), we'll call this.
	# Default is to print it and set `gctx.any-unhandled-exceptions`
	exception-handler mut fun void(exception)
	log-handler mut log-handler

.tasks task-queue(a island) noctx unsafe
	a.gc-root.ref-of-val.tasks ref-of-val

exception-handler fun void(exception)(a island) trusted
	a.gc-root.ref-of-val exception-handler

new-exclusion exclusion(v island) noctx trusted
	v.next-exclusion.ref-of-val get-and-increment

island by-val island(gctx global-ctx, id island-id, max-threads nat64) summon noctx unsafe
	q by-val task-queue = max-threads,
	gc-root by-val island-gc-root = q, (exn => exn default-exception-handler), log =>
		log default-log-handler
	gctx, id, gc, gc-root, lock-by-val, 0, ()

default-exception-handler void(e exception) summon unsafe
	print-err-no-newline: "uncaught exception: "
	print-err: e to-str
	get-global-ctx.any-unhandled-exceptions := true

# TODO: move to exception.crow ?
set-this-islands-exception-handler void(exception-handler fun void(exception)) summon trusted
	get-cur-island.gc-root.ref-of-val.exception-handler := exception-handler

add-task void(a island, timestamp timestamp, exclusion exclusion, action act void()) unsafe
	# Do allocation outside of the lock
	node task-queue-node = (timestamp, exclusion, action),

	a.tasks-lock.ref-of-val acquire
	a.tasks insert-task node
	a.tasks-lock.ref-of-val release

	a.gctx.may-be-work-to-do.ref-of-val broadcast

add-task void(a island, exclusion exclusion, action act void()) unsafe
	a add-task no-timestamp, exclusion, action

thread-function void(thread-id nat64, gctx global-ctx) noctx unsafe summon
	ectx = exception-ctx
	log-ctx = log-ctx
	perf-ctx = perf-ctx
	print-lock = gctx.print-lock ref-of-val
	ectx-ptr = ectx.ref-of-val as-any-mut-ptr
	log-ctx-ptr = log-ctx.ref-of-val as-any-mut-ptr
	perf-ptr = perf-ctx.ref-of-val as-any-mut-ptr
	tls by-val thread-local-stuff = thread-id, print-lock, ectx-ptr, log-ctx-ptr, perf-ptr
	gctx thread-function-recur tls.ref-of-val

.thread-function-recur void(gctx global-ctx, tls thread-local-stuff) noctx unsafe summon
	if gctx is-shut-down
		gctx.lk.ref-of-val acquire
		# Remove this thread from live threads for good.
		gctx.n-live-threads := gctx.n-live-threads wrap-sub 1
		0 assert-islands-are-shut-down gctx.islands
		gctx.lk.ref-of-val release
	else
		hard-assert: gctx.n-live-threads > 0
		# Get a task to do; or sleep.
		last-checked = gctx.may-be-work-to-do.ref-of-val get-sequence

		match gctx choose-task
		as rslt-chosen-task t
			gctx do-task tls, t
		as rslt-no-chosen-task n
			if n no-tasks-and-last-thread-out
				hard-forbid: gctx is-shut-down
				gctx.is-shut-down := true
				# Wake up sleeping threads so they can shut down
				gctx.may-be-work-to-do.ref-of-val broadcast
			else
				gctx.may-be-work-to-do.ref-of-val wait-on n.first-task-time, last-checked

			gctx.lk.ref-of-val acquire
			# We decremented this while holding the lock, increment it again
			gctx.n-live-threads := gctx.n-live-threads wrap-add 1
			gctx.lk.ref-of-val release

		# Do another task
		gctx thread-function-recur tls

new-ctx by-val ctx(gctx global-ctx, tls thread-local-stuff, island island, exclusion exclusion) noctx unsafe
	gc-ctx = island.gc.ref-of-val get-gc-ctx
	tls.log-ctx-ptr.as-ref.handler := island.gc-root.ref-of-val.log-handler
	gctx.as-any-mut-ptr, island.id, exclusion, gc-ctx.as-any-mut-ptr, tls

.return-ctx void(c ctx) noctx unsafe
	c.gc-ctx-ptr.as-ref return-gc-ctx

.do-task void(gctx global-ctx, tls thread-local-stuff, chosen-task chosen-task) noctx unsafe summon
	island = chosen-task task-island
	match chosen-task.task-or-gc
	as togc-task task
		ctx = gctx new-ctx tls, island, task.exclusion
		task.action call-with-ctx ctx.ref-of-val
		island.tasks-lock.ref-of-val acquire
		island.tasks return-task task
		island.tasks-lock.ref-of-val release
		ctx.ref-of-val return-ctx
	as do-a-gc
		# We avoid running GC twice at once because 'n-threads-running' will be 1 here
		# and 'needs-gc' won't be set to false until the GC is complete
		island.gc.ref-of-val run-garbage-collection island.gc-root
		# We might have avoided doing a task because GC was running.
		# Now those tasks can be done.
		gctx.may-be-work-to-do.ref-of-val broadcast

	# We incremented this if choosing the task.
	island.tasks-lock.ref-of-val acquire
	island.n-threads-running := island.n-threads-running wrap-sub 1
	island.tasks-lock.ref-of-val release

.task-or-gc union mut
	togc-task task
	do-a-gc

.chosen-task record mut
	by-val
	task-island island
	# If none, do GC on the island.
	task-or-gc task-or-gc

.no-chosen-task record
	by-val
	# If true, no threads are doing any work and we should exit the program.
	no-tasks-and-last-thread-out bool
	# WARN: there may be tasks with exclusions before this time
	# This is here to ensure that we stop waiting on 'may-be-work-to-do' when we get to that time
	first-task-time timestamp?

.choose-task-result union mut
	rslt-chosen-task chosen-task
	rslt-no-chosen-task no-chosen-task

.choose-task choose-task-result(gctx global-ctx) noctx unsafe summon
	gctx.lk.ref-of-val acquire

	# TODO: more fair algorithm.
	# This looks for the first island with some work to do.
	# (That is unfair as island 0 will tend to get the most attention.)
	cur-time = get-monotime-nsec
	# TODO: should not need type annotation
	res = match gctx.islands choose-task-recur 0, cur-time, false, ()
	as rslt-chosen-task c
		c rslt-chosen-task
	as rslt-no-chosen-task n
		gctx.n-live-threads := gctx.n-live-threads wrap-sub 1
		no-task-and-last-thread-out = n.no-tasks-and-last-thread-out && gctx.n-live-threads == 0
		# Did not find a task to do.
		# (Tasks may have been added concurrently;
		# this is fine as we're about to wait on a condition and will immediately wake up if so.)
		# Need to do this here while we hold the lock
		(no-task-and-last-thread-out, n.first-task-time) rslt-no-chosen-task

	gctx.lk.ref-of-val release

	res

.choose-task-recur choose-task-result
	islands island[]
	i nat64
	cur-time timestamp
	any-tasks bool
	first-task-time timestamp?
spec
	noctx
	unsafe
body
	if i == islands.size
		(!any-tasks, first-task-time) rslt-no-chosen-task
	else
		island = islands noctx-at i
		chose = island choose-task-in-island cur-time
		match chose
		as tii-task t
			(island, t.togc-task) rslt-chosen-task
		as do-a-gc
			(island, do-a-gc) rslt-chosen-task
		as tii-no-task n
			new-any-tasks = any-tasks || n.any-tasks
			new-first-task-time = first-task-time min-time n.first-task-time
			islands choose-task-recur (i wrap-add 1), cur-time, new-any-tasks, new-first-task-time

.min-time timestamp?(a timestamp?, b timestamp?) noctx
	if ta ?= a
		if tb ?= b
			(ta min tb),
	else
		b

.choose-task-in-island-result union mut
	tii-task task
	do-a-gc
	tii-no-task no-task

.is-no-task bool(a choose-task-in-island-result) noctx
	match a
	as tii-task _
		false
	as do-a-gc
		false
	as tii-no-task _
		true

.choose-task-in-island choose-task-in-island-result(island island, cur-time timestamp) noctx unsafe
	island.tasks-lock.ref-of-val acquire

	# TODO: ref-of-val should be unnecessary for property access ?
	# TODO: should not need type annotation
	res choose-task-in-island-result = if island.gc.ref-of-val.needs-gc
		if island.n-threads-running == 0
			do-a-gc
		else
			# do nothing -- a thread is running on this island
			# we can't do a GC now, but don't want to start a new task either
			# because that would block GC
			(true, ()) tii-no-task
	else
		match island.tasks pop-task cur-time
		as ptr-task t
			t tii-task
		as ptr-no-task n
			n tii-no-task

	unless res is-no-task
		island.n-threads-running := island.n-threads-running wrap-add 1

	island.tasks-lock.ref-of-val release

	res


.assert-islands-are-shut-down void(i nat64, islands island[]) noctx unsafe
	unless i == islands.size
		island = islands noctx-at i

		island.tasks-lock.ref-of-val acquire
		hard-forbid: island.gc.ref-of-val needs-gc
		hard-assert: island.n-threads-running == 0
		hard-assert: island.tasks is-empty
		island.tasks-lock.ref-of-val release

		i wrap-add 1 assert-islands-are-shut-down islands

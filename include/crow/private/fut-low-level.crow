no-std
import
	../opt: new
	../misc: new, void
	../result: err, ok, result
	./bootstrap:
		empty, exception, first, forwarded, fut, fut-state, hard-unreachable, last, lk,
		new, one-task, rejected, resolved, set-last, set-next, set-state, state, tasks
	./runtime: add-task, add-tasks, get-global-ctx
	./task-queue: exclusion, new, task, task-list, task-node
	./thread-utils: acquire, init, lock, release, uninit

unresolved<a> fut a() unsafe
	res fut a = uninit, empty
	res.lock init
	res

.lock<a> lock(a fut a) noctx unsafe
	&a.lk

resolve<a> void(a fut a, value a) unsafe
	a resolve-or-reject value.resolved

reject<a> void(a fut a, err exception) unsafe
	a resolve-or-reject err.rejected

.resolve-or-reject<a> void(a fut a, new-state fut-state a) unsafe
	a.lock acquire
	old-state = a state
	a.state := new-state
	a.lock release
	match old-state
	as empty
		()
	as one-task task
		get-global-ctx add-task task
	as tasks tasks
		get-global-ctx add-tasks tasks
	as forwarded _
		hard-unreachable
	as resolved _
		hard-unreachable
	as rejected _
		hard-unreachable

.or-forwarded<a, b> union sendable
	direct a
	forwarded fut b

# 'a' should be the result of 'unresolved-will-forward'; have it forward to 'target'
forward-to<a> void(a fut a, target fut a) unsafe
	a.lock acquire
	old-state = a state
	a.state := target forwarded
	a.lock release

	match old-state
	as empty
		()
	as one-task task
		target add-task task
	as tasks tasks
		target add-tasks tasks
	as forwarded _
		hard-unreachable
	as resolved _
		hard-unreachable
	as rejected _
		hard-unreachable

add-task<a> void(a fut a, exclusion exclusion, action act void()) unsafe
	a add-task (exclusion, action)

add-task<a> void(a fut a, task task) unsafe
	a add-task (task,)::task-node

.add-task<a> void(a fut a, task task-node) unsafe
	a.lock acquire
	choice add-tasks-choice a = match a state
	as empty
		a.state := task one-task
		added
	as one-task existing-task
		existing-task.next := task,
		a.state := (existing-task, task) tasks
		added
	as tasks existing-tasks
		existing-tasks ~= task
		added
	as forwarded to
		to forward
	as resolved _
		tasks-are-ready
	as rejected _
		tasks-are-ready
	a.lock release

	match choice
	as added
		()
	as forward to
		to add-task task
	as tasks-are-ready
		get-global-ctx add-task task

.add-tasks<a> void(a fut a, tasks task-list) unsafe
	a.lock acquire
	choice add-tasks-choice a = match a state
	as empty
		a.state := tasks tasks
		added
	as one-task existing-task
		existing-task.next := tasks.first,
		a.state := (existing-task, tasks.last) tasks
		added
	as tasks existing-tasks
		existing-tasks ~~= tasks
		added
	as forwarded to
		to forward
	as resolved _
		tasks-are-ready
	as rejected _
		tasks-are-ready
	a.lock release

	match choice
	as added
		()
	as forward to
		to add-tasks tasks
	as tasks-are-ready
		get-global-ctx add-tasks tasks

.add-tasks-choice<a> union sendable
	added
	forward fut a
	tasks-are-ready

.~= void(a task-list, b task-node) noctx
	a.last.next := b,
	a.last := b

.~~= void(a task-list, b task-list) noctx
	a.last.next := b.first,
	a.last := b last

# Assuming the future is resolved, get the result.
get-result<a> result<a, exception>(a fut a) noctx unsafe
	a.lock acquire
	res or-forwarded<result<a, exception>, a> = match a state
	as empty
		hard-unreachable
	as one-task _
		hard-unreachable
	as tasks _
		hard-unreachable
	as forwarded forwarded-to
		forwarded-to forwarded
	as resolved v
		v.ok direct
	as rejected e
		e.err direct
	a.lock release

	match res
	as direct v
		v
	as forwarded to
		to get-result

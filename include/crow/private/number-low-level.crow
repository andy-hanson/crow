no-std
import
	../compare: comparison, equal, greater, less
	./bool-low-level: !, bool
export
	./bootstrap: float32, float64, int8, int16, int32, int64, nat8, nat16, nat32, nat64

<=> comparison(a nat8, b nat8) noctx
	a cmp b
<=> comparison(a nat16, b nat16) noctx
	a cmp b
<=> comparison(a nat32, b nat32) noctx
	a cmp b
<=> comparison(a nat64, b nat64) noctx
	a cmp b
<=> comparison(a int8, b int8) noctx
	a cmp b
<=> comparison(a int16, b int16) noctx
	a cmp b
<=> comparison(a int32, b int32) noctx
	a cmp b
<=> comparison(a int64, b int64) noctx
	a cmp b
<=> comparison(a float64, b float64) noctx
	a cmp b
<=> comparison(a float32, b float32) noctx
	a cmp b

.cmp<a> comparison(a a, b a) noctx less<a>
	if a is-less b
		less
	elif a == b
		equal
	else
		greater

.less<a> spec
	is-less bool(a a, b a)
	== bool(a a, b a)

.is-less bool(a nat8, b nat8) noctx builtin
.is-less bool(a nat16, b nat16) noctx builtin
.is-less bool(a nat32, b nat32) noctx builtin
.is-less bool(a nat64, b nat64) noctx builtin
.is-less bool(a int8, b int8) noctx builtin
.is-less bool(a int16, b int16) noctx builtin
.is-less bool(a int32, b int32) noctx builtin
.is-less bool(a int64, b int64) noctx builtin
.is-less bool(a float32, b float32) noctx builtin
.is-less bool(a float64, b float64) noctx builtin
== bool(a nat8, b nat8) noctx builtin
== bool(a nat16, b nat16) noctx builtin
== bool(a nat32, b nat32) noctx builtin
== bool(a nat64, b nat64) noctx builtin
== bool(a int8, b int8) noctx builtin
== bool(a int16, b int16) noctx builtin
== bool(a int32, b int32) noctx builtin
== bool(a int64, b int64) noctx builtin
== bool(a float32, b float32) noctx builtin
== bool(a float64, b float64) noctx builtin

unsafe-mod nat64(a nat64, b nat64) noctx unsafe builtin

unsafe-to-nat8 nat8(a nat64) noctx unsafe builtin
unsafe-to-nat16 nat16(a nat64) noctx unsafe builtin
unsafe-to-nat32 nat32(a nat64) noctx unsafe builtin
unsafe-to-nat64 nat64(a int64) noctx unsafe builtin

# UB for positive numbers >= 2 ** 63
unsafe-to-int8 int8(a int64) noctx unsafe builtin
unsafe-to-int16 int16(a int64) noctx unsafe builtin
unsafe-to-int32 int32(a int64) noctx unsafe builtin
unsafe-to-int64 int64(a nat64) noctx unsafe builtin

to-nat64 nat64(n nat8) noctx builtin
to-nat64 nat64(n nat16) noctx builtin
to-nat64 nat64(n nat32) noctx builtin

to-int64 int64(i int8) noctx builtin
to-int64 int64(i int16) noctx builtin
to-int64 int64(i int32) noctx builtin

wrap-add nat8(a nat8, b nat8) noctx builtin
wrap-add nat16(a nat16, b nat16) noctx builtin
wrap-add nat32(a nat32, b nat32) noctx builtin
wrap-add nat64(a nat64, b nat64) noctx builtin
wrap-add int8(a int8, b int8) noctx builtin
wrap-add int16(a int16, b int16) noctx builtin
wrap-add int32(a int32, b int32) noctx builtin
wrap-add int64(a int64, b int64) noctx builtin

wrap-sub nat8(a nat8, b nat8) noctx builtin
wrap-sub nat16(a nat16, b nat16) noctx builtin
wrap-sub nat32(a nat32, b nat32) noctx builtin
wrap-sub nat64(a nat64, b nat64) noctx builtin
wrap-sub int8(a int8, b int8) noctx builtin
wrap-sub int16(a int16, b int16) noctx builtin
wrap-sub int32(a int32, b int32) noctx builtin
wrap-sub int64(a int64, b int64) noctx builtin

wrap-mul int8(a int8, b int8) noctx builtin
wrap-mul int16(a int16, b int16) noctx builtin
wrap-mul int32(a int32, b int32) noctx builtin
wrap-mul int64(a int64, b int64) noctx builtin
wrap-mul nat8(a nat8, b nat8) noctx builtin
wrap-mul nat16(a nat16, b nat16) noctx builtin
wrap-mul nat32(a nat32, b nat32) noctx builtin
wrap-mul nat64(a nat64, b nat64) noctx builtin

unsafe-div nat64(a nat64, b nat64) noctx unsafe builtin
unsafe-div int64(a int64, b int64) noctx unsafe builtin

# Equivlaent to `a is-multiple-of 2`
is-even bool(a nat64) trusted
	(a unsafe-mod 2) == 0

# Not even
is-odd bool(a nat64)
	!a.is-even

region constants

min-int8 int8() noctx
	-0x80
min-int16 int16() noctx
	-0x8000
# Lowest possible int32.
min-int32 int32() noctx
	-0x80000000
# Lowest possible int64.
min-int64 int64() noctx
	-0x8000000000000000

max-int8 int8() noctx
	0x7f
max-int16 int16() noctx
	0x7fff
# Highest possible int32.
max-int32 int32() noctx
	0x7fffffff
# Highest possible int64.
max-int64 int64() noctx
	0x7fffffffffffffff

# Highest possible nat8.
max-nat8 nat8() noctx
	0xff
# Highest possible nat16.
max-nat16 nat16() noctx
	0xffff
# Highest possible nat32.
max-nat32 nat32() noctx
	0xffffffff
# Highest possible nat64.
max-nat64 nat64() noctx
	0xffffffffffffffff

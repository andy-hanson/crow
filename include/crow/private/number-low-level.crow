no-std
import
	../compare: >=, comparison, equal, greater, less
	./bool-low-level: bool, not
export
	./bootstrap: float32, float64, int8, int16, int32, int64, nat8, nat16, nat32, nat64

# Same as 0.
new nat8() noctx
	0
new nat16() noctx
	0
new nat32() noctx
	0
new nat64() noctx
	0
new int8() noctx
	0
new int16() noctx
	0
new int32() noctx
	0
new int64() noctx
	0
new float32() noctx
	0
new float64() noctx
	0

<=> comparison(a nat8, b nat8) noctx
	a cmp b
<=> comparison(a nat16, b nat16) noctx
	a cmp b
<=> comparison(a nat32, b nat32) noctx
	a cmp b
<=> comparison(a nat64, b nat64) noctx
	a cmp b
<=> comparison(a int8, b int8) noctx
	a cmp b
<=> comparison(a int16, b int16) noctx
	a cmp b
<=> comparison(a int32, b int32) noctx
	a cmp b
<=> comparison(a int64, b int64) noctx
	a cmp b
<=> comparison(a float64, b float64) noctx
	a cmp b
<=> comparison(a float32, b float32) noctx
	a cmp b

-cmp[t] comparison(a t, b t) noctx, t less
	if a is-less b
		less
	elif a == b
		equal
	else
		greater

-less[t] spec
	is-less bool(a t, b t)
	== bool(a t, b t)

-is-less bool(a nat8, b nat8) builtin, noctx
-is-less bool(a nat16, b nat16) builtin, noctx
-is-less bool(a nat32, b nat32) builtin, noctx
-is-less bool(a nat64, b nat64) builtin, noctx
-is-less bool(a int8, b int8) builtin, noctx
-is-less bool(a int16, b int16) builtin, noctx
-is-less bool(a int32, b int32) builtin, noctx
-is-less bool(a int64, b int64) builtin, noctx
-is-less bool(a float32, b float32) builtin, noctx
-is-less bool(a float64, b float64) builtin, noctx
== bool(a nat8, b nat8) builtin, noctx
== bool(a nat16, b nat16) builtin, noctx
== bool(a nat32, b nat32) builtin, noctx
== bool(a nat64, b nat64) builtin, noctx
== bool(a int8, b int8) builtin, noctx
== bool(a int16, b int16) builtin, noctx
== bool(a int32, b int32) builtin, noctx
== bool(a int64, b int64) builtin, noctx
== bool(a float32, b float32) builtin, noctx
== bool(a float64, b float64) builtin, noctx

unsafe-mod nat64(a nat64, b nat64) builtin, noctx, unsafe

unsafe-to-nat8 nat8(a nat64) builtin, noctx, unsafe
unsafe-to-nat16 nat16(a nat64) builtin, noctx, unsafe
unsafe-to-nat32 nat32(a int32) builtin, noctx, unsafe
unsafe-to-nat32 nat32(a nat64) builtin, noctx, unsafe
unsafe-to-nat64 nat64(a int64) builtin, noctx, unsafe

# UB for positive numbers >= 2 ** 63
unsafe-to-int8 int8(a int64) builtin, noctx, unsafe
unsafe-to-int16 int16(a int64) builtin, noctx, unsafe
unsafe-to-int32 int32(a int64) builtin, noctx, unsafe
unsafe-to-int64 int64(a nat64) builtin, noctx, unsafe

wrap-to-nat32 nat32(a nat64) noctx
	trusted a unsafe-to-nat32

to-nat16 nat16(a nat8) noctx
	trusted a.to-nat64 unsafe-to-nat16
to-nat64 nat64(a nat8) builtin, noctx
to-nat64 nat64(a nat16) builtin, noctx
to-nat32 nat32(a nat16) noctx
	trusted a.to-nat64 unsafe-to-nat32
to-nat64 nat64(a nat32) builtin, noctx

to-int64 int64(a int8) builtin, noctx
to-int64 int64(a int16) builtin, noctx
to-int64 int64(a int32) builtin, noctx

wrap-add nat8(a nat8, b nat8) builtin, noctx
wrap-add nat16(a nat16, b nat16) builtin, noctx
wrap-add nat32(a nat32, b nat32) builtin, noctx
wrap-add nat64(a nat64, b nat64) builtin, noctx

unsafe-add int8(a int8, b int8) builtin, noctx, unsafe
unsafe-add int16(a int16, b int16) builtin, noctx, unsafe
unsafe-add int32(a int32, b int32) builtin, noctx, unsafe
unsafe-add int64(a int64, b int64) builtin, noctx, unsafe

wrap-sub nat8(a nat8, b nat8) builtin, noctx
wrap-sub nat16(a nat16, b nat16) builtin, noctx
wrap-sub nat32(a nat32, b nat32) builtin, noctx
wrap-sub nat64(a nat64, b nat64) builtin, noctx

unsafe-sub int8(a int8, b int8) builtin, noctx, unsafe
unsafe-sub int16(a int16, b int16) builtin, noctx, unsafe
unsafe-sub int32(a int32, b int32) builtin, noctx, unsafe
unsafe-sub int64(a int64, b int64) builtin, noctx, unsafe

wrap-mul nat8(a nat8, b nat8) builtin, noctx
wrap-mul nat16(a nat16, b nat16) builtin, noctx
wrap-mul nat32(a nat32, b nat32) builtin, noctx
wrap-mul nat64(a nat64, b nat64) builtin, noctx

unsafe-mul int8(a int8, b int8) builtin, noctx, unsafe
unsafe-mul int16(a int16, b int16) builtin, noctx, unsafe
unsafe-mul int32(a int32, b int32) builtin, noctx, unsafe
unsafe-mul int64(a int64, b int64) builtin, noctx, unsafe

unsafe-div nat64(a nat8, b nat8) builtin, noctx, unsafe
unsafe-div nat64(a nat16, b nat16) builtin, noctx, unsafe
unsafe-div nat64(a nat32, b nat32) builtin, noctx, unsafe
unsafe-div nat64(a nat64, b nat64) builtin, noctx, unsafe
unsafe-div int16(a int8, b int8) builtin, noctx, unsafe
unsafe-div int16(a int16, b int16) builtin, noctx, unsafe
unsafe-div int32(a int32, b int32) builtin, noctx, unsafe
unsafe-div int64(a int64, b int64) builtin, noctx, unsafe

# Equivlaent to `a is-multiple-of 2`.
is-even bool(a nat64) noctx
	(trusted a unsafe-mod 2) == 0

# Equivalent to `!a.is-even`.
is-odd bool(a nat64) noctx
	!a.is-even

region constants

# Least possible `int8`.
min-int8 int8() noctx
	-0x80
# Least possible `int16`.
min-int16 int16() noctx
	-0x8000
# Least possible `int32`.
min-int32 int32() noctx
	-0x80000000
# Least possible `int64`.
min-int64 int64() noctx
	-0x8000000000000000

# Greatest possible `int8`.
max-int8 int8() noctx
	0x7f
# Greatest possible `int16`.
max-int16 int16() noctx
	0x7fff
# Greatest possible `int32`.
max-int32 int32() noctx
	0x7fffffff
# Greatest possible `int64`.
max-int64 int64() noctx
	0x7fffffffffffffff

# Greatest possible `nat8`.
max-nat8 nat8() noctx
	0xff
# Greatest possible `nat16`.
max-nat16 nat16() noctx
	0xffff
# Greatest possible `nat32`.
max-nat32 nat32() noctx
	0xffffffff
# Greatest possible `nat64`.
max-nat64 nat64() noctx
	0xffffffffffffffff

round-up-to-power-of-two nat64(n nat64) noctx
	# TODO: this needs to throw if 'n' is too big to round up!
	acc mut = 1
	until acc >= n
		acc wrap-mul:= 2
	acc

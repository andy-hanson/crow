no-std
import
	../bool: &&, bool
	../col/array: array, begin, next
	../io/private/time-low-level: timestamp
	../misc: new, void
	../number: ==, <=>, nat64
	../option: option
	../pointer: as-const, const-pointer, mut-pointer
	../tuple: new
	./alloc: gc
	./bare-priority-queue:
		add-gc-roots, bare-priority-queue, dequeue-if-less-or-equal, destroy, enqueue, is-empty,
		new, peek-key
	./bootstrap: cur-exclusion, hard-assert
	./exclusion-queue:
		add-gc-roots, dequeue, destroy, enqueue, exclusion-queue, init, release-exclusion,
		slow-is-empty, uninit
export
	./bootstrap: exclusion, fiber

# WARN: `fiber-queue` is not thread-safe; acquire `fiber-queue-lock` on `global-ctx` first.
fiber-queue record by-val, mut
	-non-timed mut fiber exclusion-queue
	-timed mut (nat64, fiber) bare-priority-queue

# Use for asserts only
slow-is-empty bool(a fiber-queue*) bare, unsafe
	a.non-timed.slow-is-empty && a.timed.is-empty

uninit fiber-queue() bare, unsafe
	uninit, ()

init void(a fiber-queue mut*) bare, unsafe
	a.non-timed init

destroy void(a fiber-queue mut*) bare, unsafe
	a.non-timed destroy
	a.timed destroy

add-gc-roots void(a fiber-queue*, gc gc mut*) bare, unsafe
	a.non-timed add-gc-roots gc
	a.timed add-gc-roots gc

pop-fiber-result union mut
	popped fiber
	# Indicates that there are no fibers that can run now. (There may be exclusions in use though.)
	# If any timed fiber exists, this has the time of the first one.
	no-immediate timestamp?

# Caller should call 'release-exclusion' after running the task
pop-task pop-fiber-result(a fiber-queue mut*, cur-time timestamp) bare, unsafe
	a move-timed-tasks cur-time
	if exclusion, fiber ?= a.non-timed dequeue
		exclusion == fiber.cur-exclusion hard-assert
		fiber popped
	else
		a.timed.as-const.peek-key no-immediate

# Move timed tasks to the non-timed queue if they are ready
-move-timed-tasks void(a fiber-queue mut*, cur-time timestamp) bare, unsafe
	while t ?= a.timed dequeue-if-less-or-equal cur-time
		a.non-timed enqueue t.cur-exclusion, t

release-exclusion void(a fiber-queue mut*, exclusion exclusion) bare, unsafe
	a.non-timed release-exclusion exclusion

enqueue-timed-fiber void(a fiber-queue mut*, time nat64, fiber fiber) bare, unsafe
	a.timed enqueue (time, fiber)

enqueue-fiber void(a fiber-queue mut*, fiber fiber) bare, unsafe
	a.non-timed enqueue fiber.cur-exclusion, fiber

enqueue-fibers void(a fiber-queue mut*, tasks fiber array) bare, unsafe
	cur mut = tasks begin
	while fiber, next ?= cur next
		a enqueue-fiber fiber
		cur := next

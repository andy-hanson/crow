# The compiler expects many common types to appear in this file. See 'getCommonTypes.d'.

no-std

region basic types

###
Empty type, for use by functions with nothing in particular to return.
###
+void builtin extern

new-void void() builtin, bare

region option.crow

###
Optional type. Read the tutorial to learn more.

You never need to `match` on this union; use the `if x ?= y` syntax instead.
###
+option[t] union(none, some t)

region pointer.crow

###
A raw pointer. Equivalent to `const a*` in C.

The garbage collector does not trace raw pointers.

If `a` is a reference type, `a*` is a pointer to a pointer.

This is a read-only reference.
The pointee is not immutable; it could be modified if there are other references to it.
###
+const-pointer[t] builtin extern

###
This is like `const-pointer` but supports writing to the contents.
###
+mut-pointer[t] builtin extern, mut

region array

###
Array of values.

For a mutable version, see the `mut-list` module.

This is implemented as a pointer and a length, also known as a "fat pointer".
This means this is also the type for a slice of an array, and slicing is O(1).

A slice does not keep the whole array alive, only the elements it can reach;
elements not reachable by any slice will be garbage collected.
###
+array[t] builtin extern
~new-array[t] t array(size nat64, pointer t*) builtin, bare, native extern
~array-size[t] nat64(a t array) builtin, bare
~array-pointer[t] t*(a t array) builtin, bare, native extern

###
`mut-array` is a low-level type mostly useful for implementing other collections.
For normal code, a `mut[]` is preferable.

A `mut-array` is like a `mut[]`,
but while a `mut[]` has capacity for pushing elements, `mut-array` is fixed-size.
This has a small performance benefit, since (like an immutable array)
a `mut-array` is just a pointer and size which can be stored by value.

You can't change what range of addresses a `mut-array` points to,
though you can write to its elements.

Like an immutable array, and unlike a `mut[]`, it's cheap to take a slice of a `mut-array`.
Taking a slice aliases the elements, so writing to the slice writes to the original.
###
+mut-array[t] builtin extern
~new-mut-array[t] t mut-array(size nat64, pointer t mut*) builtin, bare, native extern
~mut-array-size[t] nat64(a t mut-array) builtin, bare
~mut-array-pointer[t] t mut*(a t mut-array) builtin, bare, unsafe, native extern

region string

# This could be any byte in a UTF-8 string.
+char8 builtin extern
# 32-bit Unicode character.
+char32 builtin extern

###
C-style string. Always const.
This should be a valid pointer whose content ends in a "\0", though this is not enforced.
Thus, all operations on `c-string` are unsafe.
###
+c-string alias
	char8*

region bool.crow

###
Boolean type: either `false` or `true`.

Unlike in other programming languages, this isn't a numeric type.
###
+bool builtin extern

region symbol.crow

# TODO: This should be a builtin type. In native builds it will use a c-string, in JS builds it will use a string. -----------------
+symbol record by-val
	~symbol-to-c-string c-string

region bootstrap arithmetic

# The compiler needs special access to these types to support number literals

###
8-bit natural number.
An unsigned integer in the range 0 through 255.
###
+nat8 builtin extern
###
16-bit natural number.
An unsigned integer in the range 0 through 65_535.
###
+nat16 builtin extern
###
32-bit natural number.
An unsigned integer in the range 0 through 4_294_967_295 (4 billion).
###
+nat32 builtin extern
###
64-bit natural number.
An unsigned integer in the range 0 through 18_446_744_073_709_551_615 (18 quintillion).
###
+nat64 builtin extern
###
8-bit signed integer.
In the range -128 through 127.
###
+int8 builtin extern
###
16-bit signed integer.
In the range -32_768 through 32_767.
###
+int16 builtin extern
###
32-bit signed integer.
In the range -2_147_483_648 through 2_147_483_647 (-2 billion through 2 billion).
###
+int32 builtin extern
###
64-bit signed integer,
In the range 9_223_372_036_854_775_808 through 9_223_372_036_854_775_807
(-9 quintillion through 9 quintillion).
###
+int64 builtin extern
# 32-bit IEEE floating point number.
+float32 builtin extern
# 64-bit IEEE floating point number.
+float64 builtin extern

region hard assertions

-abort void() libc extern, pure

~abandon void() bare, unsafe
	forbid extern js : abandoned
	if extern libc
		abort
	else
		new-void

###
Zeroed data isn't safe as it would contain null pointers.
It's GC-safe though, since the GC treats a null pointer same as any external pointer.
In a JS build, this will be 'null'.
###
+zeroed[t] t() builtin, bare, unsafe

# TODO: remove this function
~todo[t] t() bare
	# this shouldn't really be trusted
	trusted
		abandon
		zeroed

# Used in low-level code that should always abort on failure instead of throwing an exception
~hard-unreachable[t] t() bare, unsafe
	abandon
	zeroed

# Used in low-level code that should always abort on failure instead of throwing an exception
~hard-assert void(condition bool) bare, unsafe
	if condition
		new-void
	else
		abandon

# Used in low-level code that should always abort on failure instead of throwing an exception
~hard-forbid void(condition bool) bare, unsafe
	if condition
		abandon
	else
		new-void

region bootstrap runtime

~exclusion alias
	nat64

region tuple

+tuple2[t0, t1] record(a t0, b t1) extern

+tuple3[t0, t1, t2] record(a t0, b t1, c t2) extern

+tuple4[t0, t1, t2, t3] record(a t0, b t1, c t2, d t3) extern

+tuple5[t0, t1, t2, t3, t4] record(a t0, b t1, c t2, d t3, e t4) extern

+tuple6[t0, t1, t2, t3, t4, t5] record(a t0, b t1, c t2, d t3, e t4, f t5) extern

+tuple7[t0, t1, t2, t3, t4, t5, t6] record(a t0, b t1, c t2, d t3, e t4, f t5, g t6) extern

+tuple8[t0, t1, t2, t3, t4, t5, t6, t7] record extern
	a t0
	b t1
	c t2
	d t3
	e t4
	f t5
	g t6
	h t7

+tuple9[t0, t1, t2, t3, t4, t5, t6, t7, t8] record extern
	a t0
	b t1
	c t2
	d t3
	e t4
	f t5
	g t6
	h t7
	i t8

region fun

###
Low-level function pointer type. Must point to `bare` code.
These aren't used much in crow code.

Create a function pointer by writing `&foo` where `foo` is the name of a function in scope.
###
+fun-pointer[r, p] builtin extern, shared

+fun-data[r, p] builtin

###
Lambda with 'shared' closure.
This is usually written as `nat shared(x string)` instead of `(nat, string) fun-shared`.

Contrasted with `mut` lambdas, a `fun` can't close over mutable data.
It can still close over `shared` data and perform I/O, so it's not a completely pure function.
###
+fun-shared[r, p] builtin shared

###
This is usually written as `nat mut(x string)` instead of `(nat, string) fun-mut`.

An `act` can have anything in its closure, including mutable data, so it's considered mutable.
###
+fun-mut[r, p] builtin mut

region future

+backtrace record(entries backtrace-entry array) by-val

# 'extern' because interpreter also declares this type
+backtrace-entry record extern
	# These point into either GC or permanent memory. May be empty strings, never null.
	function-name c-string
	file-path c-string
	# 1-indexed. 0 if unknown.
	line-number nat32
	# 1-indexed. 0 if unknown.
	column-number nat32

###
Describes the reason there is a 'throw'.
For common exceptions, see `exception.crow`.

This does not include a backtrace; see 'exception-and-backtrace' for that.

This is a variant type, meaning anything can declare a `variant-member` that is an exception.
###
+exception variant
	describe string()

-abandoned record exception variant-member
-describe string(_ abandoned)
	"Reached a fatal error"

###
Type of a thrown exception.

There is no exception subtyping in crow, so all exceptions have this type.
###
+exception-and-backtrace record by-val
	# Message passed to `throw`.
	exception exception
	# TODO: accessing backtrace should be unsafe
	###
	Backtrace when the exception was created.
	Catching and rethrowing the exception doesn't affect this.
	###
	backtrace backtrace

###
Log severity.
The log handler can use this any way it wants.
The default log handler just prints the level at the beginning of each log.
###
+log-level enum
	# Temporary log for debugging
	debug
	# Any log message not fitting in other levels can be 'info'.
	info
	###
	This is useful for anything that seems like it might be a problem in the future.

	For example: Something took an unusually long time; or some resource like memory is running low.
	###
	warn
	###
	An error is for when something has gone wrong (but wasn't worthy of an exception).

	For example: An HTTP request that is expected to normally succeed failed.
	###
	error

# Represents a single call to `log`.
+logged record(level log-level, message string) nominal

###
Function that handles a log message.

For example, this might write it to the console.
###
+log-handler alias
	void shared(logged logged)

~fiber record mut, by-ref
	# GC for this type is generated differently by the compiler; see 'generateMarkVisitFiber'.
	# So be careful when modifying this type.
	state mut fiber-state
	log-handler mut log-handler
	# This must be 16-byte aligned
	stack nat64 mut-array
	# Null if no roots yet
	gc-root mut gc-root mut*

	# This is not always the current stack pointer; that uses the stack pointer register.
	# This is the saved value when the fiber is not running.
	stack-pointer mut stack-pointer
	# The fiber can change its exclusion when calling into a function with a different exclusion
	cur-exclusion mut exclusion
	cur-catch-point mut catch-point*
# TODO: This variable should be 'native extern' --------------------------------------------------------------------------------------
~cur-fiber thread-local(fiber?)
# Represents the point to jump to in 'jump-to-catch'. Stores the state of the stack and registers.
~catch-point builtin

~fiber-state union mut
	# Stores the fiber function
	queued-initial void mut()
	# This could be on the regular queue or the timed queue
	queued
	running
	# This state will only exist temporarily, before calling 'switch-fiber.
	# It's a way to communicate across the context switch.
	yield-request yield-request
	# Stores the next fiber in the awaiting chainn
	awaiting-future fiber?
	done

~yield-request union mut
	# Add this fiber back to the queue of runnable fibers.
	add-to-queue
	# Takes a pointer to a future and a function for adding the fiber to it.
	# Uses 'any-mut-pointer' in order to handle all instances of the 'future' type.
	await-future (nat8 mut*, bool function(future nat8 mut*, fiber fiber))
	# Change this fiber's exclusion to a new one, then enqueue it again.
	change-exclusion exclusion
	# Like 'add-to-queue', but adds to the timed queue. Value is a timestamp.
	delay-until-time nat64
	done

~must-cur-fiber fiber() bare, unsafe, native extern
	if x ?= cur-fiber
		x
	else
		hard-unreachable

stack-pointer alias
	nat64 mut*
# The compiler creates these directly, so be careful about changing it.
~gc-root record by-val, mut
	pointer void*
	trace void function(ctx mark-ctx, pointer void*)
	next gc-root mut*

~mark-ctx record by-val, mut
	memory-size-words nat64
	marks bool mut*
	memory-start nat64 mut*

+future[t] record by-ref, force-shared
	lk mut lock
	state mut t future-state

future-state[t] union mut
	# The future is not resolved and nothing is awaiting it yet.
	empty
	# The future is not resolved, and fibers are waiting on it.
	# Fibers are stored in a linked list. The next fiber in is 'fiber.state.awaiting-future!'.
	awaited-by fiber
	# The future completed successfully.
	resolved t
	# The future completed with an exception.
	rejected exception-and-backtrace

region lock

+lock record by-val, shared
	n0 nat64
	n1 nat64
	n2 nat64
	n3 nat64
	n4 nat64

region list

###
Immutable list type.

This type is designed so concatenation (`~` and `~~`) will be efficient.
It also is efficient to split from an iterator.

It does not support efficient access by an index, so iterators should be used instead.
###
# TODO: NO LONGER NEEDED HERE, MOVE TO LIST.CROW -----------------------------------------------------------------------------------------
+list[t] record by-val
	~root t l1

~l1[t] record(node (t array, t l2) node) by-val
~l2[t] record(node (t array2d, t l3) node) by-val
~l3[t] record(nodes t array3d) by-val
~node[leaf, lower] union(leaf leaf, branch (leaf, lower) branch)
###
'left', 'down', and 'right' should all be non-empty.
(Else, this layer should be a leaf. See `branch-or-leaf`.)
###
~branch[leaf, lower] record(left leaf, down lower, right leaf) by-ref
~array2d[t] record(total-size nat64, arrays t array array) by-val
~array3d[t] record(total-size nat64, arrays t array2d array) by-val

###
A sequence of `char32`s.

(It's stored as a `char8[]` and is decoded as it's iterated.)
It can be efficiently concatenated or split, but doesn't support indexed access.
###
+string builtin

# Used by the compiler for mutable "local" variables used in a closure.
~reference[t] record(value mut t) mut

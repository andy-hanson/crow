# The compiler expects many common types to appear in this file. See 'getCommonTypes.d'.

no-std

region basic types

###
Empty type, for use by functions with nothing in particular to return.
###
+void builtin extern

new-void void() builtin, bare

region option.crow

###
Optional type. Read the tutorial to learn more.

You never need to `match` on this union; use the `if x ?= y` syntax instead.
###
+option[t] union
	none
	some t

region result.crow

###
A `result` is either a success (`ok`) or failure (`error`) value.

This provides a more explicit alternative to throwing an exception.
Prefer this over throwing an exception if failure is likely.
###
+result[ok, error] union
	ok ok
	error error

region pointer.crow

###
A raw pointer. Equivalent to `const a*` in C.

The garbage collector does not trace raw pointers.

If `a` is a reference type, `a*` is a pointer to a pointer.

This is a read-only reference.
The pointee is not immutable; it could be modified if there are other references to it.
###
+const-pointer[t] builtin extern

###
This is like `const-pointer` but supports writing to the contents.
###
+mut-pointer[t] builtin extern, mut

region array

###
Array of values.

For a mutable version, see the `mut-list` module.

This is implemented as a pointer and a length, also known as a "fat pointer".
This means this is also the type for a slice of an array, and slicing is O(1).

A slice does not keep the whole array alive, only the elements it can reach;
elements not reachable by any slice will be garbage collected.
###
+array[t] record by-val
	size nat64
	~pointer t*

###
`mut-array` is a low-level type mostly useful for implementing other collections.
For normal code, a `mut[]` is preferable.

A `mut-array` is like a `mut[]`,
but while a `mut[]` has capacity for pushing elements, `mut-array` is fixed-size.
This has a small performance benefit, since (like an immutable array)
a `mut-array` is just a pointer and size which can be stored by value.

You can't change what range of addresses a `mut-array` points to,
though you can write to its elements.

Like an immutable array, and unlike a `mut[]`, it's cheap to take a slice of a `mut-array`.
Taking a slice aliases the elements, so writing to the slice writes to the original.
###
+mut-array[t] record by-val, mut
	~inner t array

# Needed here since it's used in 'future'
###
Mutable array type that can change in size.
This is represented as a reference to a `mut-array` with extra capacity.
Appending (or removing) elements to the end is amortized O(1),
but appending (or removing) from the beginning is always O(N).
###
+mut-list[t] record mut
	# Fields should only be used in mut-list.crow
	# backing.size is the capacity
	# For the GC's sake, unused parts of backing are filled with 'zeroed'
	~backing mut t mut-array
	~mut-list-size mut nat64

region string

# Single character in a string.
# This could be any byte in a UTF-8 string.
+char8 builtin extern
###
C-style string. Always const.
This should be a valid pointer whose content ends in a "\0", though this is not enforced.
Thus, all operations on `c-string` are unsafe.
###
+c-string alias
	char8*

region bool.crow

###
Boolean type: either `false` or `true`.

Unlike in other programming languages, this isn't a numeric type.
###
+bool builtin extern

region symbol.crow

+symbol record by-val
	~symbol-to-c-string c-string

region bootstrap arithmetic

# The compiler needs special access to these types to support number literals

###
8-bit natural number.
An unsigned integer in the range 0 through 255.
###
+nat8 builtin extern
###
16-bit natural number.
An unsigned integer in the range 0 through 65_535.
###
+nat16 builtin extern
###
32-bit natural number.
An unsigned integer in the range 0 through 4_294_967_295 (4 billion).
###
+nat32 builtin extern
###
64-bit natural number.
An unsigned integer in the range 0 through 18_446_744_073_709_551_615 (18 quintillion).
###
+nat64 builtin extern
###
8-bit signed integer.
In the range -128 through 127.
###
+int8 builtin extern
###
16-bit signed integer.
In the range -32_768 through 32_767.
###
+int16 builtin extern
###
32-bit signed integer.
In the range -2_147_483_648 through 2_147_483_647 (-2 billion through 2 billion).
###
+int32 builtin extern
###
64-bit signed integer,
In the range 9_223_372_036_854_775_808 through 9_223_372_036_854_775_807
(-9 quintillion through 9 quintillion).
###
+int64 builtin extern
# 32-bit IEEE floating point number.
+float32 builtin extern
# 64-bit IEEE floating point number.
+float64 builtin extern

region hard assertions

abort void() c extern

###
Zeroed data isn't safe as it would contain null pointers.
It's GC-safe though, since the GC treats a null pointer same as any external pointer.
###
+zeroed[t] t() builtin, bare, unsafe

# TODO: remove this function
todo[t] t() bare
	# this shouldn't really be trusted
	trusted
		abort
		zeroed

# Used in low-level code that should always abort on failure instead of throwing an exception
hard-unreachable[t] t() bare, unsafe
	abort
	zeroed

# Used in low-level code that should always abort on failure instead of throwing an exception
hard-assert void(condition bool) bare, unsafe
	if condition
		new-void
	else
		abort

# Used in low-level code that should always abort on failure instead of throwing an exception
hard-forbid void(condition bool) bare, unsafe
	if condition
		abort
	else
		new-void

region bootstrap runtime

task record by-val, mut
	exclusion exclusion
	action void mut()

exclusion alias
	nat64

region tuple

+tuple2[t, u] record extern
	a t
	b u

+tuple3[t0, t1, t2] record extern
	a t0
	b t1
	c t2

+tuple4[t0, t1, t2, t3] record extern
	a t0
	b t1
	c t2
	d t3

+tuple5[t0, t1, t2, t3, t4] record extern
	a t0
	b t1
	c t2
	d t3
	e t4

+tuple6[t0, t1, t2, t3, t4, t5] record extern
	a t0
	b t1
	c t2
	d t3
	e t4
	f t5

+tuple7[t0, t1, t2, t3, t4, t5, t6] record extern
	a t0
	b t1
	c t2
	d t3
	e t4
	f t5
	g t6

+tuple8[t0, t1, t2, t3, t4, t5, t6, t7] record extern
	a t0
	b t1
	c t2
	d t3
	e t4
	f t5
	g t6
	h t7

+tuple9[t0, t1, t2, t3, t4, t5, t6, t7, t8] record extern
	a t0
	b t1
	c t2
	d t3
	e t4
	f t5
	g t6
	h t7
	i t8

region fun

###
Low-level function pointer type. Must point to `bare` code.
These aren't used much in crow code.

Create a function pointer by writing `&foo` where `foo` is the name of a function in scope.
###
+fun-pointer[r, p] builtin extern, shared

+fun-data[r, p] builtin

###
Lambda with 'shared' closure.
This is usually written as `nat shared(x string)` instead of `(nat, string) fun-shared`.

Contrasted with `mut` lambdas, a `fun` can't close over mutable data.
It can still close over `shared` data and perform I/O, so it's not a completely pure function.
###
+fun-shared[r, p] builtin shared

###
This is usually written as `nat mut(x string)` instead of `(nat, string) fun-mut`.

An `act` can have anything in its closure, including mutable data, so it's considered mutable.
###
+fun-mut[r, p] builtin mut

###
This is usually written as `far nat(string)` instead of `(nat, string) fun-far`.

This wraps an `act` combined with the exclusion it came from.
This is shared since the `act` can't be called directly;
instead a task is added that will call the `act` when its exclusion is available.
###
+fun-far[r, p] record by-val, force-shared
	exclusion exclusion
	action r^ mut(param p)

region future

backtrace record by-val
	entries backtrace-entry array

# 'extern' because interpreter also declares this type
backtrace-entry record extern
	# These point into either GC or permanent memory. May be empty strings, never null.
	function-name c-string
	file-path c-string
	# 1-indexed. 0 if unknown.
	line-number nat32
	# 1-indexed. 0 if unknown.
	column-number nat32

###
Type of a thrown exception.

There is no exception subtyping in crow, so all exceptions have this type.
###
+exception record by-val
	# Message passed to `throw`.
	~message string
	# TODO: accessing backtrace should be unsafe
	###
	Backtrace when the exception was created.
	Catching and rethrowing the exception doesn't affect this.
	###
	~backtrace backtrace

+future[t] record by-ref, force-shared
	lk mut lock
	state mut t future-state

future-state[t] union mut
	# The future hasn't been resolved or forwarded, and no tasks have been added.
	empty
	# Optimization for 'tasks' when there is only one
	one-task task
	# The future has multiple tasks attached.
	tasks task mut[]
	# All operations should be directed to another future.
	forwarded t^
	# The future was resolved successfully.
	resolved t
	# The future resolved with an exception.
	rejected exception

region lock

+lock record by-val, shared
	n0 nat64
	n1 nat64
	n2 nat64
	n3 nat64
	n4 nat64

region list

###
Immutable list type.

This type is designed so concatenation (`~` and `~~`) will be efficient.
It also is efficient to split from an iterator.

It does not support efficient access by an index, so iterators should be used instead.
###
+list[t] record by-val
	~root t l1

~l1[t] record by-val
	node (t array, t l2) node

~l2[t] record by-val
	node (t array2d, t l3) node

~l3[t] record by-val
	nodes t array3d

~node[leaf, lower] union
	leaf leaf
	branch (leaf, lower) branch

###
'left', 'down', and 'right' should all be non-empty.
(Else, this layer should be a leaf. See `branch-or-leaf`.)
###
~branch[leaf, lower] record by-ref
	left leaf
	down lower
	right leaf

~array2d[t] record by-val
	total-size nat64
	arrays t array array

~array3d[t] record by-val
	total-size nat64
	arrays t array2d array

###
Strings are optimized for fast concatenation and splitting.
They don't support efficient access by index, so use iterators instead.
###
+string record by-val
	~inner char8[]

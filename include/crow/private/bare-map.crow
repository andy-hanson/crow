no-std
import
	../bits: ^, >>
	../bool: ||, bool, false, new, true
	../compare: equal
	../misc: data, new, void
	../number: ==, *, %, nat64
	../option: force, new, option
	../pointer: ==, +, *, as-const, as-mut, const-pointer, mut-pointer, set-deref, zeroed
	../tuple: new
	./alloc: gc, unmanaged-alloc-uninitialized-elements, unmanaged-free-elements
	./number-low-level: wrap-mul

###
Hash table that uses 'malloc'. 't' can be a GC type, but you must use 'add-gc-roots' manually.
The key is implicit in 't'; see the 'entry' spec.

Note: All values in the map will be kept valid, including unused entries.
So 'new' initializes all values, and 'destroy' and 'add-gc-roots' ignore keys entirely.
###
bare-map[t] record by-val, mut
	###
	There are logically 2 different maps, each of size 'half-capacity'.
	Keys prefer to be in the left map; if that is empty the key won't be in the right map.
	###
	-begin-full mut t mut*
	-half-capacity nat64

entry[t, k] spec k data, k equal
	hash nat64(key k)
	invalid-key k()
	new t(key k)
	key k(a t)
	move-from void(dest t mut*, src t*)

-full-capacity[t] nat64(a t bare-map) bare, unsafe
	a.half-capacity * 2
-end-full[v] v mut*(a v bare-map) bare, unsafe
	a.begin-full + a.full-capacity

-begin-left[t] t mut*(a t bare-map) bare, unsafe
	a.begin-full
-end-left[t] t mut*(a t bare-map) bare, unsafe
	a.begin-left + a.half-capacity
-begin-right[t] t mut*(a t bare-map) bare, unsafe
	a.end-left

-hash-left nat64(a nat64) bare
	a
-hash-right nat64(a nat64) bare
	# https://xorshift.di.unimi.it/splitmix64.c
	b = (a ^ (a >> 30)) wrap-mul 0xbf58476d1ce4e5b9
	c = (b ^ (b >> 27)) wrap-mul 0x94d049bb133111eb
	c ^ (c >> 31)

-entry-left[t] t mut*(a t bare-map mut*, hash nat64) bare, unsafe
	a->begin-left + (hash.hash-left % a->half-capacity)
-entry-right[t] t mut*(a t bare-map mut*, hash nat64) bare, unsafe
	a->begin-right + (hash.hash-right % a->half-capacity)

new[t, k] t bare-map(half-capacity nat64) bare, unsafe, (t, k) entry, native extern
	forbid half-capacity == 0
	full-capacity = half-capacity * 2
	begin t mut* = full-capacity unmanaged-alloc-uninitialized-elements
	cur mut = begin
	until cur == begin + full-capacity
		*cur := (invalid-key,)
		cur +:= 1
	begin, half-capacity

destroy[t] spec
	destroy void(a t mut*)
destroy[t] void(a t bare-map mut*) bare, unsafe, t destroy
	cur mut = a->begin-full
	until cur == a->end-full
		cur destroy
		cur +:= 1
-free-table-not-values[t] void(a t bare-map mut*) bare, unsafe, native extern
	a->begin-full unmanaged-free-elements a->full-capacity

must-find[t, k] t*(a t bare-map*, key k) bare, unsafe, (t, k) entry
	(a.as-mut must-find key).as-const

must-find[t, k] t mut*(a t bare-map mut*, key k) bare, unsafe, (t, k) entry
	(a find key)!

remove[t, k] void(_ t bare-map mut*, entry t mut*) bare, unsafe, (t, k) entry
	*entry := (invalid-key,)

find[t, k] t mut*?(a t bare-map mut*, key k) bare, unsafe, (t, k) entry
	hash = key hash
	left = a entry-left hash
	if left->key == key
		left,
	else
		right = a entry-right hash
		if right->key == key
			right,

find-or-insert[t, k] t mut*(a t bare-map mut*, key k) bare, unsafe, (t, k) entry, native extern
	res, _ = a find-or-insert-and-inserted key
	res

found-or-inserted enum(found, inserted)
find-or-insert-and-inserted[t, k] (t mut*, found-or-inserted)(
	a t bare-map mut*,
	key k,
) bare, unsafe, (t, k) entry, native extern
	hash = key hash
	loop
		left = a entry-left hash
		right = a entry-right hash
		if left->key == key
			break left, found
		elif right->key == key
			break right, found
		elif left try-insert key
			break left, inserted
		elif right try-insert key
			break right, inserted
		elif evicted ?= a try-evict left, right
			*evicted := (key,)
			break evicted, inserted
		else
			a increase-capacity
			continue

-try-insert[t, k] bool(entry t mut*, key k) bare, unsafe, (t, k) entry
	guard entry->key == invalid-key
	*entry := (key,)
	true

-try-evict[t, k] t mut*?(a t bare-map mut*, left t mut*, right t mut*) bare, unsafe, (t, k) entry
	# left and right are both occupied. See if we can evict one.
	evict-left-to-right = a entry-right left->key.hash
	if evict-left-to-right->key == invalid-key
		evict-left-to-right move-from left.as-const
		left,
	else
		evict-right-to-left = a entry-left right->key.hash
		if evict-right-to-left->key == invalid-key
			evict-right-to-left move-from right.as-const
			right,

-increase-capacity[t, k] void(
	a t bare-map mut*,
) bare, unsafe, (t, k) entry, native extern
	forbid a->half-capacity == 0
	new-half-capacity mut = a->half-capacity
	out mut t bare-map = zeroed
	loop
		new-half-capacity *:= 2
		out := new-half-capacity,
		# First loop: Move keys only
		pair mut = a->begin-full.as-const
		worked bool = loop
			if pair == a->end-full.as-const
				break true
			elif pair->key == invalid-key
				pair +:= 1
				continue
			else
				# TODO: should not need type annotation
				if (&out)::(t bare-map mut*) try-add-key pair->key
					pair +:= 1
					continue
				else
					break false
		if worked
			break
		else
			# TODO: should not need type annotation
			(&out)::(t bare-map mut*) free-table-not-values
			continue

	# Now move values
	cur mut = a->begin-full.as-const
	until cur == a->end-full.as-const
		unless cur->key == invalid-key
			&out must-find cur->key move-from cur
		cur +:= 1

	a free-table-not-values
	*a := out

-try-add-key[t, k] bool(
	a t bare-map mut*,
	key k,
) bare, unsafe, (t, k) entry
	hash = key hash
	left = a entry-left hash
	right = a entry-right hash
	forbid left->key == key || right->key == key
	entry t mut*? = if left->key == invalid-key
		left,
	elif right->key == invalid-key
		right,
	else
		a try-evict left, right
	if e ?= entry
		*e := (key,)
		true

slow-is-empty[t, k] bool(a t bare-map*) bare, unsafe, (t, k) entry
	cur mut = a->begin-full.as-const
	loop
		if cur == a->end-full.as-const
			break true
		elif cur->key == invalid-key
			cur +:= 1
			continue
		else
			break false

add-gc-roots[t] spec
	add-gc-roots void(a t*, gc gc mut*)

add-gc-roots[t] void(a t bare-map*, gc gc mut*) bare, unsafe, t add-gc-roots
	cur mut = a->begin-full.as-const
	until cur == a->end-full.as-const
		cur add-gc-roots gc
		cur +:= 1

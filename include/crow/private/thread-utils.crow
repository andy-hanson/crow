no-std
import
	errno: EAGAIN, EINVAL, ESRCH, ETIMEDOUT
	pthread:
		pthread_condattr_destroy, pthread_condattr_init, pthread_condattr_setclock,
		pthread_condattr_t, pthread_cond_broadcast, pthread_cond_destroy, pthread_cond_init,
		pthread_cond_t, pthread_cond_timedwait, pthread_cond_wait, pthread_create, pthread_join,
		pthread_mutexattr_destroy, pthread_mutexattr_init, pthread_mutexattr_t,
		pthread_mutex_destroy, pthread_mutex_init, pthread_mutex_lock, pthread_mutex_t,
		pthread_mutex_unlock, pthread_t
	sched: sched_yield
	time: CLOCK_MONOTONIC
	../bool: !, bool, false, true
	../cell: cell, subscript
	../compare: !=
	../extra-types: err-t
	../fun: fun-ptr1, subscript
	../io/time-low-level: timestamp, to-timespec
	../ptr: ==, any-ptr, by-val, null, ptr, ptr-to, ref-of-val
	./bootstrap:
		as, atomic-bool, hard-assert, hard-forbid, is-locked, lock, nat64, opt, todo, value, void,
		zeroed
	./number-low-level: ==, wrap-add, wrap-sub

region atomic

atomic-bool by-val atomic-bool() noctx
	atomic-bool: false

# TODO: works on any primitive type, not just bool
compare-exchange-strong bool(value-ptr ptr bool, expected-ptr ptr bool, desired bool) noctx builtin

try-change! bool(a atomic-bool, old-value bool) noctx trusted
	a.value.ptr-to compare-exchange-strong old-value.ptr-to, !old-value

try-set! bool(a atomic-bool) noctx
	a try-change! false

try-unset! bool(a atomic-bool) noctx
	a try-change! true

must-unset! void(a atomic-bool) noctx unsafe
	did-unset = a try-unset!
	did-unset hard-assert

lock lock()
	lock: atomic-bool

lock-by-val by-val lock() noctx
	lock: atomic-bool

try-acquire! bool(a lock) noctx trusted
	a.is-locked.ref-of-val try-set!

acquire! void(a lock) noctx unsafe
	a acquire-recur! 0

.acquire-recur! void(a lock, n-tries nat64) noctx unsafe
	if !a.try-acquire!
		if n-tries == 10000
			todo
		else
			yield-thread
			a acquire-recur!: n-tries wrap-add 1

yield-thread void() noctx unsafe
	err = sched_yield
	hard-assert: err == 0

release! void(a lock) noctx unsafe
	a.is-locked.ref-of-val must-unset!

with-lock ?a(a lock, f act ?a()) trusted
	a acquire!
	res = f[]
	a release!
	res

condition record mut
	# TODO:PRIVATE
	mutex-attr by-val pthread_mutexattr_t
	mutex by-val pthread_mutex_t
	cond-attr by-val pthread_condattr_t
	cond by-val pthread_cond_t
	# Incremented each time the condition fires.
	# Used to avoid waiting on a condition that has already changed.
	# WARN: this is mutable state, but should acquire the mutex first.
	sequence mut sequence-id

# Unsafe because you must remember to 'destroy-condition'
create-condition by-val condition() noctx unsafe
	res = as<by-val condition>: condition: zeroed, zeroed, zeroed, zeroed, 0
	hard-assert-posix-error: res.ref-of-val.mutex-attr.ref-of-val pthread_mutexattr_init
	hard-assert-posix-error: res.ref-of-val.mutex.ref-of-val pthread_mutex_init res.ref-of-val.mutex-attr.ref-of-val
	hard-assert-posix-error: res.ref-of-val.cond-attr.ref-of-val pthread_condattr_init
	hard-assert-posix-error: res.ref-of-val.cond-attr.ref-of-val pthread_condattr_setclock CLOCK_MONOTONIC
	hard-assert-posix-error: res.ref-of-val.cond.ref-of-val pthread_cond_init res.ref-of-val.cond-attr.ref-of-val
	res

destroy-condition void(a condition) noctx unsafe
	hard-assert-posix-error: a.mutex-attr.ref-of-val pthread_mutexattr_destroy
	hard-assert-posix-error: a.mutex.ref-of-val pthread_mutex_destroy
	hard-assert-posix-error: a.cond-attr.ref-of-val pthread_condattr_destroy
	hard-assert-posix-error: a.cond.ref-of-val pthread_cond_destroy

.hard-assert-posix-error void(err err-t) noctx unsafe
	hard-assert: err == 0

broadcast! void(a condition) noctx trusted
	hard-assert-posix-error: a.mutex.ref-of-val pthread_mutex_lock
	hard-assert-posix-error: a.cond.ref-of-val pthread_cond_broadcast
	a.sequence := a.sequence wrap-add 1
	hard-assert-posix-error: a.mutex.ref-of-val pthread_mutex_unlock

sequence-id alias
	nat64

get-sequence sequence-id(a condition) noctx unsafe
	hard-assert-posix-error: a.mutex.ref-of-val pthread_mutex_lock
	res = a sequence
	hard-assert-posix-error: a.mutex.ref-of-val pthread_mutex_unlock
	res

###
WARN: May wake up early. Use only to be avoid consuming CPU.
`until-time`, if set, should be from `get-monotime-nsec`.
'last-sequence' is to ensure that we don't wait at all if the condition has already triggered.
###
wait-on void(a condition, until-time opt timestamp, last-sequence sequence-id) noctx unsafe summon
	hard-assert-posix-error: a.mutex.ref-of-val pthread_mutex_lock
	if a.sequence == last-sequence
		hard-assert-posix-error: if t ?= until-time
			abstime = t to-timespec
			err = a.cond.ref-of-val pthread_cond_timedwait a.mutex.ref-of-val, abstime.ptr-to
			if err == ETIMEDOUT
				0
			else
				err
		else
			a.cond.ref-of-val pthread_cond_wait a.mutex.ref-of-val
	hard-assert-posix-error: a.mutex.ref-of-val pthread_mutex_unlock

# TODO: use atomic operations for this
thread-safe-counter record mut
	lk by-val lock
	value mut nat64

thread-safe-counter by-val thread-safe-counter() noctx
	0 thread-safe-counter

thread-safe-counter by-val thread-safe-counter(init nat64) noctx
	thread-safe-counter: lock-by-val, init

# Returns the old value
get-and-increment! nat64(t thread-safe-counter) noctx unsafe
	t.lk.ref-of-val acquire!
	old = t value
	t.value := old wrap-add 1
	t.lk.ref-of-val release!
	old

# Returns the old value
get-and-decrement! nat64(t thread-safe-counter) noctx unsafe
	t.lk.ref-of-val acquire!
	old = t value
	hard-forbid: old == 0
	t.value := old wrap-sub 1
	t.lk.ref-of-val release!
	old

create-one-thread void
	tid cell pthread_t
	thread-arg any-ptr
	thread-fun fun-ptr1<any-ptr, any-ptr>
spec
	noctx
	unsafe
	summon
body
	err = tid pthread_create null, thread-fun, thread-arg
	if err != 0
		if err == EAGAIN
			# TODO: warn and make do with the threads it does let us create (so long as there's at least one)
			todo
		else
			# Fatal error
			todo

join-one-thread void(tid pthread_t) noctx unsafe summon
	thread-return = as<by-val<cell<any-ptr>>>: cell: null
	err = tid pthread_join thread-return.ref-of-val
	if err != 0
		if err == EINVAL
			todo
		elif err == ESRCH
			todo
		else
			todo
	hard-assert: thread-return.ref-of-val[] == null

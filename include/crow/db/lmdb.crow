no-std
import
	lmdb:
		MDB_BAD_DBI, MDB_BAD_RSLOT, MDB_BAD_TXN, MDB_BAD_VALSIZE, MDB_CORRUPTED, MDB_CREATE,
		MDB_cursor, mdb_cursor_close, MDB_CURSOR_FULL, mdb_cursor_get, mdb_cursor_open, MDB_dbi,
		mdb_dbi_close, mdb_dbi_open, MDB_DBS_FULL, MDB_env, mdb_env_close, mdb_env_create,
		mdb_env_open, mdb_env_set_mapsize, mdb_env_set_maxdbs, MDB_FIRST, mdb_get, MDB_GET_CURRENT,
		MDB_INCOMPATIBLE, MDB_INTEGERKEY, MDB_INVALID, MDB_KEYEXIST, MDB_MAP_FULL, MDB_MAP_RESIZED,
		MDB_NEXT, MDB_NOOVERWRITE, MDB_NOTFOUND, MDB_PAGE_FULL, MDB_PAGE_NOTFOUND, MDB_PANIC,
		mdb_put, MDB_RDONLY, MDB_READERS_FULL, mdb_stat, MDB_SUCCESS, MDB_TLS_FULL, MDB_txn,
		mdb_txn_abort, mdb_txn_begin, mdb_txn_commit, MDB_TXN_FULL, MDB_val, MDB_VERSION_MISMATCH,
		ms_branch_pages, ms_depth, ms_entries, ms_leaf_pages, ms_overflow_pages, ms_psize, mv_data,
		mv_size
	../bits: |
	../bool: !, &&, ||, bool, false, true
	../cell: *, cell
	../col/arr: arr, begin-ptr, is-empty, size
	../col/fix-arr:
		begin-ptr, cast-immutable, copy-to-arr, end-ptr, fix-arr-from-begin-end,
		uninitialized-fix-arr
	../compare: !=
	../c-types: u-int
	../exception: assert, do-if-error, finally, forbid, throw
	../extra-types: err-t
	../fun: subscript
	../io/file: make-directory, path-exists, remove-directory-and-contents-non-recursive
	../log: info, log
	../misc: data, void
	../number: ==, *, nat, nat8, nat32, nat64, to-nat64
	../opt: opt, some
	../ptr: ==, +, as-mut, null, ptr-cast-to-extern, set-deref, zeroed
	../serialize: from-bytes, serialize, to-4-bytes, to-8-bytes, to-bytes
	../str: str
	../str-conv: interp, finish, to-str, with-str, with-value
	../str-util: to-c-str

lmdb-env record mut
	# TODO:PRIVATE
	env MDB_env

lmdb-db<k, v> record mut
	# TODO:PRIVATE
	dbi MDB_dbi

lMDB_txn record mut
	# TODO:PRIVATE
	txn MDB_txn

lmdb-open-options record
	create-if-not-exists bool

###
Implemented for nat32, nat64 and str.
Not recommended to implement this yourself.
###
lmdb-key<k> spec
	== bool(a k, b k)
	# NOTE: Parameter is a dummy, don't actually use it
	lmdb-key-flags u-int(_ k)
	# Don't use `serialize`, because lmdb expects integers to be fixed size
	to-lmdb-key nat8[](key k)
	from-lmdb-key k(a nat8[])

lmdb-key-flags u-int(_ nat64)
	MDB_INTEGERKEY
lmdb-key-flags u-int(_ nat32)
	MDB_INTEGERKEY
lmdb-key-flags u-int(_ str)
	0

to-lmdb-key nat8[](key nat64)
	key to-8-bytes
to-lmdb-key nat8[](key nat32)
	key to-4-bytes
to-lmdb-key nat8[](key str)
	key to-bytes

from-lmdb-key nat64(a nat8[])
	a from-bytes
from-lmdb-key nat32(a nat8[])
	a from-bytes
from-lmdb-key str(a nat8[])
	a from-bytes

with-test-env<a> a(f act a(lmdb-env)) trusted summon
	test-path = "TEST-LMDB"
	test-path make-directory
	(() => test-path remove-directory-and-contents-non-recursive) finally () =>
		test-path with-env true.lmdb-open-options, f

with-env<a> a(db-dir str, options lmdb-open-options, f act a(lmdb-env)) trusted summon
	env = db-dir lmdb-open-env options
	(() => env lmdb-close-env) finally () => f[env]

# WARN: Should call 'close-env' when done
lmdb-open-env lmdb-env(db-dir str, options lmdb-open-options) unsafe summon
	env-cell = cell<MDB_env>: null ptr-cast-to-extern<MDB_env, nat8>
	check-lmdb-error: env-cell mdb_env_create
	env = *env-cell
	check-lmdb-error: env mdb_env_set_maxdbs 50
	mapsize = 1024 * 1024 * 100000
	check-lmdb-error: env mdb_env_set_mapsize mapsize

	if options create-if-not-exists
		if !db-dir.path-exists
			info log "Creating database directory {db-dir}"
			db-dir make-directory

	err = env mdb_env_open db-dir.to-c-str, 0, 0o666
	if err != 0
		env mdb_env_close
		check-lmdb-error: err
	lmdb-env: env

lmdb-close-env void(env lmdb-env) unsafe summon
	env.env mdb_env_close

with-db<a, k, v> a
	env lmdb-env
	db-name str
	f act a(lmdb-db<k, v>)
spec
	trusted
	summon
	lmdb-key<k>
	serialize<v>
body
	db = env open-db<k, v> db-name
	(() => env close-db db) finally () => f[db]

# WARN: Should call 'close-db' when done
open-db<k, v> lmdb-db<k, v>(env lmdb-env, db-name str) unsafe summon lmdb-key<k> serialize<v>
	parent-transaction = null ptr-cast-to-extern<MDB_txn, nat8>
	transaction-cell = cell<MDB_txn>: null ptr-cast-to-extern<MDB_txn, nat8>
	check-lmdb-error: env.env mdb_txn_begin parent-transaction, 0, transaction-cell
	transaction = *transaction-cell

	dbi-cell = cell<MDB_dbi>: zeroed<MDB_dbi>
	# TODO: Should be able to parse `zeroed<k>.lmdb-key-flags`
	flags = MDB_CREATE | (zeroed<k> lmdb-key-flags)
	check-lmdb-error: transaction mdb_dbi_open db-name.to-c-str, flags, dbi-cell

	check-lmdb-error: transaction mdb_txn_commit
	*dbi-cell lmdb-db

close-db<k, v> void(env lmdb-env, db lmdb-db<k, v>) unsafe summon
	env.env mdb_dbi_close db.dbi

transaction-result<a> union
	transaction-abort<a>
	transaction-commit<a>

transaction-abort<a> record
	value a
transaction-commit<a> record
	value a

each<k, v> void(txn lMDB_txn, db lmdb-db<k, v>, f act void(k, v)) summon lmdb-key<k> serialize<v>
	void fold txn, db, (ignore, key, value) => f[key, value]

map<out, k, v> out[](txn lMDB_txn, db lmdb-db<k, v>, f act out(k, v)) trusted summon lmdb-key<k> serialize<v>
	out = txn count db uninitialized-fix-arr<out>
	end = out.begin-ptr fold txn, db, (cur, key, value) =>
		*cur := f[key, value]
		cur + 1
	assert: end == out.end-ptr
	out cast-immutable

fold<a, k, v> a(acc a, txn lMDB_txn, db lmdb-db<k, v>, f act a(a, k, v)) trusted summon lmdb-key<k> serialize<v>
	txn with-cursor db, cursor =>
		check-lmdb-error: cursor mdb_cursor_get empty-val, empty-val, MDB_FIRST
		acc fold-recur cursor, f
.fold-recur<a, k, v> a(acc a, cursor MDB_cursor, f act a(a, k, v)) unsafe summon lmdb-key<k> serialize<v>
	key = empty-val
	value = empty-val
	check-lmdb-error: cursor mdb_cursor_get key, value, MDB_GET_CURRENT
	new-acc = f[acc, key.bytes-of-val.from-lmdb-key, value.bytes-of-val.from-bytes]
	err = cursor mdb_cursor_get empty-val, empty-val, MDB_NEXT
	if err == MDB_NOTFOUND
		new-acc
	else
		check-lmdb-error: err
		new-acc fold-recur cursor, f

zip<out, k, v0, v1> out[]
	txn lMDB_txn
	db0 lmdb-db<k, v0>
	db1 lmdb-db<k, v1>
	f act out(k, v0, v1)
spec
	trusted
	summon
	data<k>
	lmdb-key<k>
	serialize<v0>
	serialize<v1>
body
	db0-count = txn count db0
	db1-count = txn count db1
	assert: db0-count == db1-count
	if db0-count == 0
		[]
	else
		res = db0-count uninitialized-fix-arr<out>
		end = res.begin-ptr zip-fold-non-empty txn, db0, db1, (cur, key, value0, value1) =>
			*cur := f[key, value0, value1]
			cur + 1
		assert: end == res.end-ptr
		res cast-immutable

zip-fold<a, k, v0, v1> a
	acc a
	txn lMDB_txn
	db0 lmdb-db<k, v0>
	db1 lmdb-db<k, v1>
	f act a(a, k, v0, v1)
spec
	trusted
	summon
	data<k>
	lmdb-key<k>
	serialize<v0>
	serialize<v1>
body
	db0-count = txn count db0
	db1-count = txn count db1
	assert: db0-count == db1-count
	if db0-count == 0
		acc
	else
		acc zip-fold-non-empty txn, db0, db1, f

.zip-fold-non-empty<a, k, v0, v1> a
	acc a
	txn lMDB_txn
	db0 lmdb-db<k, v0>
	db1 lmdb-db<k, v1>
	f act a(a, k, v0, v1)
spec
	trusted
	summon
	data<k>
	lmdb-key<k>
	serialize<v0>
	serialize<v1>
body
	txn with-cursor db0, cursor0 =>
		txn with-cursor db1, cursor1 =>
			check-lmdb-error: cursor0 mdb_cursor_get empty-val, empty-val, MDB_FIRST
			check-lmdb-error: cursor1 mdb_cursor_get empty-val, empty-val, MDB_FIRST
			acc zip-fold-recur cursor0, cursor1, f
.zip-fold-recur<a, k, v0, v1> a
	acc a
	cursor0 MDB_cursor
	cursor1 MDB_cursor
	f act a(a, k, v0, v1)
spec
	unsafe
	summon
	data<k>
	lmdb-key<k>
	serialize<v0>
	serialize<v1>
body
	key0-val = empty-val
	value0-val = empty-val
	check-lmdb-error: cursor0 mdb_cursor_get key0-val, value0-val, MDB_GET_CURRENT
	key0 k = key0-val.bytes-of-val from-lmdb-key
	value0 v0 = value0-val.bytes-of-val from-bytes
	key1-val = empty-val
	value1-val = empty-val
	check-lmdb-error: cursor1 mdb_cursor_get key1-val, value1-val, MDB_GET_CURRENT
	key1 k = key1-val.bytes-of-val.from-lmdb-key
	value1 v1 = value1-val.bytes-of-val.from-bytes
	assert: key0 == key1
	new-acc = f[acc, key0, value0, value1]
	err0 = cursor0 mdb_cursor_get empty-val, empty-val, MDB_NEXT
	err1 = cursor1 mdb_cursor_get empty-val, empty-val, MDB_NEXT
	if err0 == MDB_NOTFOUND || err1 == MDB_NOTFOUND
		assert: err0 == MDB_NOTFOUND && err1 == MDB_NOTFOUND
		new-acc
	else
		check-lmdb-error: err0
		check-lmdb-error: err1
		new-acc zip-fold-recur cursor0, cursor1, f

.with-cursor<a, k, v> a(txn lMDB_txn, db lmdb-db<k, v>, f act a(MDB_cursor)) unsafe summon
	cursor-cell = cell<MDB_cursor>: null ptr-cast-to-extern<MDB_cursor, nat8>
	open-err = txn.txn mdb_cursor_open db.dbi, cursor-cell
	cursor = *cursor-cell
	(() => cursor mdb_cursor_close) finally () =>
		check-lmdb-error: open-err
		f[cursor]

get<k, v> v?(txn lMDB_txn, db lmdb-db<k, v>, key k) trusted summon lmdb-key<k> serialize<v>
	value = empty-val
	# TODO: this check should be unnecessary...
	if (txn count db) != 0
		lmdb-key = key to-lmdb-key
		lmdb-key.is-empty forbid "Empty key is not allowed"
		err = txn.txn mdb_get db.dbi, lmdb-key.val-of-bytes, value
		if err != MDB_NOTFOUND
			err check-lmdb-error
			# TODO:PERF For some v types, the copy in 'bytes-of-val' is unnecessary.
			value.bytes-of-val.from-bytes some

###
Fails if the key already exists.
Use `set` to overwrite existing keys.
###
add<k, v> void(txn lMDB_txn, db lmdb-db<k, v>, key k, value v) summon lmdb-key<k> serialize<v>
	if !(txn try-add db, key, value)
		throw: "key already exists"

try-add<k, v> bool(txn lMDB_txn, db lmdb-db<k, v>, key k, value v) summon lmdb-key<k> serialize<v>
	err = txn put-inner db, key, value, MDB_NOOVERWRITE
	if err == MDB_KEYEXIST
		false
	else
		check-lmdb-error: err
		true

set<k, v> void(txn lMDB_txn, db lmdb-db<k, v>, key k, value v) summon lmdb-key<k> serialize<v>
	check-lmdb-error: txn put-inner db, key, value, 0

.put-inner<k, v> err-t
	txn lMDB_txn
	db lmdb-db<k, v>
	key k
	value v
	flags u-int
spec
	trusted
	summon
	lmdb-key<k>
	serialize<v>
body
	txn.txn mdb_put db.dbi, key.to-lmdb-key.val-of-bytes, value.to-bytes.val-of-bytes, flags

lmdb_stat record
	psize nat
	depth nat
	branch-pages nat
	leaf-pages nat
	overflow-pages nat
	entries nat

to-str str(a lmdb_stat)
	# TODO: Use """ string
	x = "	psize = {a psize}\n	depth = {a depth}\n	branch-pages = {a branch-pages}"
	y = "	leaf-pages = {a leaf-pages}\n	overflow-pages = {a overflow-pages}"
	z = "	entries = {a entries}"
	"lmdb_stat:\n{x}\n{y}\n{z}"

count<k, v> nat(txn lMDB_txn, db lmdb-db<k, v>) summon
	txn stat db entries

stat<k, v> lmdb_stat(txn lMDB_txn, db lmdb-db<k, v>) trusted summon
	s = mdb_stat: 0, 0, 0, 0, 0, 0
	check-lmdb-error: txn.txn mdb_stat db.dbi, s
	psize = s.ms_psize to-nat64
	depth = s.ms_depth to-nat64
	lmdb_stat: psize, depth, s.ms_branch_pages, s.ms_leaf_pages, s.ms_overflow_pages, s.ms_entries

with-read-transaction<a> a(env lmdb-env, f act a(lMDB_txn)) trusted summon
	env with-transaction MDB_RDONLY, txn =>
		transaction-abort: f[txn]

with-write-transaction<a> a(env lmdb-env, f act a(lMDB_txn)) trusted summon
	env with-abortable-write-transaction txn =>
		transaction-commit: f[txn]

with-abortable-write-transaction<a> a(env lmdb-env, f act transaction-result a(lMDB_txn)) trusted summon
	env with-transaction 0, f

.with-transaction<a> a(env lmdb-env, flags u-int, f act transaction-result a(lMDB_txn)) unsafe summon
	parent-transaction = null ptr-cast-to-extern<MDB_txn, nat8>
	transaction-cell = cell<MDB_txn>: null ptr-cast-to-extern<MDB_txn, nat8>
	check-lmdb-error: env.env mdb_txn_begin parent-transaction, flags, transaction-cell
	transaction = *transaction-cell
	(() => transaction mdb_txn_abort) do-if-error () =>
		match f[transaction lMDB_txn]
		as transaction-abort a
			transaction mdb_txn_abort
			a value
		as transaction-commit c
			check-lmdb-error: transaction mdb_txn_commit
			c value

.empty-val MDB_val() unsafe
	0 MDB_val null

.val-of-bytes MDB_val(a nat8[]) unsafe
	a.size MDB_val a.begin-ptr.as-mut

.bytes-of-val nat8[](a MDB_val) unsafe
	a.mv_data fix-arr-from-begin-end a.mv_data + a.mv_size copy-to-arr

.check-lmdb-error void(a err-t)
	if a != MDB_SUCCESS
		throw: "LMDB error code: {a} ({a error-name})"

.error-name str(a err-t)
	if a == MDB_KEYEXIST
		"MDB_KEYEXIST"
	elif a == MDB_NOTFOUND
		"MDB_NOTFOUND"
	elif a == MDB_PAGE_NOTFOUND
		"MDB_PAGE_NOTFOUND"
	elif a == MDB_CORRUPTED
		"MDB_CORRUPTED"
	elif a == MDB_PANIC
		"MDB_PANIC"
	elif a == MDB_VERSION_MISMATCH
		"MDB_VERSION_MISMATCH"
	elif a == MDB_INVALID
		"MDB_INVALID"
	elif a == MDB_MAP_FULL
		"MDB_MAP_FULL"
	elif a == MDB_DBS_FULL
		"MDB_DBS_FULL"
	elif a == MDB_READERS_FULL
		"MDB_READERS_FULL"
	elif a == MDB_TLS_FULL
		"MDB_TLS_FULL"
	elif a == MDB_TXN_FULL
		"MDB_txn-full"
	elif a == MDB_CURSOR_FULL
		"MDB_CURSOR_FULL"
	elif a == MDB_PAGE_FULL
		"MDB_PAGE_FULL"
	elif a == MDB_MAP_RESIZED
		"MDB_MAP_RESIZED"
	elif a == MDB_INCOMPATIBLE
		"MDB_INCOMPATIBLE"
	elif a == MDB_BAD_RSLOT
		"MDB_BAD_RSLOT"
	elif a == MDB_BAD_TXN
		"MDB_BAD_TXN"
	elif a == MDB_BAD_VALSIZE
		"MDB_BAD_VALSIZE"
	elif a == MDB_BAD_DBI
		"MDB_BAD_DBI"
	else
		a to-str

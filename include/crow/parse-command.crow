no-std
import
	./bool: !, &&, bool, false, true
	./cell: *, cell, new, set-deref
	./col/dict: dict, each, new
	./col/list:
		~, ~~, index-of, is-empty, left, list, middle, new, right, size, subscript, tail,
		try-split-once-by-fn
	./col/mut-dict: move-to-dict, mut-dict, new, set-subscript
	./col/mut-arr: fill-mut-arr, move-to-list, mut-arr, set-subscript, subscript
	./misc: void
	./number: ==
	./opt: !, ??, new, opt
	./str: ==, <=>, hash-mix, literal, str
	./str-conv: interp, finish, to-str, with-str, with-value
	./str-util: starts-with, try-remove-start

###
In this syntax:
* Each name starting with `--` is an argument name, and words after that are its argumets.
* Everything before the first named argument will be left unparsed and put in `nameless`.
* Everything after `--` will be left unparsed and put in `after`.

For example, if the command is: `foo bar --a 1 --b 2 3 -- x y z`:
`nameless` will be: `"foo", "bar"`
`named` will be: `("a", (1,)), ("b", (2, 3))`
`after` will be: `"x", "y", "z"`
###
parsed-command record
	nameless list str
	named list<str>[str]
	after list str

###
See comment on `parsed-command` for syntax.
Parse errors aren't possible with this syntax.
###
parse-command parsed-command(args list str)
	if split ?= args try-split-once-by-fn arg => arg starts-with "--"
		nameless = split.left
		rest = split.middle ~ split.right
		if split2 ?= rest try-split-once-by-fn arg => arg == "--"
			named-args = split2.left parse-named-args-dict
			nameless, named-args, split2.right
		else
			nameless, rest.parse-named-args-dict, ()
	else
		args, (), ()

###
This is stricter than `parse-command`.
It expects only named arguments with no `before` or `after`, and only the names in `arg-names` are allowed.

Returns an array with an entry for each name in `arg-names`.
Values in the array will be a list of the argument values,
or an empty option if the corresponding argument name did not appear.

For example, if the command line is "--a --c d" and arg-names are ("a", "b", "c"),
This will return `((),) (), (("d",),)`.

If the argument syntax is invalid, returns an empty option.
###
parse-named-args list<list<str>?>?(args list str, arg-names list str)
	parsed = args parse-command
	values list<str>? mut[] = arg-names.size fill-mut-arr ()
	err cell bool = false,
	parsed.named each (key, value) =>
		if index ?= arg-names index-of key
			values[index] := ((values[index] ?? ()) ~~ value),
		else
			*err := true
	if parsed.nameless.is-empty && parsed.after.is-empty && !*err
		values.move-to-list,

###
If `a` as a single element, returns that; else throws an exception.

Useful for arguments that should have a single string as their value.
###
single-str-or-throw str(a list<str>?, option-name str)
	if strs ?= a
		if strs.size == 1
			strs[0]
		elif strs.size == 0
			throw "{option-name} needs a value"
		else
			throw "{option-name} got too many values"
	else
		throw "Need {option-name}"

.parse-named-args-dict list<str>[str](args list str)
	res list<str> mut[str] = ()
	args parse-named-args-dict-recur res
	res move-to-dict

.parse-named-args-dict-recur void(args list str, builder list<str> mut[str])
	first-name = (args[0] try-remove-start "--")!
	tl = args tail
	if split ?= tl try-split-once-by-fn arg => arg starts-with "--"
		builder[first-name] := split.left
		(split.middle ~ split.right) parse-named-args-dict-recur builder
	else
		builder[first-name] := tl

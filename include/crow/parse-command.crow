no-std
import
	./bool: &&, bool, false, not, true
	./col/collection:
		.., end, for-break, for-loop, index-of, n-of, set-subscript, split, subscript,
		try-remove-start, with-index
	./col/list: ==, ~~, +, -, begin, end, iterate, is-empty, list, new, next, size, slice
	./col/map: ==, ~=, build, iterate, map, new
	./col/mut-map: iterate, mut-map, new, set-subscript, size
	./col/mut-list: ~=, +, begin, build, move-to, mut-list, new, next, set-next
	./json: json, new, to
	./misc: loop-break, loop-continue, new
	./number: ==, +
	./option: ??, new, option
	./string: ==, begin, end, interpolate, next, slice, string, to
	./symbol: ==, <=>, hash-mix, symbol, to
	./test-util: is
	./tuple: new

###
In this syntax:
* Each name starting with `--` is an argument name, and words after that are its argumets.
* Everything before the first named argument will be left unparsed and put in `nameless`.
* Everything after `--` will be left unparsed and put in `after`.

For example, if the command is: `foo bar --a 1 --b 2 3 -- x y z`:
`nameless` will be: `"foo", "bar"`
`named` will be: `("a", (1,)), ("b", (2, 3))`
`after` will be: `"x", "y", "z"`
###
+parsed-command record
	nameless string[]
	named string[][symbol]
	after string[]

+== bool(a parsed-command, b parsed-command)
	a.nameless == b.nameless && a.named == b.named && a.after == b.after
-to json(a parsed-command)
	("nameless", a.nameless.to), ("named", a.named.to), ("after", a.after.to)

###
See comment on `parsed-command` for syntax.
Parse errors aren't possible with this syntax.
###
+parse-command parsed-command(args string[])
	nameless string mut[] = ()
	named string mut[] mut[symbol] = ()
	after mut string[] = ()
	cur mut string mut[] = nameless
	for i, arg : args with-index
		if arg == "--"
			after := args[i + 1 .. end]
			break
		elif name ?= arg try-remove-start "--"
			cur := ()
			named[name to] := cur
			continue
		else
			cur ~= arg
			continue
	nameless.move-to, (for k, v : named; k, v.move-to), after

test
	("foo --bar baz -- bang" split " ").parse-command is (("foo",), (("bar", ("baz",)),), ("bang",))

###
This is stricter than `parse-command`.
It expects only named arguments with no `before` or `after`,
and only the names in `arg-names` are allowed.

Returns an array with an entry for each name in `arg-names`.
Values in the array will be a list of the argument values,
or an empty option if the corresponding argument name did not appear.

For example, if the command line is "--a --c d" and arg-names are ("a", "b", "c"),
This will return `((),) (), (("d",),)`.

If the argument syntax is invalid, returns an empty option.
###
+parse-named-args string[]?[]?(args string[], arg-names symbol[])
	parsed = args parse-command
	values string[]? mut[] = arg-names.size n-of ()
	err mut = false
	for key, value : parsed named
		if index ?= arg-names index-of key
			values[index] := ((values[index] ?? ()) ~~ value),
		else
			err := true
	if parsed.nameless.is-empty && parsed.after.is-empty && !err
		values.move-to,

###
If `a` as a single element, returns that; else throws an exception.

Useful for arguments that should have a single string as their value.
###
+single-string-or-throw string(a string[]?, option-name string)
	if strs ?= a
		if strs.size == 1
			strs[0]
		elif strs.size == 0
			throw "{option-name} needs a value"
		else
			throw "{option-name} got too many values"
	else
		throw "Need {option-name}"

no-std
import
	./bool: !, &&, bool, false, true
	./cell: *, cell, new, set-deref
	./col/arr: ~~, arr, is-empty, new, size, subscript
	./col/arr-util: find-index, index-of, tail
	./col/dict: dict, each, new
	./col/mut-dict: move-to-dict, mut-dict, new, set-subscript
	./col/mut-arr: fill-mut-arr, move-to-arr, mut-arr, set-subscript, subscript
	./exception: throw
	./hash: hash-mix
	./misc: void
	./number: ==, <=>, +
	./opt: !, ??, new, opt
	./range: ..
	./str: ==, <=>, literal, str
	./str-conv: interp, finish, to-str, with-str, with-value
	./str-util: starts-with, try-remove-start

###
In this syntax:
* Each name starting with `--` is an argument name, and words after that are its argumets.
* Everything before the first named argument will be left unparsed and put in `nameless`.
* Everything after `--` will be left unparsed and put in `after`.

For example, if the command is: `foo bar --a 1 --b 2 3 -- x y z`:
`nameless` will be: `"foo", "bar"`
`named` will be: `("a", (1,)), ("b", (2, 3))`
`after` will be: `"x", "y", "z"`
###
parsed-command record
	nameless str[]
	named str[][str]
	after str[]

###
See comment on `parsed-command` for syntax.
Parse errors aren't possible with this syntax.
###
parse-command parsed-command(args str[])
	# Find the location of the first name beginning in '--'
	if first-named-arg-index ?= args find-index arg => arg starts-with "--"
		nameless = args[0 .. first-named-arg-index]
		rest = args[first-named-arg-index .. args.size]
		if sep-index ?= rest find-index arg => arg == "--"
			named-args = rest[0 .. sep-index] parse-named-args
			nameless, named-args, rest[sep-index + 1 .. rest.size]
		else
			nameless, rest.parse-named-args, ()
	else
		args, (), ()

###
This is stricter than `parse-command`.
It expects only named arguments with no `before` or `after`, and only the names in `arg-names` are allowed.

Returns an array with an entry for each name in `arg-names`.
Values in the array will be a list of the argument values,
or an empty option if the corresponding argument name did not appear.

For example, if the command line is "--a --c d" and arg-names are ("a", "b", "c"),
This will return `((),) (), (("d",),)`.

If the argument syntax is invalid, returns an empty option.
###
parse-named-args str[]?[]?(args str[], arg-names str[])
	parsed = args parse-command
	values str[]? mut[] = arg-names.size fill-mut-arr ()
	err cell bool = false,
	parsed.named each (key, value) =>
		if index ?= arg-names index-of key
			values[index] := ((values[index] ?? ()) ~~ value),
		else
			*err := true
	if parsed.nameless.is-empty && parsed.after.is-empty && !*err
		values.move-to-arr,

###
If `a` as a single element, returns that; else throws an exception.

Useful for arguments that should have a single string as their value.
###
single-str-or-throw str(a str[]?, option-name str)
	if strs ?= a
		if strs.size == 1
			strs[0]
		elif strs.size == 0
			throw: "{option-name} needs a value"
		else
			throw: "{option-name} got too many values"
	else
		throw: "Need {option-name}"

.parse-named-args str[][str](args str[])
	res str[] mut[str] = ()
	args parse-named-args-recur res
	res move-to-dict

.parse-named-args-recur void(args str[], builder str[] mut[str])
	first-name = (args[0] try-remove-start "--")!
	tl = args tail
	if next-named-arg-index ?= tl find-index arg => arg starts-with "--"
		builder[first-name] := tl[0 .. next-named-arg-index]
		tl[next-named-arg-index .. tl.size] parse-named-args-recur builder
	else
		builder[first-name] := tl

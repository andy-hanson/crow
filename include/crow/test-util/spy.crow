###
Module for creating dummy callbacks for use in tests.
Spies record each call and output to an array.
###

no-std
import
	../col/list: ==, list, new
	../col/mut-list: ~=, move-to-list, mut-list, new
	../fun-util: subscript
	../json: json
	../number: ==, +, nat64
	../test-util: is
	../tuple: ==, new, pair

spy-act1[out, in] record mut
	.calls-builder in mut[]
	fn act out(in)

# Create a spy that calls `f`.
new[out, in] (out, in) spy-act1(f act out(in))
	calls in mut[] = ()
	calls, in =>
		calls ~= in
		f[in]

# Returns the argument to every call since the last time `calls` was called.
calls[out, in] in[](a (out, in) spy-act1)
	a.calls-builder move-to-list

spy-act2[out, in0, in1] record mut
	.calls-builder (in0, in1) mut[]
	fn act out(in0, in1)

# Create a spy that calls `f`.
new[out, in0, in1] (out, in0, in1) spy-act2(f act out(in0, in1))
	calls (in0, in1) mut[] = ()
	calls, (a, b) =>
		calls ~= (a, b)
		f[a, b]

# Returns the arguments to every call since the last time `calls` was called.
calls[out, in0, in1] (in0, in1)[](a (out, in0, in1) spy-act2)
	a.calls-builder move-to-list

test
	spy (nat64, nat64, nat64) spy-act2 = ((x, y) => x + y),
	spy.fn[1, 2] is 3
	spy.fn[3, 4] is 7
	spy.calls is ((1, 2), (3, 4))
	spy.calls is ()

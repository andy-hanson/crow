###
Module for creating dummy callbacks for use in tests.
Spies record each call and output to an array.
###

no-std
import
	../bool: bool
	../col/list: list, list-equal, new
	../col/mut-arr: ~=, move-to-list, mut-arr, new
	../fun-util: subscript
	../number: ==, +, nat64
	../test-util: is
	../tuple: new, pair, pair-equal

spy-act1<out, in> record mut
	.calls-builder in mut[]
	fn act out(in)

# Create a spy that calls `f`.
new<out, in> spy-act1<out, in>(f act out(in))
	calls in mut[] = ()
	calls, in =>
		calls ~= in
		f[in]

# Returns the argument to every call since the last time `calls` was called.
calls<out, in> in[](a spy-act1<out, in>)
	a.calls-builder move-to-list

spy-act2<out, in0, in1> record mut
	.calls-builder pair<in0, in1> mut[]
	fn act out(in0, in1)

# Create a spy that calls `f`.
new<out, in0, in1> spy-act2<out, in0, in1>(f act out(in0, in1))
	calls pair<in0, in1> mut[] = ()
	calls, (a, b) =>
		calls ~= (a, b)
		f[a, b]

# Returns the arguments to every call since the last time `calls` was called.
calls<out, in0, in1> pair<in0, in1>[](a spy-act2<out, in0, in1>)
	a.calls-builder move-to-list

test
	spy spy-act2<nat64, nat64, nat64> = ((x, y) => x + y),
	spy.fn[1, 2] is 3
	spy.fn[3, 4] is 7
	spy.calls is ((1, 2), (3, 4))
	spy.calls is ()

# TODO: list equality should be generic
.== bool(a pair<nat64, nat64>[], b pair<nat64, nat64>[])
	a list-equal b

.== bool(a pair<nat64, nat64>, b pair<nat64, nat64>)
	a pair-equal b

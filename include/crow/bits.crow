no-std
import
	.bool: &&, ?, bool
	.compare: !=, <
	.fun: subscript
	.private.bootstrap:
		int8, int16, int32, int64, nat8, nat16, nat32, nat64, todo
	.private.number-low-level:
		==, <=>, to-int64, to-nat64, unsafe-to-int32, unsafe-to-int64, unsafe-to-nat8, unsafe-to-nat64,
		unsafe-to-nat16, unsafe-to-nat32, wrap-add, wrap-mul

###
Negates each bit in parallel.
0 bits become 1 bits and vice versa.
###
bits-not nat64(a nat64) noctx builtin

###
Intersects each corresponding bit in parallel.
Output bits will be 1 iff both input bits are.
###
& nat8(a nat8, b nat8) noctx builtin
& nat16(a nat16, b nat16) noctx builtin
& nat32(a nat32, b nat32) noctx builtin
& nat64(a nat64, b nat64) noctx builtin
& int8(a int8, b int8) noctx builtin
& int16(a int16, b int16) noctx builtin
& int32(a int32, b int32) noctx builtin
& int64(a int64, b int64) noctx builtin

bits-diff nat64(a nat64, b nat64)
	a & b.bits-not

###
Unions each corresponding bit in parallel.
Output bits will be 1 iff either input bit is.
###
| nat8(a nat8, b nat8) noctx builtin
| nat16(a nat16, b nat16) noctx builtin
| nat32(a nat32, b nat32) noctx builtin
| nat64(a nat64, b nat64) noctx builtin
| int16(a int16, b int16) noctx builtin
| int32(a int32, b int32) noctx builtin
| int64(a int64, b int64) noctx builtin

^ nat8(a nat8, b nat8) noctx builtin
^ nat16(a nat16, b nat16) noctx builtin
^ nat32(a nat32, b nat32) noctx builtin
^ nat64(a nat64, b nat64) noctx builtin
^ int8(a int8, b int8) noctx builtin
^ int16(a int16, b int16) noctx builtin
^ int32(a int32, b int32) noctx builtin
^ int64(a int64, b int64) noctx builtin

# True if the numbers have at least one bit in common.
bits-intersect? bool(a int16, b int16) noctx
	a & b != 0
bits-intersect? bool(a int32, b int32) noctx
	a & b != 0
bits-intersect? bool(a nat32, b nat32) noctx
	a & b != 0
bits-intersect? bool(a nat64, b nat64) noctx
	a & b != 0

# True if all 1 bits in 'b' are 1 bits in 'a'.
has-all-bits? bool(a nat64, b nat64) noctx
	a & b == b

unsafe-bit-shift-left nat64(a nat64, b nat64) noctx builtin unsafe
unsafe-bit-shift-right nat64(a nat64, b nat64) noctx builtin unsafe

# Shifts the bits of 'a' left by 'b' bits.
<< nat8(a nat8, b nat8) noctx trusted
	if b < 8
		a.to-nat64 unsafe-bit-shift-left b.to-nat64 unsafe-to-nat8
	else
		0
<< nat16(a nat16, b nat16) noctx trusted
	if b < 16
		a.to-nat64 unsafe-bit-shift-left b.to-nat64 unsafe-to-nat16
	else
		0
<< nat32(a nat32, b nat32) noctx trusted
	if b < 32
		a.to-nat64 unsafe-bit-shift-left b.to-nat64 unsafe-to-nat32
	else
		0
<< nat64(a nat64, b nat64) noctx trusted
	if b < 64
		a unsafe-bit-shift-left b
	else
		0

<< nat64(a nat64, b int64) noctx trusted
	if b < 0
		a >>: b wrap-mul -1 unsafe-to-nat64
	else
		a << b.unsafe-to-nat64

# Shifts the bits of 'a' right by 'b' bits.
>> nat32(a nat32, b nat32) noctx trusted
	if b < 32
		a.to-nat64 unsafe-bit-shift-right b.to-nat64 unsafe-to-nat32
	else
		0
>> nat64(a nat64, b nat64) noctx trusted
	if b < 64
		a unsafe-bit-shift-right b
	else
		0

>> nat64(a nat64, b int64) noctx trusted
	if b < 0
		a <<: b wrap-mul -1 unsafe-to-nat64
	else
		a >> b.unsafe-to-nat64

>> int32(a int32, b int32) noctx trusted
	if a < 0
		todo
	elif b < 0
		todo
	elif b < 32
		unsafe-to-int32: a.to-int64.unsafe-to-nat64 unsafe-bit-shift-right b.to-int64.unsafe-to-nat64 unsafe-to-int64
	else
		todo

nth-bit nat64(bit-index nat64)
	1 << bit-index

bit? bool(a nat64, bit-index nat64)
	a bits-intersect? bit-index.nth-bit

add-bit nat64(a nat64, bit-index nat64)
	a | bit-index.nth-bit

sub-bit nat64(a nat64, bit-index nat64)
	a bits-diff bit-index.nth-bit

# Number of 1 bits in the binary representation.
count-ones nat64(a nat64) noctx builtin

# Calls 'f' on the index of each '1' bit.
fold-one-bits ?a(acc ?a, a nat64, f act ?a(?a, nat64))
	acc fold-one-bits-recur a, 0, f
# TODO:PERF faster way?
.fold-one-bits-recur ?a(acc ?a, a nat64, offset nat64, f act ?a(?a, nat64)) trusted
	if a == 0
		acc
	else
		new-acc = a bits-intersect? 1 ? f[acc, offset], acc
		new-acc fold-one-bits-recur (a unsafe-bit-shift-right 1), (offset wrap-add 1), f

filter-bits nat64(a nat64, f act bool(nat64))
	0 filter-bits-recur a, 0, f
.filter-bits-recur nat64(acc nat64, a nat64, offset nat64, f act bool(nat64)) trusted
	if a == 0
		acc
	else
		new-acc = if a bits-intersect? 1 && f[offset]
			acc add-bit offset
		else
			acc
		new-acc filter-bits-recur (a unsafe-bit-shift-right 1), (offset wrap-add 1), f

bits-cat nat64(a nat32, b nat32)
	a.to-nat64 << 32 | b.to-nat64

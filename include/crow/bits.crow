###
Functions for operating on the individual bits in nats / ints.

Bit indexes are counted from the right, so the least-siginificant digit is 0.
So, the number 5 has bits 0 and 2 set, since 5 is `2**0 + 2**2`.
###

no-std
import
	./bool: &&, bool, false, true
	./compare: !=, <
	./fun-util: subscript
	./number: ==, <=>, +, int8, int16, int32, int64, nat8, nat16, nat32, nat64, new, to
	./private/bootstrap: todo
	./private/number-low-level: unsafe-to, wrap-sub

###
Negates every bit.
0 bits become 1 bits and vice versa.
###
+~ nat64(a nat64) builtin, bare

###
Intersection of bits; 'and's each corresponding bit in parallel.
An output bit will be 1 iff both corresponding input bits are 1.
###
+& nat8(a nat8, b nat8) builtin, bare
+& nat16(a nat16, b nat16) builtin, bare
+& nat32(a nat32, b nat32) builtin, bare
+& nat64(a nat64, b nat64) builtin, bare
+& int8(a int8, b int8) builtin, bare
+& int16(a int16, b int16) builtin, bare
+& int32(a int32, b int32) builtin, bare
+& int64(a int64, b int64) builtin, bare

###
Union of bits; 'or's each corresponding bit in parallel.
An output bit will be 1 iff either corresponding input bit is 1.
###
+| nat8(a nat8, b nat8) builtin, bare
+| nat16(a nat16, b nat16) builtin, bare
+| nat32(a nat32, b nat32) builtin, bare
+| nat64(a nat64, b nat64) builtin, bare
+| int16(a int16, b int16) builtin, bare
+| int32(a int32, b int32) builtin, bare
+| int64(a int64, b int64) builtin, bare

###
Performs exclusive or of each bit in parallel.
Output bits will be 1 iff the corresponding input bits are not equal.
###
+^ nat8(a nat8, b nat8) builtin, bare
+^ nat16(a nat16, b nat16) builtin, bare
+^ nat32(a nat32, b nat32) builtin, bare
+^ nat64(a nat64, b nat64) builtin, bare
+^ int8(a int8, b int8) builtin, bare
+^ int16(a int16, b int16) builtin, bare
+^ int32(a int32, b int32) builtin, bare
+^ int64(a int64, b int64) builtin, bare

###
Shifts the bits of 'a' left by 'b' bits.

Does not rotate.
###
+<< nat8(a nat8, b nat8) bare
	if b < 8
		trusted a.to unsafe-bit-shift-left b.to unsafe-to
+<< nat16(a nat16, b nat16) bare
	if b < 16
		trusted a.to unsafe-bit-shift-left b.to unsafe-to
+<< nat32(a nat32, b nat32) bare
	if b < 32
		trusted a.to unsafe-bit-shift-left b.to unsafe-to
+<< nat64(a nat64, b nat64) bare
	if b < 64
		trusted a unsafe-bit-shift-left b

###
Shifts the bits of 'a' right by 'b' bits.

Does not rotate.
###
+>> nat32(a nat32, b nat32) bare
	if b < 32
		trusted a.to unsafe-bit-shift-right b.to unsafe-to
+>> nat64(a nat64, b nat64) bare
	if b < 64
		trusted a unsafe-bit-shift-right b
+>> int32(a int32, b int32) bare
	if a < 0
		todo
	elif b < 0
		todo
	elif b < 32
		trusted a.unsafe-to unsafe-bit-shift-right b.unsafe-to unsafe-to
	else
		todo

# True iff the numbers have at least one bit in common.
+bits-intersect bool(a int16, b int16) bare
	a & b != 0
+bits-intersect bool(a int32, b int32) bare
	a & b != 0
+bits-intersect bool(a nat32, b nat32) bare
	a & b != 0
+bits-intersect bool(a nat64, b nat64) bare
	a & b != 0

# True iff for every 1 bit in `b`, the corresponding bit in `a` is also a 1.
+has-all-bits bool(a nat64, b nat64) bare
	a & b == b

unsafe-bit-shift-left nat64(a nat64, b nat64) builtin, bare, unsafe
unsafe-bit-shift-right nat64(a nat64, b nat64) builtin, bare, unsafe

###
Number with only the bit at `bit-index` set.

Same as `1 << bit-index`.
###
+nth-bit nat64(bit-index nat64)
	1 << bit-index

# True if the bit at `bit-index` is set.
+has-bit bool(a nat64, bit-index nat64)
	a bits-intersect bit-index.nth-bit

# Sets the bit at `bit-index` to 1.
+add-bit nat64(a nat64, bit-index nat64)
	a | bit-index.nth-bit

# Sets the bit at `bit-index` to 0.
+sub-bit nat64(a nat64, bit-index nat64)
	a & ~bit-index.nth-bit

# Returns the number of 1 bits in `a`.
+count-ones nat64(a nat64) builtin, bare

one-bits record
	-inner nat64
one-bits one-bits(a nat64)
	a,
# Calls `f` on the index of each `1` bit.
iterate bool(a one-bits, f act bool(nat64))
	cur mut = a inner
	offset mut = 0
	loop
		if cur == 0
			break false
		elif cur bits-intersect 1 && f[offset]
			break true
		else
			cur >>:= 1
			offset +:= 1
			continue

###
Concatenates two 32-bit numbers to a 64-bit number.

`a` will be the high bits and `b` will be the low bits.
###
bits-cat nat64(a nat32, b nat32)
	a.to << 32 | b.to

# Number with the highest `n` bits set.
high-n-bits nat64(n nat64)
	if n < 64
		~(64 wrap-sub n).low-n-bits
	else
		# TODO: warn if n > 64
		0xffffffffffffffff

# Number with the lowest `n` bits set.
low-n-bits nat64(n nat64)
	if n < 64
		(1 << n) wrap-sub 1
	else
		# TODO: warn if n > 64
		0xffffffffffffffff

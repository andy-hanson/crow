###
More string functions are in `crow/str-conv` and `crow/str-util`.
Also, `crow/reader` is useful for parsing strings, and `crow-writer` is useful for generating strings.
###

no-std
import
	./bool: bool
	./compare: comparison
	./col/arr: arr, arr-equal
	./col/private/arr-low-level: arr-from-begin-end
	./col/seq: ~, ~~, is-empty, seq, seq-compare, seq-equal, size, to-arr, to-seq
	./private/number-low-level: ==, <=>, nat64
	./private/c-str-util: find-c-str-end
export
	./private/bootstrap: char, c-str, to-char, to-nat8

###
String type.

Strings are optimized for fast concatenation and splitting.
They don't support efficient access by index, so use iterators instead.
###
str record
	by-val
	.inner seq char

as-seq seq char(a str) no-doc
	a inner

str-from-seq str(a seq char) no-doc
	a,

###
Converts a string to an array of UTF8 character codes.
This is O(n).
###
char8s char[](a str)
	a.inner to-arr

###
Treat an array of characters as a string.
This is O(1).
###
str str(a char[]) noctx
	a.to-seq,

literal str(a c-str) noctx trusted
	a arr-from-begin-end a.find-c-str-end str

# Same as `""`.
new str() noctx
	""

###
Concatenate two strings.
This is O(n).

If you need to concatenate many strings, consider using the `crow/writer` module.
###
~~ str(a str, b str)
	a.inner ~~ b.inner,

~ str(a char, b str)
	a ~ b.inner,

~ str(a str, b char)
	a.inner ~ b,

# Same as `a == ""`.
is-empty bool(a str)
	a.inner is-empty

###
Number of `char8`s in the UTF-8 representation of `a`.
This is O(n).
###
size-char8s nat64(a str)
	a.inner size

== bool(a str, b str) trusted
	a.inner seq-equal b.inner
== bool(a char, b char) noctx
	a.to-nat8 == b.to-nat8

<=> comparison(a str, b str) trusted
	a.inner seq-compare b.inner
<=> comparison(a char, b char) noctx
	a.to-nat8 <=> b.to-nat8

# TODO: this should be generic on all arrs
== bool(a char[], b char[]) no-doc
	a arr-equal b
== bool(a str[], b str[]) no-doc
	a arr-equal b

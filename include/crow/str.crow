###
More string functions are in `crow/str-conv` and `crow/str-util`.
Also, `crow/reader` is useful for parsing strings, and `crow-writer` is useful for generating strings.
###

no-std
import
	./bool: bool
	./compare: comparison
	./col/list: ~, ~~, for-loop, is-empty, list, list-compare, list-equal, to-list
	./col/private/arr-low-level: arr-from-begin-end
	./hash: hasher, hash-mix
	./misc: void
	./number: ==, <=>, to-nat64
	./private/c-str-util: find-c-str-end
export
	./private/bootstrap: char8, c-str, to-char8, to-nat8

###
String type.

Strings are optimized for fast concatenation and splitting.
They don't support efficient access by index, so use iterators instead.
###
str record by-val
	.inner list char8

char8s list char8(a str)
	a inner

###
Treat a list of UTF-8 character codes as a string.
This is O(1).
###
str str(a list char8) noctx
	a,

literal str(a c-str) noctx trusted
	(a arr-from-begin-end a.find-c-str-end).to-list str

###
Concatenate two strings.
This is O(n).

If you need to concatenate many strings, consider using the `crow/writer` module.
###
~~ str(a str, b str)
	a.inner ~~ b.inner,

~ str(a char8, b str)
	a ~ b.inner,

~ str(a str, b char8)
	a.inner ~ b,

# Same as `""`.
new str() noctx
	""

# Same as `a == ""`.
is-empty bool(a str)
	a.inner is-empty

== bool(a str, b str) noctx trusted
	a.inner list-equal b.inner
== bool(a char8, b char8) noctx
	a.to-nat8 == b.to-nat8

<=> comparison(a str, b str) trusted
	a.inner list-compare b.inner
<=> comparison(a char8, b char8) noctx
	a.to-nat8 <=> b.to-nat8

hash-mix void(hasher hasher, a str)
	for c : a char8s
		hasher hash-mix c.to-nat8.to-nat64

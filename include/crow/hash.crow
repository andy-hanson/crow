no-std
import
	./bool: bool, to-nat64
	./col/arr-util: each
	./misc: as, void
	./number: nat64, to-nat64
	./ptr: by-val, ref-of-val
	./str: chars, str, to-nat8
	./private/number-low-level: wrap-add

hash nat64(a ?a) trusted hash-mix<?a>
	hasher = as<by-val hasher>: hasher: 0
	hasher.ref-of-val hash-mix a
	hasher.ref-of-val cur

hash-mix<?a> spec
	hash-mix void(hasher hasher, a ?a)

hash nat64(a bool)
	a to-nat64

hasher record mut
	cur mut nat64

hash-mix void(hasher hasher, a nat64)
	# TODO: better hash mixing algorithm
	hasher.cur := hasher.cur wrap-add a

hash-mix void(hasher hasher, a bool)
	hasher hash-mix a.to-nat64

hash-mix void(hasher hasher, a str)
	a.chars each c =>
		hasher hash-mix c.to-nat8.to-nat64

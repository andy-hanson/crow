###
Functions for getting hash codes.

Hash codes are used internally by dictionary and set types,
which require a `hash-mix` implementation for the key type.
###

no-std
import
	./bool: bool, to-nat64
	./misc: void
	./number: int8, int16, int32, int64, nat8, nat16, nat32, nat64, to-int64, to-nat64
	./private/number-low-level: unsafe-to-nat64, wrap-add

###
Spec that should be implemented for any type used as a dictionary key.

`hash-mix` on a composite type (such as a record or collection)
usually just calls `hash-mix` for each value it contains.

`hash-mix` on a union should mix a number or name for the union member,
then mix its associated value, if any.
###
hash-mix<a> spec
	hash-mix void(hasher hasher, a a)

# Get a hash code for any value.
hash<a> nat64(a a) trusted hash-mix<a>
	hasher hasher = 0,
	hasher hash-mix a
	hasher cur

# Type that stores the state of hashing.
hasher record mut
	.cur mut nat64

hash-mix void(hasher hasher, a nat8)
	hasher hash-mix a.to-nat64
hash-mix void(hasher hasher, a nat16)
	hasher hash-mix a.to-nat64
hash-mix void(hasher hasher, a nat32)
	hasher hash-mix a.to-nat64
hash-mix void(hasher hasher, a nat64)
	# TODO: better hash mixing algorithm
	hasher.cur := hasher.cur wrap-add a
hash-mix void(hasher hasher, a int8)
	hasher hash-mix a.to-int64
hash-mix void(hasher hasher, a int16)
	hasher hash-mix a.to-int64
hash-mix void(hasher hasher, a int32)
	hasher hash-mix a.to-int64
hash-mix void(hasher hasher, a int64) trusted
	# TODO: we need 'wrap-to-nat64'
	hasher hash-mix a.unsafe-to-nat64

hash-mix void(hasher hasher, a bool)
	hasher hash-mix a.to-nat64

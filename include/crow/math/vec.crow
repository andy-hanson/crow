no-std
import
	../col/array: array, new
	../number: +, -, *, /, float32, float64, to
	../string: interpolate, string, to
	../test-util: throws
	./math: square-root

# 2-dimensional vector with 32-bit elements.
+vec2-32 record(x float32, y float32) extern
# 2-dimensional vector with 64-bit elements.
+vec2-64 record(x float64, y float64) extern

# 3-dimensional vector with 32-bit elements.
+vec3-32 record(x float32, y float32, z float32) extern
# 3-dimensional vector with 64-bit elements.
+vec3-64 record(x float64, y float64, z float64) extern

# 0 vector.
+new vec2-32() bare
	0, 0
+new vec2-64() bare
	0, 0
+new vec3-32() bare
	0, 0, 0
+new vec3-64() bare
	0, 0, 0

# `"<x, y>"`
+to string(a vec2-32)
	"<{a x}, {a y}>"
+to string(a vec2-64)
	"<{a x}, {a y}>"
# `"<x, y, z>"`
+to string(a vec3-32)
	"<{a x}, {a y}, {a z}>"
+to string(a vec3-64)
	"<{a x}, {a y}, {a z}>"

+to float32 array(a vec2-32)
	a.x, a.y
+to float64 array(a vec2-64)
	a.x, a.y
+to float32 array(a vec3-32)
	a.x, a.y, a.z
+to float64 array(a vec3-64)
	a.x, a.y, a.z

region named directions

+left vec2-32() bare
	-1, 0
+left vec2-64() bare
	-1, 0
+left vec3-32() bare
	-1, 0, 0
+left vec3-64() bare
	-1, 0, 0
+right vec2-32() bare
	1, 0
+right vec2-64() bare
	1, 0
+right vec3-32() bare
	1, 0, 0
+right vec3-64() bare
	1, 0, 0
+up vec2-32() bare
	0, 1
+up vec2-64() bare
	0, 1
+up vec3-32() bare
	0, 1, 0
+up vec3-64() bare
	0, 1, 0
+down vec2-32() bare
	0, -1
+down vec2-64() bare
	0, -1
+down vec3-32() bare
	0, -1, 0
+down vec3-64() bare
	0, -1, 0
+forward vec3-32() bare
	0, 0, 1
+forward vec3-64() bare
	0, 0, 1
+backward vec3-32() bare
	0, 0, -1
+backward vec3-64() bare
	0, 0, -1

# Vector addition -- adds corresponding elements.
+ + vec2-32(a vec2-32, b vec2-32) bare
	a.x + b.x, a.y + b.y
+ + vec2-64(a vec2-64, b vec2-64) bare
	a.x + b.x, a.y + b.y
+ + vec3-32(a vec3-32, b vec3-32) bare
	a.x + b.x, a.y + b.y, a.z + b.z
+ + vec3-64(a vec3-64, b vec3-64) bare
	a.x + b.x, a.y + b.y, a.z + b.z

# Vector subtraction -- subtracts corresponding elements.
+- vec2-32(a vec2-32, b vec2-32) bare
	a.x - b.x, a.y - b.y
+- vec2-64(a vec2-64, b vec2-64) bare
	a.x - b.x, a.y - b.y
+- vec3-32(a vec3-32, b vec3-32) bare
	a.x - b.x, a.y - b.y, a.z - b.z
+- vec3-64(a vec3-64, b vec3-64) bare
	a.x - b.x, a.y - b.y, a.z - b.z

+- vec2-32(a vec2-32) bare
	a * -1
+- vec2-64(a vec2-64) bare
	a * -1
+- vec3-32(a vec3-32) bare
	a * -1
+- vec3-64(a vec3-64) bare
	a * -1

# Scales a vector by a scalar.
+* vec2-32(a vec2-32, b float32) bare
	a.x * b, a.y * b
+* vec2-64(a vec2-64, b float64) bare
	a.x * b, a.y * b
+* vec3-32(a vec3-32, b float32) bare
	a.x * b, a.y * b, a.z * b
+* vec3-64(a vec3-64, b float64) bare
	a.x * b, a.y * b, a.z * b

+* vec2-32(a float32, b vec2-32) bare
	b * a
+* vec2-64(a float64, b vec2-64) bare
	b * a
+* vec3-32(a float32, b vec3-32) bare
	b * a
+* vec3-64(a float64, b vec3-64) bare
	b * a

+/ vec2-32(a vec2-32, b float32)
	a * (1 / b)
+/ vec2-64(a vec2-64, b float64)
	a * (1 / b)
+/ vec3-32(a vec3-32, b float32)
	a * (1 / b)
+/ vec3-64(a vec3-64, b float64)
	a * (1 / b)

# Equivalent to `a.length ** 2` (but more efficient).
+length-squared float32(a vec2-32) bare
	a dot a
+length-squared float64(a vec2-64) bare
	a dot a
+length-squared float32(a vec3-32) bare
	a dot a
+length-squared float64(a vec3-64) bare
	a dot a

# Vector length, also known as the magnitude or norm.
+length float32(a vec2-32) bare
	a.length-squared square-root
+length float64(a vec2-64) bare
	a.length-squared square-root
+length float32(a vec3-32) bare
	a.length-squared square-root
+length float64(a vec3-64) bare
	a.length-squared square-root

###
Scale vector length to 1.
Throws if length is 0.
###
+normalize vec2-32(a vec2-32)
	a / a.length
+normalize vec2-64(a vec2-64)
	a / a.length
+normalize vec3-32(a vec3-32)
	a / a.length
+normalize vec3-64(a vec3-64)
	a / a.length
test
	(() => ()::vec2-32.normalize) throws "divide by 0"

+dot float32(a vec2-32, b vec2-32) bare
	a.x * b.x + a.y * b.y
+dot float64(a vec2-64, b vec2-64) bare
	a.x * b.x + a.y * b.y
+dot float32(a vec3-32, b vec3-32) bare
	a.x * b.x + a.y * b.y + a.z * b.z
+dot float64(a vec3-64, b vec3-64) bare
	a.x * b.x + a.y * b.y + a.z * b.z

+to vec2-32(a vec2-64) bare
	a.x.to, a.y.to
+to vec2-64(a vec2-32) bare
	a.x.to, a.y.to
+to vec3-32(a vec3-64) bare
	a.x.to, a.y.to, a.z.to
+to vec3-64(a vec3-32) bare
	a.x.to, a.y.to, a.z.to

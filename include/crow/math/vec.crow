no-std
import
	../number: +, -, *, **, float32, float64, square-root
	../str: literal, str
	../str-conv: finish, interp, to-str, with-str, with-value

# 2-dimensional vector.
vec2 record
	by-val
	x float64
	y float64

# 2-dimensional vector with 32-bit elements.
vec2-32 record
	by-val
	x float32
	y float32

# 0 vector.
new vec2()
	0, 0
# 0 vector.
new vec2-32()
	0, 0

# Vector addition -- adds corresponding elements.
+ vec2(a vec2, b vec2) noctx
	a.x + b.x, a.y + b.y
+ vec2-32(a vec2-32, b vec2-32) noctx
	a.x + b.x, a.y + b.y

# Vector subtraction -- subtracts corresponding elements.
- vec2(a vec2, b vec2) noctx
	a.x - b.x, a.y - b.y
- vec2-32(a vec2-32, b vec2-32) noctx
	a.x - b.x, a.y - b.y

# Scales a vector by a scalar.
* vec2(a vec2, b float64) noctx
	a.x * b, a.y * b
* vec2-32(a vec2-32, b float32) noctx
	a.x * b, a.y * b

# Equivalent to `a.length ** 2` (but more efficient).
length-squared float64(a vec2) noctx
	a.x ** 2 + a.y ** 2
length-squared float32(a vec2-32) noctx
	a.x ** 2 + a.y ** 2

# Vector length, also known as the magnitude or norm.
length float64(a vec2) noctx
	a.length-squared square-root
length float32(a vec2-32) noctx
	a.length-squared square-root

# `"<x, y>"`
to-str str(a vec2)
	"<{a x}, {a y}>"
to-str str(a vec2-32)
	"<{a x}, {a y}>"

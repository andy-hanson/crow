+pi float64() bare
	3.14159265358979323846
+pi float32() bare
	pi::float64.to
# pi / 2
+pi_2 float64() bare
	# TODO: add '23' to the end
	1.5707963267948996619
+pi_2 float32() bare
	pi_2::float64.to
# pi / 4
+pi_4 float64() bare
	# TODO: add '62' to the end
	0.785398163397448309
+pi_4 float32() bare
	pi_4::float64.to

# Used for a non-total function like 'square-root'
+float-out-of-range record(input float64) by-val, exception variant-member
+describe string(a float-out-of-range)
	"Input is not in the domain of the function: {a input}"

+square-root float32(a float32) bare
	assert a >= 0 : a.to float-out-of-range
	trusted a sqrt
+square-root float64(a float64) bare
	assert a >= 0 : a float-out-of-range
	trusted a sqrt

# Unsafe for negative inputs (NaN in debug builds but not in optimized builds)
-sqrt float32(a float32) bare, builtin, unsafe
-sqrt float64(a float64) bare, builtin, unsafe
+acos float32(a float32) bare, builtin
+acos float64(a float64) bare, builtin
+asin float32(a float32) bare, builtin
+asin float64(a float64) bare, builtin
+atan float32(a float32) bare, builtin
+atan float64(a float64) bare, builtin
+atan2 float32(y float32, x float32) bare, builtin
+atan2 float64(y float64, x float64) bare, builtin
+cos float32(a float32) bare, builtin
+cos float64(a float64) bare, builtin
+sin float32(a float32) bare, builtin
+sin float64(a float64) bare, builtin
+tan float32(a float32) bare, builtin
+tan float64(a float64) bare, builtin
+acosh float32(a float32) bare, builtin
+acosh float64(a float64) bare, builtin
+asinh float32(a float32) bare, builtin
+asinh float64(a float64) bare, builtin
+atanh float32(a float32) bare, builtin
+atanh float64(a float64) bare, builtin
+cosh float32(a float32) bare, builtin
+cosh float64(a float64) bare, builtin
+sinh float32(a float32) bare, builtin
+sinh float64(a float64) bare, builtin
+tanh float32(a float32) bare, builtin
+tanh float64(a float64) bare, builtin

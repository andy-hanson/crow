no-std
import
	./misc: new, void
	./number: nat64
	./pointer: as-any-mut-pointer, as-const, as-ref, by-val, const-pointer, mut-pointer, pointer-cast

###
Mutable reference to a single value.
Example:
```
c cell nat = 1,
*c is 1
*c := *c + 1
*c is 2
```
###
cell<a> record mut by-ref extern
	.ignore void
	.inner-value mut a

# Creates a new cell with `a` as its initial value.
new<a> cell a(a a)
	(), a

new<a> by-val cell a(a a) no-doc noctx
	(), a

# Gets the value in the cell.
* <a> a(a cell a) noctx
	a inner-value

###
Sets the value in the cell.

The special syntax `*a := value` is equivalent to `a set-deref value`.
###
set-deref<a> void(a cell a, value a) noctx
	a.inner-value := value

###
Treats a pointer as a cell.
UB if the pointer does not point to a mutable value.
###
as-cell<a> cell a(a a mut*) no-doc noctx unsafe
	a.as-any-mut-pointer as-ref

###
Treats a cell as a pointer.
Make sure to use the pointer only temporarily (not past the end of this task).
###
as-mut-pointer<a> a mut*(a cell a) noctx unsafe
	a.as-any-mut-pointer pointer-cast

as-const-pointer<a> a*(a cell a) noctx unsafe
	a.as-mut-pointer as-const

# Sets the value in `a` to `value`, and returns the value it had before.
get-and-set<a> a(a cell a, value a) noctx
	res = *a
	*a := value
	res

# Swaps the values of two `cell`s.
swap<a> void(a cell a, b cell a) noctx
	temp = *a
	*a := *b
	*b := temp

test
	a cell nat64 = 1,
	_ = a ignore
	()

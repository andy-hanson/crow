no-std
import
	./bool: &&, bool, false, not, true
	./col/collection: build, exists, for-break, for-loop, is-at-end, with-block
	./col/list: ~, ~=, build, iterate, list, new, size
	./col/set: in, new, set
	./compare: !=, <=, equal
	./fun-util: subscript
	./misc: loop-break, new, void
	./number: ==, <=>, +, -, *, **, float64, int64, nat32, nat64, to
	./option: is-empty, new, option
	./result: error, ok, result
	./string:
		==, <=>, ~=, begin, build, char32, hash-mix, interpolate, is-empty, iterate, join, next,
		string, string-iterator, to
	./tuple: a, b, new

###
Opaque grammar type parsing an 'a' value.
Use the functions in this module to build a grammar.
###
+grammar[t] record mut
	# TODO: should be 'data' not 'mut'
	-fn (string-iterator, t inner-parse-result) mut(iter string-iterator)

###
Match a string against a grammar.
THe whole string must match the grammar.
If the string has leading or trailing spaces you must use a grammar that includes those.
###
+parse[t] (t, parse-error) result(a t grammar, text string)
	result = a fn text.begin
	iter = result a
	match result b
	as ok v
		if iter is-at-end
			v ok
		else
			(text, iter, "string continues past end of parse") error
	as error e
		(text, iter, e.expected) error

# Return a parse result or throw on error.
+force[t] t(a (t, parse-error) result)
	match a
	as ok v
		v
	as error e
		throw "{e}"

+parse-error record
	# The argument passed to 'parse'.
	input string
	###
	Position where the parse error happened.
	This will be 'input.end-iterator' if the error was end of input.
	###
	iter string-iterator
	# Description of what was expected.
	expected string
+== bool(a parse-error, b parse-error)

-inner-parse-result[t] union(ok t, error inner-parse-error)

-then[out, in] out inner-parse-result(a in inner-parse-result, f out mut(x in))
	match a
	as ok v
		f[v] ok
	as error e
		e error
-then[out, in] (string-iterator, out inner-parse-result)(
	a (string-iterator, in inner-parse-result),
	f out mut(x in),
)
	a.a, a.b then f

-inner-parse-error record(expected string)

+to string(a parse-error)
	# TODO: show where it is
	peek string = if x, _ ?= a.iter next
		"'{x}'"
	else
		"EOF"
	"expected {a expected}, got {peek}"

# This is like 'grammar' but produces no result.
+grammar-skip record(inner void grammar) mut

# Grammar matching empty strings
+new grammar-skip()
	"" exact

-make-grammar record nominal
-with-block[t] t grammar(
	_ make-grammar,
	f (string-iterator, t inner-parse-result) mut(iter string-iterator),
)
	f,

region basic building blocks

# Use to discard the result of any grammar.
+skip[t] grammar-skip(a t grammar)
	(a map _ => ()),

+and-return[t] t grammar(a grammar-skip, value t)
	a.inner map _ => value

+text-delimited string grammar(begin string, end string)
	begin ~~ end.text-not-containing ~~ end

+text-not-containing string grammar(ending string)
	(ending,) text-not-containing-any

+text-not-containing-any string grammar(possible-endings string[])
	with start : make-grammar
		iter mut = start
		res string = with out : build
			loop
				if possible-endings exists x => !(iter try-take-exact x).is-empty
					break
				elif x, rest ?= iter next
					out ~= x
					iter := rest
					continue
				else
					break
		if res is-empty
			desc = ", " join for x : possible-endings; "'{x}'"
			iter, ("expected text ending in one of {desc}",).error
		else
			iter, res.ok

# Grammar for a single character matching the predicate.
-char-matching-predicate char32 grammar(description string, predicate bool data(x char32))
	with start : make-grammar
		if x, rest ?= start next
			if predicate[x]
				rest, x.ok
			else
				rest, (description,) error
		else
			start, (description,) error

-try-take-exact string-iterator?(iter string-iterator, expect string)
	cur mut = iter
	for expected : expect
		if x, rest ?= cur next
			if x != expected
				break
			else
				cur := rest
				()
		else
			break
	else
		cur,

###
Expects to parse 'a' followed by 'b'.
By default this does not allow spaces in between. For that, use `a ~~ spaces ~~ b`.
###
+~~[t, u] (t, u) grammar(a t grammar, b u grammar)
	with start : make-grammar
		iter, res = a fn start
		match res
		as ok x
			iter2, res2 = b fn iter
			iter2, match res2
			as ok y
				(x, y) ok
			as error e
				e error
		as error e
			iter, e.error
+~~[t] t grammar(a t grammar, b grammar-skip)
	with start : make-grammar
		iter, res = a fn start
		match res
		as ok x
			iter2, res2 = b.inner fn iter
			iter2, match res2
			as ok _
				x ok
			as error e
				e error
		as error e
			iter, e.error
+~~[t] t grammar(a grammar-skip, b t grammar)
	with start : make-grammar
		iter, res = a.inner fn start
		match res
		as ok _
			iter2, res2 = b fn iter
			iter2, match res2
			as ok x
				x ok
			as error e
				e error
		as error e
			iter, e.error
+~~ grammar-skip(a grammar-skip, b grammar-skip)
	a.inner ~~ b,
# Skips an exact string, then parses 'b'
+~~[t] t grammar(a string, b t grammar)
	a.exact ~~ b
# Parses 'a', then skips an exact string
+~~[t] t grammar(a t grammar, b string)
	a ~~ b.exact
+~~ grammar-skip(a string, b grammar-skip)
	a.exact ~~ b
+~~ grammar-skip(a grammar-skip, b string)
	a ~~ b.exact

# Tries to parse with 'a', and if that fails, tries to parse with 'b' instead.
+/[t] t grammar(a t grammar, b t grammar)
	with start : make-grammar
		iter, res = a fn start
		match res
		as ok v
			iter, v.ok
		as error _
			b fn start

# TODO: use 'f' should be 'data', not 'mut'
# Uses a function to transform the result if parsing is successful.
+map[out, in] out grammar(a in grammar, f out mut(x in))
	with start : make-grammar
		a fn start then f

# Allows parsing to fail, returning an empty option if it does.
+optional[t] t? grammar(a t grammar)
	with start : make-grammar
		iter, res = a fn start
		iter, match res
		as ok v
			(v,) ok
		as error _
			() ok
# Optionally skips an exact string.
+optional grammar-skip(a string)
	a.exact.inner.optional skip

# Parses the same grammar as many times as possible (including 0 times).
+many[t] t[] grammar(a t grammar)
	with start : make-grammar
		iter mut = start
		res t[] = with out : build
			loop
				iter2, res2 = a fn iter
				match res2
				as ok v
					iter := iter2
					out ~= v
					continue
				as error _
					break
		iter, res.ok

+many grammar-skip(a grammar-skip)
	inner void[] grammar = a.inner many
	(inner map _ => ()),

# Parses 'a' at least once, then as many times as possible.
+one-or-more[t] t[] grammar(a t grammar)
	a ~~ a.many map x =>
		x.a ~ x.b

+one-or-more grammar-skip(a grammar-skip)
	inner void[] grammar = a.inner one-or-more
	(inner map _ => ()),

###
Parses 'a' as many times as possible, with 'separator' in between.

This does not allow a trailing separator;
it is a parse error to have a separator not followed by another 'a'.
###
+separated-by[t] t[] grammar(a t grammar, separator string)
	a separated-by separator.exact
+separated-by[t] t[] grammar(a t grammar, separator grammar-skip)
	with start : make-grammar
		iter mut = start
		iter1, res1 = a fn iter
		match res1
		as ok first
			iter := iter1
			error mut inner-parse-error? = ()
			res t[] = with out : build
				out ~= first
				loop
					iter2, res2 = separator.inner fn iter
					match res2
					as ok _
						iter := iter2
						iter3, res3 = a fn iter
						iter := iter3
						match res3
						as ok v
							out ~= v
							continue
						as error e
							error := e,
							break
					as error _
						break
			iter, if e ?= error
				e error
			else
				res ok
		as error _
			start, () ok

# Use this to allow recursive grammars.
+lazy record nominal
+with-block[t] t grammar(_ lazy, f t grammar data())
	with start : make-grammar
		# TODO: actually be lazy (cache it)
		grammar = f[]
		grammar fn start

region basic elements

# Matches 'a' exactly.
+exact grammar-skip(a string)
	res void grammar = with start : make-grammar
		if next ?= start try-take-exact a
			next, ().ok
		else
			start, ("expected '{a}'",).error
	res,

# Equivalent to `a.exact map _ => value`
+exact[t] t grammar(a string, value t)
	a.exact.inner map _ => value

# Matches any amount of whitespace (including none) and discards it.
+spaces grammar-skip()
	("" char-matching-predicate (x => x.is-space)).many skip

-is-space bool(a char32)
	a in space-chars
-space-chars char32 set()
	" ", "\r", "\n", "\t"

# A double-quoted string as in JSON, including escape sequences.
+quoted-string string grammar()
	with start : make-grammar
		if after-quote ?= start try-take "\""
			after-quote take-quoted-string-rest
		else
			start, ("quoted string",).error
-take-quoted-string-rest (string-iterator, string inner-parse-result)(start string-iterator)
	iter mut = start
	error mut bool = false
	res string = with out : build
		loop
			if x, rest ?= iter next
				iter := rest
				if x == "\""
					break
				elif x == "\\"
					if x2, rest2 ?= iter next
						iter := rest2
						if esc ?= x2 escape
							out ~= esc
							continue
						else
							error := true
							break
					else
						break
				else
					out ~= x
					continue
			else
				error := true
				break
	iter, if error
		("quoted string",) error
	else
		res ok
-escape char32?(a char32)
	if a == "n"
		"\n",
	elif a == "r"
		"\r",
	elif a == "t"
		"\t",
	elif a == "\""
		"\"",
	elif a == "\\"
		"\\",
	elif a == "0"
		"\0",

# TODO: support letters from more languages
# Matches and returns a sequence of letters.
+word string grammar()
	letter.one-or-more map x => x to

-letter char32 grammar()
	"letter" char-matching-predicate x => x is-letter

-is-letter bool(a char32)
	# TODO: support other alphabets
	"a"::char32.to::nat32 <= a.to && a.to::nat32 <= "z"::char32.to

# Parse a boolean as 'true' or 'false'
+bool bool grammar()
	("true" exact true) / ("false" exact false)

###
Parses a natural number in decimal format.
This allows leading 0s which have no effect.
###
+nat nat64 grammar()
	with start : make-grammar
		if x ?= start take-nat-and-count-digits
			x.end, x.value.ok
		else
			start, ("natural number",).error

###
Parses a signed integer in decimal format.
This allows e.g. "1", "+23", "-45".
###
+int int64 grammar()
	("+".optional ~~ (nat map x => x.to)) / ("+" ~~ (nat map x => -x.to))

-nat-and-count-digits record
	end string-iterator
	value nat64
	count-digits nat64
-take-nat-and-count-digits nat-and-count-digits?(start string-iterator)
	acc mut nat64 = 0
	count-digits mut nat64 = 0
	iter mut = start
	loop
		if x, rest ?= iter next-digit
			iter := rest
			acc *:= 10
			acc +:= x
			count-digits := count-digits + 1
			continue
		else
			break
	unless count-digits == 0
		(iter, acc, count-digits),
-next-digit (nat64, string-iterator)?(a string-iterator)
	if x, rest ?= a next
		if digit ?= x char-to-nat64
			(digit, rest),

-char-to-nat64 nat64?(c char32)
	if "0"::char32.to::nat32 <= c.to && c.to::nat32 <= "9"::char32.to
		(c.to - "0"::char32.to).to,

###
Parse a decimal number.
This allows e.g. "+1.23".
###
+float float64 grammar()
	with start : make-grammar
		iter mut = start
		sign float64 = if n ?= iter try-take "-"
			iter := n
			-1
		else
			if n ?= iter try-take "+"
				iter := n
			1
		if whole-nat ?= iter take-nat-and-count-digits
			iter := whole-nat end
			whole-part float64 = whole-nat.value to
			if after-dot ?= iter try-take "."
				if nd ?= after-dot take-nat-and-count-digits
					# TODO: more accurate methods exist
					nd.end, sign * (whole-part + nd.value.to * 0.1 ** nd.count-digits) ok
				else
					iter, sign * whole-part ok
			else
				iter, sign * whole-part ok
		else
			start, ("float",) error

-try-take string-iterator?(a string-iterator, c char32)
	if x, rest ?= a next
		if x == c
			rest,

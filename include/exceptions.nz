import
	.bootstrap
		== as-ref bool by-val call err exception exception-ctx-ptr fun-mut0 fun-mut1 get-ctx
		hard-forbid int32 not null null? ok ptr-to result str todo void
	.posix: jmp-buf jmp-buf-tag longjmp setjmp zero

exception-ctx record mut
	jmp-buf-ptr mut jmp-buf
	thrown-exception mut exception

new-exception-ctx by-val exception-ctx() noctx unsafe
	| Nothing on the exception-ctx initially
	exception-ctx: null, exception: ""

get-exception-ctx exception-ctx() unsafe
	get-ctx.exception-ctx-ptr as-ref<exception-ctx>

number-to-throw int32()
	7

rethrow ?t(e exception)
	e throw

throw ?t(e exception) trusted
	exn-ctx = get-exception-ctx
	hard-forbid: exn-ctx.jmp-buf-ptr null?
	exn-ctx set-thrown-exception e
	exn-ctx.jmp-buf-ptr longjmp number-to-throw
	| Unreachable
	todo

finally ?t(after fun-mut0 void, try fun-mut0 ?t)
	res = try catch \err
		after call
		err throw
	after call
	res

catch result<?t, exception>(try fun-mut0 ?t)
	{try.call ok} catch {it err}

catch ?t(try fun-mut0 ?t, catcher fun-mut1<?t, exception>) trusted
	get-exception-ctx catch-with-exception-ctx try, catcher

catch-with-exception-ctx ?t(ec exception-ctx, try fun-mut0 ?t, catcher fun-mut1<?t, exception>) unsafe
	old-thrown-exception = ec thrown-exception
	old-jmp-buf = ec jmp-buf-ptr
	store = jmp-buf-tag: zero, 0, zero
	ec set-jmp-buf-ptr: store ptr-to
	setjmp-result = ec.jmp-buf-ptr setjmp
	if setjmp-result == 0
		| Get here after setting the jump.
		| If it throws, we'll go to the above branch.
		res = try call
		ec set-jmp-buf-ptr old-jmp-buf
		ec set-thrown-exception old-thrown-exception
		res
	else
		| This is what we threw in 'throw'
		assert: setjmp-result == number-to-throw
		| Get here if we throw inside of `try`
		thrown-exception = ec thrown-exception
		| NOTE: changing thrown-exception back probably isn't really necessary
		ec set-jmp-buf-ptr old-jmp-buf
		ec set-thrown-exception old-thrown-exception
		catcher call thrown-exception

fail ?t(reason str)
	throw: exception: reason

assert void(condition bool)
	condition assert "assert failed"

unreachable ?t()
	"should be unreachable" fail

assert void(condition bool, message str)
	if condition not
		message fail

forbid void(condition bool)
	condition forbid "forbid failed"

forbid void(condition bool, message str)
	if condition
		message fail

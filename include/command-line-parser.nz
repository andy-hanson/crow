import
	.arr-utils
		+ at empty? empty-arr fill-mut-arr find-index first freeze index-of remove-start set-at
		slice-after slice-starting-at slice-up-to starts-with? tail
	.bootstrap: == arr bool call false fun1 has? none opt size some str true value void
	.cell: cell get set
	.dict: add dict each empty-dict freeze mut-dict new-mut-dict
	.exceptions: assert fail forbid

| TODO: this would be neater if we had reflection!
parse-cmd-line-args opt ?t(args arr str, t-names arr str, make-t fun1 ?t arr<opt<arr<str>>>)
	parsed = args parse-cmd-line-args-dynamic
	assert: parsed.nameless empty?, "Should be no nameless args"
	assert: parsed.after empty?

	values = t-names.size fill-mut-arr<opt<arr<str>>> none
	| TODO: should not need a type argument here
	help = false cell<bool>
	parsed.named each \key value
		match t-names index-of key
		as none
			if key == "help"
				help set true
			else
				fail: "Unexpected arg " + key
		as some s
			idx = s value
			| TODO: duplicate argument error
			forbid: values at idx has?
			values set-at idx, value.some

	if help get
		none
	else
		make-t call values.freeze some

| Command line syntax:
| `foo bar --a 1 --b 2 3 -- x y z`
| nameless: foo bar
| named: a = 1, b = 2 3
| after: x y z
parsed-cmd-line-args record
	nameless arr str
	named dict str arr<str>
	after arr str

parse-cmd-line-args-dynamic parsed-cmd-line-args(args arr str)
	| Find the location of the first name beginning in '--'
	match args find-index {it starts-with? "--"}
	as none
		parsed-cmd-line-args: args, empty-dict, empty-arr
	as some s
		first-named-arg-index = s.value
		nameless = args slice-up-to first-named-arg-index
		rest = args slice-starting-at first-named-arg-index
		match rest find-index {it == "--"}
		as none
			parsed-cmd-line-args: nameless, rest.parse-named-args, empty-arr
		as some s2
			sep-index = s2.value
			named-args = rest slice-up-to sep-index parse-named-args
			parsed-cmd-line-args: nameless, named-args, rest slice-after sep-index

parse-named-args dict str arr<str>(args arr str)
	b = new-mut-dict<str, arr<str>>
	args parse-named-args-recur b
	b freeze

.parse-named-args-recur void(args arr str, builder mut-dict str arr<str>)
	first-name = args.first remove-start "--"
	tl = args tail
	match tl find-index {it starts-with? "--"}
	as none
		builder add first-name, tl
	as some s
		next-named-arg-index = s.value
		builder add: first-name, tl slice-up-to next-named-arg-index
		args slice-starting-at next-named-arg-index parse-named-args-recur builder

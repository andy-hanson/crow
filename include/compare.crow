###
Functions for comparing things

All `data` values have an ordering.
(For non-`data`, you'll have to write your own comparison functions.
They must have names specific to the type like `ptr-less?`.)

For records, fields are compared in order.

For unions, a member type listed earlier is considered less than a member type listed later.

Restricting comparison to `data` means that it is ensured to be safe:

* If `a == b`, `a.f == b.f`.
* If `a < b` and `b < c`, `a < c`.
###

no-std
import
	.bool: ?, bool, false, not, true
	.private.bootstrap: data, str
export
	.private.bootstrap: ==, <=>, comparison, equal, greater, less

# True iff `not: a == b`.
!= bool(a ?a, b ?a) noctx data<?a>
	a == b not

# True iff `(a <=> b) == less`.
< bool(a ?a, b ?a) noctx data<?a>
	match a <=> b
	as less
		true
	as equal
		false
	as greater
		false

# True iff `not: a > b`
<= bool(a ?a, b ?a) noctx data<?a>
	b < a not

# True iff `(a <=> b) == greater`.
> bool(a ?a, b ?a) noctx data<?a>
	b < a

# True iff `not: a < b`.
>= bool(a ?a, b ?a) noctx data<?a>
	a < b not

# Returns the lesser argument
min ?a(a ?a, b ?a) noctx data<?a>
	a < b ? a, b

# Returns the greater argument
max ?a(a ?a, b ?a) noctx data<?a>
	a < b ? b, a

# Returns "less", "equal", or "greater"/
to-str str(a comparison)
	match a
	as less
		"less"
	as equal
		"equal"
	as greater
		"greater"

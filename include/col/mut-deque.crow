no-std
import
	..bool: ?, bool, not
	..exception: assert, forbid
	..misc: ->, void
	..opt: ==, none, opt, some
	..ptr: +, -, null, null?, ptr, ptr-compare, ptr-eq?, ptr-less?, set-subscript, subscript, zeroed
	..str: ==, str
	..str-conv: to-str
	..test: is
	..writer: ~=, backup!, move-to-str!, writer
	..private.number-low-level: ==, nat, wrap-add, wrap-mul
	.arr: ==, arr, arr-from-begin-end, size
	.arr-util: each-ptr, first, last
	.mut-arr:
		begin-ptr, cast-immutable, copy-from!, empty?, end-ptr, mut-arr, set-zero-elements, size,
		subscript, uninitialized-mut-arr, zeroed-mut-arr

mut-deque<?a> record mut
	# TODO:PRIVATE
	inner mut mut-arr ?a
	# Points to the first element. Null for an empty queue.
	left mut ptr ?a
	# Points to the element after the last. Null for an empty queue.
	# This should never be inner.end-ptr, it wraps around to inner.begin-ptr
	right mut ptr ?a

mut-deque mut-deque ?a()
	mut-deque: mut-arr<?a>, null, null

arr arr ?a(a mut-deque ?a) trusted
	a.mut-arr cast-immutable

mut-arr mut-arr ?a(a mut-deque ?a) trusted
	if a empty?
		mut-arr
	else
		res = a.size uninitialized-mut-arr<?a>
		res copy-from-deque! a
		res

copy mut-deque ?a(a mut-deque ?a) trusted
	inner = a mut-arr
	mut-deque: inner, inner.begin-ptr, inner.begin-ptr

empty? bool(a mut-deque ?a)
	a.left null?

size nat(a mut-deque ?a) trusted
	match a.left ptr-compare a.right
	as less
		a.right - a.left
	as equal
		if a.left null?
			0
		else
			a.inner size
	as greater
		a.inner.end-ptr - a.left wrap-add a.right - a.inner.begin-ptr

# Push a value to the left.
push! void(value ?a, a mut-deque ?a) trusted
	a ensure-capacity!
	if a.left ptr-eq? a.inner.begin-ptr
		a.left := a.inner end-ptr
	a.left := a.left - 1
	a.left[] := value

# Push a value to the right.
push! void(a mut-deque ?a, value ?a) trusted
	a ensure-capacity!
	assert: a.right ptr-less? a.inner.end-ptr
	a.right[] := value
	a.right := a.right + 1

first opt ?a(a mut-deque ?a) trusted
	if a.left null?
		none
	else
		a.left[] some

last opt ?a(a mut-deque ?a) trusted
	if a.right null?
		none
	else
		fixed-right = a.right ptr-eq? a.inner.begin-ptr ? a.inner.end-ptr, a.right
		(fixed-right - 1)[] some

pop-left! opt ?a(a mut-deque ?a) trusted
	if a.left null?
		none
	else
		res = a.left[]
		a.left[] := zeroed
		a.left := a.left + 1
		if a.left ptr-eq? a.inner.end-ptr
			a.left := a.inner begin-ptr
		if a.left ptr-eq? a.right
			a.left := null
			a.right := null
			# Still hold on to `a inner`
		res some

pop-right! opt ?a(a mut-deque ?a) trusted
	if a.right null?
		none
	else
		if a.right ptr-eq? a.inner.begin-ptr
			a.right := a.inner end-ptr
		a.right := a.right - 1
		res = a.right[]
		a.right[] := zeroed
		if a.right ptr-eq? a.left
			a.left := null
			a.right := null
			# Still hold on to `a inner`
		res some

# This temporarily breaks the invariant that a.left and a.right are null for an empty queue.
.ensure-capacity! void(a mut-deque ?a) unsafe
	if a.left null?
		assert: a.right null?
		if a.inner empty?
			a.inner := 2 zeroed-mut-arr<?a>
		a.left := a.inner begin-ptr
		a.right := a.left
	else
		forbid: a.right null?
		forbid: a.inner empty?
		if a.left ptr-eq? a.right
			old-inner = a inner
			old-capacity = old-inner size
			new-capacity = old-capacity wrap-mul 2
			new-inner = new-capacity uninitialized-mut-arr<?a>
			new-inner[0 -> old-capacity] copy-from-deque! a
			new-inner[old-capacity -> new-capacity] set-zero-elements
			a.inner := new-inner
			a.left := a.inner begin-ptr
			a.right := a.left + old-capacity

.copy-from-deque! void(dest mut-arr ?a, a mut-deque ?a) trusted
	assert: dest.size == a.size
	if a.left ptr-less? a.right
		dest copy-from!: a.left arr-from-begin-end a.right
	else
		left-to-end-size = a.inner.end-ptr - a.left
		dest[0 -> left-to-end-size] copy-from!: a.left arr-from-begin-end a.inner.end-ptr
		dest[left-to-end-size -> dest.size] copy-from!: a.inner.begin-ptr arr-from-begin-end a.right

.dbg str(a mut-deque nat) trusted
	out = writer
	a.inner.begin-ptr arr-from-begin-end a.inner.end-ptr each-ptr \ptr
		if ptr ptr-eq? a.right
			out ~= "<-R "
		if ptr ptr-eq? a.left
			out ~= "L-> "
		out ~= ptr[] to-str
		out ~= " "
	if a.inner.empty? not
		out backup!
	out move-to-str!

.verify void(a mut-deque nat, arr arr nat, expected str)
	a.first is arr.first
	a.last is arr.last
	a.size is arr.size
	a.arr is arr
	a.dbg is expected

test
	a = mut-deque<nat>
	a.pop-left! is none
	a.pop-right! is none
	a verify [], ""
	1 push! a
	a verify [1], "<-R 0 L-> 1"
	a push! 2
	a verify [1, 2], "2 <-R L-> 1"

	a-copy = a copy
	a-copy verify [1, 2], "<-R L-> 1 2"

	a.pop-right! is 2.some
	a verify [1], "<-R 0 L-> 1"

	a.pop-right! is 1.some
	assert: a.left null?
	assert: a.right null?
	a verify [], "0 0"

	a push! 1
	a verify [1], "L-> 1 <-R 0"

	2 push! a
	a verify [2, 1], "1 <-R L-> 2"

	3 push! a
	a verify [3, 2, 1], "2 1 <-R 0 L-> 3"

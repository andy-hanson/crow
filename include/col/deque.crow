no-std
import
	..bool: ==, and, bool, false
	..exception: assert
	..fun: subscript
	..misc: ->, void
	..opt: force, has?, none, opt, some
	..ptr: +, -, ptr-eq?, set-subscript
	..str: ==, str
	..str-conv: to-str
	..test: is
	..writer: ~=, backup!, move-to-str!, writer
	..private.number-low-level: ==, even?, nat, wrap-add
	.arr: ==, arr, empty?, size
	.arr-util: each, first, fold, last, rtail, tail
	.mut-arr: begin-ptr, cast-immutable, end-ptr, subscript, uninitialized-mut-arr
	.stack:
		~, arr, arr-reverse, each, each-reverse, empty?, fold, fold-reverse, pop, rest, size,
		stack, value

deque<?a> record
	# TODO:PRIVATE
	# NOTE: This is in reverse (top of the stack furthest left)
	left stack ?a
	mid arr ?a
	right stack ?a

# Empty deque.
deque deque ?a()
	deque: []

###
Convert an arr to a deque.
This is O(1).
###
deque deque ?a(a arr ?a)
	deque: stack, a, stack

arr arr ?a(a deque ?a) trusted
	res = a.size uninitialized-mut-arr<?a>
	end = res.begin-ptr fold a, \out, x
		out[] := x
		out + 1
	assert: end ptr-eq? res.end-ptr
	res cast-immutable

empty? bool(a deque ?a)
	a.left.empty? and a.mid.empty? and a.right.empty?

size nat(a deque ?a)
	a.left.size wrap-add a.mid.size wrap-add a.right.size

~ deque ?a(a deque ?a, value ?a)
	deque: a.left, a.mid, a.right ~ value

~ deque ?a(value ?a, a deque ?a)
	deque: a.left ~ value, a.mid, a.right

popped<?a> record
	value ?a
	rest deque ?a

pop-left opt popped ?a(a deque ?a)
	if popped ?= a.left pop
		some: popped: popped.value, deque: popped.rest, a.mid, a.right
	else
		if first ?= a.mid first
			some: popped: first, deque: stack, a.mid.tail, a.right
		else
			right-arr = a.right arr
			if first ?= right-arr first
				some: popped: first, deque: stack, right-arr.tail, stack
			else
				none

pop-right opt popped ?a(a deque ?a)
	if popped ?= a.right pop
		some: popped: popped.value, deque: a.left, a.mid, popped.rest
	elif last ?= a.mid last
		some: popped: last, deque: a.left, a.mid.rtail, stack
	else
		left-arr = a.left arr-reverse
		if last ?= left-arr last
			some: popped: last, deque: stack, left-arr.rtail, stack
		else
			none

region iteration

each void(a deque ?a, f act void(?a))
	a.left each-reverse f
	a.mid each f
	a.right each f

fold ?a(acc ?a, a deque ?b, f act ?a(?a, ?b))
	acc fold-reverse a.left, f fold a.mid, f fold a.right, f

filter deque ?a(a deque ?a, f act bool(?a)) trusted
	res = a.size uninitialized-mut-arr<?a>
	end = res.begin-ptr fold a, \out, x
		if f[x]
			out[] := x
			out + 1
		else
			out
	deque: res[0 -> end - res.begin-ptr] cast-immutable

map deque ?out(a deque ?in, f act ?out(?in)) trusted
	res = a.size uninitialized-mut-arr<?out>
	end = res.begin-ptr fold a, \out, x
		out[] := f[x]
		out + 1
	assert: end ptr-eq? res.end-ptr
	deque: res.cast-immutable

.dbg str(a deque nat)
	out = writer
	a.left each-reverse \x
		out ~= x
		out ~= " "
	out ~= "["
	if a.mid empty?
		out ~= "]"
	else
		a.mid each \x
			out ~= x to-str
			out ~= " "
		out backup!
		out ~= "]"
	a.right each \x
		out ~= " "
		out ~= x
	out move-to-str!

test
	a = deque<nat>
	assert: a empty?
	a.dbg is "[]"
	a.arr is []
	# TODO: 'is none'
	a.pop-left.has? is false
	a.pop-right.has? is false

	bl = 1 ~ a
	bl.dbg is "1 []"
	bl.arr is [1]
	bl-pop-left = bl.pop-left force
	bl-pop-left.value is 1
	# TODO: 'is deque'
	bl-pop-left.rest.arr is []
	bl-pop-right = bl.pop-right force
	bl-pop-right.value is 1
	bl-pop-right.rest.arr is []

	br = a ~ 1
	br.dbg is "[] 1"
	br.arr is bl.arr
	br-pop-left = br.pop-left force
	br-pop-left.value is 1
	br-pop-left.rest.arr is []
	br-pop-right = br.pop-right force
	br-pop-right.value is 1
	br-pop-right.rest.arr is []

	c = bl ~ 2 ~ 3
	c.dbg is "1 [] 2 3"
	c-pop = c.pop-left force
	c-pop.value is 1

	# Forces it to convert to an array
	d = c-pop rest
	d.dbg is "[] 2 3"
	d-pop-left = d.pop-left force
	d-pop-left.value is 2
	d-pop-left.rest.arr is [3]

	d-pop = d.pop-left force
	d-pop.value is 2
	d-pop.rest.dbg is "[3]"

	# Test converting right stack to array
	x = 1 ~ (2 ~ (3 ~ [].deque))
	x.arr is [1, 2, 3]
	x.dbg is "1 2 3 []"
	x-pop = x.pop-right force
	x-pop.value is 3
	x-pop.rest.dbg is "[1 2]"

	six = 1 ~ (2 ~ [3, 4].deque) ~ 5 ~ 6
	six.dbg is "1 2 [3 4] 5 6"
	folded = 10 fold six, \x, y
		x wrap-add y
	folded is 31
	(six filter {it even?}).arr is [2, 4, 6]
	(six map {it wrap-add 10}).arr is [11, 12, 13, 14, 15, 16]

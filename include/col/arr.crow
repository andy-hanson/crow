no-std
import
	..bool: bool, not
	..compare: ==, <, <=
	..misc: arrow, from, to
	..number: +, -, nat
	..ptr: +, -, by-val, ptr, ptr-cast, ptr-less-eq?, ref-of-ptr, size-of, subscript
	..private.alloc: alloc-uninitialized, copy-data-from
	..private.bootstrap: hard-assert
	..private.exception-low-level: assert
export
	..private.bootstrap: arr, begin-ptr, size

end-ptr ptr ?a(a arr ?a) noctx unsafe
	a.begin-ptr + a.size

###
Arr or the range from begin to end.
`begin` is inclusive and `end` is exclusive.
UB if begin > end.
###
arr-from-begin-end arr ?a(begin ptr ?a, end ptr ?a) unsafe noctx
	hard-assert: begin ptr-less-eq? end
	arr: end - begin, begin

arr-cast arr ?out(a arr ?in) unsafe noctx
	hard-assert: size-of<?out> == size-of<?in>
	arr: a.size, a.begin-ptr.ptr-cast<?out, ?in>

# True iff `a.size == 0`.
empty? bool(a arr ?a) noctx
	a.size == 0

# True iff `a.size != 0`.
has? bool(a arr ?a) noctx
	a.empty? not

noctx-at ?a(a arr ?a, index nat) unsafe noctx
	hard-assert: index < a.size
	a unsafe-at index

unsafe-at ?a(a arr ?a, index nat) unsafe noctx
	a.begin-ptr[index]

###
Gets the element at the index.
Fails if `index >= a.size`.
###
subscript ?a(a arr ?a, index nat) trusted
	assert: index < a.size
	a unsafe-at index

###
Slices the arr.
`range.from` is inclusive and `range.to` is exclusive.
This works in O(1) without copying any elements.
Fails if `range.from > range.to`.
Fails if the slice would exceed the bounds of the arr.
###
subscript arr ?a(a arr ?a, range arrow<nat, nat>) trusted
	assert: range.from <= range.to
	assert: range.to <= a.size
	arr: range.to - range.from, a.begin-ptr + range.from

ref-of-val-at ?a(a arr by-val<?a>, index nat) trusted
	assert: index < a.size
	a.begin-ptr + index ref-of-ptr

###
Concatenates two arrs.
This involves copying every element from both arrs into the new arr.
If you need to concatenate often, consider using `mut-list`.
###
~ arr ?a(a arr ?a, b arr ?a) trusted
	res-size = a.size + b.size
	res = res-size alloc-uninitialized<?a>
	res copy-data-from a.begin-ptr, a.size
	res + a.size copy-data-from b.begin-ptr, b.size
	arr: res-size, res

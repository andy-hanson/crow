no-std
import
	.private.bootstrap: nat
export
	.private.bootstrap: bool, false, true

# Changes `true` to `false`, and `false` to `true`.
not bool(a bool) noctx
	if a
		false
	else
		true

###
If `a` is false, returns false immediately and does not evaluate `b`.
Else, returns `b`.
###
and bool(a bool, b bool) noctx builtin

###
If `a` is `true`, returns `true` immediately and does not evaluate `a`.
Else, returns `b`.
###
or bool(a bool, b bool) noctx builtin

###
If `cond` is true, evaluates `if-true` and returns the result, without evaluating `if-false`.
If `cond` is false, evaluates `if-false` and returns the result, without evaluating `if-true`.
###
? ?a(cond bool, if-true ?a, if-false ?a) noctx builtin

# 0 for false, 1 for true.
to-nat nat(b bool) noctx
	b ? 1, 0

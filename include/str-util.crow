no-std
import
	.bool: and
	.col.arr: ==, ~, arr, arr-from-begin-end, begin-ptr, has?, size, subscript
	.col.arr-util: tail
	.number: nat8
	.opt: none, opt, some, value
	.ptr: +, ptr-cast, subscript
	.str: char, c-str, str
	.private.bootstrap: hard-unreachable

# Treats bytes as a string.
as-str str(bytes arr nat8) unsafe noctx
	arr: bytes.size, bytes.begin-ptr ptr-cast<char, nat8>

# Converts a str to a c-str by appending "\0".
to-c-str c-str(a str)
	a ~ "\0" begin-ptr

# Treats a c-str as a str by walking to the end.
to-str str(a c-str) unsafe noctx
	a arr-from-begin-end a.find-cstr-end

###
Walk a c-str and return a pointer to the first occurrence of `c`.
If that is not found, return `none`.
###
find-char-in-cstr opt c-str(a c-str, c char) unsafe noctx
	if a[] == c
		a some
	elif a[] == "\0"
		# Did not find the char
		none
	else
		a + 1 find-char-in-cstr c

# Pointer to the end of a c-str.
find-cstr-end c-str(a c-str) unsafe noctx
	match a find-char-in-cstr "\0"
	as none
		hard-unreachable
	as some s
		s value

# Strips whitespace from the front.
lstrip str(a str)
	if a.has? and: a[0] == " "
		a.tail lstrip
	else
		a

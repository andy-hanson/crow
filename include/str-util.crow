no-std
import
	.bool: and, bool, not
	.col.arr: arr, arr-from-begin-end, begin-ptr, size, subscript
	.col.arr-util:
		contains-subseq?, ends-with?, map, split-by-subseq, starts-with?, tail, try-remove-end,
		try-remove-start, try-split-once
	.number: nat8
	.opt: none, opt, some
	.ptr: +, ptr-cast, subscript
	.str: ==, ~, char, chars, c-str, empty?, str
	.tuple: a, b, pair
	.private.bootstrap: hard-unreachable

# Treats bytes as a string.
as-str str(bytes arr nat8) unsafe noctx
	str: arr: bytes.size, bytes.begin-ptr ptr-cast<char, nat8>

# Converts a str to a c-str by appending "\0".
to-c-str c-str(a str)
	(a ~ "\0").chars begin-ptr

# Treats a c-str as a str by walking to the end.
to-str str(a c-str) unsafe noctx
	a arr-from-begin-end a.find-cstr-end str

###
Walk a c-str and return a pointer to the first occurrence of `c`.
If that is not found, return `none`.
###
find-char-in-cstr opt c-str(a c-str, c char) unsafe noctx
	if a[] == c
		a some
	elif a[] == "\0"
		# Did not find the char
		none
	else
		a + 1 find-char-in-cstr c

# Pointer to the end of a c-str.
find-cstr-end c-str(a c-str) unsafe noctx
	if v ?= a find-char-in-cstr "\0"
		v
	else
		hard-unreachable

# Strips whitespace from the front.
lstrip str(a str)
	if a.empty?.not and: a.chars[0] == " "
		a.chars.tail.str lstrip
	else
		a

has-substr? bool(a str, b str)
	a.chars contains-subseq? b.chars

starts-with? bool(a str, b str)
	a.chars starts-with? b.chars

ends-with? bool(a str, b str)
	a.chars ends-with? b.chars

try-remove-start opt str(a str, b str)
	if res ?= a.chars try-remove-start b.chars
		res.str some

try-remove-end opt str(a str, b str)
	if res ?= a.chars try-remove-end b.chars
		res.str some

try-split-once opt pair<str, str>(a str, b char)
	if res ?= a.chars try-split-once b
		res.a.str pair res.b.str some

split-by arr str(a str, b str)
	a.chars split-by-subseq b.chars map {it str}

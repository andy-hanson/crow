import
	.bool: bool, false, true
	.bootstrap:
		->, arr, has?, none, opt, size, some, str, subscript, value, void
	.cell: cell, set-subscript, subscript
	.collection.arr: ~, empty?, subscript
	.collection.arr-util: find-index, first, index-of, remove-start, starts-with?, tail
	.collection.dict: dict, each
	.collection.mut-dict: move-to-dict!, mut-dict, set-subscript
	.collection.mut-list: fill-mut-list, move-to-arr!, set-subscript, subscript
	.compare: ==
	.exceptions: assert, fail, forbid
	.number: +

# TODO: this would be neater if we had reflection!
parse-cmd-line-args opt ?t(args arr str, t-names arr str, make-t fun ?t(arr opt arr str))
	parsed = args parse-cmd-line-args-dynamic
	assert: parsed.nameless empty?, "Should be no nameless args"
	assert: parsed.after empty?

	values = t-names.size fill-mut-list<opt arr str> none
	# TODO: should not need a type argument here
	help = false cell<bool>
	parsed.named each \key, value
		match t-names index-of key
		as none
			if key == "help"
				help[] := true
			else
				fail: "Unexpected arg " ~ key
		as some s
			idx = s value
			# TODO: duplicate argument error
			forbid: values[idx] has?
			values[idx] := value.some

	if help[]
		none
	else
		make-t[values move-to-arr!] some

# Command line syntax:
# `foo bar --a 1 --b 2 3 -- x y z`
# nameless: foo bar
# named: a = 1, b = 2 3
# after: x y z
parsed-cmd-line-args record
	nameless arr str
	named dict<str, arr str>
	after arr str

parse-cmd-line-args-dynamic parsed-cmd-line-args(args arr str)
	# Find the location of the first name beginning in '--'
	match args find-index {it starts-with? "--"}
	as none
		parsed-cmd-line-args: args, [].dict, []
	as some s
		first-named-arg-index = s.value
		nameless = args[0 -> first-named-arg-index]
		rest = args[first-named-arg-index -> args.size]
		match rest find-index {it == "--"}
		as none
			parsed-cmd-line-args: nameless, rest.parse-named-args, []
		as some s2
			sep-index = s2 value
			named-args = rest[0 -> sep-index] parse-named-args
			parsed-cmd-line-args: nameless, named-args, rest[sep-index + 1 -> rest.size]

parse-named-args dict<str, arr str>(args arr str)
	res = mut-dict<str, arr str>
	args parse-named-args-recur res
	res move-to-dict!

.parse-named-args-recur void(args arr str, builder mut-dict<str, arr str>)
	first-name = args.first remove-start "--"
	tl = args tail
	match tl find-index {it starts-with? "--"}
	as none
		builder[first-name] := tl
	as some s
		next-named-arg-index = s value
		builder[first-name] := tl[0 -> next-named-arg-index]
		args[next-named-arg-index -> args.size] parse-named-args-recur builder

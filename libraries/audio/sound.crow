# Represents a single sound.
+sound record
	-ignore void
	+format sound-format
	+samples float32 array

+new sound(format sound-format, samples float32 array)
	nc = format n-channels
	ns = samples size
	assert ns % nc == 0 : "Number of samples ({ns}) must be a multiple of number of channels ({nc})"
	res sound = (), format, samples
	_ = res ignore
	res

+sound-format record
	+n-channels nat64
	# `samples` contains `n-channels * sample-rate` samples per second
	+sample-rate nat64

+samples-per-second nat64(a sound-format)
	a.n-channels * a.sample-rate

+== bool(a sound-format, b sound-format)
	a.n-channels == b.n-channels && a.sample-rate == b.sample-rate

+to string(a sound-format)
	"{a n-channels}Ã—{a sample-rate}Hz"

+* sound(a sound, b float32)
	a.format, for x : a samples; x * b

+with-sample-rate sound(a sound, new-sample-rate nat64)
	# TODO: use interpolation
	assert new-sample-rate > 0
	n-channels = a.format n-channels
	old-sample-rate = a.format sample-rate
	new-n-samples = a.samples.size * new-sample-rate / old-sample-rate \
		round-down-to-multiple-of n-channels
	new-samples float32 array = for i : 0 .. new-n-samples
		channel = i % n-channels
		out-frame = i / n-channels
		in-frame = out-frame * old-sample-rate / new-sample-rate
		a.samples[in-frame * n-channels + channel]
	(n-channels, new-sample-rate), new-samples

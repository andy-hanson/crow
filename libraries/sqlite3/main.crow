import
	crow/c-types: c-int
	./headers:
		==, |, enum-members, sqlite3, sqlite3_close, sqlite3_exec, sqlite3_free, SQLITE_OK,
		SQLITE_OPEN_CREATE, SQLITE_OPEN_READWRITE, sqlite3_open_v2

+db record force-shared
	raw sqlite3 mut*

+open-sqlite3 record
	db-path string
+open-sqlite3 open-sqlite3(db-path string)
	db-path,
+with-block[t] t(a open-sqlite3, cb act t(db)) summon, t shared
	trusted
		db mut sqlite3 mut* = null
		# Create empty file if not exist
		err = a.db-path.to sqlite3_open_v2 &db, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE, null
		assert err == SQLITE_OK
		with : (() => db close) finally
			cb[db,]

-close void(db sqlite3 mut*) summon, unsafe
	err2 = db sqlite3_close
	assert err2 == SQLITE_OK

+run void(db db, command string) summon
	for _ : db query command
		()

+db-query record mut
	db db
	query string
+query db-query(db db, query string)
	db, query

# TODO: this is just to get the size hint. Should be named 'size-hint'?
+size nat64(_ db-query)
	0

+iterate bool(a db-query, f act bool(string[symbol])) summon
	trusted
		error-message mut c-string = null
		ctx callback-ctx = f,
		ctx-ptr = (&ctx)::callback-ctx* as-any-mut-pointer
		err = a.db.raw sqlite3_exec a.query.to, &callback, ctx-ptr, &error-message
		# TODO: if err == SQLITE_ABORT, callback returned non-0
		if err != SQLITE_OK
			error-string string = error-message to
			error-message.as-any-mut-pointer sqlite3_free
			throw "ERROR {err}: {error-string}"

-callback-ctx record by-val mut
	cb-row act bool(string[symbol])

-callback c-int(ctx-pointer any-mut-pointer, argc c-int, argv c-string*, col-name c-string*) summon, unsafe
	row string[symbol] = for i : 0 .. argc.to::nat64
		col-name[i].to::string.to, argv[i].to
	(ctx-pointer.as-const.pointer-cast::callback-ctx*)->cb-row[row] ? 1 : 0

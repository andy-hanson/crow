main nat^(_ string[]) summon
	# type is data
	d d = 0,
	d takes-data

	# type is mut
	m m = 0,
	m takes-data

	# type is data and type arg is data
	dd d dt = (0,),
	dd takes-dt
	dd takes-dt-t-data
	dd takes-data

	# type is mut and type arg is mut
	mm m mt = (0,),
	mm takes-mt
	mm takes-mt-t-data
	mm takes-data

	# type is mutable but type arg is data
	dm d mt = (0,),
	dm takes-mt
	dm takes-mt-t-data
	dm takes-data

	# type is data but type arg is mut
	md m dt = (0,),
	md takes-dt
	md takes-dt-t-data
	md takes-data

	d indirect
	m indirect

	()

d record
	value nat64
m record mut
	value mut nat64
dt[t] record
	inner t
mt[t] record mut
	value t

takes-dt[t] void(a t dt)
	a takes-dt-t-data

takes-mt[t] void(a t mt)
	a takes-mt-t-data

takes-dt-t-data[t] void(a t dt) t data
	a takes-data

takes-mt-t-data[t] void(a t mt) t data
	a takes-data

takes-data[t] void(_ t) t data
	()

takes-data[t] spec
	takes-data void(_ t)
indirect[t] void(_ t) t takes-data
	()

import
	crow/io/file: read-file, write-file

main void() summon
	text string = "bin/dependencies.txt" read-file
	lines = text.lines[0 .. end - 1]
	deps dependency[] = (for line : lines; line parse-line)::dependency[] filter x => !x.ignore
	"bin/dependencies.dot" write-file deps.to-dot

dependency record
	importer string
	exporter string

to string(a dependency)
	"{a.importer.to::json} -> {a.exporter.to::json}"

-parse-line dependency(line string)
	parts = line split " "
	# module (path) : modifier modifier : module (path):names
	parts[2] is ":"
	colon = parts[4] == ":" ? 4 : 5
	parts[colon] is ":"
	parts[0], parts[colon + 1]

ignore bool(a dependency)
	a.importer.ignore-module || a.exporter.ignore-module

ignore-module bool(a string)
	ignore-base string[] = "core.", "std.", "util."
	a == "object" || ignore-base exists (x => a starts-with x) || a ends-with ".txt"

-to-dot string(dependencies dependency[])
	"""
digraph crow \{
	{";\n\t" join for x : dependencies; x.to}
}
"""

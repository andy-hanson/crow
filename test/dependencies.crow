#!/usr/bin/env crow
import
	crow/io/file: write-file
	crow/io/process: shell-exec
	../site-src/search-dir-recursive: search-dir-recursive

main nat^(_ string[]) summon
	files <- "src" search-dir-recursive x => x ends-with ".d"
	# dscanner has errors if run in parallel
	all-deps dependency[] <- for file : files sequential-concat
		file.dependencies-for-file,
	filtered-deps dependency[] = all-deps filter x => !x.ignore
	"bin/dependencies.dot" write-file filtered-deps.to-dot
	()

-dependencies-for-file dependency[](file string) summon
	importer = file module-from-path
	output = "dub run dscanner --yes --quiet -- --imports {file}" shell-exec
	imported string[] = output split "\n" filter x => x != "" && !(x starts-with "core.")
	for x : imported
		importer, x

-module-from-path string(a string)
	((a try-remove-start "src/")! try-remove-end ".d")! replace-all "/", "."

-dependency record(importer string, exporter string)

-to string(a dependency)
	"{a.importer.to::json} -> {a.exporter.to::json}"

-ignore bool(a dependency)
	a.importer.ignore || a.exporter.ignore

-ignore bool(a string)
	# omit model and util since these are commonly imported dependencies
	ignore-base string[] = "core.", "model.", "std.", "test.", "util."
	a == "object" || ignore-base exists (x => a starts-with x) || a ends-with ".txt"

-to-dot string(dependencies dependency[])
	"""digraph crow \{
	{";\n\t" join for x : dependencies; x.to}
}"""

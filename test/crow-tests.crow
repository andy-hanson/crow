import
	crow/col/arr-util: first-some, tail
	crow/col/mut-arr: ~=, move-to-arr!, mut-arr, new
	crow/io/environ: environ
	crow/io/file: each-child-recursive
	crow/io/path: base-name, get-extension
	crow/io/print: print
	crow/io/process: exit-code, spawn-and-wait-result, stderr, stdout
	crow/str-util: has-substr, try-remove-start
	crow/writer: ~=, move-to-str!, new, writer
	./failure:
		failure, flat-map-with-max-size, handle-output, max-failures, match-test, new,
		overwrite-output, print-tests, test-options

run-crow-tests result<str, failure[]>(path str, path-to-crow str, env environ, options test-options) summon
	tests = path list-tests options.match-test
	failures = tests flat-map-with-max-size options.max-failures, test =>
		path-to-crow run-single-crow-test env, test, options
	if failures is-empty
		ok: "ran {tests size} tests in {path}"
	else
		failures err

.list-tests str[](path str, match-test str) summon
	res str mut[] = ()
	path each-child-recursive child =>
		if child has-substr match-test && child.ext-is-crow
			res ~= child
	res move-to-arr!

.ext-is-crow bool(a str)
	a.base-name.get-extension == "crow".some

.run-single-crow-test failure[]
	path-to-crow str
	env environ
	path str
	options test-options
spec
	summon
body
	op = ["ast", "model", "concrete-model", "low-model"] first-some<failure[], str> print-kind =>
		if options print-tests
			print: "crow print {print-kind} {path}"
		res = print-kind run-print-test path-to-crow, env, path, options.overwrite-output
		if res should-stop
			res.failures some
	if res ?= op
		res
	else
		if options.print-tests
			print: "crow run {path}"
		interpret-failures = path-to-crow run-single-runnable-test env, path, true, options.overwrite-output
		if interpret-failures is-empty
			path-to-crow run-single-runnable-test env, path, false, options.overwrite-output
		else
			interpret-failures

.print-test-result record
	should-stop bool
	failures failure[]

.run-print-test print-test-result
	print-kind str
	path-to-crow str
	env environ
	path str
	overwrite-output bool
spec
	summon
body
	res = path-to-crow spawn-and-wait-result ["print", print-kind, path], env
	output-path = "{path}.{print-kind}.repr"
	# NOTE: compiler may have both stderr and stdout!
	output-failures failure[] = if res.stdout.is-empty && res.exit-code != 0
		# Just have a file for the err
		[]
	else
		path handle-output output-path, res.stdout, overwrite-output

	if !output-failures.is-empty
		true, output-failures
	elif res.exit-code == 0
		assert: res.stderr == ""
		false, []
	elif res.exit-code == 1
		stderr-no-color = res.stderr remove-colors
		# We should stop even if no test failure in handling the output
		true, (path handle-output "{output-path}.err", stderr-no-color, overwrite-output)
	else
		message = "unexpected exit code: {res exit-code}"
		true, [(path, message)]

.run-single-runnable-test failure[]
	path-to-crow str
	env environ
	path str
	interpret bool
	overwrite-output bool
spec
	summon
body
	args = if interpret
		["run", path, "--interpret"]
	else
		["run", path, "--out", "{path}.c"]
	res = path-to-crow spawn-and-wait-result args, env
	stdout-failures = path handle-output "{path}.stdout", res.stdout, overwrite-output
	stderr-failures failure[] = if res.exit-code == 0 && res.stderr == ""
		[]
	else
		path handle-output ("{path}.stderr"), res.stderr, overwrite-output
	stdout-failures ~ stderr-failures

.remove-colors str(s str)
	res writer = ()
	s remove-colors-recur! res
	res move-to-str!

.remove-colors-recur! void(s str, out writer)
	if s is-empty
		void
	elif rest ?= s try-remove-start "\x1b"
		rest remove-colors-recur-2! out
	else
		out ~= s.chars[0]
		s.chars.tail.str remove-colors-recur! out

.remove-colors-recur-2! void(s str, out writer)
	if s is-empty
		void
	elif rest ?= s try-remove-start "m"
		rest remove-colors-recur! out
	else
		s.chars.tail.str remove-colors-recur-2! out

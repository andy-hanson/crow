#!/usr/bin/env crow
import
	crow/col/counter: counter, new
	crow/col/deque: deque, new
	crow/col/experimental/compact-map: compact-map, new
	crow/col/experimental/compact-sorted-map: compact-sorted-map, new
	crow/col/experimental/frozen-map: frozen-map, new
	crow/col/experimental/frozen-set: frozen-set, new
	crow/col/experimental/hamt-set: hamt-set, new
	crow/col/experimental/index-set: index-set, new
	crow/col/experimental/mut-sorted-map: mut-sorted-map, new
	crow/col/experimental/mut-sorted-set: mut-sorted-set, new
	crow/col/experimental/sorted-set: new, sorted-set
	crow/col/experimental/tree-set: new, tree-set
	crow/col/mut-deque: mut-deque, new
	crow/col/mut-grid: mut-grid, new
	crow/col/mut-priority-queue: mut-priority-queue, new
	crow/col/mut-queue: mut-queue, new
	crow/col/mut-stack: mut-stack, new
	crow/col/priority-queue: new, priority-queue
	crow/col/stack: new, stack
	crow/col/queue: new, queue
	crow/crypto/experimental/login-cookie: generate-login-cookie
	crow/crypto/password-hash: quality-moderate
	crow/io/environ: get-environ
	crow/io/file: current-directory
	crow/io/net/http-server: http-server, new
	crow/io/process: exited, new, process-result
	crow/io/stdin: read-stdin
	crow/io/terminal-color: bold
	crow/io/time-format: gmt
	crow/math/mat: new, mat3-32
	crow/math/vec: new, vec2-32
	crow/parse: grammar-skip, new
	crow/parse-command: parse-named-args
	crow/perf: measure-performance
	crow/serialize: from-bytes
	crow/test-util/test-runner: run-all-tests
	crow/version: is-abort-on-throw, is-windows
	../include/crow/col/experimental/private/frozen-map-tests: dummy-frozen-map-tests
	../include/crow/col/experimental/private/index-set-tests: dummy-index-set-tests
	../include/crow/col/private/array-tests: dummy-array-tests
	../include/crow/col/private/map-tests: dummy-map-tests
	../include/crow/col/private/list-tests: dummy-list-tests
	../include/crow/col/private/set-tests: dummy-set-tests
	../include/crow/private/tests/exclusion-queue-tests: dummy-exclusion-queue-tests
	../include/crow/private/tests/bare-map-tests: dummy-bare-map-tests
	../include/crow/private/tests/bare-queue-tests: dummy-bare-queue-tests
	../include/crow/private/tests/bits-tests: dummy-bits-tests
	../include/crow/private/tests/future-tests: dummy-future-tests
	../include/crow/private/tests/json-tests: dummy-json-tests
	../include/crow/private/tests/math-tests: dummy-math-tests
	../include/crow/private/tests/number-tests: dummy-number-tests
	../include/crow/private/tests/shared-list-tests: dummy-shared-list-tests
	../include/crow/private/tests/shared-map-tests: dummy-shared-map-tests
	../include/crow/private/tests/string-tests: dummy-string-tests
	../editor/vscode/license.txt as license string
	./unit/auto-funs: dummy-auto-funs
	./unit/conditions: dummy-conditions

main nat^(_ string[]) summon
	license is "public domain"
	_ = ().from-bytes :: nat8[]
	_ = bold
	_ = () :: ((nat, nat) compact-map)
	_ = () :: ((nat, nat) compact-sorted-map)
	_ = () :: (nat counter)
	_ = current-directory
	_ = () :: (nat deque)
	_ = dummy-array-tests
	_ = dummy-auto-funs
	_ = dummy-conditions
	_ = dummy-bare-map-tests
	_ = dummy-bare-queue-tests
	_ = dummy-bits-tests
	_ = dummy-future-tests
	_ = dummy-map-tests
	_ = dummy-exclusion-queue-tests
	_ = dummy-frozen-map-tests
	_ = dummy-index-set-tests
	_ = dummy-json-tests
	_ = dummy-list-tests
	_ = dummy-math-tests
	_ = dummy-number-tests
	_ = dummy-set-tests
	_ = dummy-shared-list-tests
	_ = dummy-shared-map-tests
	_ = dummy-string-tests
	_ = () :: nat[nat]
	_ = () :: ((nat, nat) frozen-map)
	_ = () :: (nat frozen-set)
	# TODO: Windows support
	unless trusted is-windows
		# '!is-abort-on-throw' is how I detect using 'c2m' which can't use external libraries
		unless trusted is-abort-on-throw
			_ = generate-login-cookie
			_ = quality-moderate
			_ = get-environ
	_ = () :: grammar-skip
	_ = () :: http-server
	_ = () :: (nat hamt-set)
	_ = "".strip
	_ = () :: index-set
	_ = info
	_ = () :: nat mut[]
	_ = () :: mat3-32
	_ = () :: (nat mut-deque)
	_ = () :: nat mut[nat]
	_ = () :: (nat mut-grid)
	_ = () :: ((nat, nat) mut-priority-queue)
	_ = () :: (nat mut-set)
	_ = () :: ((nat, nat) mut-sorted-map)
	_ = () :: (nat mut-sorted-set)
	_ = () :: (nat mut-queue)
	_ = () :: (nat mut-stack)
	_ = measure-performance
	_ = () :: ((nat, nat) priority-queue)
	_ = (0.exited, (), ()) :: process-result
	_ = () :: (nat set)
	_ = () :: (nat sorted-set)
	_ = () :: (nat stack)
	_ = () :: (nat tree-set)
	_ = (() => read-stdin)::string^ shared()
	_ = () :: vec2-32
	_ = () :: (nat queue)
	_ = gmt
	_ = () parse-named-args ()
	<- run-all-tests
	()

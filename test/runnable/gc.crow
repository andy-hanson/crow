import
	alloc: cur-word, gc-count, gc-stats, get-gc, get-stats, force-needs-gc, set-hard-limit, words-free, words-used
	io.print: print

main fut nat(_ arr str) summon unsafe
	gc = get-gc
	| To speed up 'gc.get-stats'
	gc.hard-limit := 0x200

	| We'll keep a alive, but not b
	a = r: 1, 2, 3
	b = r: 4, 5, 6
	assert: size-of<by-val<r>> == 24
	assert: b.as-any-ptr - a.as-any-ptr == 24

	print: "stats: " ~ gc.get-stats.to-str
	print: "gc count: " ~ gc.gc-count.to-str
	print: "a: " ~ a.to-str
	print: "stats (after print): " ~ gc.get-stats.to-str

	gc force-needs-gc
	v <- delay

	print: "-- after gc --"
	print: "stats: " ~ gc.get-stats.to-str
	print: "gc count: " ~ gc.gc-count.to-str
	print: "a: " ~ a.to-str
	print: "stats (after print): " ~ gc.get-stats.to-str

	0 resolved

r record
	a nat
	b nat
	c nat

to-str str(a r)
	"a=" ~ a.a.to-str ~ ", b=" ~ a.b.to-str ~ ", c=" ~ a.c.to-str

to-str str(a gc-stats) summon
	"cur-word=" ~ a.cur-word.to-str ~ ", words-used=" ~ a.words-used.to-str ~ ", words-free=" ~ a.words-free.to-str

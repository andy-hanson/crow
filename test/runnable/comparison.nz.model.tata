module(
	path: 20
	imports: [
		import(18, none)
		import(8, none)
		import(0, none)
		import(1, none)
		import(9, none)
		import(5, none)
		import(16, none)
		import(17, none)
		import(6, none)
		import(7, none)
		import(15, none)
		import(11, none)
		import(12, none)
		import(13, some([exit-code, print-sync]))]
	exports: []
	structs: [
		struct(range: file-range(20, range(34, 66)), public?: true, name: my-record)
		struct(range: file-range(20, range(66, 112)), public?: true, name: my-byref-record)
		struct(range: file-range(20, range(112, 136)), public?: true, name: my-other-record)
		struct(range: file-range(20, range(136, 180)), public?: true, name: my-union)]
	specs: []
	funs: [
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(20, 180), test-compare-records, void(), [])
			body: let(
				local(file-range(20, range(216, 217)), a, my-record())
				call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)])
				let(
					local(file-range(20, range(237, 238)), b, my-record())
					call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 3)])
					let(
						local(file-range(20, range(258, 259)), c, my-record())
						call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)])
						let(
							local(file-range(20, range(279, 280)), d, my-record())
							call(fun-inst(name: my-record), [literal(nat(), 0), literal(nat(), 3)])
							seq(
								seq(
									call(
										fun-inst(name: print-sync)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-record()])
														[local-ref(a), local-ref(b)])])])
									call(
										fun-inst(name: print-sync)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-record()])
														[local-ref(a), local-ref(c)])])]))
								call(
									fun-inst(name: print-sync)
									[
										call(
											fun-inst(name: to-str)
											[
												call(
													fun-inst(name: <=>, type-args: [my-record()])
													[local-ref(a), local-ref(d)])])])))))))
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(20, 384), test-compare-byref-records, void(), [])
			body: let(
				local(file-range(20, range(426, 427)), a, my-byref-record())
				call(fun-inst(name: my-byref-record), [literal(nat(), 1), literal(nat(), 2)])
				let(
					local(file-range(20, range(453, 454)), b, my-byref-record())
					call(fun-inst(name: my-byref-record), [literal(nat(), 1), literal(nat(), 3)])
					let(
						local(file-range(20, range(480, 481)), c, my-byref-record())
						call(fun-inst(name: my-byref-record), [literal(nat(), 1), literal(nat(), 2)])
						let(
							local(file-range(20, range(507, 508)), d, my-byref-record())
							call(fun-inst(name: my-byref-record), [literal(nat(), 0), literal(nat(), 3)])
							seq(
								seq(
									call(
										fun-inst(name: print-sync)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-byref-record()])
														[local-ref(a), local-ref(b)])])])
									call(
										fun-inst(name: print-sync)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-byref-record()])
														[local-ref(a), local-ref(c)])])]))
								call(
									fun-inst(name: print-sync)
									[
										call(
											fun-inst(name: to-str)
											[
												call(
													fun-inst(name: <=>, type-args: [my-byref-record()])
													[local-ref(a), local-ref(d)])])])))))))
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(20, 618), test-compare-unions, void(), [])
			body: let(
				local(file-range(20, range(653, 654)), a, my-union())
				call(
					fun-inst(name: as, type-args: [my-union()])
					[to-union(my-union(), 0, call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)]))])
				let(
					local(file-range(20, range(688, 689)), b, my-union())
					call(
						fun-inst(name: as, type-args: [my-union()])
						[to-union(my-union(), 1, call(fun-inst(name: my-other-record), []))])
					let(
						local(file-range(20, range(723, 724)), c, my-union())
						call(
							fun-inst(name: as, type-args: [my-union()])
							[
								to-union(
									my-union()
									0
									call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)]))])
						let(
							local(file-range(20, range(758, 759)), d, my-union())
							call(
								fun-inst(name: as, type-args: [my-union()])
								[
									to-union(
										my-union()
										0
										call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 1)]))])
							seq(
								seq(
									call(
										fun-inst(name: print-sync)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-union()])
														[local-ref(a), local-ref(b)])])])
									call(
										fun-inst(name: print-sync)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-union()])
														[local-ref(a), local-ref(c)])])]))
								call(
									fun-inst(name: print-sync)
									[
										call(
											fun-inst(name: to-str)
											[
												call(
													fun-inst(name: <=>, type-args: [my-union()])
													[local-ref(a), local-ref(d)])])])))))))
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(20, 878), main, fut(int32()), [param(file-range(20, range(897, 909)), args, arr(arr(char())))])
			body: seq(
				seq(
					seq(
						call(fun-inst(name: test-compare-records), [])
						call(fun-inst(name: test-compare-byref-records), []))
					call(fun-inst(name: test-compare-unions), []))
				call(fun-inst(name: resolved, type-args: [int32()]), [literal(int32(), 0)])))
		fun(
			public?: true
			preferred: true
			sig: sig(
				file-pos(20, 34)
				my-record
				my-record()
				[param(file-range(20, range(52, 57)), x, nat()), param(file-range(20, range(59, 64)), y, nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(
				file-pos(20, 34)
				my-record
				by-val(my-record())
				[param(file-range(20, range(52, 57)), x, nat()), param(file-range(20, range(59, 64)), y, nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(20, 52), x, nat(), [param(file-range(20, range(52, 57)), a, my-record())])
			body: field-get(0))
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(20, 59), y, nat(), [param(file-range(20, range(59, 64)), a, my-record())])
			body: field-get(1))
		fun(
			public?: true
			preferred: true
			sig: sig(
				file-pos(20, 66)
				my-byref-record
				my-byref-record()
				[param(file-range(20, range(98, 103)), x, nat()), param(file-range(20, range(105, 110)), y, nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(
				file-pos(20, 66)
				my-byref-record
				by-val(my-byref-record())
				[param(file-range(20, range(98, 103)), x, nat()), param(file-range(20, range(105, 110)), y, nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(20, 98), x, nat(), [param(file-range(20, range(98, 103)), a, my-byref-record())])
			body: field-get(0))
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(20, 105), y, nat(), [param(file-range(20, range(105, 110)), a, my-byref-record())])
			body: field-get(1))
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(20, 112), my-other-record, my-other-record(), [])
			body: new-record)])

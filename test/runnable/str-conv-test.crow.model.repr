module(
	path: 75
	imports: [import(none, 57, none), import(some(range(8, 28)), 44, some([print]))]
	funs: [
		fun(
			public: true
			summon: true
			sig: sig(file-pos(75, 30), main, fut(nat64()), [param(file-range(75, range(43, 50)), none, arr(str()))])
			body: seq(
				seq(
					seq(
						seq(
							seq(
								seq(
									seq(
										seq(
											seq(
												call(
													fun-inst(
														name: is
														type-args: [opt(nat64())]
														spec-impls: [fun-inst(name: ==)])
													[
														call(fun-inst(name: parse-nat), [string-lit("")])
														to-union(opt(nat64()), 0, call(fun-inst(name: none), []))])
												call(
													fun-inst(
														name: is
														type-args: [opt(nat64())]
														spec-impls: [fun-inst(name: ==)])
													[
														call(fun-inst(name: parse-nat), [string-lit("1")])
														to-union(
															opt(nat64())
															1
															call(
																fun-inst(name: some, type-args: [nat64()])
																[literal(nat64(), 1)]))]))
											call(
												fun-inst(
													name: is
													type-args: [opt(nat64())]
													spec-impls: [fun-inst(name: ==)])
												[
													call(fun-inst(name: parse-nat), [string-lit("1.2")])
													to-union(opt(nat64()), 0, call(fun-inst(name: none), []))]))
										call(
											fun-inst(
												name: is
												type-args: [opt(nat64())]
												spec-impls: [fun-inst(name: ==)])
											[
												call(fun-inst(name: parse-nat), [string-lit("+1")])
												to-union(opt(nat64()), 0, call(fun-inst(name: none), []))]))
									call(
										fun-inst(name: is, type-args: [opt(int64())], spec-impls: [fun-inst(name: ==)])
										[
											call(fun-inst(name: parse-int), [string-lit("123")])
											to-union(
												opt(int64())
												1
												call(fun-inst(name: some, type-args: [int64()]), [literal(int64(), 123)]))]))
								call(
									fun-inst(name: is, type-args: [opt(int64())], spec-impls: [fun-inst(name: ==)])
									[
										call(fun-inst(name: parse-int), [string-lit("-123")])
										to-union(
											opt(int64())
											1
											call(fun-inst(name: some, type-args: [int64()]), [literal(int64(), -123)]))]))
							call(
								fun-inst(name: is, type-args: [opt(int64())], spec-impls: [fun-inst(name: ==)])
								[
									call(fun-inst(name: parse-int), [string-lit("+123")])
									to-union(
										opt(int64())
										1
										call(fun-inst(name: some, type-args: [int64()]), [literal(int64(), 123)]))]))
						call(
							fun-inst(name: is, type-args: [opt(int64())], spec-impls: [fun-inst(name: ==)])
							[
								call(fun-inst(name: parse-int), [string-lit("*123")])
								to-union(opt(int64()), 0, call(fun-inst(name: none), []))]))
					call(
						fun-inst(name: print)
						[
							call(
								fun-inst(name: to-str, type-args: [nat64()], spec-impls: [fun-inst(name: to-str)])
								[call(fun-inst(name: parse-nat), [string-lit("1")])])]))
				call(fun-inst(name: resolved, type-args: [nat64()]), [literal(nat64(), 0)])))])

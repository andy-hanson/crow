module(
	path: 60
	imports: [import(none, 45, none), import(some(range(8, 23)), 35, some([print]))]
	structs: [
		struct(range: file-range(60, range(141, 173)), public?: true, name: my-record)
		struct(range: file-range(60, range(173, 219)), public?: true, name: my-byref-record)
		struct(range: file-range(60, range(219, 243)), public?: true, name: my-other-record)
		struct(range: file-range(60, range(243, 287)), public?: true, name: my-union)]
	funs: [
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(60, 25), main, fut(nat()), [param(file-range(60, range(38, 47)), none, arr(arr(char())))])
			body: seq(
				seq(
					seq(
						call(fun-inst(name: test-compare-records), [])
						call(fun-inst(name: test-compare-byref-records), []))
					call(fun-inst(name: test-compare-unions), []))
				call(fun-inst(name: resolved, type-args: [nat()]), [literal(nat(), 0)])))
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(60, 287), test-compare-records, void(), [])
			body: let(
				local(file-range(60, range(323, 324)), a, my-record())
				call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)])
				let(
					local(file-range(60, range(344, 345)), b, my-record())
					call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 3)])
					let(
						local(file-range(60, range(365, 366)), c, my-record())
						call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)])
						let(
							local(file-range(60, range(386, 387)), d, my-record())
							call(fun-inst(name: my-record), [literal(nat(), 0), literal(nat(), 3)])
							seq(
								seq(
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-record()])
														[local-ref(a), local-ref(b)])])])
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-record()])
														[local-ref(a), local-ref(c)])])]))
								call(
									fun-inst(name: print)
									[
										call(
											fun-inst(name: to-str)
											[
												call(
													fun-inst(name: <=>, type-args: [my-record()])
													[local-ref(a), local-ref(d)])])])))))))
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(60, 476), test-compare-byref-records, void(), [])
			body: let(
				local(file-range(60, range(518, 519)), a, my-byref-record())
				call(fun-inst(name: my-byref-record), [literal(nat(), 1), literal(nat(), 2)])
				let(
					local(file-range(60, range(545, 546)), b, my-byref-record())
					call(fun-inst(name: my-byref-record), [literal(nat(), 1), literal(nat(), 3)])
					let(
						local(file-range(60, range(572, 573)), c, my-byref-record())
						call(fun-inst(name: my-byref-record), [literal(nat(), 1), literal(nat(), 2)])
						let(
							local(file-range(60, range(599, 600)), d, my-byref-record())
							call(fun-inst(name: my-byref-record), [literal(nat(), 0), literal(nat(), 3)])
							seq(
								seq(
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-byref-record()])
														[local-ref(a), local-ref(b)])])])
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-byref-record()])
														[local-ref(a), local-ref(c)])])]))
								call(
									fun-inst(name: print)
									[
										call(
											fun-inst(name: to-str)
											[
												call(
													fun-inst(name: <=>, type-args: [my-byref-record()])
													[local-ref(a), local-ref(d)])])])))))))
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(60, 695), test-compare-unions, void(), [])
			body: let(
				local(file-range(60, range(730, 731)), a, my-union())
				call(
					fun-inst(name: as, type-args: [my-union()])
					[to-union(my-union(), 0, call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)]))])
				let(
					local(file-range(60, range(765, 766)), b, my-union())
					call(
						fun-inst(name: as, type-args: [my-union()])
						[to-union(my-union(), 1, call(fun-inst(name: my-other-record), []))])
					let(
						local(file-range(60, range(800, 801)), c, my-union())
						call(
							fun-inst(name: as, type-args: [my-union()])
							[
								to-union(
									my-union()
									0
									call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)]))])
						let(
							local(file-range(60, range(835, 836)), d, my-union())
							call(
								fun-inst(name: as, type-args: [my-union()])
								[
									to-union(
										my-union()
										0
										call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 1)]))])
							seq(
								seq(
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-union()])
														[local-ref(a), local-ref(b)])])])
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-union()])
														[local-ref(a), local-ref(c)])])]))
								call(
									fun-inst(name: print)
									[
										call(
											fun-inst(name: to-str)
											[
												call(
													fun-inst(name: <=>, type-args: [my-union()])
													[local-ref(a), local-ref(d)])])])))))))
		fun(
			public?: true
			preferred: true
			sig: sig(
				file-pos(60, 141)
				my-record
				my-record()
				[param(file-range(60, range(159, 164)), some(x), nat()), param(file-range(60, range(166, 171)), some(y), nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(
				file-pos(60, 141)
				my-record
				by-val(my-record())
				[param(file-range(60, range(159, 164)), some(x), nat()), param(file-range(60, range(166, 171)), some(y), nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(60, 159), x, nat(), [param(file-range(60, range(159, 164)), some(a), my-record())])
			body: field-get(0))
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(60, 166), y, nat(), [param(file-range(60, range(166, 171)), some(a), my-record())])
			body: field-get(1))
		fun(
			public?: true
			preferred: true
			sig: sig(
				file-pos(60, 173)
				my-byref-record
				my-byref-record()
				[param(file-range(60, range(205, 210)), some(x), nat()), param(file-range(60, range(212, 217)), some(y), nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(
				file-pos(60, 173)
				my-byref-record
				by-val(my-byref-record())
				[param(file-range(60, range(205, 210)), some(x), nat()), param(file-range(60, range(212, 217)), some(y), nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(60, 205), x, nat(), [param(file-range(60, range(205, 210)), some(a), my-byref-record())])
			body: field-get(0))
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(60, 212), y, nat(), [param(file-range(60, range(212, 217)), some(a), my-byref-record())])
			body: field-get(1))
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(60, 219), my-other-record, my-other-record(), [])
			body: new-record)])

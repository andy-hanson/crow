module(
	path: 56
	imports: [
		import(none, 42, none)
		import(some(range(8, 37)), 0, some([as, fut, str, void]))
		import(some(range(39, 54)), 31, some([print]))]
	exports: []
	structs: [
		struct(range: file-range(56, range(172, 204)), public?: true, name: my-record)
		struct(range: file-range(56, range(204, 250)), public?: true, name: my-byref-record)
		struct(range: file-range(56, range(250, 274)), public?: true, name: my-other-record)
		struct(range: file-range(56, range(274, 318)), public?: true, name: my-union)]
	specs: []
	funs: [
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(56, 56), main, fut(nat()), [param(file-range(56, range(69, 78)), none, arr(arr(char())))])
			body: seq(
				seq(
					seq(
						call(fun-inst(name: test-compare-records), [])
						call(fun-inst(name: test-compare-byref-records), []))
					call(fun-inst(name: test-compare-unions), []))
				call(fun-inst(name: resolved, type-args: [nat()]), [literal(nat(), 0)])))
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(56, 318), test-compare-records, void(), [])
			body: let(
				local(file-range(56, range(354, 355)), a, my-record())
				call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)])
				let(
					local(file-range(56, range(375, 376)), b, my-record())
					call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 3)])
					let(
						local(file-range(56, range(396, 397)), c, my-record())
						call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)])
						let(
							local(file-range(56, range(417, 418)), d, my-record())
							call(fun-inst(name: my-record), [literal(nat(), 0), literal(nat(), 3)])
							seq(
								seq(
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-record()])
														[local-ref(a), local-ref(b)])])])
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-record()])
														[local-ref(a), local-ref(c)])])]))
								call(
									fun-inst(name: print)
									[
										call(
											fun-inst(name: to-str)
											[
												call(
													fun-inst(name: <=>, type-args: [my-record()])
													[local-ref(a), local-ref(d)])])])))))))
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(56, 507), test-compare-byref-records, void(), [])
			body: let(
				local(file-range(56, range(549, 550)), a, my-byref-record())
				call(fun-inst(name: my-byref-record), [literal(nat(), 1), literal(nat(), 2)])
				let(
					local(file-range(56, range(576, 577)), b, my-byref-record())
					call(fun-inst(name: my-byref-record), [literal(nat(), 1), literal(nat(), 3)])
					let(
						local(file-range(56, range(603, 604)), c, my-byref-record())
						call(fun-inst(name: my-byref-record), [literal(nat(), 1), literal(nat(), 2)])
						let(
							local(file-range(56, range(630, 631)), d, my-byref-record())
							call(fun-inst(name: my-byref-record), [literal(nat(), 0), literal(nat(), 3)])
							seq(
								seq(
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-byref-record()])
														[local-ref(a), local-ref(b)])])])
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-byref-record()])
														[local-ref(a), local-ref(c)])])]))
								call(
									fun-inst(name: print)
									[
										call(
											fun-inst(name: to-str)
											[
												call(
													fun-inst(name: <=>, type-args: [my-byref-record()])
													[local-ref(a), local-ref(d)])])])))))))
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(56, 726), test-compare-unions, void(), [])
			body: let(
				local(file-range(56, range(761, 762)), a, my-union())
				call(
					fun-inst(name: as, type-args: [my-union()])
					[to-union(my-union(), 0, call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)]))])
				let(
					local(file-range(56, range(796, 797)), b, my-union())
					call(
						fun-inst(name: as, type-args: [my-union()])
						[to-union(my-union(), 1, call(fun-inst(name: my-other-record), []))])
					let(
						local(file-range(56, range(831, 832)), c, my-union())
						call(
							fun-inst(name: as, type-args: [my-union()])
							[
								to-union(
									my-union()
									0
									call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 2)]))])
						let(
							local(file-range(56, range(866, 867)), d, my-union())
							call(
								fun-inst(name: as, type-args: [my-union()])
								[
									to-union(
										my-union()
										0
										call(fun-inst(name: my-record), [literal(nat(), 1), literal(nat(), 1)]))])
							seq(
								seq(
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-union()])
														[local-ref(a), local-ref(b)])])])
									call(
										fun-inst(name: print)
										[
											call(
												fun-inst(name: to-str)
												[
													call(
														fun-inst(name: <=>, type-args: [my-union()])
														[local-ref(a), local-ref(c)])])]))
								call(
									fun-inst(name: print)
									[
										call(
											fun-inst(name: to-str)
											[
												call(
													fun-inst(name: <=>, type-args: [my-union()])
													[local-ref(a), local-ref(d)])])])))))))
		fun(
			public?: true
			preferred: true
			sig: sig(
				file-pos(56, 172)
				my-record
				my-record()
				[param(file-range(56, range(190, 195)), some(x), nat()), param(file-range(56, range(197, 202)), some(y), nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(
				file-pos(56, 172)
				my-record
				by-val(my-record())
				[param(file-range(56, range(190, 195)), some(x), nat()), param(file-range(56, range(197, 202)), some(y), nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(56, 190), x, nat(), [param(file-range(56, range(190, 195)), some(a), my-record())])
			body: field-get(0))
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(56, 197), y, nat(), [param(file-range(56, range(197, 202)), some(a), my-record())])
			body: field-get(1))
		fun(
			public?: true
			preferred: true
			sig: sig(
				file-pos(56, 204)
				my-byref-record
				my-byref-record()
				[param(file-range(56, range(236, 241)), some(x), nat()), param(file-range(56, range(243, 248)), some(y), nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(
				file-pos(56, 204)
				my-byref-record
				by-val(my-byref-record())
				[param(file-range(56, range(236, 241)), some(x), nat()), param(file-range(56, range(243, 248)), some(y), nat())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(56, 236), x, nat(), [param(file-range(56, range(236, 241)), some(a), my-byref-record())])
			body: field-get(0))
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(56, 243), y, nat(), [param(file-range(56, range(243, 248)), some(a), my-byref-record())])
			body: field-get(1))
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(56, 250), my-other-record, my-other-record(), [])
			body: new-record)])

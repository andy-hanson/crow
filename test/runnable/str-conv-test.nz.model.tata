module(
	path: 44
	imports: [import(none, 31, none), import(some(range(8, 16)), 23, some([print])), import(some(range(25, 35)), 41, some([exit-code]))]
	exports: []
	structs: []
	specs: []
	funs: [
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(44, 48), main, fut(int32()), [param(file-range(44, range(67, 76)), none, arr(arr(char())))])
			body: seq(
				seq(
					seq(
						seq(
							seq(
								seq(
									seq(
										seq(
											seq(
												call(
													fun-inst(name: assert)
													[
														call(
															fun-inst(name: ==, type-args: [opt(nat())])
															[
																call(fun-inst(name: parse-nat), [string-lit("")])
																to-union(opt(nat()), 0, call(fun-inst(name: none), []))])])
												call(
													fun-inst(name: assert)
													[
														call(
															fun-inst(name: ==, type-args: [opt(nat())])
															[
																call(fun-inst(name: parse-nat), [string-lit("1")])
																to-union(
																	opt(nat())
																	1
																	call(
																		fun-inst(name: some, type-args: [nat()])
																		[literal(nat(), 1)]))])]))
											call(
												fun-inst(name: assert)
												[
													call(
														fun-inst(name: ==, type-args: [opt(nat())])
														[
															call(fun-inst(name: parse-nat), [string-lit("1.2")])
															to-union(opt(nat()), 0, call(fun-inst(name: none), []))])]))
										call(
											fun-inst(name: assert)
											[
												call(
													fun-inst(name: ==, type-args: [opt(nat())])
													[
														call(fun-inst(name: parse-nat), [string-lit("+1")])
														to-union(opt(nat()), 0, call(fun-inst(name: none), []))])]))
									call(
										fun-inst(name: assert)
										[
											call(
												fun-inst(name: ==, type-args: [opt(int())])
												[
													call(fun-inst(name: parse-int), [string-lit("123")])
													to-union(
														opt(int())
														1
														call(
															fun-inst(name: some, type-args: [int()])
															[literal(int(), 123)]))])]))
								call(
									fun-inst(name: assert)
									[
										call(
											fun-inst(name: ==, type-args: [opt(int())])
											[
												call(fun-inst(name: parse-int), [string-lit("-123")])
												to-union(
													opt(int())
													1
													call(fun-inst(name: some, type-args: [int()]), [literal(int(), -123)]))])]))
							call(
								fun-inst(name: assert)
								[
									call(
										fun-inst(name: ==, type-args: [opt(int())])
										[
											call(fun-inst(name: parse-int), [string-lit("+123")])
											to-union(
												opt(int())
												1
												call(fun-inst(name: some, type-args: [int()]), [literal(int(), 123)]))])]))
						call(
							fun-inst(name: assert)
							[
								call(
									fun-inst(name: ==, type-args: [opt(int())])
									[
										call(fun-inst(name: parse-int), [string-lit("*123")])
										to-union(opt(int()), 0, call(fun-inst(name: none), []))])]))
					call(
						fun-inst(name: print)
						[
							call(
								fun-inst(name: to-str, type-args: [nat()], spec-impls: [fun-inst(name: to-str)])
								[call(fun-inst(name: parse-nat), [string-lit("1")])])]))
				call(fun-inst(name: resolved, type-args: [int32()]), [literal(int32(), 0)])))])

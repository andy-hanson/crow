file-ast(
	imports: ports(range(0, 31), [import-ast(0, "/io/process", some([exit-code]))])
	specs: []
	aliases: []
	structs: []
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(
				range(31, 60)
				main
				inststruct(range(36, 49), name-range(36, fut), [inststruct(range(40, 49), name-range(40, exit-code))])
				[
					param(
						range(50, 59)
						none
						inststruct(range(52, 59), name-range(52, arr), [inststruct(range(56, 59), name-range(56, str))]))])
			summon: true
			body: seq-ast(
				call(infix, name-range(74, log), [], [info, literal("Logged once")])
				let(
					name-range(93, lh)
					get-log-handler
					let(
						name-range(115, doubler)
						call(
							prefix
							name-range(125, as)
							[inststruct(range(128, 139), name-range(128, log-handler))]
							[lambda([name-range(143, logged)])])
						seq-ast(
							seq-ast(
								call(infix, name-range(193, with-log-handler), [], [doubler, lambda([])])
								call(
									infix
									name-range(249, with-log-handler)
									[]
									[lambda([name-range(239, it)]), lambda([])]))
							call(infix, name-range(297, resolved), [], [literal(nat(0, false))]))))))])

file-ast(
	imports: ports(
		range(0, 100)
		[
			import-ast(0, "/io/process", some([exit-code]))
			import-ast(0, "/logging", some([get-log-handler, info, log, log-handler, warn, with-log-handler]))])
	specs: []
	aliases: []
	structs: []
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(
				range(100, 129)
				main
				inststruct(range(105, 118), name-range(105, fut), [inststruct(range(109, 118), name-range(109, exit-code))])
				[
					param(
						range(119, 128)
						none
						inststruct(range(121, 128), name-range(121, arr), [inststruct(range(125, 128), name-range(125, str))]))])
			summon: true
			body: seq-ast(
				call(infix, name-range(143, log), [], [info, literal("Logged once")])
				let(
					name-range(162, lh)
					get-log-handler
					let(
						name-range(184, doubler)
						call(
							prefix
							name-range(194, as)
							[inststruct(range(197, 208), name-range(197, log-handler))]
							[lambda([name-range(212, logged)])])
						seq-ast(
							seq-ast(
								call(infix, name-range(254, with-log-handler), [], [doubler, lambda([])])
								call(
									infix
									name-range(310, with-log-handler)
									[]
									[lambda([name-range(300, it)]), lambda([])]))
							call(infix, name-range(358, resolved), [], [literal(nat(0, false))]))))))])

file-ast(
	imports: ports(range(0, 29), [import-ast(0, "/io", some([exit-code, print]))])
	specs: []
	aliases: []
	structs: []
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(
				range(29, 61)
				main
				inststruct(range(34, 47), name-range(34, fut), [inststruct(range(38, 47), name-range(38, exit-code))])
				[
					param(
						range(48, 60)
						name-range(48, args)
						inststruct(range(53, 60), name-range(53, arr), [inststruct(range(57, 60), name-range(57, str))]))])
			summon: true
			body: seq-ast(
				call(infix, name-range(75, log), [], [info, literal("Logged once")])
				let(
					name-range(94, lh)
					get-log-handler
					let(
						name-range(116, doubler)
						call(
							prefix
							name-range(126, as)
							[inststruct(range(129, 140), name-range(129, log-handler))]
							[lambda([name-range(144, logged)])])
						seq-ast(
							seq-ast(
								call(infix, name-range(194, with-log-handler), [], [doubler, lambda([])])
								call(
									infix
									name-range(250, with-log-handler)
									[]
									[lambda([name-range(240, it)]), lambda([])]))
							call(infix, name-range(298, resolved), [], [literal(nat(0, false))]))))))])

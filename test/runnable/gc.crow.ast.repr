file-ast(
	imports: ports(
		range(0, 206)
		[
			import-ast("crow/io/print", some([print]))
			import-ast(
				"crow/private/alloc"
				some([
					cur-word
					gc-count
					gc-stats
					get-gc
					get-stats
					force-needs-gc!
					set-hard-limit
					words-free
					words-used]))
			import-ast("crow/ptr", some([-, as-any-const-ptr, by-val, size-of]))])
	specs: []
	aliases: []
	structs: [
		struct(
			range(784, 815)
			""
			public
			[]
			none
			record(
				none
				[
					field(range(794, 799), const, a, inststruct(range(796, 799), name-range(796, nat)))
					field(range(801, 806), const, b, inststruct(range(803, 806), name-range(803, nat)))
					field(range(808, 813), const, c, inststruct(range(810, 813), name-range(810, nat)))]))]
	funs: [
		fun-decl(
			visibility: public
			sig: sig-ast(
				range(206, 228)
				main
				inststruct(range(211, 218), name-range(211, fut), [inststruct(range(215, 218), name-range(215, nat))])
				[param(range(219, 226), none, suffix(inststruct(range(221, 224), name-range(221, str)), arr))])
			summon: true
			unsafe: true
			body: let(
				gc
				get-gc
				seq-ast(
					call(set-dot, name-range(288, set-hard-limit), [], [gc, literal(nat(512, false))])
					let(
						a
						call(
							comma
							name-range(350, new)
							[]
							[literal(nat(1, false)), literal(nat(2, false)), literal(nat(3, false))])
						let(
							b
							call(
								comma
								name-range(365, new)
								[]
								[literal(nat(4, false)), literal(nat(5, false)), literal(nat(6, false))])
							seq-ast(
								seq-ast(
									seq-ast(
										seq-ast(
											seq-ast(
												seq-ast(
													seq-ast(
														call(
															prefix
															name-range(374, assert)
															[]
															[
																call(
																	infix
																	name-range(402, ==)
																	[]
																	[
																		call(
																			single
																			name-range(382, size-of)
																			[
																				inststruct(
																					range(391, 400)
																					name-range(391, by-val)
																					[
																						inststruct(
																							range(398, 399)
																							name-range(398, r))])]
																			[])
																		literal(nat(24, false))])])
														call(
															prefix
															name-range(409, assert)
															[]
															[
																call(
																	infix
																	name-range(457, ==)
																	[]
																	[
																		call(
																			infix
																			name-range(436, -)
																			[]
																			[
																				call(
																					dot
																					name-range(419, as-any-const-ptr)
																					[]
																					[b])
																				call(
																					dot
																					name-range(440, as-any-const-ptr)
																					[]
																					[a])])
																		literal(nat(24, false))])]))
													call(
														prefix
														name-range(465, print)
														[]
														[
															interpolated(
																[
																	"stats: "
																	call(infix, name-range(484, get-stats), [], [gc])])]))
												call(
													prefix
													name-range(497, print)
													[]
													[
														interpolated(
															[
																"gc count: "
																call(infix, name-range(519, gc-count), [], [gc])])]))
											call(prefix, name-range(531, print), [], [interpolated(["a: ", a])]))
										call(
											prefix
											name-range(548, print)
											[]
											[
												interpolated(
													[
														"stats (after print): "
														call(infix, name-range(581, get-stats), [], [gc])])]))
									call(infix, name-range(598, force-needs-gc!), [], [gc]))
								then-void(
									delay
									seq-ast(
										seq-ast(
											seq-ast(
												seq-ast(
													seq-ast(
														call(
															prefix
															name-range(626, print)
															[]
															[literal("-- after gc --")])
														call(
															prefix
															name-range(651, print)
															[]
															[
																interpolated(
																	[
																		"stats: "
																		call(infix, name-range(670, get-stats), [], [gc])])]))
													call(
														prefix
														name-range(683, print)
														[]
														[
															interpolated(
																[
																	"gc count: "
																	call(infix, name-range(705, gc-count), [], [gc])])]))
												call(prefix, name-range(717, print), [], [interpolated(["a: ", a])]))
											call(
												prefix
												name-range(734, print)
												[]
												[
													interpolated(
														[
															"stats (after print): "
															call(infix, name-range(767, get-stats), [], [gc])])]))
										call(empty-parens, name-range(780, new), [], [])))))))))
		fun-decl(
			visibility: public
			sig: sig-ast(
				range(815, 830)
				to-str
				inststruct(range(822, 825), name-range(822, str))
				[param(range(826, 829), some(a), inststruct(range(828, 829), name-range(828, r)))])
			body: interpolated(
				[
					"a="
					call(infix, name-range(838, a), [], [a])
					", b="
					call(infix, name-range(847, b), [], [a])
					", c="
					call(infix, name-range(856, c), [], [a])]))
		fun-decl(
			visibility: public
			sig: sig-ast(
				range(861, 884)
				to-str
				inststruct(range(868, 871), name-range(868, str))
				[param(range(872, 882), some(a), inststruct(range(874, 882), name-range(874, gc-stats)))])
			summon: true
			body: interpolated(
				[
					"cur-word="
					call(infix, name-range(905, cur-word), [], [a])
					", words-used="
					call(infix, name-range(930, words-used), [], [a])
					", words-free="
					call(infix, name-range(957, words-free), [], [a])]))])

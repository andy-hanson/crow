program(
	[
		struct(
			name: "ctx"
			ptr?: true
			body: record(
				[
					field(false, "gctx_ptr", type(false, "ptr__nat8"))
					field(false, "vat_id", type(false, "nat"))
					field(false, "actor_id", type(false, "nat"))
					field(false, "gc_ctx_ptr", type(false, "ptr__nat8"))
					field(false, "exception_ctx_ptr", type(false, "ptr__nat8"))]))
		struct(name: "nat8", body: builtin(nat-8, []))
		struct(name: "ptr__nat8", body: builtin(ptr, [type(false, "nat8")]))
		struct(name: "nat", body: builtin(nat-64, []))
		struct(name: "int32", body: builtin(int-32, []))
		struct(name: "char", body: builtin(char, []))
		struct(name: "ptr__char", body: builtin(ptr, [type(false, "char")]))
		struct(name: "ptr__ptr__char", body: builtin(ptr, [type(false, "ptr__char")]))
		struct(
			name: "fut__int32"
			mut?: true
			ptr?: true
			body: record([field(false, "lk", type(false, "lock")), field(true, "state", type(false, "fut_state__int32"))]))
		struct(name: "lock", ptr?: true, body: record([field(false, "is_locked", type(false, "_atomic_bool"))]))
		struct(name: "_atomic_bool", mut?: true, ptr?: true, body: record([field(true, "value", type(false, "bool"))]))
		struct(name: "bool", body: builtin(bool, []))
		struct(
			name: "fut_state__int32"
			body: union(
				[
					type(false, "fut_state_callbacks__int32")
					type(false, "fut_state_resolved__int32")
					type(false, "exception")]))
		struct(
			name: "fut_state_callbacks__int32"
			body: record([field(false, "head", type(false, "opt__ptr_fut_callback_node__int32"))]))
		struct(
			name: "fut_callback_node__int32"
			ptr?: true
			body: record(
				[
					field(false, "cb", type(false, "fun_mut1___void__result__int32__exception"))
					field(false, "next_node", type(false, "opt__ptr_fut_callback_node__int32"))]))
		struct(name: "_void", body: builtin(void, []))
		struct(name: "exception", body: record([field(false, "message", type(false, "arr__char"))]))
		struct(
			name: "arr__char"
			body: record([field(false, "size", type(false, "nat")), field(false, "data", type(false, "ptr__char"))]))
		struct(name: "result__int32__exception", body: union([type(false, "ok__int32"), type(false, "err__exception")]))
		struct(name: "ok__int32", body: record([field(false, "value", type(false, "int32"))]))
		struct(name: "err__exception", body: record([field(false, "value", type(false, "exception"))]))
		struct(
			name: "fun_mut1___void__result__int32__exception"
			body: record(
				[
					field(
						false
						"fun_ptr"
						type(false, "fun_ptr3___void__ptr_ctx__ptr__nat8__result__int32__exception"))
					field(false, "closure", type(false, "ptr__nat8"))]))
		struct(
			name: "fun_ptr3___void__ptr_ctx__ptr__nat8__result__int32__exception"
			body: builtin(
				fun-ptr
				[
					type(false, "_void")
					type(true, "ctx")
					type(false, "ptr__nat8")
					type(false, "result__int32__exception")]))
		struct(
			name: "opt__ptr_fut_callback_node__int32"
			body: union([type(false, "none"), type(false, "some__ptr_fut_callback_node__int32")]))
		struct(name: "none", body: record([]))
		struct(
			name: "some__ptr_fut_callback_node__int32"
			body: record([field(false, "value", type(true, "fut_callback_node__int32"))]))
		struct(name: "fut_state_resolved__int32", body: record([field(false, "value", type(false, "int32"))]))
		struct(
			name: "arr__arr__char"
			body: record([field(false, "size", type(false, "nat")), field(false, "data", type(false, "ptr__arr__char"))]))
		struct(name: "ptr__arr__char", body: builtin(ptr, [type(false, "arr__char")]))
		struct(
			name: "fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
			body: builtin(fun-ptr, [type(true, "fut__int32"), type(true, "ctx"), type(false, "arr__arr__char")]))
		struct(
			name: "global_ctx"
			mut?: true
			ptr?: true
			body: record(
				[
					field(false, "lk", type(false, "lock"))
					field(true, "vats", type(false, "arr__ptr_vat"))
					field(true, "n_live_threads", type(false, "nat"))
					field(false, "may_be_work_to_do", type(false, "condition"))
					field(true, "is_shut_down", type(false, "bool"))
					field(true, "any_unhandled_exceptions__q", type(false, "bool"))]))
		struct(
			name: "vat"
			mut?: true
			ptr?: true
			body: record(
				[
					field(false, "gctx", type(true, "global_ctx"))
					field(false, "id", type(false, "nat"))
					field(false, "gc", type(false, "gc"))
					field(false, "tasks_lock", type(false, "lock"))
					field(false, "tasks", type(false, "mut_bag__task"))
					field(false, "currently_running_actors", type(false, "mut_arr__nat"))
					field(true, "n_threads_running", type(false, "nat"))
					field(false, "next_actor_id", type(false, "thread_safe_counter"))
					field(true, "exception_handler", type(false, "fun_mut1___void__exception"))]))
		struct(
			name: "gc"
			mut?: true
			ptr?: true
			body: record(
				[
					field(false, "lk", type(false, "lock"))
					field(true, "context_head", type(false, "opt__ptr_gc_ctx"))
					field(true, "needs_gc", type(false, "bool"))
					field(true, "is_doing_gc", type(false, "bool"))
					field(false, "begin", type(false, "ptr__nat8"))
					field(false, "next_byte", type(false, "ptr__nat8"))]))
		struct(
			name: "gc_ctx"
			mut?: true
			ptr?: true
			body: record([field(true, "gc", type(true, "gc")), field(true, "next_ctx", type(false, "opt__ptr_gc_ctx"))]))
		struct(name: "opt__ptr_gc_ctx", body: union([type(false, "none"), type(false, "some__ptr_gc_ctx")]))
		struct(name: "some__ptr_gc_ctx", body: record([field(false, "value", type(true, "gc_ctx"))]))
		struct(
			name: "task"
			body: record([field(false, "actor_id", type(false, "nat")), field(false, "fun", type(false, "fun_mut0___void"))]))
		struct(
			name: "fun_mut0___void"
			body: record(
				[
					field(false, "fun_ptr", type(false, "fun_ptr2___void__ptr_ctx__ptr__nat8"))
					field(false, "closure", type(false, "ptr__nat8"))]))
		struct(
			name: "fun_ptr2___void__ptr_ctx__ptr__nat8"
			body: builtin(fun-ptr, [type(false, "_void"), type(true, "ctx"), type(false, "ptr__nat8")]))
		struct(
			name: "mut_bag__task"
			mut?: true
			ptr?: true
			body: record([field(true, "head", type(false, "opt__ptr_mut_bag_node__task"))]))
		struct(
			name: "mut_bag_node__task"
			mut?: true
			ptr?: true
			body: record(
				[
					field(false, "value", type(false, "task"))
					field(true, "next_node", type(false, "opt__ptr_mut_bag_node__task"))]))
		struct(
			name: "opt__ptr_mut_bag_node__task"
			body: union([type(false, "none"), type(false, "some__ptr_mut_bag_node__task")]))
		struct(
			name: "some__ptr_mut_bag_node__task"
			body: record([field(false, "value", type(true, "mut_bag_node__task"))]))
		struct(
			name: "mut_arr__nat"
			mut?: true
			ptr?: true
			body: record(
				[
					field(true, "frozen__q", type(false, "bool"))
					field(true, "size", type(false, "nat"))
					field(true, "capacity", type(false, "nat"))
					field(true, "data", type(false, "ptr__nat"))]))
		struct(name: "ptr__nat", body: builtin(ptr, [type(false, "nat")]))
		struct(
			name: "thread_safe_counter"
			mut?: true
			ptr?: true
			body: record([field(false, "lk", type(false, "lock")), field(true, "value", type(false, "nat"))]))
		struct(
			name: "fun_mut1___void__exception"
			body: record(
				[
					field(false, "fun_ptr", type(false, "fun_ptr3___void__ptr_ctx__ptr__nat8__exception"))
					field(false, "closure", type(false, "ptr__nat8"))]))
		struct(
			name: "fun_ptr3___void__ptr_ctx__ptr__nat8__exception"
			body: builtin(
				fun-ptr
				[type(false, "_void"), type(true, "ctx"), type(false, "ptr__nat8"), type(false, "exception")]))
		struct(
			name: "arr__ptr_vat"
			body: record([field(false, "size", type(false, "nat")), field(false, "data", type(false, "ptr__ptr_vat"))]))
		struct(name: "ptr__ptr_vat", body: builtin(ptr, [type(true, "vat")]))
		struct(
			name: "condition"
			mut?: true
			ptr?: true
			body: record([field(false, "lk", type(false, "lock")), field(true, "value", type(false, "nat"))]))
		struct(name: "comparison", body: union([type(false, "less"), type(false, "equal"), type(false, "greater")]))
		struct(name: "less", body: record([]))
		struct(name: "equal", body: record([]))
		struct(name: "greater", body: record([]))
		struct(name: "ptr__bool", body: builtin(ptr, [type(false, "bool")]))
		struct(name: "_int", body: builtin(int-64, []))
		struct(
			name: "exception_ctx"
			mut?: true
			ptr?: true
			body: record(
				[
					field(true, "jmp_buf_ptr", type(false, "ptr__jmp_buf_tag"))
					field(true, "thrown_exception", type(false, "exception"))]))
		struct(
			name: "jmp_buf_tag"
			body: record(
				[
					field(false, "jmp_buf", type(false, "bytes64"))
					field(false, "mask_was_saved", type(false, "int32"))
					field(false, "saved_mask", type(false, "bytes128"))]))
		struct(
			name: "bytes64"
			body: record([field(false, "n0", type(false, "bytes32")), field(false, "n1", type(false, "bytes32"))]))
		struct(
			name: "bytes32"
			body: record([field(false, "n0", type(false, "bytes16")), field(false, "n1", type(false, "bytes16"))]))
		struct(
			name: "bytes16"
			body: record([field(false, "n0", type(false, "nat")), field(false, "n1", type(false, "nat"))]))
		struct(
			name: "bytes128"
			body: record([field(false, "n0", type(false, "bytes64")), field(false, "n1", type(false, "bytes64"))]))
		struct(name: "ptr__jmp_buf_tag", body: builtin(ptr, [type(false, "jmp_buf_tag")]))
		struct(
			name: "thread_local_stuff"
			ptr?: true
			body: record([field(false, "exception_ctx", type(true, "exception_ctx"))]))
		struct(
			name: "arr__ptr__char"
			body: record([field(false, "size", type(false, "nat")), field(false, "data", type(false, "ptr__ptr__char"))]))
		struct(
			name: "fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
			body: record(
				[
					field(
						false
						"fun_ptr"
						type(
							false
							"fun_ptr4__ptr_fut__int32__ptr_ctx__ptr__nat8__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))
					field(false, "closure", type(false, "ptr__nat8"))]))
		struct(
			name: "fun_ptr4__ptr_fut__int32__ptr_ctx__ptr__nat8__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
			body: builtin(
				fun-ptr
				[
					type(true, "fut__int32")
					type(true, "ctx")
					type(false, "ptr__nat8")
					type(false, "arr__ptr__char")
					type(false, "fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char")]))
		struct(
			name: "fut___void"
			mut?: true
			ptr?: true
			body: record([field(false, "lk", type(false, "lock")), field(true, "state", type(false, "fut_state___void"))]))
		struct(
			name: "fut_state___void"
			body: union(
				[
					type(false, "fut_state_callbacks___void")
					type(false, "fut_state_resolved___void")
					type(false, "exception")]))
		struct(
			name: "fut_state_callbacks___void"
			body: record([field(false, "head", type(false, "opt__ptr_fut_callback_node___void"))]))
		struct(
			name: "fut_callback_node___void"
			ptr?: true
			body: record(
				[
					field(false, "cb", type(false, "fun_mut1___void__result___void__exception"))
					field(false, "next_node", type(false, "opt__ptr_fut_callback_node___void"))]))
		struct(name: "result___void__exception", body: union([type(false, "ok___void"), type(false, "err__exception")]))
		struct(name: "ok___void", body: record([field(false, "value", type(false, "_void"))]))
		struct(
			name: "fun_mut1___void__result___void__exception"
			body: record(
				[
					field(
						false
						"fun_ptr"
						type(false, "fun_ptr3___void__ptr_ctx__ptr__nat8__result___void__exception"))
					field(false, "closure", type(false, "ptr__nat8"))]))
		struct(
			name: "fun_ptr3___void__ptr_ctx__ptr__nat8__result___void__exception"
			body: builtin(
				fun-ptr
				[
					type(false, "_void")
					type(true, "ctx")
					type(false, "ptr__nat8")
					type(false, "result___void__exception")]))
		struct(
			name: "opt__ptr_fut_callback_node___void"
			body: union([type(false, "none"), type(false, "some__ptr_fut_callback_node___void")]))
		struct(
			name: "some__ptr_fut_callback_node___void"
			body: record([field(false, "value", type(true, "fut_callback_node___void"))]))
		struct(name: "fut_state_resolved___void", body: record([field(false, "value", type(false, "_void"))]))
		struct(
			name: "fun_ref0__int32"
			body: record(
				[
					field(false, "vat_and_actor", type(false, "vat_and_actor_id"))
					field(false, "fun", type(false, "fun_mut0__ptr_fut__int32"))]))
		struct(
			name: "vat_and_actor_id"
			body: record([field(false, "vat", type(false, "nat")), field(false, "actor", type(false, "nat"))]))
		struct(
			name: "fun_mut0__ptr_fut__int32"
			body: record(
				[
					field(false, "fun_ptr", type(false, "fun_ptr2__ptr_fut__int32__ptr_ctx__ptr__nat8"))
					field(false, "closure", type(false, "ptr__nat8"))]))
		struct(
			name: "fun_ptr2__ptr_fut__int32__ptr_ctx__ptr__nat8"
			body: builtin(fun-ptr, [type(true, "fut__int32"), type(true, "ctx"), type(false, "ptr__nat8")]))
		struct(
			name: "fun_ref1__int32___void"
			body: record(
				[
					field(false, "vat_and_actor", type(false, "vat_and_actor_id"))
					field(false, "fun", type(false, "fun_mut1__ptr_fut__int32___void"))]))
		struct(
			name: "fun_mut1__ptr_fut__int32___void"
			body: record(
				[
					field(false, "fun_ptr", type(false, "fun_ptr3__ptr_fut__int32__ptr_ctx__ptr__nat8___void"))
					field(false, "closure", type(false, "ptr__nat8"))]))
		struct(
			name: "fun_ptr3__ptr_fut__int32__ptr_ctx__ptr__nat8___void"
			body: builtin(
				fun-ptr
				[type(true, "fut__int32"), type(true, "ctx"), type(false, "ptr__nat8"), type(false, "_void")]))
		struct(name: "opt__ptr__nat8", body: union([type(false, "none"), type(false, "some__ptr__nat8")]))
		struct(name: "some__ptr__nat8", body: record([field(false, "value", type(false, "ptr__nat8"))]))
		struct(
			name: "then__ptr_fut__int32__ptr_fut___void__fun_ref1__int32___void__lambda0___closure"
			ptr?: true
			body: record(
				[
					field(false, "cb", type(false, "fun_ref1__int32___void"))
					field(false, "res", type(true, "fut__int32"))]))
		struct(
			name: "forward_to___void__ptr_fut__int32__ptr_fut__int32__lambda0___closure"
			body: record([field(false, "to", type(true, "fut__int32"))]))
		struct(
			name: "call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0___closure"
			ptr?: true
			body: record(
				[
					field(false, "f", type(false, "fun_ref1__int32___void"))
					field(false, "p0", type(false, "_void"))
					field(false, "res", type(true, "fut__int32"))]))
		struct(
			name: "call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0__lambda0___closure"
			ptr?: true
			body: record(
				[
					field(false, "f", type(false, "fun_ref1__int32___void"))
					field(false, "p0", type(false, "_void"))
					field(false, "res", type(true, "fut__int32"))]))
		struct(
			name: "call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0__lambda1___closure"
			body: record([field(false, "res", type(true, "fut__int32"))]))
		struct(
			name: "then2__ptr_fut__int32__ptr_fut___void__fun_ref0__int32__lambda0___closure"
			ptr?: true
			body: record([field(false, "cb", type(false, "fun_ref0__int32"))]))
		struct(
			name: "call__ptr_fut__int32__fun_ref0__int32__lambda0___closure"
			ptr?: true
			body: record([field(false, "f", type(false, "fun_ref0__int32")), field(false, "res", type(true, "fut__int32"))]))
		struct(
			name: "call__ptr_fut__int32__fun_ref0__int32__lambda0__lambda0___closure"
			ptr?: true
			body: record([field(false, "f", type(false, "fun_ref0__int32")), field(false, "res", type(true, "fut__int32"))]))
		struct(
			name: "call__ptr_fut__int32__fun_ref0__int32__lambda0__lambda1___closure"
			body: record([field(false, "res", type(true, "fut__int32"))]))
		struct(
			name: "add_first_task__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__lambda0___closure"
			ptr?: true
			body: record(
				[
					field(false, "all_args", type(false, "arr__ptr__char"))
					field(false, "main_ptr", type(false, "fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))]))
		struct(
			name: "fun_mut1__arr__char__ptr__char"
			body: record(
				[
					field(false, "fun_ptr", type(false, "fun_ptr3__arr__char__ptr_ctx__ptr__nat8__ptr__char"))
					field(false, "closure", type(false, "ptr__nat8"))]))
		struct(
			name: "fun_ptr3__arr__char__ptr_ctx__ptr__nat8__ptr__char"
			body: builtin(
				fun-ptr
				[type(false, "arr__char"), type(true, "ctx"), type(false, "ptr__nat8"), type(false, "ptr__char")]))
		struct(
			name: "fun_mut1__arr__char__nat"
			body: record(
				[
					field(false, "fun_ptr", type(false, "fun_ptr3__arr__char__ptr_ctx__ptr__nat8__nat"))
					field(false, "closure", type(false, "ptr__nat8"))]))
		struct(
			name: "fun_ptr3__arr__char__ptr_ctx__ptr__nat8__nat"
			body: builtin(
				fun-ptr
				[type(false, "arr__char"), type(true, "ctx"), type(false, "ptr__nat8"), type(false, "nat")]))
		struct(
			name: "mut_arr__arr__char"
			mut?: true
			ptr?: true
			body: record(
				[
					field(true, "frozen__q", type(false, "bool"))
					field(true, "size", type(false, "nat"))
					field(true, "capacity", type(false, "nat"))
					field(true, "data", type(false, "ptr__arr__char"))]))
		struct(
			name: "map__arr__arr__char__arr__ptr__char__fun_mut1__arr__char__ptr__char__lambda0___closure"
			ptr?: true
			body: record(
				[
					field(false, "mapper", type(false, "fun_mut1__arr__char__ptr__char"))
					field(false, "a", type(false, "arr__ptr__char"))]))
		struct(
			name: "fun_ptr2___void__nat__ptr_global_ctx"
			body: builtin(fun-ptr, [type(false, "_void"), type(false, "nat"), type(true, "global_ctx")]))
		struct(
			name: "thread_args__ptr_global_ctx"
			ptr?: true
			body: record(
				[
					field(false, "fun", type(false, "fun_ptr2___void__nat__ptr_global_ctx"))
					field(false, "thread_id", type(false, "nat"))
					field(false, "arg", type(true, "global_ctx"))]))
		struct(
			name: "ptr__thread_args__ptr_global_ctx"
			body: builtin(ptr, [type(false, "thread_args__ptr_global_ctx")]))
		struct(
			name: "fun_ptr1__ptr__nat8__ptr__nat8"
			body: builtin(fun-ptr, [type(false, "ptr__nat8"), type(false, "ptr__nat8")]))
		struct(name: "cell__nat", mut?: true, ptr?: true, body: record([field(true, "value", type(false, "nat"))]))
		struct(
			name: "cell__ptr__nat8"
			mut?: true
			ptr?: true
			body: record([field(true, "value", type(false, "ptr__nat8"))]))
		struct(
			name: "chosen_task"
			body: record([field(false, "vat", type(true, "vat")), field(false, "task_or_gc", type(false, "opt__task"))]))
		struct(name: "opt__task", body: union([type(false, "none"), type(false, "some__task")]))
		struct(name: "some__task", body: record([field(false, "value", type(false, "task"))]))
		struct(name: "no_chosen_task", body: record([field(false, "last_thread_out", type(false, "bool"))]))
		struct(
			name: "result__chosen_task__no_chosen_task"
			body: union([type(false, "ok__chosen_task"), type(false, "err__no_chosen_task")]))
		struct(name: "ok__chosen_task", body: record([field(false, "value", type(false, "chosen_task"))]))
		struct(name: "err__no_chosen_task", body: record([field(false, "value", type(false, "no_chosen_task"))]))
		struct(name: "opt__chosen_task", body: union([type(false, "none"), type(false, "some__chosen_task")]))
		struct(name: "some__chosen_task", body: record([field(false, "value", type(false, "chosen_task"))]))
		struct(name: "opt__opt__task", body: union([type(false, "none"), type(false, "some__opt__task")]))
		struct(name: "some__opt__task", body: record([field(false, "value", type(false, "opt__task"))]))
		struct(
			name: "task_and_nodes"
			body: record(
				[
					field(false, "task", type(false, "task"))
					field(false, "nodes", type(false, "opt__ptr_mut_bag_node__task"))]))
		struct(name: "opt__task_and_nodes", body: union([type(false, "none"), type(false, "some__task_and_nodes")]))
		struct(name: "some__task_and_nodes", body: record([field(false, "value", type(false, "task_and_nodes"))]))
		struct(
			name: "arr__nat"
			body: record([field(false, "size", type(false, "nat")), field(false, "data", type(false, "ptr__nat"))]))
		struct(
			name: "my_record"
			body: record([field(false, "x", type(false, "nat")), field(false, "y", type(false, "nat"))]))
		struct(
			name: "fun_mut1__char__nat"
			body: record(
				[
					field(false, "fun_ptr", type(false, "fun_ptr3__char__ptr_ctx__ptr__nat8__nat"))
					field(false, "closure", type(false, "ptr__nat8"))]))
		struct(
			name: "fun_ptr3__char__ptr_ctx__ptr__nat8__nat"
			body: builtin(fun-ptr, [type(false, "char"), type(true, "ctx"), type(false, "ptr__nat8"), type(false, "nat")]))
		struct(
			name: "mut_arr__char"
			mut?: true
			ptr?: true
			body: record(
				[
					field(true, "frozen__q", type(false, "bool"))
					field(true, "size", type(false, "nat"))
					field(true, "capacity", type(false, "nat"))
					field(true, "data", type(false, "ptr__char"))]))
		struct(
			name: "_op_plus__arr__char__arr__char__arr__char__lambda0___closure"
			ptr?: true
			body: record([field(false, "a", type(false, "arr__char")), field(false, "b", type(false, "arr__char"))]))]
	[
		fun(
			false
			"rt_main__int32__int32__ptr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
			type(false, "int32")
			none
			[
				param("argc", type(false, "int32"))
				param("argv", type(false, "ptr__ptr__char"))
				param("main_ptr", type(false, "fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))]
			expr-body(
				[
					local("n_threads", type(false, "nat"))
					local("gctx_by_val", type(false, "global_ctx"))
					local("gctx", type(true, "global_ctx"))
					local("vat_by_val", type(false, "vat"))
					local("vat", type(true, "vat"))
					local("vats", type(false, "arr__ptr_vat"))
					local("ectx", type(false, "exception_ctx"))
					local("tls", type(false, "thread_local_stuff"))
					local("ctx_by_val", type(false, "ctx"))
					local("ctx", type(true, "ctx"))
					local(
						"add"
						type(
							false
							"fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))
					local("all_args", type(false, "arr__ptr__char"))
					local("main_fut", type(true, "fut__int32"))
					local("o", type(false, "ok__int32"))
					local("e", type(false, "err__exception"))
					local("matched", type(false, "result__int32__exception"))]
				let(
					"n_threads"
					call("as__nat__nat", [call("two__nat", [])])
					let(
						"gctx_by_val"
						record(
							[
								call("new_lock__lock", [])
								call("empty_arr__arr__ptr_vat", [])
								local-ref("n_threads")
								call("new_condition__condition", [])
								call("false__bool", [])
								call("false__bool", [])])
						let(
							"gctx"
							call("ref_of_val__ptr_global_ctx__global_ctx", [local-ref("gctx_by_val")])
							let(
								"vat_by_val"
								call(
									"new_vat__vat__ptr_global_ctx__nat__nat"
									[local-ref("gctx"), call("zero__nat", []), local-ref("n_threads")])
								let(
									"vat"
									call("ref_of_val__ptr_vat__vat", [local-ref("vat_by_val")])
									let(
										"vats"
										record(
											[
												call("one__nat", [])
												call("ptr_to__ptr__ptr_vat__ptr_vat", [local-ref("vat")])])
										seq(
											set-field(local-ref("gctx"), "vats", local-ref("vats"))
											let(
												"ectx"
												call("new_exception_ctx__exception_ctx", [])
												let(
													"tls"
													record(
														[
															call(
																"ref_of_val__ptr_exception_ctx__exception_ctx"
																[local-ref("ectx")])])
													let(
														"ctx_by_val"
														call(
															"new_ctx__ctx__ptr_global_ctx__ptr_thread_local_stuff__ptr_vat__nat"
															[
																local-ref("gctx")
																call(
																	"ref_of_val__ptr_thread_local_stuff__thread_local_stuff"
																	[local-ref("tls")])
																local-ref("vat")
																call("zero__nat", [])])
														let(
															"ctx"
															call("ref_of_val__ptr_ctx__ctx", [local-ref("ctx_by_val")])
															let(
																"add"
																call(
																	"as__fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
																	[
																		lambda(
																			"rt_main__int32__int32__ptr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__lambda0"
																			some(call("null__ptr__bool", [])))])
																let(
																	"all_args"
																	record(
																		[
																			call(
																				"unsafe_to_nat__nat___int"
																				[
																					call(
																						"to_int___int__int32"
																						[param-ref("argc")])])
																			param-ref("argv")])
																	let(
																		"main_fut"
																		call(
																			"call_with_ctx__ptr_fut__int32__ptr_ctx__fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
																			[
																				local-ref("ctx")
																				local-ref("add")
																				local-ref("all_args")
																				param-ref("main_ptr")])
																		seq(
																			call(
																				"run_threads___void__nat__ptr_global_ctx__fun_ptr2___void__nat__ptr_global_ctx"
																				[
																					local-ref("n_threads")
																					local-ref("gctx")
																					lambda(
																						"rt_main__int32__int32__ptr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__lambda1"
																						none)])
																			cond(
																				get-field(
																					local-ref("gctx")
																					"any_unhandled_exceptions__q")
																				call("one__int32", [])
																				match(
																					"matched"
																					call(
																						"must_be_resolved__result__int32__exception__ptr_fut__int32"
																						[local-ref("main_fut")])
																					[
																						case(
																							some("o")
																							get-field(
																								local-ref("o")
																								"value"))
																						case(
																							some("e")
																							seq(
																								seq(
																									call(
																										"print_err_sync_no_newline___void__arr__char"
																										[
																											str-lit(
																												"main failed: ")])
																									call(
																										"print_err_sync___void__arr__char"
																										[
																											get-field(
																												get-field(
																													local-ref(
																														"e")
																													"value")
																												"message")]))
																								call("one__int32", [])))])))))))))))))))))))
		fun(
			false
			"as__nat__nat"
			type(false, "nat")
			none
			[param("value", type(false, "nat"))]
			builtin([type(false, "nat")]))
		fun(
			false
			"two__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_incr__nat__nat", [call("one__nat", [])])))
		fun(
			false
			"wrap_incr__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat"))]
			expr-body([], call("wrap_add__nat__nat__nat", [param-ref("a"), call("one__nat", [])])))
		fun(
			false
			"wrap_add__nat__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			builtin([]))
		fun(false, "one__nat", type(false, "nat"), none, [], builtin([]))
		fun(
			false
			"new_lock__lock"
			type(false, "lock")
			none
			[]
			expr-body([], record([call("new_atomic_bool___atomic_bool", [])])))
		fun(
			false
			"new_atomic_bool___atomic_bool"
			type(false, "_atomic_bool")
			none
			[]
			expr-body([], record([call("false__bool", [])])))
		fun(false, "false__bool", type(false, "bool"), none, [], builtin([]))
		fun(
			false
			"empty_arr__arr__ptr_vat"
			type(false, "arr__ptr_vat")
			none
			[]
			expr-body([], record([call("zero__nat", []), call("null__ptr__ptr_vat", [])])))
		fun(false, "zero__nat", type(false, "nat"), none, [], builtin([]))
		fun(false, "null__ptr__ptr_vat", type(false, "ptr__ptr_vat"), none, [], builtin([type(true, "vat")]))
		fun(
			false
			"new_condition__condition"
			type(false, "condition")
			none
			[]
			expr-body([], record([call("new_lock__lock", []), call("zero__nat", [])])))
		fun(
			false
			"ref_of_val__ptr_global_ctx__global_ctx"
			type(true, "global_ctx")
			none
			[param("b", type(false, "global_ctx"))]
			builtin([type(true, "global_ctx")]))
		fun(
			false
			"new_vat__vat__ptr_global_ctx__nat__nat"
			type(false, "vat")
			none
			[
				param("gctx", type(true, "global_ctx"))
				param("id", type(false, "nat"))
				param("max_threads", type(false, "nat"))]
			expr-body(
				[local("actors", type(false, "mut_arr__nat"))]
				let(
					"actors"
					call(
						"new_mut_arr_by_val_with_capacity_from_unmanaged_memory__mut_arr__nat__nat"
						[param-ref("max_threads")])
					record(
						[
							param-ref("gctx")
							param-ref("id")
							call("new_gc__gc", [])
							call("new_lock__lock", [])
							call("new_mut_bag__mut_bag__task", [])
							local-ref("actors")
							call("zero__nat", [])
							call("new_thread_safe_counter__thread_safe_counter", [])
							lambda("new_vat__vat__ptr_global_ctx__nat__nat__lambda0", some(call("null__ptr__bool", [])))]))))
		fun(
			false
			"new_mut_arr_by_val_with_capacity_from_unmanaged_memory__mut_arr__nat__nat"
			type(false, "mut_arr__nat")
			none
			[param("capacity", type(false, "nat"))]
			expr-body(
				[]
				record(
					[
						call("false__bool", [])
						call("zero__nat", [])
						param-ref("capacity")
						call("unmanaged_alloc_elements__ptr__nat__nat", [param-ref("capacity")])])))
		fun(
			false
			"unmanaged_alloc_elements__ptr__nat__nat"
			type(false, "ptr__nat")
			none
			[param("size_elements", type(false, "nat"))]
			expr-body(
				[local("bytes", type(false, "ptr__nat8"))]
				let(
					"bytes"
					call(
						"unmanaged_alloc_bytes__ptr__nat8__nat"
						[call("wrap_mul__nat__nat__nat", [param-ref("size_elements"), call("size_of__nat", [])])])
					call("ptr_cast__ptr__nat__ptr__nat8", [local-ref("bytes")]))))
		fun(
			false
			"unmanaged_alloc_bytes__ptr__nat8__nat"
			type(false, "ptr__nat8")
			none
			[param("size", type(false, "nat"))]
			expr-body(
				[local("res", type(false, "ptr__nat8"))]
				let(
					"res"
					call("malloc", [param-ref("size")])
					seq(
						call("hard_forbid___void__bool", [call("null__q__bool__ptr__nat8", [local-ref("res")])])
						local-ref("res")))))
		fun(false, "malloc", type(false, "ptr__nat8"), none, [param("size", type(false, "nat"))], extern(false))
		fun(
			false
			"hard_forbid___void__bool"
			type(false, "_void")
			none
			[param("condition", type(false, "bool"))]
			expr-body([], call("hard_assert___void__bool", [call("not__bool__bool", [param-ref("condition")])])))
		fun(
			false
			"hard_assert___void__bool"
			type(false, "_void")
			none
			[param("condition", type(false, "bool"))]
			expr-body(
				[]
				call(
					"if___void__bool___void___void"
					[
						param-ref("condition")
						call("pass___void", [])
						call("hard_fail___void__arr__char", [str-lit("Assertion failed!")])])))
		fun(
			false
			"if___void__bool___void___void"
			type(false, "_void")
			none
			[
				param("cond", type(false, "bool"))
				param("if_true", type(false, "_void"))
				param("if_false", type(false, "_void"))]
			builtin([type(false, "_void")]))
		fun(false, "pass___void", type(false, "_void"), none, [], builtin([]))
		fun(
			false
			"hard_fail___void__arr__char"
			type(false, "_void")
			none
			[param("reason", type(false, "arr__char"))]
			builtin([type(false, "_void")]))
		fun(false, "not__bool__bool", type(false, "bool"), none, [param("a", type(false, "bool"))], builtin([]))
		fun(
			false
			"null__q__bool__ptr__nat8"
			type(false, "bool")
			none
			[param("a", type(false, "ptr__nat8"))]
			expr-body(
				[]
				call(
					"_op_equal_equal__bool__nat__nat"
					[
						call("to_nat__nat__ptr__nat8", [param-ref("a")])
						call("to_nat__nat__ptr__nat8", [call("null__ptr__nat8", [])])])))
		fun(
			false
			"_op_equal_equal__bool__nat__nat"
			type(false, "bool")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			expr-body(
				[local("matched", type(false, "comparison"))]
				match(
					"matched"
					call("_op_less_equal_greater__comparison__nat__nat", [param-ref("a"), param-ref("b")])
					[
						case(none, call("false__bool", []))
						case(none, call("true__bool", []))
						case(none, call("false__bool", []))])))
		fun(
			false
			"_op_less_equal_greater__comparison__nat__nat"
			type(false, "comparison")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			builtin([type(false, "nat")]))
		fun(false, "true__bool", type(false, "bool"), none, [], builtin([]))
		fun(
			false
			"to_nat__nat__ptr__nat8"
			type(false, "nat")
			none
			[param("p", type(false, "ptr__nat8"))]
			builtin([type(false, "nat8")]))
		fun(false, "null__ptr__nat8", type(false, "ptr__nat8"), none, [], builtin([type(false, "nat8")]))
		fun(
			false
			"wrap_mul__nat__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			builtin([]))
		fun(false, "size_of__nat", type(false, "nat"), none, [], builtin([type(false, "nat")]))
		fun(
			false
			"ptr_cast__ptr__nat__ptr__nat8"
			type(false, "ptr__nat")
			none
			[param("p", type(false, "ptr__nat8"))]
			builtin([type(false, "nat"), type(false, "nat8")]))
		fun(
			false
			"new_gc__gc"
			type(false, "gc")
			none
			[]
			expr-body(
				[]
				record(
					[
						call("new_lock__lock", [])
						to-union(0, call("none__none", []))
						call("false__bool", [])
						call("false__bool", [])
						call("null__ptr__nat8", [])
						call("null__ptr__nat8", [])])))
		fun(false, "none__none", type(false, "none"), none, [], expr-body([], record([])))
		fun(
			false
			"new_mut_bag__mut_bag__task"
			type(false, "mut_bag__task")
			none
			[]
			expr-body([], record([to-union(0, call("none__none", []))])))
		fun(
			false
			"new_thread_safe_counter__thread_safe_counter"
			type(false, "thread_safe_counter")
			none
			[]
			expr-body([], call("new_thread_safe_counter__thread_safe_counter__nat", [call("zero__nat", [])])))
		fun(
			false
			"new_thread_safe_counter__thread_safe_counter__nat"
			type(false, "thread_safe_counter")
			none
			[param("init", type(false, "nat"))]
			expr-body([], record([call("new_lock__lock", []), param-ref("init")])))
		fun(false, "null__ptr__bool", type(false, "ptr__bool"), none, [], builtin([type(false, "bool")]))
		fun(
			true
			"default_exception_handler___void__exception"
			type(false, "_void")
			none
			[param("e", type(false, "exception"))]
			expr-body(
				[]
				seq(
					seq(
						call("print_err_sync_no_newline___void__arr__char", [str-lit("uncaught exception: ")])
						call(
							"print_err_sync___void__arr__char"
							[
								call(
									"if__arr__char__bool__arr__char__arr__char"
									[
										call("empty__q__bool__arr__char", [get-field(param-ref("e"), "message")])
										str-lit("<<empty message>>")
										get-field(param-ref("e"), "message")])]))
					set-field(
						call("get_gctx__ptr_global_ctx", [])
						"any_unhandled_exceptions__q"
						call("true__bool", [])))))
		fun(
			false
			"print_err_sync_no_newline___void__arr__char"
			type(false, "_void")
			none
			[param("s", type(false, "arr__char"))]
			expr-body(
				[]
				call("write_sync_no_newline___void__int32__arr__char", [call("stderr_fd__int32", []), param-ref("s")])))
		fun(
			false
			"write_sync_no_newline___void__int32__arr__char"
			type(false, "_void")
			none
			[param("fd", type(false, "int32")), param("s", type(false, "arr__char"))]
			expr-body(
				[local("res", type(false, "_int"))]
				seq(
					call(
						"hard_assert___void__bool"
						[call("_op_equal_equal__bool__nat__nat", [call("size_of__nat", []), call("size_of__nat", [])])])
					let(
						"res"
						call(
							"write"
							[
								param-ref("fd")
								call("as_any_ptr__ptr__nat8__ptr__char", [get-field(param-ref("s"), "data")])
								get-field(param-ref("s"), "size")])
						cond(
							call(
								"_op_equal_equal__bool___int___int"
								[
									local-ref("res")
									call("unsafe_to_int___int__nat", [get-field(param-ref("s"), "size")])])
							call("pass___void", [])
							call("todo___void", []))))))
		fun(false, "size_of__nat", type(false, "nat"), none, [], builtin([type(false, "char")]))
		fun(false, "size_of__nat", type(false, "nat"), none, [], builtin([type(false, "nat8")]))
		fun(
			false
			"write"
			type(false, "_int")
			none
			[
				param("fd", type(false, "int32"))
				param("buff", type(false, "ptr__nat8"))
				param("n_bytes", type(false, "nat"))]
			extern(false))
		fun(
			false
			"as_any_ptr__ptr__nat8__ptr__char"
			type(false, "ptr__nat8")
			none
			[param("some_ref", type(false, "ptr__char"))]
			builtin([type(false, "ptr__char")]))
		fun(
			false
			"_op_equal_equal__bool___int___int"
			type(false, "bool")
			none
			[param("a", type(false, "_int")), param("b", type(false, "_int"))]
			expr-body(
				[local("matched", type(false, "comparison"))]
				match(
					"matched"
					call("_op_less_equal_greater__comparison___int___int", [param-ref("a"), param-ref("b")])
					[
						case(none, call("false__bool", []))
						case(none, call("true__bool", []))
						case(none, call("false__bool", []))])))
		fun(
			false
			"_op_less_equal_greater__comparison___int___int"
			type(false, "comparison")
			none
			[param("a", type(false, "_int")), param("b", type(false, "_int"))]
			builtin([type(false, "_int")]))
		fun(false, "unsafe_to_int___int__nat", type(false, "_int"), none, [param("a", type(false, "nat"))], builtin([]))
		fun(
			false
			"todo___void"
			type(false, "_void")
			none
			[]
			expr-body([], call("hard_fail___void__arr__char", [str-lit("TODO")])))
		fun(false, "stderr_fd__int32", type(false, "int32"), none, [], expr-body([], call("two__int32", [])))
		fun(
			false
			"two__int32"
			type(false, "int32")
			none
			[]
			expr-body([], call("wrap_incr__int32__int32", [call("one__int32", [])])))
		fun(
			false
			"wrap_incr__int32__int32"
			type(false, "int32")
			none
			[param("a", type(false, "int32"))]
			expr-body([], call("wrap_add__int32__int32__int32", [param-ref("a"), call("one__int32", [])])))
		fun(
			false
			"wrap_add__int32__int32__int32"
			type(false, "int32")
			none
			[param("a", type(false, "int32")), param("b", type(false, "int32"))]
			builtin([]))
		fun(false, "one__int32", type(false, "int32"), none, [], builtin([]))
		fun(
			false
			"print_err_sync___void__arr__char"
			type(false, "_void")
			none
			[param("s", type(false, "arr__char"))]
			expr-body(
				[]
				seq(
					call("print_err_sync_no_newline___void__arr__char", [param-ref("s")])
					call("print_err_sync_no_newline___void__arr__char", [str-lit("\n")]))))
		fun(
			false
			"if__arr__char__bool__arr__char__arr__char"
			type(false, "arr__char")
			none
			[
				param("cond", type(false, "bool"))
				param("if_true", type(false, "arr__char"))
				param("if_false", type(false, "arr__char"))]
			builtin([type(false, "arr__char")]))
		fun(
			false
			"empty__q__bool__arr__char"
			type(false, "bool")
			none
			[param("a", type(false, "arr__char"))]
			expr-body([], call("zero__q__bool__nat", [get-field(param-ref("a"), "size")])))
		fun(
			false
			"zero__q__bool__nat"
			type(false, "bool")
			none
			[param("n", type(false, "nat"))]
			expr-body([], call("_op_equal_equal__bool__nat__nat", [param-ref("n"), call("zero__nat", [])])))
		fun(
			true
			"get_gctx__ptr_global_ctx"
			type(true, "global_ctx")
			none
			[]
			expr-body(
				[]
				call("as_ref__ptr_global_ctx__ptr__nat8", [get-field(call("get_ctx__ptr_ctx", []), "gctx_ptr")])))
		fun(
			false
			"as_ref__ptr_global_ctx__ptr__nat8"
			type(true, "global_ctx")
			none
			[param("p", type(false, "ptr__nat8"))]
			builtin([type(true, "global_ctx")]))
		fun(true, "get_ctx__ptr_ctx", type(true, "ctx"), none, [], builtin([]))
		fun(
			true
			"new_vat__vat__ptr_global_ctx__nat__nat__lambda0"
			type(false, "_void")
			some(param("_closure", type(false, "ptr__nat8")))
			[param("it", type(false, "exception"))]
			expr-body([], call("default_exception_handler___void__exception", [param-ref("it")])))
		fun(
			false
			"ref_of_val__ptr_vat__vat"
			type(true, "vat")
			none
			[param("b", type(false, "vat"))]
			builtin([type(true, "vat")]))
		fun(
			false
			"ptr_to__ptr__ptr_vat__ptr_vat"
			type(false, "ptr__ptr_vat")
			none
			[param("t", type(true, "vat"))]
			builtin([type(true, "vat")]))
		fun(
			false
			"new_exception_ctx__exception_ctx"
			type(false, "exception_ctx")
			none
			[]
			expr-body([], record([call("null__ptr__jmp_buf_tag", []), record([str-lit("")])])))
		fun(
			false
			"null__ptr__jmp_buf_tag"
			type(false, "ptr__jmp_buf_tag")
			none
			[]
			builtin([type(false, "jmp_buf_tag")]))
		fun(
			false
			"ref_of_val__ptr_exception_ctx__exception_ctx"
			type(true, "exception_ctx")
			none
			[param("b", type(false, "exception_ctx"))]
			builtin([type(true, "exception_ctx")]))
		fun(
			false
			"new_ctx__ctx__ptr_global_ctx__ptr_thread_local_stuff__ptr_vat__nat"
			type(false, "ctx")
			none
			[
				param("gctx", type(true, "global_ctx"))
				param("tls", type(true, "thread_local_stuff"))
				param("vat", type(true, "vat"))
				param("actor_id", type(false, "nat"))]
			expr-body(
				[]
				record(
					[
						call("as_any_ptr__ptr__nat8__ptr_global_ctx", [param-ref("gctx")])
						get-field(param-ref("vat"), "id")
						param-ref("actor_id")
						call(
							"as_any_ptr__ptr__nat8__ptr_gc_ctx"
							[
								call(
									"get_gc_ctx__ptr_gc_ctx__ptr_gc"
									[call("ref_of_val__ptr_gc__gc", [get-field(param-ref("vat"), "gc")])])])
						call("as_any_ptr__ptr__nat8__ptr_exception_ctx", [get-field(param-ref("tls"), "exception_ctx")])])))
		fun(
			false
			"as_any_ptr__ptr__nat8__ptr_global_ctx"
			type(false, "ptr__nat8")
			none
			[param("some_ref", type(true, "global_ctx"))]
			builtin([type(true, "global_ctx")]))
		fun(
			false
			"as_any_ptr__ptr__nat8__ptr_gc_ctx"
			type(false, "ptr__nat8")
			none
			[param("some_ref", type(true, "gc_ctx"))]
			builtin([type(true, "gc_ctx")]))
		fun(
			false
			"get_gc_ctx__ptr_gc_ctx__ptr_gc"
			type(true, "gc_ctx")
			none
			[param("gc", type(true, "gc"))]
			expr-body(
				[
					local("c", type(true, "gc_ctx"))
					local("s", type(false, "some__ptr_gc_ctx"))
					local("c1", type(true, "gc_ctx"))
					local("matched", type(false, "opt__ptr_gc_ctx"))
					local("res", type(true, "gc_ctx"))]
				seq(
					call(
						"acquire_lock___void__ptr_lock"
						[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("gc"), "lk")])])
					let(
						"res"
						match(
							"matched"
							get-field(param-ref("gc"), "context_head")
							[
								case(
									none
									let(
										"c"
										call(
											"as_ref__ptr_gc_ctx__ptr__nat8"
											[call("malloc", [call("size_of__nat", [])])])
										seq(
											seq(
												set-field(local-ref("c"), "gc", param-ref("gc"))
												set-field(
													local-ref("c")
													"next_ctx"
													to-union(0, call("none__none", []))))
											local-ref("c"))))
								case(
									some("s")
									let(
										"c1"
										get-field(local-ref("s"), "value")
										seq(
											seq(
												set-field(
													param-ref("gc")
													"context_head"
													get-field(local-ref("c1"), "next_ctx"))
												set-field(
													local-ref("c1")
													"next_ctx"
													to-union(0, call("none__none", []))))
											local-ref("c1"))))])
						seq(
							call(
								"release_lock___void__ptr_lock"
								[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("gc"), "lk")])])
							local-ref("res"))))))
		fun(
			false
			"acquire_lock___void__ptr_lock"
			type(false, "_void")
			none
			[param("a", type(true, "lock"))]
			expr-body([], call("acquire_lock_recur___void__ptr_lock__nat", [param-ref("a"), call("zero__nat", [])])))
		fun(
			false
			"acquire_lock_recur___void__ptr_lock__nat"
			type(false, "_void")
			none
			[param("a", type(true, "lock")), param("n_tries", type(false, "nat"))]
			expr-body(
				[]
				cond(
					call("try_acquire_lock__bool__ptr_lock", [param-ref("a")])
					call("pass___void", [])
					cond(
						call("_op_equal_equal__bool__nat__nat", [param-ref("n_tries"), call("thousand__nat", [])])
						call("hard_fail___void__arr__char", [str-lit("Couldn't acquire lock after 1000 tries")])
						seq(
							call("yield_thread___void", [])
							call(
								"acquire_lock_recur___void__ptr_lock__nat"
								[param-ref("a"), call("noctx_incr__nat__nat", [param-ref("n_tries")])]))))))
		fun(
			false
			"try_acquire_lock__bool__ptr_lock"
			type(false, "bool")
			none
			[param("a", type(true, "lock"))]
			expr-body(
				[]
				call(
					"try_set__bool__ptr__atomic_bool"
					[call("ref_of_val__ptr__atomic_bool___atomic_bool", [get-field(param-ref("a"), "is_locked")])])))
		fun(
			false
			"try_set__bool__ptr__atomic_bool"
			type(false, "bool")
			none
			[param("a", type(true, "_atomic_bool"))]
			expr-body([], call("try_change__bool__ptr__atomic_bool__bool", [param-ref("a"), call("false__bool", [])])))
		fun(
			false
			"try_change__bool__ptr__atomic_bool__bool"
			type(false, "bool")
			none
			[param("a", type(true, "_atomic_bool")), param("old_value", type(false, "bool"))]
			expr-body(
				[]
				call(
					"compare_exchange_strong__bool__ptr__bool__ptr__bool__bool"
					[
						call("ptr_to__ptr__bool__bool", [get-field(param-ref("a"), "value")])
						call("ptr_to__ptr__bool__bool", [param-ref("old_value")])
						call("not__bool__bool", [param-ref("old_value")])])))
		fun(
			false
			"compare_exchange_strong__bool__ptr__bool__ptr__bool__bool"
			type(false, "bool")
			none
			[
				param("value_ptr", type(false, "ptr__bool"))
				param("expected_ptr", type(false, "ptr__bool"))
				param("desired", type(false, "bool"))]
			builtin([]))
		fun(
			false
			"ptr_to__ptr__bool__bool"
			type(false, "ptr__bool")
			none
			[param("t", type(false, "bool"))]
			builtin([type(false, "bool")]))
		fun(
			false
			"ref_of_val__ptr__atomic_bool___atomic_bool"
			type(true, "_atomic_bool")
			none
			[param("b", type(false, "_atomic_bool"))]
			builtin([type(true, "_atomic_bool")]))
		fun(
			false
			"thousand__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_mul__nat__nat__nat", [call("hundred__nat", []), call("ten__nat", [])])))
		fun(
			false
			"hundred__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_mul__nat__nat__nat", [call("ten__nat", []), call("ten__nat", [])])))
		fun(
			false
			"ten__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_incr__nat__nat", [call("nine__nat", [])])))
		fun(
			false
			"nine__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_incr__nat__nat", [call("eight__nat", [])])))
		fun(
			false
			"eight__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_incr__nat__nat", [call("seven__nat", [])])))
		fun(
			false
			"seven__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_incr__nat__nat", [call("six__nat", [])])))
		fun(
			false
			"six__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_incr__nat__nat", [call("five__nat", [])])))
		fun(
			false
			"five__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_incr__nat__nat", [call("four__nat", [])])))
		fun(
			false
			"four__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_incr__nat__nat", [call("three__nat", [])])))
		fun(
			false
			"three__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_incr__nat__nat", [call("two__nat", [])])))
		fun(
			false
			"yield_thread___void"
			type(false, "_void")
			none
			[]
			expr-body(
				[local("err", type(false, "int32"))]
				let(
					"err"
					call("pthread_yield", [])
					seq(
						call("usleep", [call("thousand__nat", [])])
						call("hard_assert___void__bool", [call("zero__q__bool__int32", [local-ref("err")])])))))
		fun(false, "pthread_yield", type(false, "int32"), none, [], extern(false))
		fun(false, "usleep", type(false, "_void"), none, [param("micro_seconds", type(false, "nat"))], extern(false))
		fun(
			false
			"zero__q__bool__int32"
			type(false, "bool")
			none
			[param("i", type(false, "int32"))]
			expr-body([], call("_op_equal_equal__bool__int32__int32", [param-ref("i"), call("zero__int32", [])])))
		fun(
			false
			"_op_equal_equal__bool__int32__int32"
			type(false, "bool")
			none
			[param("a", type(false, "int32")), param("b", type(false, "int32"))]
			expr-body(
				[local("matched", type(false, "comparison"))]
				match(
					"matched"
					call("_op_less_equal_greater__comparison__int32__int32", [param-ref("a"), param-ref("b")])
					[
						case(none, call("false__bool", []))
						case(none, call("true__bool", []))
						case(none, call("false__bool", []))])))
		fun(
			false
			"_op_less_equal_greater__comparison__int32__int32"
			type(false, "comparison")
			none
			[param("a", type(false, "int32")), param("b", type(false, "int32"))]
			builtin([type(false, "int32")]))
		fun(false, "zero__int32", type(false, "int32"), none, [], builtin([]))
		fun(
			false
			"noctx_incr__nat__nat"
			type(false, "nat")
			none
			[param("n", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"hard_assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("n"), call("billion__nat", [])])])
					call("wrap_incr__nat__nat", [param-ref("n")]))))
		fun(
			false
			"_op_less__bool__nat__nat"
			type(false, "bool")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			expr-body(
				[local("matched", type(false, "comparison"))]
				match(
					"matched"
					call("_op_less_equal_greater__comparison__nat__nat", [param-ref("a"), param-ref("b")])
					[
						case(none, call("true__bool", []))
						case(none, call("false__bool", []))
						case(none, call("false__bool", []))])))
		fun(
			false
			"billion__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_mul__nat__nat__nat", [call("million__nat", []), call("thousand__nat", [])])))
		fun(
			false
			"million__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("wrap_mul__nat__nat__nat", [call("thousand__nat", []), call("thousand__nat", [])])))
		fun(
			false
			"ref_of_val__ptr_lock__lock"
			type(true, "lock")
			none
			[param("b", type(false, "lock"))]
			builtin([type(true, "lock")]))
		fun(
			false
			"as_ref__ptr_gc_ctx__ptr__nat8"
			type(true, "gc_ctx")
			none
			[param("p", type(false, "ptr__nat8"))]
			builtin([type(true, "gc_ctx")]))
		fun(false, "size_of__nat", type(false, "nat"), none, [], builtin([type(true, "gc_ctx")]))
		fun(
			false
			"release_lock___void__ptr_lock"
			type(false, "_void")
			none
			[param("l", type(true, "lock"))]
			expr-body(
				[]
				call(
					"must_unset___void__ptr__atomic_bool"
					[call("ref_of_val__ptr__atomic_bool___atomic_bool", [get-field(param-ref("l"), "is_locked")])])))
		fun(
			false
			"must_unset___void__ptr__atomic_bool"
			type(false, "_void")
			none
			[param("a", type(true, "_atomic_bool"))]
			expr-body(
				[local("did_unset", type(false, "bool"))]
				let(
					"did_unset"
					call("try_unset__bool__ptr__atomic_bool", [param-ref("a")])
					call("hard_assert___void__bool", [local-ref("did_unset")]))))
		fun(
			false
			"try_unset__bool__ptr__atomic_bool"
			type(false, "bool")
			none
			[param("a", type(true, "_atomic_bool"))]
			expr-body([], call("try_change__bool__ptr__atomic_bool__bool", [param-ref("a"), call("true__bool", [])])))
		fun(
			false
			"ref_of_val__ptr_gc__gc"
			type(true, "gc")
			none
			[param("b", type(false, "gc"))]
			builtin([type(true, "gc")]))
		fun(
			false
			"as_any_ptr__ptr__nat8__ptr_exception_ctx"
			type(false, "ptr__nat8")
			none
			[param("some_ref", type(true, "exception_ctx"))]
			builtin([type(true, "exception_ctx")]))
		fun(
			false
			"ref_of_val__ptr_thread_local_stuff__thread_local_stuff"
			type(true, "thread_local_stuff")
			none
			[param("b", type(false, "thread_local_stuff"))]
			builtin([type(true, "thread_local_stuff")]))
		fun(
			false
			"ref_of_val__ptr_ctx__ctx"
			type(true, "ctx")
			none
			[param("b", type(false, "ctx"))]
			builtin([type(true, "ctx")]))
		fun(
			false
			"as__fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
			type(false, "fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char")
			none
			[
				param(
					"value"
					type(
						false
						"fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))]
			builtin(
				[type(false, "fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char")]))
		fun(
			true
			"add_first_task__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
			type(true, "fut__int32")
			none
			[
				param("all_args", type(false, "arr__ptr__char"))
				param("main_ptr", type(false, "fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))]
			expr-body(
				[]
				call(
					"then2__ptr_fut__int32__ptr_fut___void__fun_ref0__int32"
					[
						call(
							"as__ptr_fut___void__ptr_fut___void"
							[call("resolved__ptr_fut___void___void", [call("pass___void", [])])])
						record(
							[
								call("cur_actor__vat_and_actor_id", [])
								lambda(
									"add_first_task__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__lambda0"
									some(alloc(
										"alloc__ptr__nat8__nat"
										record([param-ref("all_args"), param-ref("main_ptr")]))))])])))
		fun(
			true
			"then2__ptr_fut__int32__ptr_fut___void__fun_ref0__int32"
			type(true, "fut__int32")
			none
			[param("f", type(true, "fut___void")), param("cb", type(false, "fun_ref0__int32"))]
			expr-body(
				[]
				call(
					"then__ptr_fut__int32__ptr_fut___void__fun_ref1__int32___void"
					[
						param-ref("f")
						record(
							[
								call("cur_actor__vat_and_actor_id", [])
								lambda(
									"then2__ptr_fut__int32__ptr_fut___void__fun_ref0__int32__lambda0"
									some(alloc("alloc__ptr__nat8__nat", record([param-ref("cb")]))))])])))
		fun(
			true
			"then__ptr_fut__int32__ptr_fut___void__fun_ref1__int32___void"
			type(true, "fut__int32")
			none
			[param("f", type(true, "fut___void")), param("cb", type(false, "fun_ref1__int32___void"))]
			expr-body(
				[local("res", type(true, "fut__int32"))]
				let(
					"res"
					call("new_unresolved_fut__ptr_fut__int32", [])
					seq(
						call(
							"then_void___void__ptr_fut___void__fun_mut1___void__result___void__exception"
							[
								param-ref("f")
								lambda(
									"then__ptr_fut__int32__ptr_fut___void__fun_ref1__int32___void__lambda0"
									some(alloc("alloc__ptr__nat8__nat", record([param-ref("cb"), local-ref("res")]))))])
						local-ref("res")))))
		fun(
			true
			"new_unresolved_fut__ptr_fut__int32"
			type(true, "fut__int32")
			none
			[]
			expr-body(
				[]
				alloc(
					"alloc__ptr__nat8__nat"
					record([call("new_lock__lock", []), to-union(0, record([to-union(0, call("none__none", []))]))]))))
		fun(
			true
			"alloc__ptr__nat8__nat"
			type(false, "ptr__nat8")
			none
			[param("size", type(false, "nat"))]
			expr-body([], call("gc_alloc__ptr__nat8__ptr_gc__nat", [call("get_gc__ptr_gc", []), param-ref("size")])))
		fun(
			true
			"gc_alloc__ptr__nat8__ptr_gc__nat"
			type(false, "ptr__nat8")
			none
			[param("gc", type(true, "gc")), param("size", type(false, "nat"))]
			expr-body(
				[local("s", type(false, "some__ptr__nat8")), local("matched", type(false, "opt__ptr__nat8"))]
				match(
					"matched"
					call("try_gc_alloc__opt__ptr__nat8__ptr_gc__nat", [param-ref("gc"), param-ref("size")])
					[case(none, call("todo__ptr__nat8", [])), case(some("s"), get-field(local-ref("s"), "value"))])))
		fun(
			false
			"try_gc_alloc__opt__ptr__nat8__ptr_gc__nat"
			type(false, "opt__ptr__nat8")
			none
			[param("gc", type(true, "gc")), param("size", type(false, "nat"))]
			expr-body(
				[]
				to-union(
					1
					call(
						"some__some__ptr__nat8__ptr__nat8"
						[call("unmanaged_alloc_bytes__ptr__nat8__nat", [param-ref("size")])]))))
		fun(
			false
			"some__some__ptr__nat8__ptr__nat8"
			type(false, "some__ptr__nat8")
			none
			[param("t", type(false, "ptr__nat8"))]
			expr-body([], record([param-ref("t")])))
		fun(
			false
			"todo__ptr__nat8"
			type(false, "ptr__nat8")
			none
			[]
			expr-body([], call("hard_fail__ptr__nat8__arr__char", [str-lit("TODO")])))
		fun(
			false
			"hard_fail__ptr__nat8__arr__char"
			type(false, "ptr__nat8")
			none
			[param("reason", type(false, "arr__char"))]
			builtin([type(false, "ptr__nat8")]))
		fun(
			true
			"get_gc__ptr_gc"
			type(true, "gc")
			none
			[]
			expr-body([], get-field(call("get_gc_ctx__ptr_gc_ctx", []), "gc")))
		fun(
			true
			"get_gc_ctx__ptr_gc_ctx"
			type(true, "gc_ctx")
			none
			[]
			expr-body(
				[]
				call("as_ref__ptr_gc_ctx__ptr__nat8", [get-field(call("get_ctx__ptr_ctx", []), "gc_ctx_ptr")])))
		fun(
			true
			"then_void___void__ptr_fut___void__fun_mut1___void__result___void__exception"
			type(false, "_void")
			none
			[
				param("f", type(true, "fut___void"))
				param("cb", type(false, "fun_mut1___void__result___void__exception"))]
			expr-body(
				[
					local("cbs", type(false, "fut_state_callbacks___void"))
					local("r", type(false, "fut_state_resolved___void"))
					local("e", type(false, "exception"))
					local("matched", type(false, "fut_state___void"))]
				seq(
					seq(
						call(
							"acquire_lock___void__ptr_lock"
							[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("f"), "lk")])])
						match(
							"matched"
							get-field(param-ref("f"), "state")
							[
								case(
									some("cbs")
									set-field(
										param-ref("f")
										"state"
										to-union(
											0
											record(
												[
													to-union(
														1
														call(
															"some__some__ptr_fut_callback_node___void__ptr_fut_callback_node___void"
															[
																alloc(
																	"alloc__ptr__nat8__nat"
																	record(
																		[
																			param-ref("cb")
																			get-field(local-ref("cbs"), "head")]))]))]))))
								case(
									some("r")
									call(
										"call___void__fun_mut1___void__result___void__exception__result___void__exception"
										[
											param-ref("cb")
											to-union(
												0
												call("ok__ok___void___void", [get-field(local-ref("r"), "value")]))]))
								case(
									some("e")
									call(
										"call___void__fun_mut1___void__result___void__exception__result___void__exception"
										[
											param-ref("cb")
											to-union(1, call("err__err__exception__exception", [local-ref("e")]))]))]))
					call(
						"release_lock___void__ptr_lock"
						[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("f"), "lk")])]))))
		fun(
			false
			"some__some__ptr_fut_callback_node___void__ptr_fut_callback_node___void"
			type(false, "some__ptr_fut_callback_node___void")
			none
			[param("t", type(true, "fut_callback_node___void"))]
			expr-body([], record([param-ref("t")])))
		fun(
			true
			"call___void__fun_mut1___void__result___void__exception__result___void__exception"
			type(false, "_void")
			none
			[
				param("f", type(false, "fun_mut1___void__result___void__exception"))
				param("p0", type(false, "result___void__exception"))]
			expr-body(
				[]
				call(
					"call_with_ctx___void__ptr_ctx__fun_mut1___void__result___void__exception__result___void__exception"
					[call("get_ctx__ptr_ctx", []), param-ref("f"), param-ref("p0")])))
		fun(
			false
			"call_with_ctx___void__ptr_ctx__fun_mut1___void__result___void__exception__result___void__exception"
			type(false, "_void")
			none
			[
				param("c", type(true, "ctx"))
				param("f", type(false, "fun_mut1___void__result___void__exception"))
				param("p0", type(false, "result___void__exception"))]
			expr-body(
				[]
				call(
					"call___void__fun_ptr3___void__ptr_ctx__ptr__nat8__result___void__exception__ptr_ctx__ptr__nat8__result___void__exception"
					[
						get-field(param-ref("f"), "fun_ptr")
						param-ref("c")
						get-field(param-ref("f"), "closure")
						param-ref("p0")])))
		fun(
			false
			"call___void__fun_ptr3___void__ptr_ctx__ptr__nat8__result___void__exception__ptr_ctx__ptr__nat8__result___void__exception"
			type(false, "_void")
			none
			[
				param("f", type(false, "fun_ptr3___void__ptr_ctx__ptr__nat8__result___void__exception"))
				param("p0", type(true, "ctx"))
				param("p1", type(false, "ptr__nat8"))
				param("p2", type(false, "result___void__exception"))]
			builtin(
				[
					type(false, "_void")
					type(true, "ctx")
					type(false, "ptr__nat8")
					type(false, "result___void__exception")]))
		fun(
			false
			"ok__ok___void___void"
			type(false, "ok___void")
			none
			[param("t", type(false, "_void"))]
			expr-body([], record([param-ref("t")])))
		fun(
			false
			"err__err__exception__exception"
			type(false, "err__exception")
			none
			[param("t", type(false, "exception"))]
			expr-body([], record([param-ref("t")])))
		fun(
			true
			"forward_to___void__ptr_fut__int32__ptr_fut__int32"
			type(false, "_void")
			none
			[param("from", type(true, "fut__int32")), param("to", type(true, "fut__int32"))]
			expr-body(
				[]
				call(
					"then_void___void__ptr_fut__int32__fun_mut1___void__result__int32__exception"
					[
						param-ref("from")
						lambda(
							"forward_to___void__ptr_fut__int32__ptr_fut__int32__lambda0"
							some(alloc("alloc__ptr__nat8__nat", record([param-ref("to")]))))])))
		fun(
			true
			"then_void___void__ptr_fut__int32__fun_mut1___void__result__int32__exception"
			type(false, "_void")
			none
			[
				param("f", type(true, "fut__int32"))
				param("cb", type(false, "fun_mut1___void__result__int32__exception"))]
			expr-body(
				[
					local("cbs", type(false, "fut_state_callbacks__int32"))
					local("r", type(false, "fut_state_resolved__int32"))
					local("e", type(false, "exception"))
					local("matched", type(false, "fut_state__int32"))]
				seq(
					seq(
						call(
							"acquire_lock___void__ptr_lock"
							[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("f"), "lk")])])
						match(
							"matched"
							get-field(param-ref("f"), "state")
							[
								case(
									some("cbs")
									set-field(
										param-ref("f")
										"state"
										to-union(
											0
											record(
												[
													to-union(
														1
														call(
															"some__some__ptr_fut_callback_node__int32__ptr_fut_callback_node__int32"
															[
																alloc(
																	"alloc__ptr__nat8__nat"
																	record(
																		[
																			param-ref("cb")
																			get-field(local-ref("cbs"), "head")]))]))]))))
								case(
									some("r")
									call(
										"call___void__fun_mut1___void__result__int32__exception__result__int32__exception"
										[
											param-ref("cb")
											to-union(
												0
												call("ok__ok__int32__int32", [get-field(local-ref("r"), "value")]))]))
								case(
									some("e")
									call(
										"call___void__fun_mut1___void__result__int32__exception__result__int32__exception"
										[
											param-ref("cb")
											to-union(1, call("err__err__exception__exception", [local-ref("e")]))]))]))
					call(
						"release_lock___void__ptr_lock"
						[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("f"), "lk")])]))))
		fun(
			false
			"some__some__ptr_fut_callback_node__int32__ptr_fut_callback_node__int32"
			type(false, "some__ptr_fut_callback_node__int32")
			none
			[param("t", type(true, "fut_callback_node__int32"))]
			expr-body([], record([param-ref("t")])))
		fun(
			true
			"call___void__fun_mut1___void__result__int32__exception__result__int32__exception"
			type(false, "_void")
			none
			[
				param("f", type(false, "fun_mut1___void__result__int32__exception"))
				param("p0", type(false, "result__int32__exception"))]
			expr-body(
				[]
				call(
					"call_with_ctx___void__ptr_ctx__fun_mut1___void__result__int32__exception__result__int32__exception"
					[call("get_ctx__ptr_ctx", []), param-ref("f"), param-ref("p0")])))
		fun(
			false
			"call_with_ctx___void__ptr_ctx__fun_mut1___void__result__int32__exception__result__int32__exception"
			type(false, "_void")
			none
			[
				param("c", type(true, "ctx"))
				param("f", type(false, "fun_mut1___void__result__int32__exception"))
				param("p0", type(false, "result__int32__exception"))]
			expr-body(
				[]
				call(
					"call___void__fun_ptr3___void__ptr_ctx__ptr__nat8__result__int32__exception__ptr_ctx__ptr__nat8__result__int32__exception"
					[
						get-field(param-ref("f"), "fun_ptr")
						param-ref("c")
						get-field(param-ref("f"), "closure")
						param-ref("p0")])))
		fun(
			false
			"call___void__fun_ptr3___void__ptr_ctx__ptr__nat8__result__int32__exception__ptr_ctx__ptr__nat8__result__int32__exception"
			type(false, "_void")
			none
			[
				param("f", type(false, "fun_ptr3___void__ptr_ctx__ptr__nat8__result__int32__exception"))
				param("p0", type(true, "ctx"))
				param("p1", type(false, "ptr__nat8"))
				param("p2", type(false, "result__int32__exception"))]
			builtin(
				[
					type(false, "_void")
					type(true, "ctx")
					type(false, "ptr__nat8")
					type(false, "result__int32__exception")]))
		fun(
			false
			"ok__ok__int32__int32"
			type(false, "ok__int32")
			none
			[param("t", type(false, "int32"))]
			expr-body([], record([param-ref("t")])))
		fun(
			true
			"resolve_or_reject___void__ptr_fut__int32__result__int32__exception"
			type(false, "_void")
			none
			[param("f", type(true, "fut__int32")), param("result", type(false, "result__int32__exception"))]
			expr-body(
				[
					local("cbs", type(false, "fut_state_callbacks__int32"))
					local("matched", type(false, "fut_state__int32"))
					local("o", type(false, "ok__int32"))
					local("e", type(false, "err__exception"))
					local("matched1", type(false, "result__int32__exception"))]
				seq(
					seq(
						seq(
							call(
								"acquire_lock___void__ptr_lock"
								[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("f"), "lk")])])
							match(
								"matched"
								get-field(param-ref("f"), "state")
								[
									case(
										some("cbs")
										call(
											"resolve_or_reject_recur___void__opt__ptr_fut_callback_node__int32__result__int32__exception"
											[get-field(local-ref("cbs"), "head"), param-ref("result")]))
									case(
										none
										call(
											"hard_fail___void__arr__char"
											[str-lit("resolving an already-resolved fut")]))
									case(
										none
										call(
											"hard_fail___void__arr__char"
											[str-lit("resolving an already-resolved fut")]))]))
						set-field(
							param-ref("f")
							"state"
							match(
								"matched1"
								param-ref("result")
								[
									case(some("o"), to-union(1, record([get-field(local-ref("o"), "value")])))
									case(some("e"), to-union(2, get-field(local-ref("e"), "value")))])))
					call(
						"release_lock___void__ptr_lock"
						[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("f"), "lk")])]))))
		fun(
			true
			"resolve_or_reject_recur___void__opt__ptr_fut_callback_node__int32__result__int32__exception"
			type(false, "_void")
			none
			[
				param("node", type(false, "opt__ptr_fut_callback_node__int32"))
				param("value", type(false, "result__int32__exception"))]
			expr-body(
				[
					local("s", type(false, "some__ptr_fut_callback_node__int32"))
					local("matched", type(false, "opt__ptr_fut_callback_node__int32"))]
				match(
					"matched"
					param-ref("node")
					[
						case(none, call("pass___void", []))
						case(
							some("s")
							seq(
								call(
									"drop___void___void"
									[
										call(
											"call___void__fun_mut1___void__result__int32__exception__result__int32__exception"
											[get-field(get-field(local-ref("s"), "value"), "cb"), param-ref("value")])])
								call(
									"resolve_or_reject_recur___void__opt__ptr_fut_callback_node__int32__result__int32__exception"
									[get-field(get-field(local-ref("s"), "value"), "next_node"), param-ref("value")])))])))
		fun(
			false
			"drop___void___void"
			type(false, "_void")
			none
			[param("t", type(false, "_void"))]
			expr-body([], call("pass___void", [])))
		fun(
			true
			"forward_to___void__ptr_fut__int32__ptr_fut__int32__lambda0"
			type(false, "_void")
			some(param("_closure", type(true, "forward_to___void__ptr_fut__int32__ptr_fut__int32__lambda0___closure")))
			[param("it", type(false, "result__int32__exception"))]
			expr-body(
				[]
				call(
					"resolve_or_reject___void__ptr_fut__int32__result__int32__exception"
					[get-field(param-ref("_closure"), "to"), param-ref("it")])))
		fun(
			true
			"call__ptr_fut__int32__fun_ref1__int32___void___void"
			type(true, "fut__int32")
			none
			[param("f", type(false, "fun_ref1__int32___void")), param("p0", type(false, "_void"))]
			expr-body(
				[local("vat", type(true, "vat")), local("res", type(true, "fut__int32"))]
				let(
					"vat"
					call("get_vat__ptr_vat__nat", [get-field(get-field(param-ref("f"), "vat_and_actor"), "vat")])
					let(
						"res"
						call("new_unresolved_fut__ptr_fut__int32", [])
						seq(
							call(
								"add_task___void__ptr_vat__task"
								[
									local-ref("vat")
									record(
										[
											get-field(get-field(param-ref("f"), "vat_and_actor"), "actor")
											lambda(
												"call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0"
												some(alloc(
													"alloc__ptr__nat8__nat"
													record([param-ref("f"), param-ref("p0"), local-ref("res")]))))])])
							local-ref("res"))))))
		fun(
			true
			"get_vat__ptr_vat__nat"
			type(true, "vat")
			none
			[param("vat_id", type(false, "nat"))]
			expr-body(
				[]
				call(
					"at__ptr_vat__arr__ptr_vat__nat"
					[get-field(call("get_gctx__ptr_global_ctx", []), "vats"), param-ref("vat_id")])))
		fun(
			true
			"at__ptr_vat__arr__ptr_vat__nat"
			type(true, "vat")
			none
			[param("a", type(false, "arr__ptr_vat")), param("index", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call("noctx_at__ptr_vat__arr__ptr_vat__nat", [param-ref("a"), param-ref("index")]))))
		fun(
			true
			"assert___void__bool"
			type(false, "_void")
			none
			[param("condition", type(false, "bool"))]
			expr-body([], call("assert___void__bool__arr__char", [param-ref("condition"), str-lit("assert failed")])))
		fun(
			true
			"assert___void__bool__arr__char"
			type(false, "_void")
			none
			[param("condition", type(false, "bool")), param("message", type(false, "arr__char"))]
			expr-body(
				[]
				call(
					"if___void__bool___void___void"
					[
						param-ref("condition")
						call("pass___void", [])
						call("fail___void__arr__char", [param-ref("message")])])))
		fun(
			true
			"fail___void__arr__char"
			type(false, "_void")
			none
			[param("reason", type(false, "arr__char"))]
			expr-body([], call("throw___void__exception", [record([param-ref("reason")])])))
		fun(
			true
			"throw___void__exception"
			type(false, "_void")
			none
			[param("e", type(false, "exception"))]
			expr-body(
				[local("exn_ctx", type(true, "exception_ctx"))]
				let(
					"exn_ctx"
					call("get_exception_ctx__ptr_exception_ctx", [])
					seq(
						seq(
							seq(
								call(
									"hard_forbid___void__bool"
									[
										call(
											"null__q__bool__ptr__jmp_buf_tag"
											[get-field(local-ref("exn_ctx"), "jmp_buf_ptr")])])
								set-field(local-ref("exn_ctx"), "thrown_exception", param-ref("e")))
							call(
								"longjmp"
								[get-field(local-ref("exn_ctx"), "jmp_buf_ptr"), call("number_to_throw__int32", [])]))
						call("todo___void", [])))))
		fun(
			true
			"get_exception_ctx__ptr_exception_ctx"
			type(true, "exception_ctx")
			none
			[]
			expr-body(
				[]
				call(
					"as_ref__ptr_exception_ctx__ptr__nat8"
					[get-field(call("get_ctx__ptr_ctx", []), "exception_ctx_ptr")])))
		fun(
			false
			"as_ref__ptr_exception_ctx__ptr__nat8"
			type(true, "exception_ctx")
			none
			[param("p", type(false, "ptr__nat8"))]
			builtin([type(true, "exception_ctx")]))
		fun(
			false
			"null__q__bool__ptr__jmp_buf_tag"
			type(false, "bool")
			none
			[param("a", type(false, "ptr__jmp_buf_tag"))]
			expr-body(
				[]
				call(
					"_op_equal_equal__bool__nat__nat"
					[
						call("to_nat__nat__ptr__jmp_buf_tag", [param-ref("a")])
						call("to_nat__nat__ptr__jmp_buf_tag", [call("null__ptr__jmp_buf_tag", [])])])))
		fun(
			false
			"to_nat__nat__ptr__jmp_buf_tag"
			type(false, "nat")
			none
			[param("p", type(false, "ptr__jmp_buf_tag"))]
			builtin([type(false, "jmp_buf_tag")]))
		fun(
			false
			"longjmp"
			type(false, "_void")
			none
			[param("env", type(false, "ptr__jmp_buf_tag")), param("val", type(false, "int32"))]
			extern(false))
		fun(true, "number_to_throw__int32", type(false, "int32"), none, [], expr-body([], call("seven__int32", [])))
		fun(
			false
			"seven__int32"
			type(false, "int32")
			none
			[]
			expr-body([], call("wrap_incr__int32__int32", [call("six__int32", [])])))
		fun(
			false
			"six__int32"
			type(false, "int32")
			none
			[]
			expr-body([], call("wrap_incr__int32__int32", [call("five__int32", [])])))
		fun(
			false
			"five__int32"
			type(false, "int32")
			none
			[]
			expr-body([], call("wrap_incr__int32__int32", [call("four__int32", [])])))
		fun(
			false
			"four__int32"
			type(false, "int32")
			none
			[]
			expr-body([], call("wrap_incr__int32__int32", [call("three__int32", [])])))
		fun(
			false
			"three__int32"
			type(false, "int32")
			none
			[]
			expr-body([], call("wrap_incr__int32__int32", [call("two__int32", [])])))
		fun(
			false
			"noctx_at__ptr_vat__arr__ptr_vat__nat"
			type(true, "vat")
			none
			[param("a", type(false, "arr__ptr_vat")), param("index", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"hard_assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call(
						"deref__ptr_vat__ptr__ptr_vat"
						[
							call(
								"_op_plus__ptr__ptr_vat__ptr__ptr_vat__nat"
								[get-field(param-ref("a"), "data"), param-ref("index")])]))))
		fun(
			false
			"deref__ptr_vat__ptr__ptr_vat"
			type(true, "vat")
			none
			[param("p", type(false, "ptr__ptr_vat"))]
			builtin([type(true, "vat")]))
		fun(
			false
			"_op_plus__ptr__ptr_vat__ptr__ptr_vat__nat"
			type(false, "ptr__ptr_vat")
			none
			[param("p", type(false, "ptr__ptr_vat")), param("offset", type(false, "nat"))]
			builtin([type(true, "vat")]))
		fun(
			true
			"add_task___void__ptr_vat__task"
			type(false, "_void")
			none
			[param("v", type(true, "vat")), param("t", type(false, "task"))]
			expr-body(
				[local("node", type(true, "mut_bag_node__task"))]
				let(
					"node"
					call("new_mut_bag_node__ptr_mut_bag_node__task__task", [param-ref("t")])
					seq(
						seq(
							seq(
								call(
									"acquire_lock___void__ptr_lock"
									[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("v"), "tasks_lock")])])
								call(
									"add___void__ptr_mut_bag__task__ptr_mut_bag_node__task"
									[
										call(
											"ref_of_val__ptr_mut_bag__task__mut_bag__task"
											[get-field(param-ref("v"), "tasks")])
										local-ref("node")]))
							call(
								"release_lock___void__ptr_lock"
								[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("v"), "tasks_lock")])]))
						call(
							"broadcast___void__ptr_condition"
							[
								call(
									"ref_of_val__ptr_condition__condition"
									[get-field(get-field(param-ref("v"), "gctx"), "may_be_work_to_do")])])))))
		fun(
			true
			"new_mut_bag_node__ptr_mut_bag_node__task__task"
			type(true, "mut_bag_node__task")
			none
			[param("value", type(false, "task"))]
			expr-body(
				[]
				alloc("alloc__ptr__nat8__nat", record([param-ref("value"), to-union(0, call("none__none", []))]))))
		fun(
			false
			"add___void__ptr_mut_bag__task__ptr_mut_bag_node__task"
			type(false, "_void")
			none
			[param("bag", type(true, "mut_bag__task")), param("node", type(true, "mut_bag_node__task"))]
			expr-body(
				[]
				seq(
					set-field(param-ref("node"), "next_node", get-field(param-ref("bag"), "head"))
					set-field(
						param-ref("bag")
						"head"
						to-union(
							1
							call("some__some__ptr_mut_bag_node__task__ptr_mut_bag_node__task", [param-ref("node")]))))))
		fun(
			false
			"some__some__ptr_mut_bag_node__task__ptr_mut_bag_node__task"
			type(false, "some__ptr_mut_bag_node__task")
			none
			[param("t", type(true, "mut_bag_node__task"))]
			expr-body([], record([param-ref("t")])))
		fun(
			false
			"ref_of_val__ptr_mut_bag__task__mut_bag__task"
			type(true, "mut_bag__task")
			none
			[param("b", type(false, "mut_bag__task"))]
			builtin([type(true, "mut_bag__task")]))
		fun(
			false
			"broadcast___void__ptr_condition"
			type(false, "_void")
			none
			[param("c", type(true, "condition"))]
			expr-body(
				[]
				seq(
					seq(
						call(
							"acquire_lock___void__ptr_lock"
							[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("c"), "lk")])])
						set-field(
							param-ref("c")
							"value"
							call("noctx_incr__nat__nat", [get-field(param-ref("c"), "value")])))
					call(
						"release_lock___void__ptr_lock"
						[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("c"), "lk")])]))))
		fun(
			false
			"ref_of_val__ptr_condition__condition"
			type(true, "condition")
			none
			[param("b", type(false, "condition"))]
			builtin([type(true, "condition")]))
		fun(
			true
			"catch___void__fun_mut0___void__fun_mut1___void__exception"
			type(false, "_void")
			none
			[param("try", type(false, "fun_mut0___void")), param("catcher", type(false, "fun_mut1___void__exception"))]
			expr-body(
				[]
				call(
					"catch_with_exception_ctx___void__ptr_exception_ctx__fun_mut0___void__fun_mut1___void__exception"
					[call("get_exception_ctx__ptr_exception_ctx", []), param-ref("try"), param-ref("catcher")])))
		fun(
			true
			"catch_with_exception_ctx___void__ptr_exception_ctx__fun_mut0___void__fun_mut1___void__exception"
			type(false, "_void")
			none
			[
				param("ec", type(true, "exception_ctx"))
				param("try", type(false, "fun_mut0___void"))
				param("catcher", type(false, "fun_mut1___void__exception"))]
			expr-body(
				[
					local("old_thrown_exception", type(false, "exception"))
					local("old_jmp_buf", type(false, "ptr__jmp_buf_tag"))
					local("store", type(false, "jmp_buf_tag"))
					local("setjmp_result", type(false, "int32"))
					local("res", type(false, "_void"))
					local("thrown_exception", type(false, "exception"))]
				let(
					"old_thrown_exception"
					get-field(param-ref("ec"), "thrown_exception")
					let(
						"old_jmp_buf"
						get-field(param-ref("ec"), "jmp_buf_ptr")
						let(
							"store"
							record([call("zero__bytes64", []), call("zero__int32", []), call("zero__bytes128", [])])
							seq(
								set-field(
									param-ref("ec")
									"jmp_buf_ptr"
									call("ptr_to__ptr__jmp_buf_tag__jmp_buf_tag", [local-ref("store")]))
								let(
									"setjmp_result"
									call("setjmp", [get-field(param-ref("ec"), "jmp_buf_ptr")])
									cond(
										call(
											"_op_equal_equal__bool__int32__int32"
											[local-ref("setjmp_result"), call("zero__int32", [])])
										let(
											"res"
											call("call___void__fun_mut0___void", [param-ref("try")])
											seq(
												seq(
													set-field(param-ref("ec"), "jmp_buf_ptr", local-ref("old_jmp_buf"))
													set-field(
														param-ref("ec")
														"thrown_exception"
														local-ref("old_thrown_exception")))
												local-ref("res")))
										seq(
											call(
												"assert___void__bool"
												[
													call(
														"_op_equal_equal__bool__int32__int32"
														[local-ref("setjmp_result"), call("number_to_throw__int32", [])])])
											let(
												"thrown_exception"
												get-field(param-ref("ec"), "thrown_exception")
												seq(
													seq(
														set-field(
															param-ref("ec")
															"jmp_buf_ptr"
															local-ref("old_jmp_buf"))
														set-field(
															param-ref("ec")
															"thrown_exception"
															local-ref("old_thrown_exception")))
													call(
														"call___void__fun_mut1___void__exception__exception"
														[param-ref("catcher"), local-ref("thrown_exception")]))))))))))))
		fun(
			false
			"zero__bytes64"
			type(false, "bytes64")
			none
			[]
			expr-body([], record([call("zero__bytes32", []), call("zero__bytes32", [])])))
		fun(
			false
			"zero__bytes32"
			type(false, "bytes32")
			none
			[]
			expr-body([], record([call("zero__bytes16", []), call("zero__bytes16", [])])))
		fun(
			false
			"zero__bytes16"
			type(false, "bytes16")
			none
			[]
			expr-body([], record([call("zero__nat", []), call("zero__nat", [])])))
		fun(
			false
			"zero__bytes128"
			type(false, "bytes128")
			none
			[]
			expr-body([], record([call("zero__bytes64", []), call("zero__bytes64", [])])))
		fun(
			false
			"ptr_to__ptr__jmp_buf_tag__jmp_buf_tag"
			type(false, "ptr__jmp_buf_tag")
			none
			[param("t", type(false, "jmp_buf_tag"))]
			builtin([type(false, "jmp_buf_tag")]))
		fun(false, "setjmp", type(false, "int32"), none, [param("env", type(false, "ptr__jmp_buf_tag"))], extern(false))
		fun(
			true
			"call___void__fun_mut0___void"
			type(false, "_void")
			none
			[param("f", type(false, "fun_mut0___void"))]
			expr-body(
				[]
				call("call_with_ctx___void__ptr_ctx__fun_mut0___void", [call("get_ctx__ptr_ctx", []), param-ref("f")])))
		fun(
			false
			"call_with_ctx___void__ptr_ctx__fun_mut0___void"
			type(false, "_void")
			none
			[param("c", type(true, "ctx")), param("f", type(false, "fun_mut0___void"))]
			expr-body(
				[]
				call(
					"call___void__fun_ptr2___void__ptr_ctx__ptr__nat8__ptr_ctx__ptr__nat8"
					[get-field(param-ref("f"), "fun_ptr"), param-ref("c"), get-field(param-ref("f"), "closure")])))
		fun(
			false
			"call___void__fun_ptr2___void__ptr_ctx__ptr__nat8__ptr_ctx__ptr__nat8"
			type(false, "_void")
			none
			[
				param("f", type(false, "fun_ptr2___void__ptr_ctx__ptr__nat8"))
				param("p0", type(true, "ctx"))
				param("p1", type(false, "ptr__nat8"))]
			builtin([type(false, "_void"), type(true, "ctx"), type(false, "ptr__nat8")]))
		fun(
			true
			"call___void__fun_mut1___void__exception__exception"
			type(false, "_void")
			none
			[param("f", type(false, "fun_mut1___void__exception")), param("p0", type(false, "exception"))]
			expr-body(
				[]
				call(
					"call_with_ctx___void__ptr_ctx__fun_mut1___void__exception__exception"
					[call("get_ctx__ptr_ctx", []), param-ref("f"), param-ref("p0")])))
		fun(
			false
			"call_with_ctx___void__ptr_ctx__fun_mut1___void__exception__exception"
			type(false, "_void")
			none
			[
				param("c", type(true, "ctx"))
				param("f", type(false, "fun_mut1___void__exception"))
				param("p0", type(false, "exception"))]
			expr-body(
				[]
				call(
					"call___void__fun_ptr3___void__ptr_ctx__ptr__nat8__exception__ptr_ctx__ptr__nat8__exception"
					[
						get-field(param-ref("f"), "fun_ptr")
						param-ref("c")
						get-field(param-ref("f"), "closure")
						param-ref("p0")])))
		fun(
			false
			"call___void__fun_ptr3___void__ptr_ctx__ptr__nat8__exception__ptr_ctx__ptr__nat8__exception"
			type(false, "_void")
			none
			[
				param("f", type(false, "fun_ptr3___void__ptr_ctx__ptr__nat8__exception"))
				param("p0", type(true, "ctx"))
				param("p1", type(false, "ptr__nat8"))
				param("p2", type(false, "exception"))]
			builtin([type(false, "_void"), type(true, "ctx"), type(false, "ptr__nat8"), type(false, "exception")]))
		fun(
			true
			"call__ptr_fut__int32__fun_mut1__ptr_fut__int32___void___void"
			type(true, "fut__int32")
			none
			[param("f", type(false, "fun_mut1__ptr_fut__int32___void")), param("p0", type(false, "_void"))]
			expr-body(
				[]
				call(
					"call_with_ctx__ptr_fut__int32__ptr_ctx__fun_mut1__ptr_fut__int32___void___void"
					[call("get_ctx__ptr_ctx", []), param-ref("f"), param-ref("p0")])))
		fun(
			false
			"call_with_ctx__ptr_fut__int32__ptr_ctx__fun_mut1__ptr_fut__int32___void___void"
			type(true, "fut__int32")
			none
			[
				param("c", type(true, "ctx"))
				param("f", type(false, "fun_mut1__ptr_fut__int32___void"))
				param("p0", type(false, "_void"))]
			expr-body(
				[]
				call(
					"call__ptr_fut__int32__fun_ptr3__ptr_fut__int32__ptr_ctx__ptr__nat8___void__ptr_ctx__ptr__nat8___void"
					[
						get-field(param-ref("f"), "fun_ptr")
						param-ref("c")
						get-field(param-ref("f"), "closure")
						param-ref("p0")])))
		fun(
			false
			"call__ptr_fut__int32__fun_ptr3__ptr_fut__int32__ptr_ctx__ptr__nat8___void__ptr_ctx__ptr__nat8___void"
			type(true, "fut__int32")
			none
			[
				param("f", type(false, "fun_ptr3__ptr_fut__int32__ptr_ctx__ptr__nat8___void"))
				param("p0", type(true, "ctx"))
				param("p1", type(false, "ptr__nat8"))
				param("p2", type(false, "_void"))]
			builtin([type(true, "fut__int32"), type(true, "ctx"), type(false, "ptr__nat8"), type(false, "_void")]))
		fun(
			true
			"call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0__lambda0"
			type(false, "_void")
			some(param(
				"_closure"
				type(true, "call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0__lambda0___closure")))
			[]
			expr-body(
				[]
				call(
					"forward_to___void__ptr_fut__int32__ptr_fut__int32"
					[
						call(
							"call__ptr_fut__int32__fun_mut1__ptr_fut__int32___void___void"
							[
								get-field(get-field(param-ref("_closure"), "f"), "fun")
								get-field(param-ref("_closure"), "p0")])
						get-field(param-ref("_closure"), "res")])))
		fun(
			true
			"reject___void__ptr_fut__int32__exception"
			type(false, "_void")
			none
			[param("f", type(true, "fut__int32")), param("e", type(false, "exception"))]
			expr-body(
				[]
				call(
					"resolve_or_reject___void__ptr_fut__int32__result__int32__exception"
					[param-ref("f"), to-union(1, call("err__err__exception__exception", [param-ref("e")]))])))
		fun(
			true
			"call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0__lambda1"
			type(false, "_void")
			some(param(
				"_closure"
				type(true, "call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0__lambda1___closure")))
			[param("it", type(false, "exception"))]
			expr-body(
				[]
				call(
					"reject___void__ptr_fut__int32__exception"
					[get-field(param-ref("_closure"), "res"), param-ref("it")])))
		fun(
			true
			"call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0"
			type(false, "_void")
			some(param("_closure", type(true, "call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0___closure")))
			[]
			expr-body(
				[]
				call(
					"catch___void__fun_mut0___void__fun_mut1___void__exception"
					[
						lambda(
							"call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0__lambda0"
							some(alloc(
								"alloc__ptr__nat8__nat"
								record(
									[
										get-field(param-ref("_closure"), "f")
										get-field(param-ref("_closure"), "p0")
										get-field(param-ref("_closure"), "res")]))))
						lambda(
							"call__ptr_fut__int32__fun_ref1__int32___void___void__lambda0__lambda1"
							some(alloc("alloc__ptr__nat8__nat", record([get-field(param-ref("_closure"), "res")]))))])))
		fun(
			true
			"then__ptr_fut__int32__ptr_fut___void__fun_ref1__int32___void__lambda0"
			type(false, "_void")
			some(param(
				"_closure"
				type(true, "then__ptr_fut__int32__ptr_fut___void__fun_ref1__int32___void__lambda0___closure")))
			[param("result", type(false, "result___void__exception"))]
			expr-body(
				[
					local("o", type(false, "ok___void"))
					local("e", type(false, "err__exception"))
					local("matched", type(false, "result___void__exception"))]
				match(
					"matched"
					param-ref("result")
					[
						case(
							some("o")
							call(
								"forward_to___void__ptr_fut__int32__ptr_fut__int32"
								[
									call(
										"call__ptr_fut__int32__fun_ref1__int32___void___void"
										[get-field(param-ref("_closure"), "cb"), get-field(local-ref("o"), "value")])
									get-field(param-ref("_closure"), "res")]))
						case(
							some("e")
							call(
								"reject___void__ptr_fut__int32__exception"
								[get-field(param-ref("_closure"), "res"), get-field(local-ref("e"), "value")]))])))
		fun(
			true
			"call__ptr_fut__int32__fun_ref0__int32"
			type(true, "fut__int32")
			none
			[param("f", type(false, "fun_ref0__int32"))]
			expr-body(
				[local("vat", type(true, "vat")), local("res", type(true, "fut__int32"))]
				let(
					"vat"
					call("get_vat__ptr_vat__nat", [get-field(get-field(param-ref("f"), "vat_and_actor"), "vat")])
					let(
						"res"
						call("new_unresolved_fut__ptr_fut__int32", [])
						seq(
							call(
								"add_task___void__ptr_vat__task"
								[
									local-ref("vat")
									record(
										[
											get-field(get-field(param-ref("f"), "vat_and_actor"), "actor")
											lambda(
												"call__ptr_fut__int32__fun_ref0__int32__lambda0"
												some(alloc(
													"alloc__ptr__nat8__nat"
													record([param-ref("f"), local-ref("res")]))))])])
							local-ref("res"))))))
		fun(
			true
			"call__ptr_fut__int32__fun_mut0__ptr_fut__int32"
			type(true, "fut__int32")
			none
			[param("f", type(false, "fun_mut0__ptr_fut__int32"))]
			expr-body(
				[]
				call(
					"call_with_ctx__ptr_fut__int32__ptr_ctx__fun_mut0__ptr_fut__int32"
					[call("get_ctx__ptr_ctx", []), param-ref("f")])))
		fun(
			false
			"call_with_ctx__ptr_fut__int32__ptr_ctx__fun_mut0__ptr_fut__int32"
			type(true, "fut__int32")
			none
			[param("c", type(true, "ctx")), param("f", type(false, "fun_mut0__ptr_fut__int32"))]
			expr-body(
				[]
				call(
					"call__ptr_fut__int32__fun_ptr2__ptr_fut__int32__ptr_ctx__ptr__nat8__ptr_ctx__ptr__nat8"
					[get-field(param-ref("f"), "fun_ptr"), param-ref("c"), get-field(param-ref("f"), "closure")])))
		fun(
			false
			"call__ptr_fut__int32__fun_ptr2__ptr_fut__int32__ptr_ctx__ptr__nat8__ptr_ctx__ptr__nat8"
			type(true, "fut__int32")
			none
			[
				param("f", type(false, "fun_ptr2__ptr_fut__int32__ptr_ctx__ptr__nat8"))
				param("p0", type(true, "ctx"))
				param("p1", type(false, "ptr__nat8"))]
			builtin([type(true, "fut__int32"), type(true, "ctx"), type(false, "ptr__nat8")]))
		fun(
			true
			"call__ptr_fut__int32__fun_ref0__int32__lambda0__lambda0"
			type(false, "_void")
			some(param("_closure", type(true, "call__ptr_fut__int32__fun_ref0__int32__lambda0__lambda0___closure")))
			[]
			expr-body(
				[]
				call(
					"forward_to___void__ptr_fut__int32__ptr_fut__int32"
					[
						call(
							"call__ptr_fut__int32__fun_mut0__ptr_fut__int32"
							[get-field(get-field(param-ref("_closure"), "f"), "fun")])
						get-field(param-ref("_closure"), "res")])))
		fun(
			true
			"call__ptr_fut__int32__fun_ref0__int32__lambda0__lambda1"
			type(false, "_void")
			some(param("_closure", type(true, "call__ptr_fut__int32__fun_ref0__int32__lambda0__lambda1___closure")))
			[param("it", type(false, "exception"))]
			expr-body(
				[]
				call(
					"reject___void__ptr_fut__int32__exception"
					[get-field(param-ref("_closure"), "res"), param-ref("it")])))
		fun(
			true
			"call__ptr_fut__int32__fun_ref0__int32__lambda0"
			type(false, "_void")
			some(param("_closure", type(true, "call__ptr_fut__int32__fun_ref0__int32__lambda0___closure")))
			[]
			expr-body(
				[]
				call(
					"catch___void__fun_mut0___void__fun_mut1___void__exception"
					[
						lambda(
							"call__ptr_fut__int32__fun_ref0__int32__lambda0__lambda0"
							some(alloc(
								"alloc__ptr__nat8__nat"
								record([get-field(param-ref("_closure"), "f"), get-field(param-ref("_closure"), "res")]))))
						lambda(
							"call__ptr_fut__int32__fun_ref0__int32__lambda0__lambda1"
							some(alloc("alloc__ptr__nat8__nat", record([get-field(param-ref("_closure"), "res")]))))])))
		fun(
			true
			"then2__ptr_fut__int32__ptr_fut___void__fun_ref0__int32__lambda0"
			type(true, "fut__int32")
			some(param("_closure", type(true, "then2__ptr_fut__int32__ptr_fut___void__fun_ref0__int32__lambda0___closure")))
			[param("ignore", type(false, "_void"))]
			expr-body([], call("call__ptr_fut__int32__fun_ref0__int32", [get-field(param-ref("_closure"), "cb")])))
		fun(
			true
			"cur_actor__vat_and_actor_id"
			type(false, "vat_and_actor_id")
			none
			[]
			expr-body(
				[local("c", type(true, "ctx"))]
				let(
					"c"
					call("get_ctx__ptr_ctx", [])
					record([get-field(local-ref("c"), "vat_id"), get-field(local-ref("c"), "actor_id")]))))
		fun(
			false
			"as__ptr_fut___void__ptr_fut___void"
			type(true, "fut___void")
			none
			[param("value", type(true, "fut___void"))]
			builtin([type(true, "fut___void")]))
		fun(
			true
			"resolved__ptr_fut___void___void"
			type(true, "fut___void")
			none
			[param("value", type(false, "_void"))]
			expr-body(
				[]
				alloc(
					"alloc__ptr__nat8__nat"
					record([call("new_lock__lock", []), to-union(1, record([param-ref("value")]))]))))
		fun(
			true
			"tail__arr__ptr__char__arr__ptr__char"
			type(false, "arr__ptr__char")
			none
			[param("a", type(false, "arr__ptr__char"))]
			expr-body(
				[]
				seq(
					call("forbid___void__bool", [call("empty__q__bool__arr__ptr__char", [param-ref("a")])])
					call(
						"slice_starting_at__arr__ptr__char__arr__ptr__char__nat"
						[param-ref("a"), call("one__nat", [])]))))
		fun(
			true
			"forbid___void__bool"
			type(false, "_void")
			none
			[param("condition", type(false, "bool"))]
			expr-body([], call("forbid___void__bool__arr__char", [param-ref("condition"), str-lit("forbid failed")])))
		fun(
			true
			"forbid___void__bool__arr__char"
			type(false, "_void")
			none
			[param("condition", type(false, "bool")), param("message", type(false, "arr__char"))]
			expr-body(
				[]
				call(
					"if___void__bool___void___void"
					[
						param-ref("condition")
						call("fail___void__arr__char", [param-ref("message")])
						call("pass___void", [])])))
		fun(
			false
			"empty__q__bool__arr__ptr__char"
			type(false, "bool")
			none
			[param("a", type(false, "arr__ptr__char"))]
			expr-body([], call("zero__q__bool__nat", [get-field(param-ref("a"), "size")])))
		fun(
			true
			"slice_starting_at__arr__ptr__char__arr__ptr__char__nat"
			type(false, "arr__ptr__char")
			none
			[param("a", type(false, "arr__ptr__char")), param("begin", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[
							call(
								"_op_less_equal__bool__nat__nat"
								[param-ref("begin"), get-field(param-ref("a"), "size")])])
					call(
						"slice__arr__ptr__char__arr__ptr__char__nat__nat"
						[
							param-ref("a")
							param-ref("begin")
							call("_op_minus__nat__nat__nat", [get-field(param-ref("a"), "size"), param-ref("begin")])]))))
		fun(
			false
			"_op_less_equal__bool__nat__nat"
			type(false, "bool")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			expr-body([], call("not__bool__bool", [call("_op_less__bool__nat__nat", [param-ref("b"), param-ref("a")])])))
		fun(
			true
			"slice__arr__ptr__char__arr__ptr__char__nat__nat"
			type(false, "arr__ptr__char")
			none
			[
				param("a", type(false, "arr__ptr__char"))
				param("begin", type(false, "nat"))
				param("size", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[
							call(
								"_op_less_equal__bool__nat__nat"
								[
									call("_op_plus__nat__nat__nat", [param-ref("begin"), param-ref("size")])
									get-field(param-ref("a"), "size")])])
					record(
						[
							param-ref("size")
							call(
								"_op_plus__ptr__ptr__char__ptr__ptr__char__nat"
								[get-field(param-ref("a"), "data"), param-ref("begin")])]))))
		fun(
			true
			"_op_plus__nat__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			expr-body(
				[local("res", type(false, "nat"))]
				let(
					"res"
					call("wrap_add__nat__nat__nat", [param-ref("a"), param-ref("b")])
					seq(
						call(
							"assert___void__bool"
							[
								call(
									"and__bool__bool__bool"
									[
										call("_op_greater_equal__bool__nat__nat", [local-ref("res"), param-ref("a")])
										call("_op_greater_equal__bool__nat__nat", [local-ref("res"), param-ref("b")])])])
						local-ref("res")))))
		fun(
			false
			"and__bool__bool__bool"
			type(false, "bool")
			none
			[param("a", type(false, "bool")), param("b", type(false, "bool"))]
			builtin([]))
		fun(
			false
			"_op_greater_equal__bool__nat__nat"
			type(false, "bool")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			expr-body([], call("not__bool__bool", [call("_op_less__bool__nat__nat", [param-ref("a"), param-ref("b")])])))
		fun(
			false
			"_op_plus__ptr__ptr__char__ptr__ptr__char__nat"
			type(false, "ptr__ptr__char")
			none
			[param("p", type(false, "ptr__ptr__char")), param("offset", type(false, "nat"))]
			builtin([type(false, "ptr__char")]))
		fun(
			true
			"_op_minus__nat__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[call("_op_greater_equal__bool__nat__nat", [param-ref("a"), param-ref("b")])])
					call("wrap_sub__nat__nat__nat", [param-ref("a"), param-ref("b")]))))
		fun(
			false
			"wrap_sub__nat__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			builtin([]))
		fun(
			false
			"call__ptr_fut__int32__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__ptr_ctx__arr__arr__char"
			type(true, "fut__int32")
			none
			[
				param("f", type(false, "fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))
				param("p0", type(true, "ctx"))
				param("p1", type(false, "arr__arr__char"))]
			builtin([type(true, "fut__int32"), type(true, "ctx"), type(false, "arr__arr__char")]))
		fun(
			true
			"map__arr__arr__char__arr__ptr__char__fun_mut1__arr__char__ptr__char"
			type(false, "arr__arr__char")
			none
			[param("a", type(false, "arr__ptr__char")), param("mapper", type(false, "fun_mut1__arr__char__ptr__char"))]
			expr-body(
				[]
				call(
					"make_arr__arr__arr__char__nat__fun_mut1__arr__char__nat"
					[
						get-field(param-ref("a"), "size")
						lambda(
							"map__arr__arr__char__arr__ptr__char__fun_mut1__arr__char__ptr__char__lambda0"
							some(alloc("alloc__ptr__nat8__nat", record([param-ref("mapper"), param-ref("a")]))))])))
		fun(
			true
			"make_arr__arr__arr__char__nat__fun_mut1__arr__char__nat"
			type(false, "arr__arr__char")
			none
			[param("size", type(false, "nat")), param("f", type(false, "fun_mut1__arr__char__nat"))]
			expr-body(
				[]
				call(
					"freeze__arr__arr__char__ptr_mut_arr__arr__char"
					[
						call(
							"make_mut_arr__ptr_mut_arr__arr__char__nat__fun_mut1__arr__char__nat"
							[param-ref("size"), param-ref("f")])])))
		fun(
			false
			"freeze__arr__arr__char__ptr_mut_arr__arr__char"
			type(false, "arr__arr__char")
			none
			[param("a", type(true, "mut_arr__arr__char"))]
			expr-body(
				[]
				seq(
					set-field(param-ref("a"), "frozen__q", call("true__bool", []))
					call("unsafe_as_arr__arr__arr__char__ptr_mut_arr__arr__char", [param-ref("a")]))))
		fun(
			false
			"unsafe_as_arr__arr__arr__char__ptr_mut_arr__arr__char"
			type(false, "arr__arr__char")
			none
			[param("a", type(true, "mut_arr__arr__char"))]
			expr-body([], record([get-field(param-ref("a"), "size"), get-field(param-ref("a"), "data")])))
		fun(
			true
			"make_mut_arr__ptr_mut_arr__arr__char__nat__fun_mut1__arr__char__nat"
			type(true, "mut_arr__arr__char")
			none
			[param("size", type(false, "nat")), param("f", type(false, "fun_mut1__arr__char__nat"))]
			expr-body(
				[local("res", type(true, "mut_arr__arr__char"))]
				let(
					"res"
					call("new_uninitialized_mut_arr__ptr_mut_arr__arr__char__nat", [param-ref("size")])
					seq(
						call(
							"make_mut_arr_worker___void__ptr_mut_arr__arr__char__nat__fun_mut1__arr__char__nat"
							[local-ref("res"), call("zero__nat", []), param-ref("f")])
						local-ref("res")))))
		fun(
			true
			"new_uninitialized_mut_arr__ptr_mut_arr__arr__char__nat"
			type(true, "mut_arr__arr__char")
			none
			[param("size", type(false, "nat"))]
			expr-body(
				[]
				alloc(
					"alloc__ptr__nat8__nat"
					record(
						[
							call("false__bool", [])
							param-ref("size")
							param-ref("size")
							call("uninitialized_data__ptr__arr__char__nat", [param-ref("size")])]))))
		fun(
			true
			"uninitialized_data__ptr__arr__char__nat"
			type(false, "ptr__arr__char")
			none
			[param("size", type(false, "nat"))]
			expr-body(
				[local("bptr", type(false, "ptr__nat8"))]
				let(
					"bptr"
					call(
						"alloc__ptr__nat8__nat"
						[call("wrap_mul__nat__nat__nat", [param-ref("size"), call("size_of__nat", [])])])
					call("ptr_cast__ptr__arr__char__ptr__nat8", [local-ref("bptr")]))))
		fun(false, "size_of__nat", type(false, "nat"), none, [], builtin([type(false, "arr__char")]))
		fun(
			false
			"ptr_cast__ptr__arr__char__ptr__nat8"
			type(false, "ptr__arr__char")
			none
			[param("p", type(false, "ptr__nat8"))]
			builtin([type(false, "arr__char"), type(false, "nat8")]))
		fun(
			true
			"make_mut_arr_worker___void__ptr_mut_arr__arr__char__nat__fun_mut1__arr__char__nat"
			type(false, "_void")
			none
			[
				param("m", type(true, "mut_arr__arr__char"))
				param("i", type(false, "nat"))
				param("f", type(false, "fun_mut1__arr__char__nat"))]
			expr-body(
				[]
				cond(
					call("_op_equal_equal__bool__nat__nat", [param-ref("i"), get-field(param-ref("m"), "size")])
					call("pass___void", [])
					seq(
						call(
							"set_at___void__ptr_mut_arr__arr__char__nat__arr__char"
							[
								param-ref("m")
								param-ref("i")
								call("call__arr__char__fun_mut1__arr__char__nat__nat", [param-ref("f"), param-ref("i")])])
						call(
							"make_mut_arr_worker___void__ptr_mut_arr__arr__char__nat__fun_mut1__arr__char__nat"
							[param-ref("m"), call("incr__nat__nat", [param-ref("i")]), param-ref("f")])))))
		fun(
			true
			"set_at___void__ptr_mut_arr__arr__char__nat__arr__char"
			type(false, "_void")
			none
			[
				param("a", type(true, "mut_arr__arr__char"))
				param("index", type(false, "nat"))
				param("value", type(false, "arr__char"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call(
						"noctx_set_at___void__ptr_mut_arr__arr__char__nat__arr__char"
						[param-ref("a"), param-ref("index"), param-ref("value")]))))
		fun(
			false
			"noctx_set_at___void__ptr_mut_arr__arr__char__nat__arr__char"
			type(false, "_void")
			none
			[
				param("a", type(true, "mut_arr__arr__char"))
				param("index", type(false, "nat"))
				param("value", type(false, "arr__char"))]
			expr-body(
				[]
				seq(
					call(
						"hard_assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call(
						"set___void__ptr__arr__char__arr__char"
						[
							call(
								"_op_plus__ptr__arr__char__ptr__arr__char__nat"
								[get-field(param-ref("a"), "data"), param-ref("index")])
							param-ref("value")]))))
		fun(
			false
			"set___void__ptr__arr__char__arr__char"
			type(false, "_void")
			none
			[param("p", type(false, "ptr__arr__char")), param("value", type(false, "arr__char"))]
			builtin([type(false, "arr__char")]))
		fun(
			false
			"_op_plus__ptr__arr__char__ptr__arr__char__nat"
			type(false, "ptr__arr__char")
			none
			[param("p", type(false, "ptr__arr__char")), param("offset", type(false, "nat"))]
			builtin([type(false, "arr__char")]))
		fun(
			true
			"call__arr__char__fun_mut1__arr__char__nat__nat"
			type(false, "arr__char")
			none
			[param("f", type(false, "fun_mut1__arr__char__nat")), param("p0", type(false, "nat"))]
			expr-body(
				[]
				call(
					"call_with_ctx__arr__char__ptr_ctx__fun_mut1__arr__char__nat__nat"
					[call("get_ctx__ptr_ctx", []), param-ref("f"), param-ref("p0")])))
		fun(
			false
			"call_with_ctx__arr__char__ptr_ctx__fun_mut1__arr__char__nat__nat"
			type(false, "arr__char")
			none
			[
				param("c", type(true, "ctx"))
				param("f", type(false, "fun_mut1__arr__char__nat"))
				param("p0", type(false, "nat"))]
			expr-body(
				[]
				call(
					"call__arr__char__fun_ptr3__arr__char__ptr_ctx__ptr__nat8__nat__ptr_ctx__ptr__nat8__nat"
					[
						get-field(param-ref("f"), "fun_ptr")
						param-ref("c")
						get-field(param-ref("f"), "closure")
						param-ref("p0")])))
		fun(
			false
			"call__arr__char__fun_ptr3__arr__char__ptr_ctx__ptr__nat8__nat__ptr_ctx__ptr__nat8__nat"
			type(false, "arr__char")
			none
			[
				param("f", type(false, "fun_ptr3__arr__char__ptr_ctx__ptr__nat8__nat"))
				param("p0", type(true, "ctx"))
				param("p1", type(false, "ptr__nat8"))
				param("p2", type(false, "nat"))]
			builtin([type(false, "arr__char"), type(true, "ctx"), type(false, "ptr__nat8"), type(false, "nat")]))
		fun(
			true
			"incr__nat__nat"
			type(false, "nat")
			none
			[param("n", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("n"), call("billion__nat", [])])])
					call("wrap_add__nat__nat__nat", [param-ref("n"), call("one__nat", [])]))))
		fun(
			true
			"call__arr__char__fun_mut1__arr__char__ptr__char__ptr__char"
			type(false, "arr__char")
			none
			[param("f", type(false, "fun_mut1__arr__char__ptr__char")), param("p0", type(false, "ptr__char"))]
			expr-body(
				[]
				call(
					"call_with_ctx__arr__char__ptr_ctx__fun_mut1__arr__char__ptr__char__ptr__char"
					[call("get_ctx__ptr_ctx", []), param-ref("f"), param-ref("p0")])))
		fun(
			false
			"call_with_ctx__arr__char__ptr_ctx__fun_mut1__arr__char__ptr__char__ptr__char"
			type(false, "arr__char")
			none
			[
				param("c", type(true, "ctx"))
				param("f", type(false, "fun_mut1__arr__char__ptr__char"))
				param("p0", type(false, "ptr__char"))]
			expr-body(
				[]
				call(
					"call__arr__char__fun_ptr3__arr__char__ptr_ctx__ptr__nat8__ptr__char__ptr_ctx__ptr__nat8__ptr__char"
					[
						get-field(param-ref("f"), "fun_ptr")
						param-ref("c")
						get-field(param-ref("f"), "closure")
						param-ref("p0")])))
		fun(
			false
			"call__arr__char__fun_ptr3__arr__char__ptr_ctx__ptr__nat8__ptr__char__ptr_ctx__ptr__nat8__ptr__char"
			type(false, "arr__char")
			none
			[
				param("f", type(false, "fun_ptr3__arr__char__ptr_ctx__ptr__nat8__ptr__char"))
				param("p0", type(true, "ctx"))
				param("p1", type(false, "ptr__nat8"))
				param("p2", type(false, "ptr__char"))]
			builtin([type(false, "arr__char"), type(true, "ctx"), type(false, "ptr__nat8"), type(false, "ptr__char")]))
		fun(
			true
			"at__ptr__char__arr__ptr__char__nat"
			type(false, "ptr__char")
			none
			[param("a", type(false, "arr__ptr__char")), param("index", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call("noctx_at__ptr__char__arr__ptr__char__nat", [param-ref("a"), param-ref("index")]))))
		fun(
			false
			"noctx_at__ptr__char__arr__ptr__char__nat"
			type(false, "ptr__char")
			none
			[param("a", type(false, "arr__ptr__char")), param("index", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"hard_assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call(
						"deref__ptr__char__ptr__ptr__char"
						[
							call(
								"_op_plus__ptr__ptr__char__ptr__ptr__char__nat"
								[get-field(param-ref("a"), "data"), param-ref("index")])]))))
		fun(
			false
			"deref__ptr__char__ptr__ptr__char"
			type(false, "ptr__char")
			none
			[param("p", type(false, "ptr__ptr__char"))]
			builtin([type(false, "ptr__char")]))
		fun(
			true
			"map__arr__arr__char__arr__ptr__char__fun_mut1__arr__char__ptr__char__lambda0"
			type(false, "arr__char")
			some(param(
				"_closure"
				type(true, "map__arr__arr__char__arr__ptr__char__fun_mut1__arr__char__ptr__char__lambda0___closure")))
			[param("i", type(false, "nat"))]
			expr-body(
				[]
				call(
					"call__arr__char__fun_mut1__arr__char__ptr__char__ptr__char"
					[
						get-field(param-ref("_closure"), "mapper")
						call(
							"at__ptr__char__arr__ptr__char__nat"
							[get-field(param-ref("_closure"), "a"), param-ref("i")])])))
		fun(
			false
			"to_str__arr__char__ptr__char"
			type(false, "arr__char")
			none
			[param("a", type(false, "ptr__char"))]
			expr-body(
				[]
				call(
					"arr_from_begin_end__arr__char__ptr__char__ptr__char"
					[param-ref("a"), call("find_cstr_end__ptr__char__ptr__char", [param-ref("a")])])))
		fun(
			false
			"arr_from_begin_end__arr__char__ptr__char__ptr__char"
			type(false, "arr__char")
			none
			[param("begin", type(false, "ptr__char")), param("end", type(false, "ptr__char"))]
			expr-body(
				[]
				record(
					[
						call("_op_minus__nat__ptr__char__ptr__char", [param-ref("end"), param-ref("begin")])
						param-ref("begin")])))
		fun(
			false
			"_op_minus__nat__ptr__char__ptr__char"
			type(false, "nat")
			none
			[param("a", type(false, "ptr__char")), param("b", type(false, "ptr__char"))]
			expr-body(
				[]
				call(
					"to_nat__nat__ptr__char"
					[
						call(
							"_op_minus__ptr__char__ptr__char__nat"
							[param-ref("a"), call("to_nat__nat__ptr__char", [param-ref("b")])])])))
		fun(
			false
			"to_nat__nat__ptr__char"
			type(false, "nat")
			none
			[param("p", type(false, "ptr__char"))]
			builtin([type(false, "char")]))
		fun(
			false
			"_op_minus__ptr__char__ptr__char__nat"
			type(false, "ptr__char")
			none
			[param("p", type(false, "ptr__char")), param("offset", type(false, "nat"))]
			builtin([type(false, "char")]))
		fun(
			false
			"find_cstr_end__ptr__char__ptr__char"
			type(false, "ptr__char")
			none
			[param("a", type(false, "ptr__char"))]
			expr-body(
				[]
				call(
					"find_char_in_cstr__ptr__char__ptr__char__char"
					[param-ref("a"), call("literal__char__arr__char", [str-lit("\0")])])))
		fun(
			false
			"find_char_in_cstr__ptr__char__ptr__char__char"
			type(false, "ptr__char")
			none
			[param("a", type(false, "ptr__char")), param("c", type(false, "char"))]
			expr-body(
				[]
				cond(
					call(
						"_op_equal_equal__bool__char__char"
						[call("deref__char__ptr__char", [param-ref("a")]), param-ref("c")])
					param-ref("a")
					cond(
						call(
							"_op_equal_equal__bool__char__char"
							[
								call("deref__char__ptr__char", [param-ref("a")])
								call("literal__char__arr__char", [str-lit("\0")])])
						call("todo__ptr__char", [])
						call(
							"find_char_in_cstr__ptr__char__ptr__char__char"
							[call("incr__ptr__char__ptr__char", [param-ref("a")]), param-ref("c")])))))
		fun(
			false
			"_op_equal_equal__bool__char__char"
			type(false, "bool")
			none
			[param("a", type(false, "char")), param("b", type(false, "char"))]
			expr-body(
				[local("matched", type(false, "comparison"))]
				match(
					"matched"
					call("_op_less_equal_greater__comparison__char__char", [param-ref("a"), param-ref("b")])
					[
						case(none, call("false__bool", []))
						case(none, call("true__bool", []))
						case(none, call("false__bool", []))])))
		fun(
			false
			"_op_less_equal_greater__comparison__char__char"
			type(false, "comparison")
			none
			[param("a", type(false, "char")), param("b", type(false, "char"))]
			builtin([type(false, "char")]))
		fun(
			false
			"deref__char__ptr__char"
			type(false, "char")
			none
			[param("p", type(false, "ptr__char"))]
			builtin([type(false, "char")]))
		fun(
			false
			"literal__char__arr__char"
			type(false, "char")
			none
			[param("a", type(false, "arr__char"))]
			expr-body([], call("noctx_at__char__arr__char__nat", [param-ref("a"), call("zero__nat", [])])))
		fun(
			false
			"noctx_at__char__arr__char__nat"
			type(false, "char")
			none
			[param("a", type(false, "arr__char")), param("index", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"hard_assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call(
						"deref__char__ptr__char"
						[
							call(
								"_op_plus__ptr__char__ptr__char__nat"
								[get-field(param-ref("a"), "data"), param-ref("index")])]))))
		fun(
			false
			"_op_plus__ptr__char__ptr__char__nat"
			type(false, "ptr__char")
			none
			[param("p", type(false, "ptr__char")), param("offset", type(false, "nat"))]
			builtin([type(false, "char")]))
		fun(
			false
			"todo__ptr__char"
			type(false, "ptr__char")
			none
			[]
			expr-body([], call("hard_fail__ptr__char__arr__char", [str-lit("TODO")])))
		fun(
			false
			"hard_fail__ptr__char__arr__char"
			type(false, "ptr__char")
			none
			[param("reason", type(false, "arr__char"))]
			builtin([type(false, "ptr__char")]))
		fun(
			false
			"incr__ptr__char__ptr__char"
			type(false, "ptr__char")
			none
			[param("p", type(false, "ptr__char"))]
			expr-body([], call("_op_plus__ptr__char__ptr__char__nat", [param-ref("p"), call("one__nat", [])])))
		fun(
			true
			"add_first_task__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__lambda0__lambda0"
			type(false, "arr__char")
			some(param("_closure", type(false, "ptr__nat8")))
			[param("it", type(false, "ptr__char"))]
			expr-body([], call("to_str__arr__char__ptr__char", [param-ref("it")])))
		fun(
			true
			"add_first_task__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__lambda0"
			type(true, "fut__int32")
			some(param(
				"_closure"
				type(
					true
					"add_first_task__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__lambda0___closure")))
			[]
			expr-body(
				[local("args", type(false, "arr__ptr__char"))]
				let(
					"args"
					call("tail__arr__ptr__char__arr__ptr__char", [get-field(param-ref("_closure"), "all_args")])
					call(
						"call__ptr_fut__int32__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__ptr_ctx__arr__arr__char"
						[
							get-field(param-ref("_closure"), "main_ptr")
							call("get_ctx__ptr_ctx", [])
							call(
								"map__arr__arr__char__arr__ptr__char__fun_mut1__arr__char__ptr__char"
								[
									local-ref("args")
									lambda(
										"add_first_task__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__lambda0__lambda0"
										some(call("null__ptr__bool", [])))])]))))
		fun(
			true
			"rt_main__int32__int32__ptr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__lambda0"
			type(true, "fut__int32")
			some(param("_closure", type(false, "ptr__nat8")))
			[
				param("all_args", type(false, "arr__ptr__char"))
				param("main_ptr", type(false, "fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))]
			expr-body(
				[]
				call(
					"add_first_task__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
					[param-ref("all_args"), param-ref("main_ptr")])))
		fun(false, "unsafe_to_nat__nat___int", type(false, "nat"), none, [param("a", type(false, "_int"))], builtin([]))
		fun(false, "to_int___int__int32", type(false, "_int"), none, [param("i", type(false, "int32"))], builtin([]))
		fun(
			false
			"call_with_ctx__ptr_fut__int32__ptr_ctx__fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
			type(true, "fut__int32")
			none
			[
				param("c", type(true, "ctx"))
				param(
					"f"
					type(
						false
						"fun2__ptr_fut__int32__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))
				param("p0", type(false, "arr__ptr__char"))
				param("p1", type(false, "fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))]
			expr-body(
				[]
				call(
					"call__ptr_fut__int32__fun_ptr4__ptr_fut__int32__ptr_ctx__ptr__nat8__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__ptr_ctx__ptr__nat8__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
					[
						get-field(param-ref("f"), "fun_ptr")
						param-ref("c")
						get-field(param-ref("f"), "closure")
						param-ref("p0")
						param-ref("p1")])))
		fun(
			false
			"call__ptr_fut__int32__fun_ptr4__ptr_fut__int32__ptr_ctx__ptr__nat8__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__ptr_ctx__ptr__nat8__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
			type(true, "fut__int32")
			none
			[
				param(
					"f"
					type(
						false
						"fun_ptr4__ptr_fut__int32__ptr_ctx__ptr__nat8__arr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))
				param("p0", type(true, "ctx"))
				param("p1", type(false, "ptr__nat8"))
				param("p2", type(false, "arr__ptr__char"))
				param("p3", type(false, "fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"))]
			builtin(
				[
					type(true, "fut__int32")
					type(true, "ctx")
					type(false, "ptr__nat8")
					type(false, "arr__ptr__char")
					type(false, "fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char")]))
		fun(
			false
			"run_threads___void__nat__ptr_global_ctx__fun_ptr2___void__nat__ptr_global_ctx"
			type(false, "_void")
			none
			[
				param("n_threads", type(false, "nat"))
				param("arg", type(true, "global_ctx"))
				param("fun", type(false, "fun_ptr2___void__nat__ptr_global_ctx"))]
			expr-body(
				[
					local("threads", type(false, "ptr__nat"))
					local("thread_args", type(false, "ptr__thread_args__ptr_global_ctx"))]
				let(
					"threads"
					call("unmanaged_alloc_elements__ptr__nat__nat", [param-ref("n_threads")])
					let(
						"thread_args"
						call(
							"unmanaged_alloc_elements__ptr__thread_args__ptr_global_ctx__nat"
							[param-ref("n_threads")])
						seq(
							seq(
								seq(
									call(
										"run_threads_recur___void__nat__nat__ptr__nat__ptr__thread_args__ptr_global_ctx__ptr_global_ctx__fun_ptr2___void__nat__ptr_global_ctx"
										[
											call("zero__nat", [])
											param-ref("n_threads")
											local-ref("threads")
											local-ref("thread_args")
											param-ref("arg")
											param-ref("fun")])
									call(
										"join_threads_recur___void__nat__nat__ptr__nat"
										[call("zero__nat", []), param-ref("n_threads"), local-ref("threads")]))
								call("unmanaged_free___void__ptr__nat", [local-ref("threads")]))
							call("unmanaged_free___void__ptr__thread_args__ptr_global_ctx", [local-ref("thread_args")]))))))
		fun(
			false
			"unmanaged_alloc_elements__ptr__thread_args__ptr_global_ctx__nat"
			type(false, "ptr__thread_args__ptr_global_ctx")
			none
			[param("size_elements", type(false, "nat"))]
			expr-body(
				[local("bytes", type(false, "ptr__nat8"))]
				let(
					"bytes"
					call(
						"unmanaged_alloc_bytes__ptr__nat8__nat"
						[call("wrap_mul__nat__nat__nat", [param-ref("size_elements"), call("size_of__nat", [])])])
					call("ptr_cast__ptr__thread_args__ptr_global_ctx__ptr__nat8", [local-ref("bytes")]))))
		fun(false, "size_of__nat", type(false, "nat"), none, [], builtin([type(false, "thread_args__ptr_global_ctx")]))
		fun(
			false
			"ptr_cast__ptr__thread_args__ptr_global_ctx__ptr__nat8"
			type(false, "ptr__thread_args__ptr_global_ctx")
			none
			[param("p", type(false, "ptr__nat8"))]
			builtin([type(false, "thread_args__ptr_global_ctx"), type(false, "nat8")]))
		fun(
			false
			"run_threads_recur___void__nat__nat__ptr__nat__ptr__thread_args__ptr_global_ctx__ptr_global_ctx__fun_ptr2___void__nat__ptr_global_ctx"
			type(false, "_void")
			none
			[
				param("i", type(false, "nat"))
				param("n_threads", type(false, "nat"))
				param("threads", type(false, "ptr__nat"))
				param("thread_args", type(false, "ptr__thread_args__ptr_global_ctx"))
				param("arg", type(true, "global_ctx"))
				param("fun", type(false, "fun_ptr2___void__nat__ptr_global_ctx"))]
			expr-body(
				[
					local("thread_arg_ptr", type(false, "ptr__thread_args__ptr_global_ctx"))
					local("thread_ptr", type(false, "ptr__nat"))
					local("fn", type(false, "fun_ptr1__ptr__nat8__ptr__nat8"))
					local("err", type(false, "int32"))]
				cond(
					call("_op_equal_equal__bool__nat__nat", [param-ref("i"), param-ref("n_threads")])
					call("pass___void", [])
					let(
						"thread_arg_ptr"
						call(
							"_op_plus__ptr__thread_args__ptr_global_ctx__ptr__thread_args__ptr_global_ctx__nat"
							[param-ref("thread_args"), param-ref("i")])
						seq(
							call(
								"set___void__ptr__thread_args__ptr_global_ctx__thread_args__ptr_global_ctx"
								[
									local-ref("thread_arg_ptr")
									record([param-ref("fun"), param-ref("i"), param-ref("arg")])])
							let(
								"thread_ptr"
								call("_op_plus__ptr__nat__ptr__nat__nat", [param-ref("threads"), param-ref("i")])
								let(
									"fn"
									call(
										"as__fun_ptr1__ptr__nat8__ptr__nat8__fun_ptr1__ptr__nat8__ptr__nat8"
										[
											lambda(
												"run_threads_recur___void__nat__nat__ptr__nat__ptr__thread_args__ptr_global_ctx__ptr_global_ctx__fun_ptr2___void__nat__ptr_global_ctx__lambda0"
												none)])
									let(
										"err"
										call(
											"pthread_create"
											[
												call("as_cell__ptr_cell__nat__ptr__nat", [local-ref("thread_ptr")])
												call("null__ptr__nat8", [])
												local-ref("fn")
												call(
													"as_any_ptr__ptr__nat8__ptr__thread_args__ptr_global_ctx"
													[local-ref("thread_arg_ptr")])])
										cond(
											call("zero__q__bool__int32", [local-ref("err")])
											call(
												"run_threads_recur___void__nat__nat__ptr__nat__ptr__thread_args__ptr_global_ctx__ptr_global_ctx__fun_ptr2___void__nat__ptr_global_ctx"
												[
													call("noctx_incr__nat__nat", [param-ref("i")])
													param-ref("n_threads")
													param-ref("threads")
													param-ref("thread_args")
													param-ref("arg")
													param-ref("fun")])
											cond(
												call(
													"_op_equal_equal__bool__int32__int32"
													[local-ref("err"), call("eagain__int32", [])])
												call("todo___void", [])
												call("todo___void", [])))))))))))
		fun(
			false
			"_op_plus__ptr__thread_args__ptr_global_ctx__ptr__thread_args__ptr_global_ctx__nat"
			type(false, "ptr__thread_args__ptr_global_ctx")
			none
			[param("p", type(false, "ptr__thread_args__ptr_global_ctx")), param("offset", type(false, "nat"))]
			builtin([type(false, "thread_args__ptr_global_ctx")]))
		fun(
			false
			"set___void__ptr__thread_args__ptr_global_ctx__thread_args__ptr_global_ctx"
			type(false, "_void")
			none
			[
				param("p", type(false, "ptr__thread_args__ptr_global_ctx"))
				param("value", type(false, "thread_args__ptr_global_ctx"))]
			builtin([type(false, "thread_args__ptr_global_ctx")]))
		fun(
			false
			"_op_plus__ptr__nat__ptr__nat__nat"
			type(false, "ptr__nat")
			none
			[param("p", type(false, "ptr__nat")), param("offset", type(false, "nat"))]
			builtin([type(false, "nat")]))
		fun(
			false
			"as__fun_ptr1__ptr__nat8__ptr__nat8__fun_ptr1__ptr__nat8__ptr__nat8"
			type(false, "fun_ptr1__ptr__nat8__ptr__nat8")
			none
			[param("value", type(false, "fun_ptr1__ptr__nat8__ptr__nat8"))]
			builtin([type(false, "fun_ptr1__ptr__nat8__ptr__nat8")]))
		fun(
			false
			"thread_fun__ptr__nat8__ptr__nat8"
			type(false, "ptr__nat8")
			none
			[param("args_ptr", type(false, "ptr__nat8"))]
			expr-body(
				[local("args", type(true, "thread_args__ptr_global_ctx"))]
				let(
					"args"
					call("as_ref__ptr_thread_args__ptr_global_ctx__ptr__nat8", [param-ref("args_ptr")])
					seq(
						call(
							"call___void__fun_ptr2___void__nat__ptr_global_ctx__nat__ptr_global_ctx"
							[
								get-field(local-ref("args"), "fun")
								get-field(local-ref("args"), "thread_id")
								get-field(local-ref("args"), "arg")])
						call("null__ptr__nat8", [])))))
		fun(
			false
			"as_ref__ptr_thread_args__ptr_global_ctx__ptr__nat8"
			type(true, "thread_args__ptr_global_ctx")
			none
			[param("p", type(false, "ptr__nat8"))]
			builtin([type(true, "thread_args__ptr_global_ctx")]))
		fun(
			false
			"call___void__fun_ptr2___void__nat__ptr_global_ctx__nat__ptr_global_ctx"
			type(false, "_void")
			none
			[
				param("f", type(false, "fun_ptr2___void__nat__ptr_global_ctx"))
				param("p0", type(false, "nat"))
				param("p1", type(true, "global_ctx"))]
			builtin([type(false, "_void"), type(false, "nat"), type(true, "global_ctx")]))
		fun(
			false
			"run_threads_recur___void__nat__nat__ptr__nat__ptr__thread_args__ptr_global_ctx__ptr_global_ctx__fun_ptr2___void__nat__ptr_global_ctx__lambda0"
			type(false, "ptr__nat8")
			none
			[param("args_ptr", type(false, "ptr__nat8"))]
			expr-body([], call("thread_fun__ptr__nat8__ptr__nat8", [param-ref("args_ptr")])))
		fun(
			false
			"pthread_create"
			type(false, "int32")
			none
			[
				param("thread", type(true, "cell__nat"))
				param("attr", type(false, "ptr__nat8"))
				param("start_routine", type(false, "fun_ptr1__ptr__nat8__ptr__nat8"))
				param("arg", type(false, "ptr__nat8"))]
			extern(false))
		fun(
			false
			"as_cell__ptr_cell__nat__ptr__nat"
			type(true, "cell__nat")
			none
			[param("p", type(false, "ptr__nat"))]
			expr-body(
				[]
				call("as_ref__ptr_cell__nat__ptr__nat8", [call("as_any_ptr__ptr__nat8__ptr__nat", [param-ref("p")])])))
		fun(
			false
			"as_ref__ptr_cell__nat__ptr__nat8"
			type(true, "cell__nat")
			none
			[param("p", type(false, "ptr__nat8"))]
			builtin([type(true, "cell__nat")]))
		fun(
			false
			"as_any_ptr__ptr__nat8__ptr__nat"
			type(false, "ptr__nat8")
			none
			[param("some_ref", type(false, "ptr__nat"))]
			builtin([type(false, "ptr__nat")]))
		fun(
			false
			"as_any_ptr__ptr__nat8__ptr__thread_args__ptr_global_ctx"
			type(false, "ptr__nat8")
			none
			[param("some_ref", type(false, "ptr__thread_args__ptr_global_ctx"))]
			builtin([type(false, "ptr__thread_args__ptr_global_ctx")]))
		fun(
			false
			"eagain__int32"
			type(false, "int32")
			none
			[]
			expr-body([], call("wrap_add__int32__int32__int32", [call("ten__int32", []), call("one__int32", [])])))
		fun(
			false
			"ten__int32"
			type(false, "int32")
			none
			[]
			expr-body([], call("wrap_add__int32__int32__int32", [call("five__int32", []), call("five__int32", [])])))
		fun(
			false
			"join_threads_recur___void__nat__nat__ptr__nat"
			type(false, "_void")
			none
			[
				param("i", type(false, "nat"))
				param("n_threads", type(false, "nat"))
				param("threads", type(false, "ptr__nat"))]
			expr-body(
				[]
				cond(
					call("_op_equal_equal__bool__nat__nat", [param-ref("i"), param-ref("n_threads")])
					call("pass___void", [])
					seq(
						call(
							"join_one_thread___void__nat"
							[
								call(
									"deref__nat__ptr__nat"
									[call("_op_plus__ptr__nat__ptr__nat__nat", [param-ref("threads"), param-ref("i")])])])
						call(
							"join_threads_recur___void__nat__nat__ptr__nat"
							[
								call("noctx_incr__nat__nat", [param-ref("i")])
								param-ref("n_threads")
								param-ref("threads")])))))
		fun(
			false
			"join_one_thread___void__nat"
			type(false, "_void")
			none
			[param("tid", type(false, "nat"))]
			expr-body(
				[local("thread_return", type(false, "cell__ptr__nat8")), local("err", type(false, "int32"))]
				let(
					"thread_return"
					record([call("null__ptr__nat8", [])])
					let(
						"err"
						call(
							"pthread_join"
							[
								param-ref("tid")
								call("ref_of_val__ptr_cell__ptr__nat8__cell__ptr__nat8", [local-ref("thread_return")])])
						seq(
							cond(
								call("zero__q__bool__int32", [local-ref("err")])
								call("pass___void", [])
								cond(
									call(
										"_op_equal_equal__bool__int32__int32"
										[local-ref("err"), call("einval__int32", [])])
									call("todo___void", [])
									cond(
										call(
											"_op_equal_equal__bool__int32__int32"
											[local-ref("err"), call("esrch__int32", [])])
										call("todo___void", [])
										call("todo___void", []))))
							call(
								"hard_assert___void__bool"
								[
									call(
										"null__q__bool__ptr__nat8"
										[
											call(
												"get__ptr__nat8__ptr_cell__ptr__nat8"
												[
													call(
														"ref_of_val__ptr_cell__ptr__nat8__cell__ptr__nat8"
														[local-ref("thread_return")])])])]))))))
		fun(
			false
			"pthread_join"
			type(false, "int32")
			none
			[param("thread", type(false, "nat")), param("thread_return", type(true, "cell__ptr__nat8"))]
			extern(false))
		fun(
			false
			"ref_of_val__ptr_cell__ptr__nat8__cell__ptr__nat8"
			type(true, "cell__ptr__nat8")
			none
			[param("b", type(false, "cell__ptr__nat8"))]
			builtin([type(true, "cell__ptr__nat8")]))
		fun(
			false
			"einval__int32"
			type(false, "int32")
			none
			[]
			expr-body(
				[]
				call(
					"wrap_add__int32__int32__int32"
					[
						call("wrap_add__int32__int32__int32", [call("ten__int32", []), call("ten__int32", [])])
						call("two__int32", [])])))
		fun(false, "esrch__int32", type(false, "int32"), none, [], expr-body([], call("three__int32", [])))
		fun(
			false
			"get__ptr__nat8__ptr_cell__ptr__nat8"
			type(false, "ptr__nat8")
			none
			[param("c", type(true, "cell__ptr__nat8"))]
			expr-body([], get-field(param-ref("c"), "value")))
		fun(
			false
			"deref__nat__ptr__nat"
			type(false, "nat")
			none
			[param("p", type(false, "ptr__nat"))]
			builtin([type(false, "nat")]))
		fun(
			false
			"unmanaged_free___void__ptr__nat"
			type(false, "_void")
			none
			[param("p", type(false, "ptr__nat"))]
			expr-body([], call("free", [call("ptr_cast__ptr__nat8__ptr__nat", [param-ref("p")])])))
		fun(false, "free", type(false, "_void"), none, [param("p", type(false, "ptr__nat8"))], extern(false))
		fun(
			false
			"ptr_cast__ptr__nat8__ptr__nat"
			type(false, "ptr__nat8")
			none
			[param("p", type(false, "ptr__nat"))]
			builtin([type(false, "nat8"), type(false, "nat")]))
		fun(
			false
			"unmanaged_free___void__ptr__thread_args__ptr_global_ctx"
			type(false, "_void")
			none
			[param("p", type(false, "ptr__thread_args__ptr_global_ctx"))]
			expr-body(
				[]
				call("free", [call("ptr_cast__ptr__nat8__ptr__thread_args__ptr_global_ctx", [param-ref("p")])])))
		fun(
			false
			"ptr_cast__ptr__nat8__ptr__thread_args__ptr_global_ctx"
			type(false, "ptr__nat8")
			none
			[param("p", type(false, "ptr__thread_args__ptr_global_ctx"))]
			builtin([type(false, "nat8"), type(false, "thread_args__ptr_global_ctx")]))
		fun(
			false
			"thread_function___void__nat__ptr_global_ctx"
			type(false, "_void")
			none
			[param("thread_id", type(false, "nat")), param("gctx", type(true, "global_ctx"))]
			expr-body(
				[local("ectx", type(false, "exception_ctx")), local("tls", type(false, "thread_local_stuff"))]
				let(
					"ectx"
					call("new_exception_ctx__exception_ctx", [])
					let(
						"tls"
						call(
							"as__thread_local_stuff__thread_local_stuff"
							[record([call("ref_of_val__ptr_exception_ctx__exception_ctx", [local-ref("ectx")])])])
						call(
							"thread_function_recur___void__nat__ptr_global_ctx__ptr_thread_local_stuff"
							[
								param-ref("thread_id")
								param-ref("gctx")
								call("ref_of_val__ptr_thread_local_stuff__thread_local_stuff", [local-ref("tls")])])))))
		fun(
			false
			"as__thread_local_stuff__thread_local_stuff"
			type(false, "thread_local_stuff")
			none
			[param("value", type(false, "thread_local_stuff"))]
			builtin([type(false, "thread_local_stuff")]))
		fun(
			false
			"thread_function_recur___void__nat__ptr_global_ctx__ptr_thread_local_stuff"
			type(false, "_void")
			none
			[
				param("thread_id", type(false, "nat"))
				param("gctx", type(true, "global_ctx"))
				param("tls", type(true, "thread_local_stuff"))]
			expr-body(
				[
					local("last_checked", type(false, "nat"))
					local("ok_chosen_task", type(false, "ok__chosen_task"))
					local("e", type(false, "err__no_chosen_task"))
					local("matched", type(false, "result__chosen_task__no_chosen_task"))]
				cond(
					get-field(param-ref("gctx"), "is_shut_down")
					seq(
						seq(
							seq(
								call(
									"acquire_lock___void__ptr_lock"
									[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("gctx"), "lk")])])
								set-field(
									param-ref("gctx")
									"n_live_threads"
									call("noctx_decr__nat__nat", [get-field(param-ref("gctx"), "n_live_threads")])))
							call(
								"assert_vats_are_shut_down___void__nat__arr__ptr_vat"
								[call("zero__nat", []), get-field(param-ref("gctx"), "vats")]))
						call(
							"release_lock___void__ptr_lock"
							[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("gctx"), "lk")])]))
					seq(
						call(
							"hard_assert___void__bool"
							[
								call(
									"_op_greater__bool__nat__nat"
									[get-field(param-ref("gctx"), "n_live_threads"), call("zero__nat", [])])])
						let(
							"last_checked"
							call(
								"get_last_checked__nat__ptr_condition"
								[
									call(
										"ref_of_val__ptr_condition__condition"
										[get-field(param-ref("gctx"), "may_be_work_to_do")])])
							seq(
								match(
									"matched"
									call(
										"choose_task__result__chosen_task__no_chosen_task__ptr_global_ctx"
										[param-ref("gctx")])
									[
										case(
											some("ok_chosen_task")
											call(
												"do_task___void__ptr_global_ctx__ptr_thread_local_stuff__chosen_task"
												[
													param-ref("gctx")
													param-ref("tls")
													get-field(local-ref("ok_chosen_task"), "value")]))
										case(
											some("e")
											seq(
												seq(
													seq(
														cond(
															get-field(
																get-field(local-ref("e"), "value")
																"last_thread_out")
															seq(
																seq(
																	call(
																		"hard_forbid___void__bool"
																		[get-field(param-ref("gctx"), "is_shut_down")])
																	set-field(
																		param-ref("gctx")
																		"is_shut_down"
																		call("true__bool", [])))
																call(
																	"broadcast___void__ptr_condition"
																	[
																		call(
																			"ref_of_val__ptr_condition__condition"
																			[
																				get-field(
																					param-ref("gctx")
																					"may_be_work_to_do")])]))
															call(
																"wait_on___void__ptr_condition__nat"
																[
																	call(
																		"ref_of_val__ptr_condition__condition"
																		[
																			get-field(
																				param-ref("gctx")
																				"may_be_work_to_do")])
																	local-ref("last_checked")]))
														call(
															"acquire_lock___void__ptr_lock"
															[
																call(
																	"ref_of_val__ptr_lock__lock"
																	[get-field(param-ref("gctx"), "lk")])]))
													set-field(
														param-ref("gctx")
														"n_live_threads"
														call(
															"noctx_incr__nat__nat"
															[get-field(param-ref("gctx"), "n_live_threads")])))
												call(
													"release_lock___void__ptr_lock"
													[
														call(
															"ref_of_val__ptr_lock__lock"
															[get-field(param-ref("gctx"), "lk")])])))])
								call(
									"thread_function_recur___void__nat__ptr_global_ctx__ptr_thread_local_stuff"
									[param-ref("thread_id"), param-ref("gctx"), param-ref("tls")])))))))
		fun(
			false
			"noctx_decr__nat__nat"
			type(false, "nat")
			none
			[param("n", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call("hard_forbid___void__bool", [call("zero__q__bool__nat", [param-ref("n")])])
					call("wrap_sub__nat__nat__nat", [param-ref("n"), call("one__nat", [])]))))
		fun(
			false
			"assert_vats_are_shut_down___void__nat__arr__ptr_vat"
			type(false, "_void")
			none
			[param("i", type(false, "nat")), param("vats", type(false, "arr__ptr_vat"))]
			expr-body(
				[local("vat", type(true, "vat"))]
				cond(
					call("_op_equal_equal__bool__nat__nat", [param-ref("i"), get-field(param-ref("vats"), "size")])
					call("pass___void", [])
					let(
						"vat"
						call("noctx_at__ptr_vat__arr__ptr_vat__nat", [param-ref("vats"), param-ref("i")])
						seq(
							seq(
								seq(
									seq(
										seq(
											call(
												"acquire_lock___void__ptr_lock"
												[
													call(
														"ref_of_val__ptr_lock__lock"
														[get-field(local-ref("vat"), "tasks_lock")])])
											call(
												"hard_forbid___void__bool"
												[
													get-field(
														call(
															"ref_of_val__ptr_gc__gc"
															[get-field(local-ref("vat"), "gc")])
														"needs_gc")]))
										call(
											"hard_assert___void__bool"
											[
												call(
													"zero__q__bool__nat"
													[get-field(local-ref("vat"), "n_threads_running")])]))
									call(
										"hard_assert___void__bool"
										[
											call(
												"empty__q__bool__ptr_mut_bag__task"
												[
													call(
														"ref_of_val__ptr_mut_bag__task__mut_bag__task"
														[get-field(local-ref("vat"), "tasks")])])]))
								call(
									"release_lock___void__ptr_lock"
									[call("ref_of_val__ptr_lock__lock", [get-field(local-ref("vat"), "tasks_lock")])]))
							call(
								"assert_vats_are_shut_down___void__nat__arr__ptr_vat"
								[call("noctx_incr__nat__nat", [param-ref("i")]), param-ref("vats")]))))))
		fun(
			false
			"empty__q__bool__ptr_mut_bag__task"
			type(false, "bool")
			none
			[param("m", type(true, "mut_bag__task"))]
			expr-body([], call("empty__q__bool__opt__ptr_mut_bag_node__task", [get-field(param-ref("m"), "head")])))
		fun(
			false
			"empty__q__bool__opt__ptr_mut_bag_node__task"
			type(false, "bool")
			none
			[param("a", type(false, "opt__ptr_mut_bag_node__task"))]
			expr-body(
				[
					local("n", type(false, "none"))
					local("s", type(false, "some__ptr_mut_bag_node__task"))
					local("matched", type(false, "opt__ptr_mut_bag_node__task"))]
				match(
					"matched"
					param-ref("a")
					[case(some("n"), call("true__bool", [])), case(some("s"), call("false__bool", []))])))
		fun(
			false
			"_op_greater__bool__nat__nat"
			type(false, "bool")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			expr-body(
				[]
				call("not__bool__bool", [call("_op_less_equal__bool__nat__nat", [param-ref("a"), param-ref("b")])])))
		fun(
			false
			"get_last_checked__nat__ptr_condition"
			type(false, "nat")
			none
			[param("c", type(true, "condition"))]
			expr-body([], get-field(param-ref("c"), "value")))
		fun(
			false
			"choose_task__result__chosen_task__no_chosen_task__ptr_global_ctx"
			type(false, "result__chosen_task__no_chosen_task")
			none
			[param("gctx", type(true, "global_ctx"))]
			expr-body(
				[
					local("s", type(false, "some__chosen_task"))
					local("matched", type(false, "opt__chosen_task"))
					local("res", type(false, "result__chosen_task__no_chosen_task"))]
				seq(
					call(
						"acquire_lock___void__ptr_lock"
						[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("gctx"), "lk")])])
					let(
						"res"
						call(
							"as__result__chosen_task__no_chosen_task__result__chosen_task__no_chosen_task"
							[
								match(
									"matched"
									call(
										"choose_task_recur__opt__chosen_task__arr__ptr_vat__nat"
										[get-field(param-ref("gctx"), "vats"), call("zero__nat", [])])
									[
										case(
											none
											seq(
												set-field(
													param-ref("gctx")
													"n_live_threads"
													call(
														"noctx_decr__nat__nat"
														[get-field(param-ref("gctx"), "n_live_threads")]))
												to-union(
													1
													call(
														"err__err__no_chosen_task__no_chosen_task"
														[
															record(
																[
																	call(
																		"zero__q__bool__nat"
																		[get-field(param-ref("gctx"), "n_live_threads")])])]))))
										case(
											some("s")
											to-union(
												0
												call(
													"ok__ok__chosen_task__chosen_task"
													[get-field(local-ref("s"), "value")])))])])
						seq(
							call(
								"release_lock___void__ptr_lock"
								[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("gctx"), "lk")])])
							local-ref("res"))))))
		fun(
			false
			"as__result__chosen_task__no_chosen_task__result__chosen_task__no_chosen_task"
			type(false, "result__chosen_task__no_chosen_task")
			none
			[param("value", type(false, "result__chosen_task__no_chosen_task"))]
			builtin([type(false, "result__chosen_task__no_chosen_task")]))
		fun(
			false
			"choose_task_recur__opt__chosen_task__arr__ptr_vat__nat"
			type(false, "opt__chosen_task")
			none
			[param("vats", type(false, "arr__ptr_vat")), param("i", type(false, "nat"))]
			expr-body(
				[
					local("vat", type(true, "vat"))
					local("s", type(false, "some__opt__task"))
					local("matched", type(false, "opt__opt__task"))]
				cond(
					call("_op_equal_equal__bool__nat__nat", [param-ref("i"), get-field(param-ref("vats"), "size")])
					to-union(0, call("none__none", []))
					let(
						"vat"
						call("noctx_at__ptr_vat__arr__ptr_vat__nat", [param-ref("vats"), param-ref("i")])
						match(
							"matched"
							call("choose_task_in_vat__opt__opt__task__ptr_vat", [local-ref("vat")])
							[
								case(
									none
									call(
										"choose_task_recur__opt__chosen_task__arr__ptr_vat__nat"
										[param-ref("vats"), call("noctx_incr__nat__nat", [param-ref("i")])]))
								case(
									some("s")
									to-union(
										1
										call(
											"some__some__chosen_task__chosen_task"
											[record([local-ref("vat"), get-field(local-ref("s"), "value")])])))])))))
		fun(
			false
			"choose_task_in_vat__opt__opt__task__ptr_vat"
			type(false, "opt__opt__task")
			none
			[param("vat", type(true, "vat"))]
			expr-body(
				[
					local("s", type(false, "some__task"))
					local("matched", type(false, "opt__task"))
					local("res", type(false, "opt__opt__task"))]
				seq(
					call(
						"acquire_lock___void__ptr_lock"
						[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("vat"), "tasks_lock")])])
					let(
						"res"
						call(
							"as__opt__opt__task__opt__opt__task"
							[
								cond(
									get-field(
										call("ref_of_val__ptr_gc__gc", [get-field(param-ref("vat"), "gc")])
										"needs_gc")
									cond(
										call("zero__q__bool__nat", [get-field(param-ref("vat"), "n_threads_running")])
										to-union(
											1
											call(
												"some__some__opt__task__opt__task"
												[to-union(0, call("none__none", []))]))
										to-union(0, call("none__none", [])))
									match(
										"matched"
										call(
											"find_and_remove_first_doable_task__opt__task__ptr_vat"
											[param-ref("vat")])
										[
											case(none, to-union(0, call("none__none", [])))
											case(
												some("s")
												to-union(
													1
													call(
														"some__some__opt__task__opt__task"
														[
															to-union(
																1
																call(
																	"some__some__task__task"
																	[get-field(local-ref("s"), "value")]))])))]))])
						seq(
							seq(
								cond(
									call("empty__q__bool__opt__opt__task", [local-ref("res")])
									call("pass___void", [])
									set-field(
										param-ref("vat")
										"n_threads_running"
										call("noctx_incr__nat__nat", [get-field(param-ref("vat"), "n_threads_running")])))
								call(
									"release_lock___void__ptr_lock"
									[call("ref_of_val__ptr_lock__lock", [get-field(param-ref("vat"), "tasks_lock")])]))
							local-ref("res"))))))
		fun(
			false
			"as__opt__opt__task__opt__opt__task"
			type(false, "opt__opt__task")
			none
			[param("value", type(false, "opt__opt__task"))]
			builtin([type(false, "opt__opt__task")]))
		fun(
			false
			"some__some__opt__task__opt__task"
			type(false, "some__opt__task")
			none
			[param("t", type(false, "opt__task"))]
			expr-body([], record([param-ref("t")])))
		fun(
			false
			"find_and_remove_first_doable_task__opt__task__ptr_vat"
			type(false, "opt__task")
			none
			[param("vat", type(true, "vat"))]
			expr-body(
				[
					local("tasks", type(true, "mut_bag__task"))
					local("res", type(false, "opt__task_and_nodes"))
					local("s", type(false, "some__task_and_nodes"))
					local("matched", type(false, "opt__task_and_nodes"))]
				let(
					"tasks"
					call("ref_of_val__ptr_mut_bag__task__mut_bag__task", [get-field(param-ref("vat"), "tasks")])
					let(
						"res"
						call(
							"find_and_remove_first_doable_task_recur__opt__task_and_nodes__ptr_vat__opt__ptr_mut_bag_node__task"
							[param-ref("vat"), get-field(local-ref("tasks"), "head")])
						match(
							"matched"
							local-ref("res")
							[
								case(none, to-union(0, call("none__none", [])))
								case(
									some("s")
									seq(
										set-field(
											local-ref("tasks")
											"head"
											get-field(get-field(local-ref("s"), "value"), "nodes"))
										to-union(
											1
											call(
												"some__some__task__task"
												[get-field(get-field(local-ref("s"), "value"), "task")]))))])))))
		fun(
			false
			"find_and_remove_first_doable_task_recur__opt__task_and_nodes__ptr_vat__opt__ptr_mut_bag_node__task"
			type(false, "opt__task_and_nodes")
			none
			[param("vat", type(true, "vat")), param("opt_node", type(false, "opt__ptr_mut_bag_node__task"))]
			expr-body(
				[
					local("s", type(false, "some__ptr_mut_bag_node__task"))
					local("node", type(true, "mut_bag_node__task"))
					local("task", type(false, "task"))
					local("actors", type(true, "mut_arr__nat"))
					local("task_ok", type(false, "bool"))
					local("ss", type(false, "some__task_and_nodes"))
					local("tn", type(false, "task_and_nodes"))
					local("matched", type(false, "opt__task_and_nodes"))
					local("matched1", type(false, "opt__ptr_mut_bag_node__task"))]
				match(
					"matched1"
					param-ref("opt_node")
					[
						case(none, to-union(0, call("none__none", [])))
						case(
							some("s")
							let(
								"node"
								get-field(local-ref("s"), "value")
								let(
									"task"
									get-field(local-ref("node"), "value")
									let(
										"actors"
										call(
											"ref_of_val__ptr_mut_arr__nat__mut_arr__nat"
											[get-field(param-ref("vat"), "currently_running_actors")])
										let(
											"task_ok"
											cond(
												call(
													"contains__q__bool__ptr_mut_arr__nat__nat"
													[local-ref("actors"), get-field(local-ref("task"), "actor_id")])
												call("false__bool", [])
												seq(
													call(
														"push_capacity_must_be_sufficient___void__ptr_mut_arr__nat__nat"
														[local-ref("actors"), get-field(local-ref("task"), "actor_id")])
													call("true__bool", [])))
											cond(
												local-ref("task_ok")
												to-union(
													1
													call(
														"some__some__task_and_nodes__task_and_nodes"
														[
															record(
																[
																	local-ref("task")
																	get-field(local-ref("node"), "next_node")])]))
												match(
													"matched"
													call(
														"find_and_remove_first_doable_task_recur__opt__task_and_nodes__ptr_vat__opt__ptr_mut_bag_node__task"
														[param-ref("vat"), get-field(local-ref("node"), "next_node")])
													[
														case(none, to-union(0, call("none__none", [])))
														case(
															some("ss")
															let(
																"tn"
																call(
																	"as__task_and_nodes__task_and_nodes"
																	[get-field(local-ref("ss"), "value")])
																seq(
																	set-field(
																		local-ref("node")
																		"next_node"
																		get-field(local-ref("tn"), "nodes"))
																	to-union(
																		1
																		call(
																			"some__some__task_and_nodes__task_and_nodes"
																			[
																				record(
																					[
																						get-field(
																							local-ref("tn")
																							"task")
																						to-union(
																							1
																							call(
																								"some__some__ptr_mut_bag_node__task__ptr_mut_bag_node__task"
																								[local-ref("node")]))])])))))])))))))])))
		fun(
			false
			"ref_of_val__ptr_mut_arr__nat__mut_arr__nat"
			type(true, "mut_arr__nat")
			none
			[param("b", type(false, "mut_arr__nat"))]
			builtin([type(true, "mut_arr__nat")]))
		fun(
			false
			"contains__q__bool__ptr_mut_arr__nat__nat"
			type(false, "bool")
			none
			[param("a", type(true, "mut_arr__nat")), param("value", type(false, "nat"))]
			expr-body(
				[]
				call(
					"contains_recur__q__bool__arr__nat__nat__nat"
					[
						call("temp_as_arr__arr__nat__ptr_mut_arr__nat", [param-ref("a")])
						param-ref("value")
						call("zero__nat", [])])))
		fun(
			false
			"contains_recur__q__bool__arr__nat__nat__nat"
			type(false, "bool")
			none
			[param("a", type(false, "arr__nat")), param("value", type(false, "nat")), param("i", type(false, "nat"))]
			expr-body(
				[]
				cond(
					call("_op_equal_equal__bool__nat__nat", [param-ref("i"), get-field(param-ref("a"), "size")])
					call("false__bool", [])
					call(
						"or__bool__bool__bool"
						[
							call(
								"_op_equal_equal__bool__nat__nat"
								[
									call("noctx_at__nat__arr__nat__nat", [param-ref("a"), param-ref("i")])
									param-ref("value")])
							call(
								"contains_recur__q__bool__arr__nat__nat__nat"
								[param-ref("a"), param-ref("value"), call("noctx_incr__nat__nat", [param-ref("i")])])]))))
		fun(
			false
			"or__bool__bool__bool"
			type(false, "bool")
			none
			[param("a", type(false, "bool")), param("b", type(false, "bool"))]
			builtin([]))
		fun(
			false
			"noctx_at__nat__arr__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "arr__nat")), param("index", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"hard_assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call(
						"deref__nat__ptr__nat"
						[
							call(
								"_op_plus__ptr__nat__ptr__nat__nat"
								[get-field(param-ref("a"), "data"), param-ref("index")])]))))
		fun(
			false
			"temp_as_arr__arr__nat__ptr_mut_arr__nat"
			type(false, "arr__nat")
			none
			[param("a", type(true, "mut_arr__nat"))]
			expr-body([], record([get-field(param-ref("a"), "size"), get-field(param-ref("a"), "data")])))
		fun(
			false
			"push_capacity_must_be_sufficient___void__ptr_mut_arr__nat__nat"
			type(false, "_void")
			none
			[param("a", type(true, "mut_arr__nat")), param("value", type(false, "nat"))]
			expr-body(
				[local("old_size", type(false, "nat"))]
				seq(
					call(
						"hard_assert___void__bool"
						[
							call(
								"_op_less__bool__nat__nat"
								[get-field(param-ref("a"), "size"), get-field(param-ref("a"), "capacity")])])
					let(
						"old_size"
						get-field(param-ref("a"), "size")
						seq(
							set-field(param-ref("a"), "size", call("noctx_incr__nat__nat", [local-ref("old_size")]))
							call(
								"noctx_set_at___void__ptr_mut_arr__nat__nat__nat"
								[param-ref("a"), local-ref("old_size"), param-ref("value")]))))))
		fun(
			false
			"noctx_set_at___void__ptr_mut_arr__nat__nat__nat"
			type(false, "_void")
			none
			[
				param("a", type(true, "mut_arr__nat"))
				param("index", type(false, "nat"))
				param("value", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"hard_assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call(
						"set___void__ptr__nat__nat"
						[
							call(
								"_op_plus__ptr__nat__ptr__nat__nat"
								[get-field(param-ref("a"), "data"), param-ref("index")])
							param-ref("value")]))))
		fun(
			false
			"set___void__ptr__nat__nat"
			type(false, "_void")
			none
			[param("p", type(false, "ptr__nat")), param("value", type(false, "nat"))]
			builtin([type(false, "nat")]))
		fun(
			false
			"some__some__task_and_nodes__task_and_nodes"
			type(false, "some__task_and_nodes")
			none
			[param("t", type(false, "task_and_nodes"))]
			expr-body([], record([param-ref("t")])))
		fun(
			false
			"as__task_and_nodes__task_and_nodes"
			type(false, "task_and_nodes")
			none
			[param("value", type(false, "task_and_nodes"))]
			builtin([type(false, "task_and_nodes")]))
		fun(
			false
			"some__some__task__task"
			type(false, "some__task")
			none
			[param("t", type(false, "task"))]
			expr-body([], record([param-ref("t")])))
		fun(
			false
			"empty__q__bool__opt__opt__task"
			type(false, "bool")
			none
			[param("a", type(false, "opt__opt__task"))]
			expr-body(
				[
					local("n", type(false, "none"))
					local("s", type(false, "some__opt__task"))
					local("matched", type(false, "opt__opt__task"))]
				match(
					"matched"
					param-ref("a")
					[case(some("n"), call("true__bool", [])), case(some("s"), call("false__bool", []))])))
		fun(
			false
			"some__some__chosen_task__chosen_task"
			type(false, "some__chosen_task")
			none
			[param("t", type(false, "chosen_task"))]
			expr-body([], record([param-ref("t")])))
		fun(
			false
			"err__err__no_chosen_task__no_chosen_task"
			type(false, "err__no_chosen_task")
			none
			[param("t", type(false, "no_chosen_task"))]
			expr-body([], record([param-ref("t")])))
		fun(
			false
			"ok__ok__chosen_task__chosen_task"
			type(false, "ok__chosen_task")
			none
			[param("t", type(false, "chosen_task"))]
			expr-body([], record([param-ref("t")])))
		fun(
			false
			"do_task___void__ptr_global_ctx__ptr_thread_local_stuff__chosen_task"
			type(false, "_void")
			none
			[
				param("gctx", type(true, "global_ctx"))
				param("tls", type(true, "thread_local_stuff"))
				param("chosen_task", type(false, "chosen_task"))]
			expr-body(
				[
					local("vat", type(true, "vat"))
					local("some_task", type(false, "some__task"))
					local("task", type(false, "task"))
					local("ctx", type(false, "ctx"))
					local("matched", type(false, "opt__task"))]
				let(
					"vat"
					get-field(param-ref("chosen_task"), "vat")
					seq(
						seq(
							seq(
								match(
									"matched"
									get-field(param-ref("chosen_task"), "task_or_gc")
									[
										case(
											none
											seq(
												call("todo___void", [])
												call(
													"broadcast___void__ptr_condition"
													[
														call(
															"ref_of_val__ptr_condition__condition"
															[get-field(param-ref("gctx"), "may_be_work_to_do")])])))
										case(
											some("some_task")
											let(
												"task"
												get-field(local-ref("some_task"), "value")
												let(
													"ctx"
													call(
														"new_ctx__ctx__ptr_global_ctx__ptr_thread_local_stuff__ptr_vat__nat"
														[
															param-ref("gctx")
															param-ref("tls")
															local-ref("vat")
															get-field(local-ref("task"), "actor_id")])
													seq(
														seq(
															seq(
																seq(
																	call(
																		"call_with_ctx___void__ptr_ctx__fun_mut0___void"
																		[
																			call(
																				"ref_of_val__ptr_ctx__ctx"
																				[local-ref("ctx")])
																			get-field(local-ref("task"), "fun")])
																	call(
																		"acquire_lock___void__ptr_lock"
																		[
																			call(
																				"ref_of_val__ptr_lock__lock"
																				[
																					get-field(
																						local-ref("vat")
																						"tasks_lock")])]))
																call(
																	"noctx_must_remove_unordered___void__ptr_mut_arr__nat__nat"
																	[
																		call(
																			"ref_of_val__ptr_mut_arr__nat__mut_arr__nat"
																			[
																				get-field(
																					local-ref("vat")
																					"currently_running_actors")])
																		get-field(local-ref("task"), "actor_id")]))
															call(
																"release_lock___void__ptr_lock"
																[
																	call(
																		"ref_of_val__ptr_lock__lock"
																		[get-field(local-ref("vat"), "tasks_lock")])]))
														call(
															"return_ctx___void__ptr_ctx"
															[call("ref_of_val__ptr_ctx__ctx", [local-ref("ctx")])])))))])
								call(
									"acquire_lock___void__ptr_lock"
									[call("ref_of_val__ptr_lock__lock", [get-field(local-ref("vat"), "tasks_lock")])]))
							set-field(
								local-ref("vat")
								"n_threads_running"
								call("noctx_decr__nat__nat", [get-field(local-ref("vat"), "n_threads_running")])))
						call(
							"release_lock___void__ptr_lock"
							[call("ref_of_val__ptr_lock__lock", [get-field(local-ref("vat"), "tasks_lock")])])))))
		fun(
			false
			"noctx_must_remove_unordered___void__ptr_mut_arr__nat__nat"
			type(false, "_void")
			none
			[param("a", type(true, "mut_arr__nat")), param("value", type(false, "nat"))]
			expr-body(
				[]
				call(
					"noctx_must_remove_unordered_recur___void__ptr_mut_arr__nat__nat__nat"
					[param-ref("a"), call("zero__nat", []), param-ref("value")])))
		fun(
			false
			"noctx_must_remove_unordered_recur___void__ptr_mut_arr__nat__nat__nat"
			type(false, "_void")
			none
			[
				param("a", type(true, "mut_arr__nat"))
				param("index", type(false, "nat"))
				param("value", type(false, "nat"))]
			expr-body(
				[]
				cond(
					call("_op_equal_equal__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])
					call("hard_fail___void__arr__char", [str-lit("Did not find the element in the mut-arr")])
					cond(
						call(
							"_op_equal_equal__bool__nat__nat"
							[
								call("noctx_at__nat__ptr_mut_arr__nat__nat", [param-ref("a"), param-ref("index")])
								param-ref("value")])
						call(
							"drop___void__nat"
							[
								call(
									"noctx_remove_unordered_at_index__nat__ptr_mut_arr__nat__nat"
									[param-ref("a"), param-ref("index")])])
						call(
							"noctx_must_remove_unordered_recur___void__ptr_mut_arr__nat__nat__nat"
							[param-ref("a"), call("noctx_incr__nat__nat", [param-ref("index")]), param-ref("value")])))))
		fun(
			false
			"noctx_at__nat__ptr_mut_arr__nat__nat"
			type(false, "nat")
			none
			[param("a", type(true, "mut_arr__nat")), param("index", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"hard_assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call(
						"deref__nat__ptr__nat"
						[
							call(
								"_op_plus__ptr__nat__ptr__nat__nat"
								[get-field(param-ref("a"), "data"), param-ref("index")])]))))
		fun(
			false
			"drop___void__nat"
			type(false, "_void")
			none
			[param("t", type(false, "nat"))]
			expr-body([], call("pass___void", [])))
		fun(
			false
			"noctx_remove_unordered_at_index__nat__ptr_mut_arr__nat__nat"
			type(false, "nat")
			none
			[param("a", type(true, "mut_arr__nat")), param("index", type(false, "nat"))]
			expr-body(
				[local("res", type(false, "nat"))]
				let(
					"res"
					call("noctx_at__nat__ptr_mut_arr__nat__nat", [param-ref("a"), param-ref("index")])
					seq(
						seq(
							call(
								"noctx_set_at___void__ptr_mut_arr__nat__nat__nat"
								[
									param-ref("a")
									param-ref("index")
									call("noctx_last__nat__ptr_mut_arr__nat", [param-ref("a")])])
							set-field(
								param-ref("a")
								"size"
								call("noctx_decr__nat__nat", [get-field(param-ref("a"), "size")])))
						local-ref("res")))))
		fun(
			false
			"noctx_last__nat__ptr_mut_arr__nat"
			type(false, "nat")
			none
			[param("a", type(true, "mut_arr__nat"))]
			expr-body(
				[]
				seq(
					call("hard_forbid___void__bool", [call("empty__q__bool__ptr_mut_arr__nat", [param-ref("a")])])
					call(
						"noctx_at__nat__ptr_mut_arr__nat__nat"
						[param-ref("a"), call("noctx_decr__nat__nat", [get-field(param-ref("a"), "size")])]))))
		fun(
			false
			"empty__q__bool__ptr_mut_arr__nat"
			type(false, "bool")
			none
			[param("a", type(true, "mut_arr__nat"))]
			expr-body([], call("zero__q__bool__nat", [get-field(param-ref("a"), "size")])))
		fun(
			false
			"return_ctx___void__ptr_ctx"
			type(false, "_void")
			none
			[param("c", type(true, "ctx"))]
			expr-body(
				[]
				call(
					"return_gc_ctx___void__ptr_gc_ctx"
					[call("as_ref__ptr_gc_ctx__ptr__nat8", [get-field(param-ref("c"), "gc_ctx_ptr")])])))
		fun(
			false
			"return_gc_ctx___void__ptr_gc_ctx"
			type(false, "_void")
			none
			[param("gc_ctx", type(true, "gc_ctx"))]
			expr-body(
				[local("gc", type(true, "gc"))]
				let(
					"gc"
					get-field(param-ref("gc_ctx"), "gc")
					seq(
						seq(
							seq(
								call(
									"acquire_lock___void__ptr_lock"
									[call("ref_of_val__ptr_lock__lock", [get-field(local-ref("gc"), "lk")])])
								set-field(param-ref("gc_ctx"), "next_ctx", get-field(local-ref("gc"), "context_head")))
							set-field(
								local-ref("gc")
								"context_head"
								to-union(1, call("some__some__ptr_gc_ctx__ptr_gc_ctx", [param-ref("gc_ctx")]))))
						call(
							"release_lock___void__ptr_lock"
							[call("ref_of_val__ptr_lock__lock", [get-field(local-ref("gc"), "lk")])])))))
		fun(
			false
			"some__some__ptr_gc_ctx__ptr_gc_ctx"
			type(false, "some__ptr_gc_ctx")
			none
			[param("t", type(true, "gc_ctx"))]
			expr-body([], record([param-ref("t")])))
		fun(
			false
			"wait_on___void__ptr_condition__nat"
			type(false, "_void")
			none
			[param("c", type(true, "condition")), param("last_checked", type(false, "nat"))]
			expr-body(
				[]
				cond(
					call(
						"_op_equal_equal__bool__nat__nat"
						[get-field(param-ref("c"), "value"), param-ref("last_checked")])
					seq(
						call("yield_thread___void", [])
						call("wait_on___void__ptr_condition__nat", [param-ref("c"), param-ref("last_checked")]))
					call("pass___void", []))))
		fun(
			false
			"rt_main__int32__int32__ptr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char__lambda1"
			type(false, "_void")
			none
			[param("thread_id", type(false, "nat")), param("gctx", type(true, "global_ctx"))]
			expr-body(
				[]
				call("thread_function___void__nat__ptr_global_ctx", [param-ref("thread_id"), param-ref("gctx")])))
		fun(
			false
			"must_be_resolved__result__int32__exception__ptr_fut__int32"
			type(false, "result__int32__exception")
			none
			[param("f", type(true, "fut__int32"))]
			expr-body(
				[
					local("r", type(false, "fut_state_resolved__int32"))
					local("e", type(false, "exception"))
					local("matched", type(false, "fut_state__int32"))]
				match(
					"matched"
					get-field(param-ref("f"), "state")
					[
						case(none, call("hard_unreachable__result__int32__exception", []))
						case(some("r"), to-union(0, call("ok__ok__int32__int32", [get-field(local-ref("r"), "value")])))
						case(some("e"), to-union(1, call("err__err__exception__exception", [local-ref("e")])))])))
		fun(
			false
			"hard_unreachable__result__int32__exception"
			type(false, "result__int32__exception")
			none
			[]
			expr-body([], call("hard_fail__result__int32__exception__arr__char", [str-lit("unreachable")])))
		fun(
			false
			"hard_fail__result__int32__exception__arr__char"
			type(false, "result__int32__exception")
			none
			[param("reason", type(false, "arr__char"))]
			builtin([type(false, "result__int32__exception")]))
		fun(
			true
			"main__ptr_fut__int32__arr__arr__char"
			type(true, "fut__int32")
			none
			[param("args", type(false, "arr__arr__char"))]
			expr-body(
				[local("m", type(false, "my_record"))]
				let(
					"m"
					record(
						[
							call("literal__nat__arr__char", [str-lit("1")])
							call("literal__nat__arr__char", [str-lit("2")])])
					seq(
						seq(
							seq(
								seq(
									call(
										"assert___void__bool"
										[
											call(
												"_op_equal_equal__bool__nat__nat"
												[
													get-field(local-ref("m"), "x")
													call("literal__nat__arr__char", [str-lit("1")])])])
									call(
										"assert___void__bool"
										[
											call(
												"_op_equal_equal__bool__nat__nat"
												[
													get-field(local-ref("m"), "y")
													call("literal__nat__arr__char", [str-lit("2")])])]))
								call(
									"print_sync___void__arr__char"
									[call("to_str__arr__char__nat", [get-field(local-ref("m"), "x")])]))
							call(
								"print_sync___void__arr__char"
								[call("to_str__arr__char__nat", [get-field(local-ref("m"), "y")])]))
						call("resolved__ptr_fut__int32__int32", [call("literal__int32__arr__char", [str-lit("0")])])))))
		fun(
			true
			"literal__nat__arr__char"
			type(false, "nat")
			none
			[param("s", type(false, "arr__char"))]
			expr-body(
				[local("higher_digits", type(false, "nat"))]
				cond(
					call("empty__q__bool__arr__char", [param-ref("s")])
					call("zero__nat", [])
					let(
						"higher_digits"
						call(
							"as__nat__nat"
							[call("literal__nat__arr__char", [call("rtail__arr__char__arr__char", [param-ref("s")])])])
						call(
							"_op_plus__nat__nat__nat"
							[
								call("_op_times__nat__nat__nat", [local-ref("higher_digits"), call("ten__nat", [])])
								call("char_to_nat__nat__char", [call("last__char__arr__char", [param-ref("s")])])])))))
		fun(
			true
			"rtail__arr__char__arr__char"
			type(false, "arr__char")
			none
			[param("a", type(false, "arr__char"))]
			expr-body(
				[]
				seq(
					call("forbid___void__bool", [call("empty__q__bool__arr__char", [param-ref("a")])])
					call(
						"slice__arr__char__arr__char__nat__nat"
						[
							param-ref("a")
							call("zero__nat", [])
							call("decr__nat__nat", [get-field(param-ref("a"), "size")])]))))
		fun(
			true
			"slice__arr__char__arr__char__nat__nat"
			type(false, "arr__char")
			none
			[
				param("a", type(false, "arr__char"))
				param("begin", type(false, "nat"))
				param("size", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[
							call(
								"_op_less_equal__bool__nat__nat"
								[
									call("_op_plus__nat__nat__nat", [param-ref("begin"), param-ref("size")])
									get-field(param-ref("a"), "size")])])
					record(
						[
							param-ref("size")
							call(
								"_op_plus__ptr__char__ptr__char__nat"
								[get-field(param-ref("a"), "data"), param-ref("begin")])]))))
		fun(
			true
			"decr__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call("forbid___void__bool", [call("zero__q__bool__nat", [param-ref("a")])])
					call("wrap_decr__nat__nat", [param-ref("a")]))))
		fun(
			false
			"wrap_decr__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat"))]
			expr-body([], call("wrap_sub__nat__nat__nat", [param-ref("a"), call("one__nat", [])])))
		fun(
			true
			"_op_times__nat__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			expr-body(
				[local("res", type(false, "nat"))]
				cond(
					call(
						"or__bool__bool__bool"
						[call("zero__q__bool__nat", [param-ref("a")]), call("zero__q__bool__nat", [param-ref("b")])])
					call("zero__nat", [])
					let(
						"res"
						call("wrap_mul__nat__nat__nat", [param-ref("a"), param-ref("b")])
						seq(
							seq(
								call(
									"assert___void__bool"
									[
										call(
											"_op_equal_equal__bool__nat__nat"
											[
												call("_op_div__nat__nat__nat", [local-ref("res"), param-ref("b")])
												param-ref("a")])])
								call(
									"assert___void__bool"
									[
										call(
											"_op_equal_equal__bool__nat__nat"
											[
												call("_op_div__nat__nat__nat", [local-ref("res"), param-ref("a")])
												param-ref("b")])]))
							local-ref("res"))))))
		fun(
			true
			"_op_div__nat__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call("forbid___void__bool", [call("zero__q__bool__nat", [param-ref("b")])])
					call("unsafe_div__nat__nat__nat", [param-ref("a"), param-ref("b")]))))
		fun(
			false
			"unsafe_div__nat__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			builtin([]))
		fun(
			false
			"char_to_nat__nat__char"
			type(false, "nat")
			none
			[param("c", type(false, "char"))]
			expr-body(
				[]
				cond(
					call(
						"_op_equal_equal__bool__char__char"
						[param-ref("c"), call("literal__char__arr__char", [str-lit("0")])])
					call("zero__nat", [])
					cond(
						call(
							"_op_equal_equal__bool__char__char"
							[param-ref("c"), call("literal__char__arr__char", [str-lit("1")])])
						call("one__nat", [])
						cond(
							call(
								"_op_equal_equal__bool__char__char"
								[param-ref("c"), call("literal__char__arr__char", [str-lit("2")])])
							call("two__nat", [])
							cond(
								call(
									"_op_equal_equal__bool__char__char"
									[param-ref("c"), call("literal__char__arr__char", [str-lit("3")])])
								call("three__nat", [])
								cond(
									call(
										"_op_equal_equal__bool__char__char"
										[param-ref("c"), call("literal__char__arr__char", [str-lit("4")])])
									call("four__nat", [])
									cond(
										call(
											"_op_equal_equal__bool__char__char"
											[param-ref("c"), call("literal__char__arr__char", [str-lit("5")])])
										call("five__nat", [])
										cond(
											call(
												"_op_equal_equal__bool__char__char"
												[param-ref("c"), call("literal__char__arr__char", [str-lit("6")])])
											call("six__nat", [])
											cond(
												call(
													"_op_equal_equal__bool__char__char"
													[param-ref("c"), call("literal__char__arr__char", [str-lit("7")])])
												call("seven__nat", [])
												cond(
													call(
														"_op_equal_equal__bool__char__char"
														[
															param-ref("c")
															call("literal__char__arr__char", [str-lit("8")])])
													call("eight__nat", [])
													cond(
														call(
															"_op_equal_equal__bool__char__char"
															[
																param-ref("c")
																call("literal__char__arr__char", [str-lit("9")])])
														call("nine__nat", [])
														call("todo__nat", [])))))))))))))
		fun(
			false
			"todo__nat"
			type(false, "nat")
			none
			[]
			expr-body([], call("hard_fail__nat__arr__char", [str-lit("TODO")])))
		fun(
			false
			"hard_fail__nat__arr__char"
			type(false, "nat")
			none
			[param("reason", type(false, "arr__char"))]
			builtin([type(false, "nat")]))
		fun(
			true
			"last__char__arr__char"
			type(false, "char")
			none
			[param("a", type(false, "arr__char"))]
			expr-body(
				[]
				seq(
					call("forbid___void__bool", [call("empty__q__bool__arr__char", [param-ref("a")])])
					call(
						"at__char__arr__char__nat"
						[param-ref("a"), call("decr__nat__nat", [get-field(param-ref("a"), "size")])]))))
		fun(
			true
			"at__char__arr__char__nat"
			type(false, "char")
			none
			[param("a", type(false, "arr__char")), param("index", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call("noctx_at__char__arr__char__nat", [param-ref("a"), param-ref("index")]))))
		fun(
			false
			"print_sync___void__arr__char"
			type(false, "_void")
			none
			[param("s", type(false, "arr__char"))]
			expr-body(
				[]
				seq(
					call("print_sync_no_newline___void__arr__char", [param-ref("s")])
					call("print_sync_no_newline___void__arr__char", [str-lit("\n")]))))
		fun(
			false
			"print_sync_no_newline___void__arr__char"
			type(false, "_void")
			none
			[param("s", type(false, "arr__char"))]
			expr-body(
				[]
				call("write_sync_no_newline___void__int32__arr__char", [call("stdout_fd__int32", []), param-ref("s")])))
		fun(false, "stdout_fd__int32", type(false, "int32"), none, [], expr-body([], call("one__int32", [])))
		fun(
			true
			"to_str__arr__char__nat"
			type(false, "arr__char")
			none
			[param("n", type(false, "nat"))]
			expr-body(
				[local("hi", type(false, "arr__char")), local("lo", type(false, "arr__char"))]
				cond(
					call(
						"_op_equal_equal__bool__nat__nat"
						[param-ref("n"), call("literal__nat__arr__char", [str-lit("0")])])
					str-lit("0")
					cond(
						call(
							"_op_equal_equal__bool__nat__nat"
							[param-ref("n"), call("literal__nat__arr__char", [str-lit("1")])])
						str-lit("1")
						cond(
							call(
								"_op_equal_equal__bool__nat__nat"
								[param-ref("n"), call("literal__nat__arr__char", [str-lit("2")])])
							str-lit("2")
							cond(
								call(
									"_op_equal_equal__bool__nat__nat"
									[param-ref("n"), call("literal__nat__arr__char", [str-lit("3")])])
								str-lit("3")
								cond(
									call(
										"_op_equal_equal__bool__nat__nat"
										[param-ref("n"), call("literal__nat__arr__char", [str-lit("4")])])
									str-lit("4")
									cond(
										call(
											"_op_equal_equal__bool__nat__nat"
											[param-ref("n"), call("literal__nat__arr__char", [str-lit("5")])])
										str-lit("5")
										cond(
											call(
												"_op_equal_equal__bool__nat__nat"
												[param-ref("n"), call("literal__nat__arr__char", [str-lit("6")])])
											str-lit("6")
											cond(
												call(
													"_op_equal_equal__bool__nat__nat"
													[param-ref("n"), call("literal__nat__arr__char", [str-lit("7")])])
												str-lit("7")
												cond(
													call(
														"_op_equal_equal__bool__nat__nat"
														[
															param-ref("n")
															call("literal__nat__arr__char", [str-lit("8")])])
													str-lit("8")
													cond(
														call(
															"_op_equal_equal__bool__nat__nat"
															[
																param-ref("n")
																call("literal__nat__arr__char", [str-lit("9")])])
														str-lit("9")
														let(
															"hi"
															call(
																"to_str__arr__char__nat"
																[
																	call(
																		"_op_div__nat__nat__nat"
																		[param-ref("n"), call("ten__nat", [])])])
															let(
																"lo"
																call(
																	"to_str__arr__char__nat"
																	[
																		call(
																			"mod__nat__nat__nat"
																			[param-ref("n"), call("ten__nat", [])])])
																call(
																	"_op_plus__arr__char__arr__char__arr__char"
																	[local-ref("hi"), local-ref("lo")])))))))))))))))
		fun(
			true
			"mod__nat__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call("forbid___void__bool", [call("zero__q__bool__nat", [param-ref("b")])])
					call("unsafe_mod__nat__nat__nat", [param-ref("a"), param-ref("b")]))))
		fun(
			false
			"unsafe_mod__nat__nat__nat"
			type(false, "nat")
			none
			[param("a", type(false, "nat")), param("b", type(false, "nat"))]
			builtin([]))
		fun(
			true
			"_op_plus__arr__char__arr__char__arr__char"
			type(false, "arr__char")
			none
			[param("a", type(false, "arr__char")), param("b", type(false, "arr__char"))]
			expr-body(
				[]
				call(
					"make_arr__arr__char__nat__fun_mut1__char__nat"
					[
						call(
							"_op_plus__nat__nat__nat"
							[get-field(param-ref("a"), "size"), get-field(param-ref("b"), "size")])
						lambda(
							"_op_plus__arr__char__arr__char__arr__char__lambda0"
							some(alloc("alloc__ptr__nat8__nat", record([param-ref("a"), param-ref("b")]))))])))
		fun(
			true
			"make_arr__arr__char__nat__fun_mut1__char__nat"
			type(false, "arr__char")
			none
			[param("size", type(false, "nat")), param("f", type(false, "fun_mut1__char__nat"))]
			expr-body(
				[]
				call(
					"freeze__arr__char__ptr_mut_arr__char"
					[
						call(
							"make_mut_arr__ptr_mut_arr__char__nat__fun_mut1__char__nat"
							[param-ref("size"), param-ref("f")])])))
		fun(
			false
			"freeze__arr__char__ptr_mut_arr__char"
			type(false, "arr__char")
			none
			[param("a", type(true, "mut_arr__char"))]
			expr-body(
				[]
				seq(
					set-field(param-ref("a"), "frozen__q", call("true__bool", []))
					call("unsafe_as_arr__arr__char__ptr_mut_arr__char", [param-ref("a")]))))
		fun(
			false
			"unsafe_as_arr__arr__char__ptr_mut_arr__char"
			type(false, "arr__char")
			none
			[param("a", type(true, "mut_arr__char"))]
			expr-body([], record([get-field(param-ref("a"), "size"), get-field(param-ref("a"), "data")])))
		fun(
			true
			"make_mut_arr__ptr_mut_arr__char__nat__fun_mut1__char__nat"
			type(true, "mut_arr__char")
			none
			[param("size", type(false, "nat")), param("f", type(false, "fun_mut1__char__nat"))]
			expr-body(
				[local("res", type(true, "mut_arr__char"))]
				let(
					"res"
					call("new_uninitialized_mut_arr__ptr_mut_arr__char__nat", [param-ref("size")])
					seq(
						call(
							"make_mut_arr_worker___void__ptr_mut_arr__char__nat__fun_mut1__char__nat"
							[local-ref("res"), call("zero__nat", []), param-ref("f")])
						local-ref("res")))))
		fun(
			true
			"new_uninitialized_mut_arr__ptr_mut_arr__char__nat"
			type(true, "mut_arr__char")
			none
			[param("size", type(false, "nat"))]
			expr-body(
				[]
				alloc(
					"alloc__ptr__nat8__nat"
					record(
						[
							call("false__bool", [])
							param-ref("size")
							param-ref("size")
							call("uninitialized_data__ptr__char__nat", [param-ref("size")])]))))
		fun(
			true
			"uninitialized_data__ptr__char__nat"
			type(false, "ptr__char")
			none
			[param("size", type(false, "nat"))]
			expr-body(
				[local("bptr", type(false, "ptr__nat8"))]
				let(
					"bptr"
					call(
						"alloc__ptr__nat8__nat"
						[call("wrap_mul__nat__nat__nat", [param-ref("size"), call("size_of__nat", [])])])
					call("ptr_cast__ptr__char__ptr__nat8", [local-ref("bptr")]))))
		fun(
			false
			"ptr_cast__ptr__char__ptr__nat8"
			type(false, "ptr__char")
			none
			[param("p", type(false, "ptr__nat8"))]
			builtin([type(false, "char"), type(false, "nat8")]))
		fun(
			true
			"make_mut_arr_worker___void__ptr_mut_arr__char__nat__fun_mut1__char__nat"
			type(false, "_void")
			none
			[
				param("m", type(true, "mut_arr__char"))
				param("i", type(false, "nat"))
				param("f", type(false, "fun_mut1__char__nat"))]
			expr-body(
				[]
				cond(
					call("_op_equal_equal__bool__nat__nat", [param-ref("i"), get-field(param-ref("m"), "size")])
					call("pass___void", [])
					seq(
						call(
							"set_at___void__ptr_mut_arr__char__nat__char"
							[
								param-ref("m")
								param-ref("i")
								call("call__char__fun_mut1__char__nat__nat", [param-ref("f"), param-ref("i")])])
						call(
							"make_mut_arr_worker___void__ptr_mut_arr__char__nat__fun_mut1__char__nat"
							[param-ref("m"), call("incr__nat__nat", [param-ref("i")]), param-ref("f")])))))
		fun(
			true
			"set_at___void__ptr_mut_arr__char__nat__char"
			type(false, "_void")
			none
			[
				param("a", type(true, "mut_arr__char"))
				param("index", type(false, "nat"))
				param("value", type(false, "char"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call(
						"noctx_set_at___void__ptr_mut_arr__char__nat__char"
						[param-ref("a"), param-ref("index"), param-ref("value")]))))
		fun(
			false
			"noctx_set_at___void__ptr_mut_arr__char__nat__char"
			type(false, "_void")
			none
			[
				param("a", type(true, "mut_arr__char"))
				param("index", type(false, "nat"))
				param("value", type(false, "char"))]
			expr-body(
				[]
				seq(
					call(
						"hard_assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("index"), get-field(param-ref("a"), "size")])])
					call(
						"set___void__ptr__char__char"
						[
							call(
								"_op_plus__ptr__char__ptr__char__nat"
								[get-field(param-ref("a"), "data"), param-ref("index")])
							param-ref("value")]))))
		fun(
			false
			"set___void__ptr__char__char"
			type(false, "_void")
			none
			[param("p", type(false, "ptr__char")), param("value", type(false, "char"))]
			builtin([type(false, "char")]))
		fun(
			true
			"call__char__fun_mut1__char__nat__nat"
			type(false, "char")
			none
			[param("f", type(false, "fun_mut1__char__nat")), param("p0", type(false, "nat"))]
			expr-body(
				[]
				call(
					"call_with_ctx__char__ptr_ctx__fun_mut1__char__nat__nat"
					[call("get_ctx__ptr_ctx", []), param-ref("f"), param-ref("p0")])))
		fun(
			false
			"call_with_ctx__char__ptr_ctx__fun_mut1__char__nat__nat"
			type(false, "char")
			none
			[
				param("c", type(true, "ctx"))
				param("f", type(false, "fun_mut1__char__nat"))
				param("p0", type(false, "nat"))]
			expr-body(
				[]
				call(
					"call__char__fun_ptr3__char__ptr_ctx__ptr__nat8__nat__ptr_ctx__ptr__nat8__nat"
					[
						get-field(param-ref("f"), "fun_ptr")
						param-ref("c")
						get-field(param-ref("f"), "closure")
						param-ref("p0")])))
		fun(
			false
			"call__char__fun_ptr3__char__ptr_ctx__ptr__nat8__nat__ptr_ctx__ptr__nat8__nat"
			type(false, "char")
			none
			[
				param("f", type(false, "fun_ptr3__char__ptr_ctx__ptr__nat8__nat"))
				param("p0", type(true, "ctx"))
				param("p1", type(false, "ptr__nat8"))
				param("p2", type(false, "nat"))]
			builtin([type(false, "char"), type(true, "ctx"), type(false, "ptr__nat8"), type(false, "nat")]))
		fun(
			true
			"_op_plus__arr__char__arr__char__arr__char__lambda0"
			type(false, "char")
			some(param("_closure", type(true, "_op_plus__arr__char__arr__char__arr__char__lambda0___closure")))
			[param("i", type(false, "nat"))]
			expr-body(
				[]
				cond(
					call(
						"_op_less__bool__nat__nat"
						[param-ref("i"), get-field(get-field(param-ref("_closure"), "a"), "size")])
					call("at__char__arr__char__nat", [get-field(param-ref("_closure"), "a"), param-ref("i")])
					call(
						"at__char__arr__char__nat"
						[
							get-field(param-ref("_closure"), "b")
							call(
								"_op_minus__nat__nat__nat"
								[param-ref("i"), get-field(get-field(param-ref("_closure"), "a"), "size")])]))))
		fun(
			true
			"resolved__ptr_fut__int32__int32"
			type(true, "fut__int32")
			none
			[param("value", type(false, "int32"))]
			expr-body(
				[]
				alloc(
					"alloc__ptr__nat8__nat"
					record([call("new_lock__lock", []), to-union(1, record([param-ref("value")]))]))))
		fun(
			true
			"literal__int32__arr__char"
			type(false, "int32")
			none
			[param("s", type(false, "arr__char"))]
			expr-body(
				[]
				call(
					"unsafe_to_int32__int32___int"
					[call("as___int___int", [call("literal___int__arr__char", [param-ref("s")])])])))
		fun(
			false
			"unsafe_to_int32__int32___int"
			type(false, "int32")
			none
			[param("a", type(false, "_int"))]
			builtin([]))
		fun(
			false
			"as___int___int"
			type(false, "_int")
			none
			[param("value", type(false, "_int"))]
			builtin([type(false, "_int")]))
		fun(
			true
			"literal___int__arr__char"
			type(false, "_int")
			none
			[param("s", type(false, "arr__char"))]
			expr-body(
				[local("fst", type(false, "char")), local("n", type(false, "nat"))]
				let(
					"fst"
					call("at__char__arr__char__nat", [param-ref("s"), call("zero__nat", [])])
					cond(
						call(
							"_op_equal_equal__bool__char__char"
							[local-ref("fst"), call("literal__char__arr__char", [str-lit("-")])])
						let(
							"n"
							call(
								"as__nat__nat"
								[
									call(
										"literal__nat__arr__char"
										[call("tail__arr__char__arr__char", [param-ref("s")])])])
							call("neg___int__nat", [local-ref("n")]))
						cond(
							call(
								"_op_equal_equal__bool__char__char"
								[local-ref("fst"), call("literal__char__arr__char", [str-lit("+")])])
							call(
								"to_int___int__nat"
								[
									call(
										"as__nat__nat"
										[
											call(
												"literal__nat__arr__char"
												[call("tail__arr__char__arr__char", [param-ref("s")])])])])
							call(
								"to_int___int__nat"
								[call("as__nat__nat", [call("literal__nat__arr__char", [param-ref("s")])])]))))))
		fun(
			true
			"tail__arr__char__arr__char"
			type(false, "arr__char")
			none
			[param("a", type(false, "arr__char"))]
			expr-body(
				[]
				seq(
					call("forbid___void__bool", [call("empty__q__bool__arr__char", [param-ref("a")])])
					call("slice_starting_at__arr__char__arr__char__nat", [param-ref("a"), call("one__nat", [])]))))
		fun(
			true
			"slice_starting_at__arr__char__arr__char__nat"
			type(false, "arr__char")
			none
			[param("a", type(false, "arr__char")), param("begin", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[
							call(
								"_op_less_equal__bool__nat__nat"
								[param-ref("begin"), get-field(param-ref("a"), "size")])])
					call(
						"slice__arr__char__arr__char__nat__nat"
						[
							param-ref("a")
							param-ref("begin")
							call("_op_minus__nat__nat__nat", [get-field(param-ref("a"), "size"), param-ref("begin")])]))))
		fun(
			true
			"neg___int__nat"
			type(false, "_int")
			none
			[param("n", type(false, "nat"))]
			expr-body([], call("neg___int___int", [call("to_int___int__nat", [param-ref("n")])])))
		fun(
			true
			"neg___int___int"
			type(false, "_int")
			none
			[param("i", type(false, "_int"))]
			expr-body([], call("_op_times___int___int___int", [param-ref("i"), call("neg_one___int", [])])))
		fun(
			true
			"_op_times___int___int___int"
			type(false, "_int")
			none
			[param("a", type(false, "_int")), param("b", type(false, "_int"))]
			expr-body(
				[]
				seq(
					seq(
						seq(
							seq(
								call(
									"assert___void__bool"
									[
										call(
											"_op_greater__bool___int___int"
											[param-ref("a"), call("neg_million___int", [])])])
								call(
									"assert___void__bool"
									[call("_op_less__bool___int___int", [param-ref("a"), call("million___int", [])])]))
							call(
								"assert___void__bool"
								[call("_op_greater__bool___int___int", [param-ref("b"), call("neg_million___int", [])])]))
						call(
							"assert___void__bool"
							[call("_op_less__bool___int___int", [param-ref("b"), call("million___int", [])])]))
					call("wrap_mul___int___int___int", [param-ref("a"), param-ref("b")]))))
		fun(
			false
			"_op_greater__bool___int___int"
			type(false, "bool")
			none
			[param("a", type(false, "_int")), param("b", type(false, "_int"))]
			expr-body(
				[]
				call("not__bool__bool", [call("_op_less_equal__bool___int___int", [param-ref("a"), param-ref("b")])])))
		fun(
			false
			"_op_less_equal__bool___int___int"
			type(false, "bool")
			none
			[param("a", type(false, "_int")), param("b", type(false, "_int"))]
			expr-body(
				[]
				call("not__bool__bool", [call("_op_less__bool___int___int", [param-ref("b"), param-ref("a")])])))
		fun(
			false
			"_op_less__bool___int___int"
			type(false, "bool")
			none
			[param("a", type(false, "_int")), param("b", type(false, "_int"))]
			expr-body(
				[local("matched", type(false, "comparison"))]
				match(
					"matched"
					call("_op_less_equal_greater__comparison___int___int", [param-ref("a"), param-ref("b")])
					[
						case(none, call("true__bool", []))
						case(none, call("false__bool", []))
						case(none, call("false__bool", []))])))
		fun(
			false
			"neg_million___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_mul___int___int___int", [call("million___int", []), call("neg_one___int", [])])))
		fun(
			false
			"wrap_mul___int___int___int"
			type(false, "_int")
			none
			[param("a", type(false, "_int")), param("b", type(false, "_int"))]
			builtin([]))
		fun(
			false
			"million___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_mul___int___int___int", [call("thousand___int", []), call("thousand___int", [])])))
		fun(
			false
			"thousand___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_mul___int___int___int", [call("hundred___int", []), call("ten___int", [])])))
		fun(
			false
			"hundred___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_mul___int___int___int", [call("ten___int", []), call("ten___int", [])])))
		fun(
			false
			"ten___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_incr___int___int", [call("nine___int", [])])))
		fun(
			false
			"wrap_incr___int___int"
			type(false, "_int")
			none
			[param("a", type(false, "_int"))]
			expr-body([], call("wrap_add___int___int___int", [param-ref("a"), call("one___int", [])])))
		fun(
			false
			"wrap_add___int___int___int"
			type(false, "_int")
			none
			[param("a", type(false, "_int")), param("b", type(false, "_int"))]
			builtin([]))
		fun(false, "one___int", type(false, "_int"), none, [], builtin([]))
		fun(
			false
			"nine___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_incr___int___int", [call("eight___int", [])])))
		fun(
			false
			"eight___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_incr___int___int", [call("seven___int", [])])))
		fun(
			false
			"seven___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_incr___int___int", [call("six___int", [])])))
		fun(
			false
			"six___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_incr___int___int", [call("five___int", [])])))
		fun(
			false
			"five___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_incr___int___int", [call("four___int", [])])))
		fun(
			false
			"four___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_incr___int___int", [call("three___int", [])])))
		fun(
			false
			"three___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_incr___int___int", [call("two___int", [])])))
		fun(
			false
			"two___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_incr___int___int", [call("one___int", [])])))
		fun(
			false
			"neg_one___int"
			type(false, "_int")
			none
			[]
			expr-body([], call("wrap_sub___int___int___int", [call("zero___int", []), call("one___int", [])])))
		fun(
			false
			"wrap_sub___int___int___int"
			type(false, "_int")
			none
			[param("a", type(false, "_int")), param("b", type(false, "_int"))]
			builtin([]))
		fun(false, "zero___int", type(false, "_int"), none, [], builtin([]))
		fun(
			true
			"to_int___int__nat"
			type(false, "_int")
			none
			[param("n", type(false, "nat"))]
			expr-body(
				[]
				seq(
					call(
						"assert___void__bool"
						[call("_op_less__bool__nat__nat", [param-ref("n"), call("million__nat", [])])])
					call("unsafe_to_int___int__nat", [param-ref("n")]))))]
	"rt_main__int32__int32__ptr__ptr__char__fun_ptr2__ptr_fut__int32__ptr_ctx__arr__arr__char"
	"main__ptr_fut__int32__arr__arr__char"
	"ctx")

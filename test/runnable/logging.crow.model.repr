module(
	path: 64
	imports: [
		import(none, 60, none)
		import(some(range(8, 81)), 63, some([get-log-handler, info, log, log-handler, warn, with-log-handler]))]
	funs: [
		fun(
			visibility: public
			summon: true
			sig: sig(file-pos(64, 83), main, fut(nat64()), [param(file-range(64, range(96, 103)), none, arr(str()))])
			body: seq(
				call(
					fun-inst(name: log)
					[call(fun-inst(name: info), []), call(fun-inst(name: literal), [c-string-lit("Logged once")])])
				let(
					local(file-range(64, range(137, 139)), lh, fun1(void(), logged()))
					call(fun-inst(name: get-log-handler), [])
					let(
						local(file-range(64, range(159, 166)), doubler, fun1(void(), logged()))
						lambda(
							[param(file-range(64, range(181, 187)), some(logged), logged())]
							seq(
								call(
									fun-inst(name: subscript, type-args: [void(), logged()])
									[closure-rf(lh), param-ref(logged)])
								call(
									fun-inst(name: subscript, type-args: [void(), logged()])
									[closure-rf(lh), param-ref(logged)]))
							[closure-f(lh, fun1(void(), logged()), local-ref(lh))]
							fun1(void(), logged())
							plain
							void())
						seq(
							seq(
								call(
									fun-inst(name: with-log-handler, type-args: [void()])
									[
										local-ref(doubler)
										lambda(
											[]
											call(
												fun-inst(name: log)
												[
													call(fun-inst(name: warn), [])
													call(fun-inst(name: literal), [c-string-lit("Logged twice")])])
											[]
											fun-act0(void())
											mut
											void())])
								call(
									fun-inst(name: with-log-handler, type-args: [void()])
									[
										lambda(
											[param(file-range(64, range(277, 283)), some(ignore), logged())]
											call(fun-inst(name: new), [])
											[]
											fun1(void(), logged())
											plain
											void())
										lambda(
											[]
											call(
												fun-inst(name: log)
												[
													call(fun-inst(name: warn), [])
													call(fun-inst(name: literal), [c-string-lit("Logged never")])])
											[]
											fun-act0(void())
											mut
											void())]))
							call(fun-inst(name: new, type-args: [nat64()], spec-impls: [fun-inst(name: new)]), []))))))])

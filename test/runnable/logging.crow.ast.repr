file-ast(
	imports: ports(
		range(0, 103)
		[
			import-ast(0, "/bootstrap", some([as, drop]))
			import-ast(0, "/logging", some([get-log-handler, info, log, log-handler, warn, with-log-handler]))])
	specs: []
	aliases: []
	structs: []
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(
				range(103, 126)
				main
				inststruct(range(108, 115), name-range(108, fut), [inststruct(range(112, 115), name-range(112, nat))])
				[
					param(
						range(116, 125)
						none
						inststruct(range(118, 125), name-range(118, arr), [inststruct(range(122, 125), name-range(122, str))]))])
			summon: true
			body: seq-ast(
				call(infix, name-range(140, log), [], [info, literal("Logged once")])
				let(
					name-range(159, lh)
					get-log-handler
					let(
						name-range(181, doubler)
						call(
							prefix
							name-range(191, as)
							[inststruct(range(194, 205), name-range(194, log-handler))]
							[
								lambda(
									[name-range(209, logged)]
									seq-ast(
										call(subscript, name-range(220, subscript), [], [lh, logged])
										call(subscript, name-range(233, subscript), [], [lh, logged])))])
						seq-ast(
							seq-ast(
								call(
									infix
									name-range(251, with-log-handler)
									[]
									[
										doubler
										lambda([], call(infix, name-range(277, log), [], [warn, literal("Logged twice")]))])
								call(
									infix
									name-range(307, with-log-handler)
									[]
									[
										lambda-line(call(infix, name-range(301, drop), [], [it]))
										lambda([], call(infix, name-range(333, log), [], [warn, literal("Logged never")]))]))
							call(infix, name-range(355, resolved), [], [literal(nat(0, false))]))))))])

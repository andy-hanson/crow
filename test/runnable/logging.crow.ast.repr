file-ast(
	imports: ports(range(0, 78), [import-ast(0, "/log", some([get-log-handler, info, log, log-handler, warn, with-log-handler]))])
	specs: []
	aliases: []
	structs: []
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(
				range(78, 101)
				main
				inststruct(range(83, 90), name-range(83, fut), [inststruct(range(87, 90), name-range(87, nat))])
				[
					param(
						range(91, 100)
						none
						inststruct(range(93, 100), name-range(93, arr), [inststruct(range(97, 100), name-range(97, str))]))])
			summon: true
			body: seq-ast(
				call(infix, name-range(115, log), [], [info, literal("Logged once")])
				let(
					name-range(134, lh)
					get-log-handler
					let(
						name-range(156, doubler)
						call(
							prefix
							name-range(166, as)
							[inststruct(range(169, 180), name-range(169, log-handler))]
							[
								lambda(
									[name-range(183, logged)]
									seq-ast(
										call(subscript, name-range(197, subscript), [], [lh, logged])
										call(subscript, name-range(210, subscript), [], [lh, logged])))])
						seq-ast(
							seq-ast(
								call(
									infix
									name-range(228, with-log-handler)
									[]
									[
										doubler
										lambda([], call(infix, name-range(258, log), [], [warn, literal("Logged twice")]))])
								call(
									infix
									name-range(295, with-log-handler)
									[]
									[
										paren(lambda([name-range(279, ignore)], void))
										lambda([], call(infix, name-range(325, log), [], [warn, literal("Logged never")]))]))
							call(infix, name-range(347, resolved), [], [literal(nat(0, false))]))))))])

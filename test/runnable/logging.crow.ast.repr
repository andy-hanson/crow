file-ast(
	imports: ports(range(0, 83), [import-ast("/crow/log", some([get-log-handler, info, log, log-handler, warn, with-log-handler]))])
	specs: []
	aliases: []
	structs: []
	funs: [
		fun-decl(
			visibility: public
			sig: sig-ast(
				range(83, 104)
				main
				inststruct(range(88, 95), name-range(88, fut), [inststruct(range(91, 95), name-range(91, nat))])
				[param(range(96, 103), none, suffix(inststruct(range(98, 101), name-range(98, str)), arr))])
			summon: true
			body: seq-ast(
				call(infix, name-range(118, log), [], [info, literal("Logged once")])
				let(
					lh
					get-log-handler
					let(
						doubler
						lambda(
							[name-range(180, logged)]
							seq-ast(
								call(subscript, name-range(195, subscript), [], [lh, logged])
								call(subscript, name-range(208, subscript), [], [lh, logged])))
						seq-ast(
							seq-ast(
								call(
									infix
									name-range(226, with-log-handler)
									[]
									[
										doubler
										lambda([], call(infix, name-range(256, log), [], [warn, literal("Logged twice")]))])
								call(
									infix
									name-range(293, with-log-handler)
									[]
									[
										paren(lambda([name-range(277, ignore)], void))
										lambda([], call(infix, name-range(323, log), [], [warn, literal("Logged never")]))]))
							call(infix, name-range(345, resolved), [], [literal(nat(0, false))]))))))])

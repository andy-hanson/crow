file-ast(
	imports: ports(range(0, 83), [import-ast("/crow/log", some([get-log-handler, info, log, log-handler, warn, with-log-handler]))])
	specs: []
	aliases: []
	structs: []
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(
				range(83, 106)
				main
				inststruct(range(88, 95), name-range(88, fut), [inststruct(range(92, 95), name-range(92, nat))])
				[
					param(
						range(96, 105)
						none
						inststruct(range(98, 105), name-range(98, arr), [inststruct(range(102, 105), name-range(102, str))]))])
			summon: true
			body: seq-ast(
				call(infix, name-range(120, log), [], [info, literal("Logged once")])
				let(
					name-range(139, lh)
					get-log-handler
					let(
						name-range(161, doubler)
						call(
							prefix
							name-range(171, as)
							[inststruct(range(174, 185), name-range(174, log-handler))]
							[
								lambda(
									[name-range(188, logged)]
									seq-ast(
										call(subscript, name-range(202, subscript), [], [lh, logged])
										call(subscript, name-range(215, subscript), [], [lh, logged])))])
						seq-ast(
							seq-ast(
								call(
									infix
									name-range(233, with-log-handler)
									[]
									[
										doubler
										lambda([], call(infix, name-range(263, log), [], [warn, literal("Logged twice")]))])
								call(
									infix
									name-range(300, with-log-handler)
									[]
									[
										paren(lambda([name-range(284, ignore)], void))
										lambda([], call(infix, name-range(330, log), [], [warn, literal("Logged never")]))]))
							call(infix, name-range(352, resolved), [], [literal(nat(0, false))]))))))])

file-ast(
	imports: ports(
		range(0, 113)
		[
			import-ast(0, "/bootstrap", some([as, drop, fut, str]))
			import-ast(0, "/logging", some([get-log-handler, info, log, log-handler, warn, with-log-handler]))])
	specs: []
	aliases: []
	structs: []
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(
				range(113, 136)
				main
				inststruct(range(118, 125), name-range(118, fut), [inststruct(range(122, 125), name-range(122, nat))])
				[
					param(
						range(126, 135)
						none
						inststruct(range(128, 135), name-range(128, arr), [inststruct(range(132, 135), name-range(132, str))]))])
			summon: true
			body: seq-ast(
				call(infix, name-range(150, log), [], [info, literal("Logged once")])
				let(
					name-range(169, lh)
					get-log-handler
					let(
						name-range(191, doubler)
						call(
							prefix
							name-range(201, as)
							[inststruct(range(204, 215), name-range(204, log-handler))]
							[
								lambda(
									[name-range(219, logged)]
									seq-ast(
										call(subscript, name-range(230, subscript), [], [lh, logged])
										call(subscript, name-range(243, subscript), [], [lh, logged])))])
						seq-ast(
							seq-ast(
								call(
									infix
									name-range(261, with-log-handler)
									[]
									[
										doubler
										lambda([], call(infix, name-range(287, log), [], [warn, literal("Logged twice")]))])
								call(
									infix
									name-range(317, with-log-handler)
									[]
									[
										lambda-line(call(infix, name-range(311, drop), [], [it]))
										lambda([], call(infix, name-range(343, log), [], [warn, literal("Logged never")]))]))
							call(infix, name-range(365, resolved), [], [literal(nat(0, false))]))))))])

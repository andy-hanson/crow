module(
	path: 20
	imports: [
		import(18, none)
		import(8, none)
		import(0, none)
		import(1, none)
		import(9, none)
		import(5, none)
		import(16, none)
		import(17, none)
		import(6, none)
		import(7, none)
		import(15, none)
		import(12, none)
		import(11, none)
		import(13, some([exit-code, print-sync]))]
	exports: []
	structs: [struct(range: file-range(20, range(34, 66)), public?: true, name: my-record)]
	specs: []
	funs: [
		fun(
			public?: true
			summon: true
			sig: sig(file-range(20, range(66, 87)), foo, void(), [param(file-range(20, range(75, 86)), r, my-record())])
			body: seq(
				call(fun-inst(module: 13, name: print-sync), [field-acc(param-ref(r), my-record(), a)])
				call(fun-inst(module: 13, name: print-sync), [field-acc(param-ref(r), my-record(), b)])))
		fun(
			public?: true
			summon: true
			sig: sig(file-range(20, range(130, 162)), main, fut(int32()), [param(file-range(20, range(149, 161)), args, arr(arr(char())))])
			body: let(
				local(file-range(20, range(171, 172)), r, my-record())
				record(my-record(), [string-lit("a"), string-lit("b")])
				seq(
					seq(
						seq(
							call(fun-inst(module: 20, name: foo), [local-ref(r)])
							call(fun-inst(module: 13, name: print-sync), [field-acc(local-ref(r), my-record(), a)]))
						call(fun-inst(module: 13, name: print-sync), [field-acc(local-ref(r), my-record(), b)]))
					call(
						fun-inst(module: 16, name: resolved, type-args: [int32()])
						[call(fun-inst(module: 12, name: literal), [string-lit("0")])]))))])

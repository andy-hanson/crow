module(
	path: 63
	doc: "`<` is marked `noctx`, but might call a `ctx` function.\nIn that case, the particular instance of `<` should actually get a ctx."
	imports: [import(none, 60, none)]
	structs: [struct(range: file-range(63, range(194, 204)), visibility: public, name: t)]
	funs: [
		fun(
			visibility: public
			summon: true
			sig: sig(file-pos(63, 137), main, fut(nat64()), [param(file-range(63, range(150, 157)), none, arr(str()))])
			body: let(
				local(file-range(63, range(167, 168)), x, t())
				call(fun-inst(name: new), [])
				seq(
					call(
						fun-inst(name: drop, type-args: [bool()])
						[
							call(
								fun-inst(
									name: <
									type-args: [t()]
									spec-impls: [fun-inst(name: ==), fun-inst(name: <=>)])
								[local-ref(x), local-ref(x)])])
					call(fun-inst(name: new, type-args: [nat64()], spec-impls: [fun-inst(name: new)]), []))))
		fun(
			visibility: public
			sig: sig(
				file-pos(63, 204)
				==
				bool()
				[param(file-range(63, range(212, 215)), none, t()), param(file-range(63, range(217, 220)), none, t())])
			body: call(fun-inst(name: false), []))
		fun(
			doc: " This is not marked `noctx`, but `<`, which calls it, is."
			visibility: public
			sig: sig(
				file-pos(63, 289)
				<=>
				comparison()
				[param(file-range(63, range(304, 307)), none, t()), param(file-range(63, range(309, 312)), none, t())])
			body: call(fun-inst(name: less), []))
		fun(visibility: public, no-ctx: true, sig: sig(file-pos(63, 194), new, t(), []), body: new-record)])

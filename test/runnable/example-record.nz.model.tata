module(
	path: 20
	imports: [
		import(18, none)
		import(8, none)
		import(0, none)
		import(1, none)
		import(9, none)
		import(5, none)
		import(16, none)
		import(17, none)
		import(6, none)
		import(7, none)
		import(15, none)
		import(11, none)
		import(12, none)
		import(13, some([exit-code, print]))]
	exports: []
	structs: [struct(range: file-range(20, range(29, 69)), public?: true, name: rect)]
	specs: []
	funs: [
		fun(
			public?: true
			sig: sig(file-pos(20, 69), area, float(), [param(file-range(20, range(80, 86)), a, rect())])
			body: call(
				fun-inst(name: *)
				[call(fun-inst(name: width), [param-ref(a)]), call(fun-inst(name: height), [param-ref(a)])]))
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(20, 109), main, fut(int32()), [param(file-range(20, range(128, 140)), args, arr(arr(char())))])
			body: let(
				local(file-range(20, range(150, 151)), r, rect())
				call(
					fun-inst(name: rect)
					[
						literal(float(), 1.5)
						literal(float(), 2.5)])
				seq(
					call(
						fun-inst(name: print)
						[call(fun-inst(name: to-str), [call(fun-inst(name: area), [local-ref(r)])])])
					call(fun-inst(name: resolved, type-args: [int32()]), [literal(int32(), 0)]))))
		fun(
			public?: true
			preferred: true
			sig: sig(
				file-pos(20, 29)
				rect
				rect()
				[param(file-range(20, range(42, 53)), width, float()), param(file-range(20, range(55, 67)), height, float())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(
				file-pos(20, 29)
				rect
				by-val(rect())
				[param(file-range(20, range(42, 53)), width, float()), param(file-range(20, range(55, 67)), height, float())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(20, 42), width, float(), [param(file-range(20, range(42, 53)), a, rect())])
			body: field-get(0))
		fun(
			public?: true
			no-ctx: true
			sig: sig(file-pos(20, 55), height, float(), [param(file-range(20, range(55, 67)), a, rect())])
			body: field-get(1))])

module(
	path: 20
	imports: [
		import(18, none)
		import(8, none)
		import(0, none)
		import(1, none)
		import(9, none)
		import(5, none)
		import(16, none)
		import(17, none)
		import(6, none)
		import(7, none)
		import(15, none)
		import(12, none)
		import(11, none)
		import(13, some([exit-code, print-sync]))]
	exports: []
	structs: [struct(range: file-range(20, range(59, 155)), public?: true, name: point)]
	specs: []
	funs: [
		fun(
			public?: true
			sig: sig(file-pos(20, 155), create-point, point(), [])
			body: call(
				fun-inst(name: point)
				[call(fun-inst(name: literal), [string-lit("1")]), call(fun-inst(name: literal), [string-lit("2")])]))
		fun(
			public?: true
			sig: sig(file-pos(20, 273), get-x, float(), [param(file-range(20, range(285, 292)), a, point())])
			body: field-acc(param-ref(a), point(), x))
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(20, 445), main, fut(int32()), [param(file-range(20, range(464, 476)), args, arr(arr(char())))])
			body: let(
				local(file-range(20, range(548, 549)), p, point())
				call(fun-inst(name: create-point), [])
				let(
					local(file-range(20, range(603, 606)), p-x, float())
					call(fun-inst(name: get-x), [local-ref(p)])
					seq(
						call(fun-inst(name: print-sync), [call(fun-inst(name: to-str), [local-ref(p-x)])])
						call(fun-inst(name: resolved, type-args: [int32()]), [call(fun-inst(name: zero), [])])))))
		fun(
			public?: true
			preferred: true
			sig: sig(
				file-pos(20, 59)
				point
				point()
				[param(file-range(20, range(73, 80)), x, float()), param(file-range(20, range(82, 89)), y, float())])
			body: new-record)
		fun(
			public?: true
			no-ctx: true
			sig: sig(
				file-pos(20, 59)
				point
				by-val(point())
				[param(file-range(20, range(73, 80)), x, float()), param(file-range(20, range(82, 89)), y, float())])
			body: new-record)])

module(
	path: path-sk("/example-record", local)
	imports: [path-sk("/std", global), path-sk("/io", global)]
	exports: []
	structs: [struct(range: range(37, 133), public?: true, name: point)]
	specs: []
	funs: [
		fun(
			public?: true
			sig: sig(range(133, 153), create-point, point(), [])
			body: record(
				point()
				[
					call(fun-inst(module: str-conv, name: literal), [string-lit("1")])
					call(fun-inst(module: str-conv, name: literal), [string-lit("2")])]))
		fun(
			public?: true
			sig: sig(range(336, 356), get-x, float(), [param(range(348, 355), a, point())])
			body: field-acc(param-ref(a), point(), x))
		fun(
			public?: true
			summon: true
			sig: sig(range(508, 540), main, fut(int32()), [param(range(527, 539), args, arr(arr(char())))])
			body: let(
				local(range(611, 612), p, point())
				call(fun-inst(module: example-record, name: create-point), [])
				let(
					local(range(666, 669), p-x, float())
					call(fun-inst(module: example-record, name: get-x), [local-ref(p)])
					seq(
						call(
							fun-inst(module: io, name: print-sync)
							[call(fun-inst(module: str-conv, name: to-str), [local-ref(p-x)])])
						call(
							fun-inst(module: fut-utils, name: resolved, type-args: [int32()])
							[call(fun-inst(module: bootstrap, name: zero), [])])))))])

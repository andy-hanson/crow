module(
	path: 20
	imports: [
		import(18, none)
		import(8, none)
		import(0, none)
		import(1, none)
		import(9, none)
		import(5, none)
		import(16, none)
		import(17, none)
		import(6, none)
		import(7, none)
		import(15, none)
		import(11, none)
		import(10, none)
		import(12, none)]
	exports: []
	structs: [struct(range: file-range(20, range(11, 43)), public?: true, name: my-record)]
	specs: []
	funs: [
		fun(
			public?: true
			summon: true
			sig: sig(file-range(20, range(43, 75)), main, fut(int32()), [param(file-range(20, range(62, 74)), args, arr(arr(char())))])
			body: let(
				local(file-range(20, range(84, 85)), m, my-record())
				record(
					my-record()
					[
						call(fun-inst(module: 11, name: literal), [string-lit("1")])
						call(fun-inst(module: 11, name: literal), [string-lit("2")])])
				seq(
					seq(
						seq(
							seq(
								call(
									fun-inst(module: 5, name: assert)
									[
										call(
											fun-inst(module: 0, name: ==, type-args: [nat()])
											[
												field-acc(local-ref(m), my-record(), x)
												call(fun-inst(module: 11, name: literal), [string-lit("1")])])])
								call(
									fun-inst(module: 5, name: assert)
									[
										call(
											fun-inst(module: 0, name: ==, type-args: [nat()])
											[
												field-acc(local-ref(m), my-record(), y)
												call(fun-inst(module: 11, name: literal), [string-lit("2")])])]))
							call(
								fun-inst(module: 12, name: print-sync)
								[call(fun-inst(module: 11, name: to-str), [field-acc(local-ref(m), my-record(), x)])]))
						call(
							fun-inst(module: 12, name: print-sync)
							[call(fun-inst(module: 11, name: to-str), [field-acc(local-ref(m), my-record(), y)])]))
					call(
						fun-inst(module: 16, name: resolved, type-args: [int32()])
						[call(fun-inst(module: 11, name: literal), [string-lit("0")])]))))])

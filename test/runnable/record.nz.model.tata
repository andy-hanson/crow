module(
	path: path-sk("/record", local)
	imports: [path-sk("/std", global), path-sk("/io", global)]
	exports: []
	structs: [
		struct(
			range: range(11, 43)
			public?: true
			name: my-record)]
	specs: []
	funs: [
		fun(
			public?: true
			summon: true
			sig: sig(range(43, 71), main, fut(int32()), [param(range(58, 70), args, arr(arr(char())), 0)])
			body: let(
				local(range(80, 81), m, my-record())
				record(
					my-record()
					[
						call(
							fun-inst(
								module: str-conv
								name: literal)
							[string-lit("1")])
						call(
							fun-inst(
								module: str-conv
								name: literal)
							[string-lit("2")])])
				seq(
					seq(
						seq(
							seq(
								call(
									fun-inst(
										module: exceptions
										name: assert)
									[
										call(
											fun-inst(
												module: bootstrap
												name: ==
												type-args: [nat()])
											[
												field-acc(local-ref(m), my-record(), x)
												call(
													fun-inst(
														module: str-conv
														name: literal)
													[string-lit("1")])])])
								call(
									fun-inst(
										module: exceptions
										name: assert)
									[
										call(
											fun-inst(
												module: bootstrap
												name: ==
												type-args: [nat()])
											[
												field-acc(local-ref(m), my-record(), y)
												call(
													fun-inst(
														module: str-conv
														name: literal)
													[string-lit("2")])])]))
							call(
								fun-inst(
									module: io
									name: print-sync)
								[
									call(
										fun-inst(
											module: str-conv
											name: to-str)
										[field-acc(local-ref(m), my-record(), x)])]))
						call(
							fun-inst(
								module: io
								name: print-sync)
							[
								call(
									fun-inst(
										module: str-conv
										name: to-str)
									[field-acc(local-ref(m), my-record(), y)])]))
					call(
						fun-inst(
							module: fut-utils
							name: resolved
							type-args: [int32()])
						[
							call(
								fun-inst(
									module: str-conv
									name: literal)
								[string-lit("0")])]))))])

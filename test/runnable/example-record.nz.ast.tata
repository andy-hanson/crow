file-ast(
	imports: ports(range(0, 29), [import-ast(0, "/io", some([exit-code, print]))])
	specs: []
	aliases: []
	structs: [
		struct(
			range(29, 69)
			true
			[]
			none
			record(
				none
				[
					field(range(42, 53), false, width, inststruct(range(48, 53), name-range(48, float)))
					field(range(55, 67), false, height, inststruct(range(62, 67), name-range(62, float)))]))]
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(
				range(69, 87)
				area
				inststruct(range(74, 79), name-range(74, float))
				[param(range(80, 86), name-range(80, a), inststruct(range(82, 86), name-range(82, rect)))])
			body: call(
				infix
				name-range(97, *)
				[]
				[call(dot, name-range(91, width), [], [a]), call(dot, name-range(101, height), [], [a])]))
		fun-decl(
			public?: true
			sig: sig-ast(
				range(109, 141)
				main
				inststruct(range(114, 127), name-range(114, fut), [inststruct(range(118, 127), name-range(118, exit-code))])
				[
					param(
						range(128, 140)
						name-range(128, args)
						inststruct(range(133, 140), name-range(133, arr), [inststruct(range(137, 140), name-range(137, str))]))])
			summon: true
			body: let(
				name-range(150, r)
				call(
					prefix
					name-range(154, rect)
					[]
					[
						literal(
							float(
								1.5
								false))
						literal(
							float(
								2.5
								false))])
				seq-ast(
					call(
						prefix
						name-range(170, print)
						[]
						[call(infix, name-range(184, to-str), [], [call(dot, name-range(179, area), [], [r])])])
					call(infix, name-range(194, resolved), [], [literal(nat(0, false))]))))])

file-ast(
	imports: ports(range(0, 59), [import-ast(0, "/io", some([exit-code, print-sync]))])
	specs: []
	aliases: []
	structs: [
		struct(
			range(59, 155)
			true
			[]
			none
			record(
				none
				[
					field(range(73, 80), false, x, inststruct(range(75, 80), name-range(75, float)))
					field(range(82, 89), false, y, inststruct(range(84, 89), name-range(84, float)))]))]
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(range(155, 175), create-point, inststruct(range(168, 173), name-range(168, point)), [])
			body: new-record(none, [literal(numeric, "1"), literal(numeric, "2")]))
		fun-decl(
			public?: true
			sig: sig-ast(
				range(358, 378)
				get-x
				inststruct(range(364, 369), name-range(364, float))
				[param(range(370, 377), name-range(370, a), inststruct(range(372, 377), name-range(372, point)))])
			body: call(infix, name-range(455, x), [], [a]))
		fun-decl(
			public?: true
			sig: sig-ast(
				range(530, 562)
				main
				inststruct(range(535, 548), name-range(535, fut), [inststruct(range(539, 548), name-range(539, exit-code))])
				[
					param(
						range(549, 561)
						name-range(549, args)
						inststruct(range(554, 561), name-range(554, arr), [inststruct(range(558, 561), name-range(558, str))]))])
			summon: true
			body: let(
				name-range(633, p)
				create-point
				let(
					name-range(688, p-x)
					call(infix, name-range(696, get-x), [], [p])
					seq-ast(
						call(prefix, name-range(955, print-sync), [], [call(infix, name-range(971, to-str), [], [p-x])])
						call(infix, name-range(984, resolved), [], [zero])))))])

file-ast(
	imports: ports(range(0, 29), [import-ast(0, "/io", some([exit-code, print]))])
	specs: []
	aliases: []
	structs: [
		struct(
			range(29, 61)
			true
			[]
			none
			record(
				none
				[
					field(range(47, 52), false, a, inststruct(range(49, 52), name-range(49, str)))
					field(range(54, 59), false, b, inststruct(range(56, 59), name-range(56, str)))]))]
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(
				range(61, 82)
				foo
				inststruct(range(65, 69), name-range(65, void))
				[param(range(70, 81), name-range(70, r), inststruct(range(72, 81), name-range(72, my-record)))])
			summon: true
			body: seq-ast(
				call(prefix, name-range(91, print), [], [call(infix, name-range(100, a), [], [r])])
				call(prefix, name-range(103, print), [], [call(infix, name-range(112, b), [], [r])])))
		fun-decl(
			public?: true
			sig: sig-ast(
				range(115, 147)
				main
				inststruct(range(120, 133), name-range(120, fut), [inststruct(range(124, 133), name-range(124, exit-code))])
				[
					param(
						range(134, 146)
						name-range(134, args)
						inststruct(range(139, 146), name-range(139, arr), [inststruct(range(143, 146), name-range(143, str))]))])
			summon: true
			body: let(
				name-range(156, r)
				call(prefix, name-range(160, my-record), [], [literal("a"), literal("b")])
				seq-ast(
					seq-ast(
						seq-ast(
							call(prefix, name-range(181, foo), [], [r])
							call(prefix, name-range(189, print), [], [call(infix, name-range(198, a), [], [r])]))
						call(prefix, name-range(201, print), [], [call(infix, name-range(210, b), [], [r])]))
					call(prefix, name-range(213, resolved), [], [literal(nat(0, false))]))))])

file-ast(
	imports: ports(range(0, 46), [import-ast(0, "/bootstrap", some([as, void])), import-ast(0, "/io/print", some([print]))])
	specs: []
	aliases: []
	structs: [
		struct(
			range(162, 194)
			true
			[]
			none
			record(
				none
				[
					field(range(180, 185), false, x, inststruct(range(182, 185), name-range(182, nat)))
					field(range(187, 192), false, y, inststruct(range(189, 192), name-range(189, nat)))]))
		struct(
			range(194, 240)
			true
			[]
			none
			record(
				some(by-val-ref(218, by-ref))
				[
					field(range(226, 231), false, x, inststruct(range(228, 231), name-range(228, nat)))
					field(range(233, 238), false, y, inststruct(range(235, 238), name-range(235, nat)))]))
		struct(range(240, 264), true, [], none, record(none, []))
		struct(
			range(264, 308)
			true
			[]
			none
			union(
				[inststruct(range(280, 289), name-range(280, my-record)), inststruct(range(291, 306), name-range(291, my-other-record))]))]
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(
				range(46, 69)
				main
				inststruct(range(51, 58), name-range(51, fut), [inststruct(range(55, 58), name-range(55, nat))])
				[
					param(
						range(59, 68)
						none
						inststruct(range(61, 68), name-range(61, arr), [inststruct(range(65, 68), name-range(65, str))]))])
			summon: true
			body: seq-ast(
				seq-ast(seq-ast(test-compare-records, test-compare-byref-records), test-compare-unions)
				call(prefix, name-range(149, resolved), [], [literal(nat(0, false))])))
		fun-decl(
			public?: true
			sig: sig-ast(range(308, 335), test-compare-records, inststruct(range(329, 333), name-range(329, void)), [])
			summon: true
			body: let(
				name-range(344, a)
				call(prefix, name-range(348, my-record), [], [literal(nat(1, false)), literal(nat(2, false))])
				let(
					name-range(365, b)
					call(prefix, name-range(369, my-record), [], [literal(nat(1, false)), literal(nat(3, false))])
					let(
						name-range(386, c)
						call(prefix, name-range(390, my-record), [], [literal(nat(1, false)), literal(nat(2, false))])
						let(
							name-range(407, d)
							call(prefix, name-range(411, my-record), [], [literal(nat(0, false)), literal(nat(3, false))])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(428, print)
										[]
										[
											call(
												infix
												name-range(443, to-str)
												[]
												[call(infix, name-range(437, <=>), [], [a, b])])])
									call(
										prefix
										name-range(451, print)
										[]
										[
											call(
												infix
												name-range(466, to-str)
												[]
												[call(infix, name-range(460, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(474, print)
									[]
									[
										call(
											infix
											name-range(489, to-str)
											[]
											[call(infix, name-range(483, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(range(497, 530), test-compare-byref-records, inststruct(range(524, 528), name-range(524, void)), [])
			summon: true
			body: let(
				name-range(539, a)
				call(prefix, name-range(543, my-byref-record), [], [literal(nat(1, false)), literal(nat(2, false))])
				let(
					name-range(566, b)
					call(prefix, name-range(570, my-byref-record), [], [literal(nat(1, false)), literal(nat(3, false))])
					let(
						name-range(593, c)
						call(prefix, name-range(597, my-byref-record), [], [literal(nat(1, false)), literal(nat(2, false))])
						let(
							name-range(620, d)
							call(
								prefix
								name-range(624, my-byref-record)
								[]
								[literal(nat(0, false)), literal(nat(3, false))])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(647, print)
										[]
										[
											call(
												infix
												name-range(662, to-str)
												[]
												[call(infix, name-range(656, <=>), [], [a, b])])])
									call(
										prefix
										name-range(670, print)
										[]
										[
											call(
												infix
												name-range(685, to-str)
												[]
												[call(infix, name-range(679, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(693, print)
									[]
									[
										call(
											infix
											name-range(708, to-str)
											[]
											[call(infix, name-range(702, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(range(716, 742), test-compare-unions, inststruct(range(736, 740), name-range(736, void)), [])
			summon: true
			body: let(
				name-range(751, a)
				call(
					prefix
					name-range(755, as)
					[inststruct(range(758, 766), name-range(758, my-union))]
					[call(prefix, name-range(769, my-record), [], [literal(nat(1, false)), literal(nat(2, false))])])
				let(
					name-range(786, b)
					call(prefix, name-range(790, as), [inststruct(range(793, 801), name-range(793, my-union))], [my-other-record])
					let(
						name-range(821, c)
						call(
							prefix
							name-range(825, as)
							[inststruct(range(828, 836), name-range(828, my-union))]
							[call(prefix, name-range(839, my-record), [], [literal(nat(1, false)), literal(nat(2, false))])])
						let(
							name-range(856, d)
							call(
								prefix
								name-range(860, as)
								[inststruct(range(863, 871), name-range(863, my-union))]
								[
									call(
										prefix
										name-range(874, my-record)
										[]
										[literal(nat(1, false)), literal(nat(1, false))])])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(892, print)
										[]
										[
											call(
												infix
												name-range(907, to-str)
												[]
												[call(infix, name-range(901, <=>), [], [a, b])])])
									call(
										prefix
										name-range(915, print)
										[]
										[
											call(
												infix
												name-range(930, to-str)
												[]
												[call(infix, name-range(924, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(938, print)
									[]
									[
										call(
											infix
											name-range(953, to-str)
											[]
											[call(infix, name-range(947, <=>), [], [a, d])])])))))))])

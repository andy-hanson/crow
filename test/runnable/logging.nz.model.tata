module(
	path: 50
	imports: [
		import(none, 35, none)
		import(some(range(8, 18)), 47, some([exit-code]))
		import(some(range(31, 38)), 27, some([get-log-handler, info, log, log-handler, warn, with-log-handler]))]
	exports: []
	structs: []
	specs: []
	funs: [
		fun(
			public?: true
			summon: true
			sig: sig(file-pos(50, 100), main, fut(int32()), [param(file-range(50, range(119, 128)), none, arr(arr(char())))])
			body: seq(
				call(
					fun-inst(name: log)
					[to-union(log-level(), 0, call(fun-inst(name: info), [])), string-lit("Logged once")])
				let(
					local(file-range(50, range(162, 164)), lh, fun1(void(), logged()))
					call(fun-inst(name: get-log-handler), [])
					let(
						local(file-range(50, range(184, 191)), doubler, fun1(void(), logged()))
						call(
							fun-inst(name: as, type-args: [fun1(void(), logged())])
							[
								lambda(
									[param(file-range(50, range(212, 218)), some(logged), logged())]
									seq(
										call(
											fun-inst(name: subscript, type-args: [void(), logged()])
											[closure-rf(lh), param-ref(logged)])
										call(
											fun-inst(name: subscript, type-args: [void(), logged()])
											[closure-rf(lh), param-ref(logged)]))
									[closure-f(lh, fun1(void(), logged()), local-ref(lh))]
									fun1(void(), logged())
									plain
									void())])
						seq(
							seq(
								call(
									fun-inst(name: with-log-handler, type-args: [void()])
									[
										local-ref(doubler)
										lambda(
											[]
											call(
												fun-inst(name: log)
												[
													to-union(log-level(), 1, call(fun-inst(name: warn), []))
													string-lit("Logged twice")])
											[]
											fun-act0(void())
											mut
											void())])
								call(
									fun-inst(name: with-log-handler, type-args: [void()])
									[
										lambda(
											[param(file-range(50, range(300, 302)), some(it), logged())]
											call(fun-inst(name: drop, type-args: [logged()]), [param-ref(it)])
											[]
											fun1(void(), logged())
											plain
											void())
										lambda(
											[]
											call(
												fun-inst(name: log)
												[
													to-union(log-level(), 1, call(fun-inst(name: warn), []))
													string-lit("Logged never")])
											[]
											fun-act0(void())
											mut
											void())]))
							call(fun-inst(name: resolved, type-args: [int32()]), [literal(int32(), 0)]))))))])

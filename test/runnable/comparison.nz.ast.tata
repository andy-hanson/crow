file-ast(
	imports: ports(range(0, 29), [import-ast(0, "/io", some([exit-code, print]))])
	specs: []
	aliases: []
	structs: [
		struct(
			range(29, 61)
			true
			[]
			none
			record(
				none
				[
					field(range(47, 52), false, x, inststruct(range(49, 52), name-range(49, nat)))
					field(range(54, 59), false, y, inststruct(range(56, 59), name-range(56, nat)))]))
		struct(
			range(61, 107)
			true
			[]
			none
			record(
				some(by-val-ref(85, by-ref))
				[
					field(range(93, 98), false, x, inststruct(range(95, 98), name-range(95, nat)))
					field(range(100, 105), false, y, inststruct(range(102, 105), name-range(102, nat)))]))
		struct(range(107, 131), true, [], none, record(none, []))
		struct(
			range(131, 175)
			true
			[]
			none
			union(
				[inststruct(range(147, 156), name-range(147, my-record)), inststruct(range(158, 173), name-range(158, my-other-record))]))]
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(range(175, 202), test-compare-records, inststruct(range(196, 200), name-range(196, void)), [])
			summon: true
			body: let(
				name-range(211, a)
				call(prefix, name-range(215, my-record), [], [literal(nat(1, false)), literal(nat(2, false))])
				let(
					name-range(232, b)
					call(prefix, name-range(236, my-record), [], [literal(nat(1, false)), literal(nat(3, false))])
					let(
						name-range(253, c)
						call(prefix, name-range(257, my-record), [], [literal(nat(1, false)), literal(nat(2, false))])
						let(
							name-range(274, d)
							call(prefix, name-range(278, my-record), [], [literal(nat(0, false)), literal(nat(3, false))])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(295, print)
										[]
										[
											call(
												infix
												name-range(310, to-str)
												[]
												[call(infix, name-range(304, <=>), [], [a, b])])])
									call(
										prefix
										name-range(318, print)
										[]
										[
											call(
												infix
												name-range(333, to-str)
												[]
												[call(infix, name-range(327, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(341, print)
									[]
									[
										call(
											infix
											name-range(356, to-str)
											[]
											[call(infix, name-range(350, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(range(364, 397), test-compare-byref-records, inststruct(range(391, 395), name-range(391, void)), [])
			summon: true
			body: let(
				name-range(406, a)
				call(prefix, name-range(410, my-byref-record), [], [literal(nat(1, false)), literal(nat(2, false))])
				let(
					name-range(433, b)
					call(prefix, name-range(437, my-byref-record), [], [literal(nat(1, false)), literal(nat(3, false))])
					let(
						name-range(460, c)
						call(prefix, name-range(464, my-byref-record), [], [literal(nat(1, false)), literal(nat(2, false))])
						let(
							name-range(487, d)
							call(
								prefix
								name-range(491, my-byref-record)
								[]
								[literal(nat(0, false)), literal(nat(3, false))])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(514, print)
										[]
										[
											call(
												infix
												name-range(529, to-str)
												[]
												[call(infix, name-range(523, <=>), [], [a, b])])])
									call(
										prefix
										name-range(537, print)
										[]
										[
											call(
												infix
												name-range(552, to-str)
												[]
												[call(infix, name-range(546, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(560, print)
									[]
									[
										call(
											infix
											name-range(575, to-str)
											[]
											[call(infix, name-range(569, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(range(583, 609), test-compare-unions, inststruct(range(603, 607), name-range(603, void)), [])
			summon: true
			body: let(
				name-range(618, a)
				call(
					prefix
					name-range(622, as)
					[inststruct(range(625, 633), name-range(625, my-union))]
					[call(prefix, name-range(636, my-record), [], [literal(nat(1, false)), literal(nat(2, false))])])
				let(
					name-range(653, b)
					call(prefix, name-range(657, as), [inststruct(range(660, 668), name-range(660, my-union))], [my-other-record])
					let(
						name-range(688, c)
						call(
							prefix
							name-range(692, as)
							[inststruct(range(695, 703), name-range(695, my-union))]
							[call(prefix, name-range(706, my-record), [], [literal(nat(1, false)), literal(nat(2, false))])])
						let(
							name-range(723, d)
							call(
								prefix
								name-range(727, as)
								[inststruct(range(730, 738), name-range(730, my-union))]
								[
									call(
										prefix
										name-range(741, my-record)
										[]
										[literal(nat(1, false)), literal(nat(1, false))])])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(759, print)
										[]
										[
											call(
												infix
												name-range(774, to-str)
												[]
												[call(infix, name-range(768, <=>), [], [a, b])])])
									call(
										prefix
										name-range(782, print)
										[]
										[
											call(
												infix
												name-range(797, to-str)
												[]
												[call(infix, name-range(791, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(805, print)
									[]
									[
										call(
											infix
											name-range(820, to-str)
											[]
											[call(infix, name-range(814, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(
				range(828, 860)
				main
				inststruct(range(833, 846), name-range(833, fut), [inststruct(range(837, 846), name-range(837, exit-code))])
				[
					param(
						range(847, 859)
						name-range(847, args)
						inststruct(range(852, 859), name-range(852, arr), [inststruct(range(856, 859), name-range(856, str))]))])
			summon: true
			body: seq-ast(
				seq-ast(seq-ast(test-compare-records, test-compare-byref-records), test-compare-unions)
				call(prefix, name-range(940, resolved), [], [literal(nat(0, false))])))])

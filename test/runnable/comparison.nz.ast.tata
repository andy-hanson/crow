file-ast(
	imports: ports(range(0, 34), [import-ast(0, "/io", some([exit-code, print-sync]))])
	specs: []
	aliases: []
	structs: [
		struct(
			range(34, 66)
			true
			[]
			none
			record(
				none
				[
					field(range(52, 57), false, x, inststruct(range(54, 57), name-range(54, nat)))
					field(range(59, 64), false, y, inststruct(range(61, 64), name-range(61, nat)))]))
		struct(
			range(66, 112)
			true
			[]
			none
			record(
				some(by-val-ref(90, by-ref))
				[
					field(range(98, 103), false, x, inststruct(range(100, 103), name-range(100, nat)))
					field(range(105, 110), false, y, inststruct(range(107, 110), name-range(107, nat)))]))
		struct(range(112, 136), true, [], none, record(none, []))
		struct(
			range(136, 180)
			true
			[]
			none
			union(
				[inststruct(range(152, 161), name-range(152, my-record)), inststruct(range(163, 178), name-range(163, my-other-record))]))]
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(range(180, 207), test-compare-records, inststruct(range(201, 205), name-range(201, void)), [])
			summon: true
			body: let(
				name-range(216, a)
				call(prefix, name-range(220, my-record), [], [literal(numeric, "1"), literal(numeric, "2")])
				let(
					name-range(237, b)
					call(prefix, name-range(241, my-record), [], [literal(numeric, "1"), literal(numeric, "3")])
					let(
						name-range(258, c)
						call(prefix, name-range(262, my-record), [], [literal(numeric, "1"), literal(numeric, "2")])
						let(
							name-range(279, d)
							call(prefix, name-range(283, my-record), [], [literal(numeric, "0"), literal(numeric, "3")])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(300, print-sync)
										[]
										[
											call(
												infix
												name-range(320, to-str)
												[]
												[call(infix, name-range(314, <=>), [], [a, b])])])
									call(
										prefix
										name-range(328, print-sync)
										[]
										[
											call(
												infix
												name-range(348, to-str)
												[]
												[call(infix, name-range(342, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(356, print-sync)
									[]
									[
										call(
											infix
											name-range(376, to-str)
											[]
											[call(infix, name-range(370, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(range(384, 417), test-compare-byref-records, inststruct(range(411, 415), name-range(411, void)), [])
			summon: true
			body: let(
				name-range(426, a)
				call(prefix, name-range(430, my-byref-record), [], [literal(numeric, "1"), literal(numeric, "2")])
				let(
					name-range(453, b)
					call(prefix, name-range(457, my-byref-record), [], [literal(numeric, "1"), literal(numeric, "3")])
					let(
						name-range(480, c)
						call(prefix, name-range(484, my-byref-record), [], [literal(numeric, "1"), literal(numeric, "2")])
						let(
							name-range(507, d)
							call(
								prefix
								name-range(511, my-byref-record)
								[]
								[literal(numeric, "0"), literal(numeric, "3")])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(534, print-sync)
										[]
										[
											call(
												infix
												name-range(554, to-str)
												[]
												[call(infix, name-range(548, <=>), [], [a, b])])])
									call(
										prefix
										name-range(562, print-sync)
										[]
										[
											call(
												infix
												name-range(582, to-str)
												[]
												[call(infix, name-range(576, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(590, print-sync)
									[]
									[
										call(
											infix
											name-range(610, to-str)
											[]
											[call(infix, name-range(604, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(range(618, 644), test-compare-unions, inststruct(range(638, 642), name-range(638, void)), [])
			summon: true
			body: let(
				name-range(653, a)
				call(
					prefix
					name-range(657, as)
					[inststruct(range(660, 668), name-range(660, my-union))]
					[call(prefix, name-range(671, my-record), [], [literal(numeric, "1"), literal(numeric, "2")])])
				let(
					name-range(688, b)
					call(prefix, name-range(692, as), [inststruct(range(695, 703), name-range(695, my-union))], [my-other-record])
					let(
						name-range(723, c)
						call(
							prefix
							name-range(727, as)
							[inststruct(range(730, 738), name-range(730, my-union))]
							[call(prefix, name-range(741, my-record), [], [literal(numeric, "1"), literal(numeric, "2")])])
						let(
							name-range(758, d)
							call(
								prefix
								name-range(762, as)
								[inststruct(range(765, 773), name-range(765, my-union))]
								[
									call(
										prefix
										name-range(776, my-record)
										[]
										[literal(numeric, "1"), literal(numeric, "1")])])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(794, print-sync)
										[]
										[
											call(
												infix
												name-range(814, to-str)
												[]
												[call(infix, name-range(808, <=>), [], [a, b])])])
									call(
										prefix
										name-range(822, print-sync)
										[]
										[
											call(
												infix
												name-range(842, to-str)
												[]
												[call(infix, name-range(836, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(850, print-sync)
									[]
									[
										call(
											infix
											name-range(870, to-str)
											[]
											[call(infix, name-range(864, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(
				range(878, 910)
				main
				inststruct(range(883, 896), name-range(883, fut), [inststruct(range(887, 896), name-range(887, exit-code))])
				[
					param(
						range(897, 909)
						name-range(897, args)
						inststruct(range(902, 909), name-range(902, arr), [inststruct(range(906, 909), name-range(906, str))]))])
			summon: true
			body: seq-ast(
				seq-ast(seq-ast(test-compare-records, test-compare-byref-records), test-compare-unions)
				call(prefix, name-range(990, resolved), [], [literal(numeric, "0")])))])

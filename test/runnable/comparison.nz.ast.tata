file-ast(
	imports: ports(range(0, 34), [import-ast(0, "/io", some([exit-code, print-sync]))])
	specs: []
	aliases: []
	structs: [
		struct(
			range(34, 66)
			true
			[]
			none
			record(
				none
				[
					field(range(52, 57), false, x, inststruct(range(54, 57), name-range(54, nat)))
					field(range(59, 64), false, y, inststruct(range(61, 64), name-range(61, nat)))]))
		struct(
			range(66, 112)
			true
			[]
			none
			record(
				some(by-val-ref(90, by-ref))
				[
					field(range(98, 103), false, x, inststruct(range(100, 103), name-range(100, nat)))
					field(range(105, 110), false, y, inststruct(range(107, 110), name-range(107, nat)))]))
		struct(range(112, 136), true, [], none, record(none, []))
		struct(
			range(136, 180)
			true
			[]
			none
			union(
				[inststruct(range(152, 161), name-range(152, my-record)), inststruct(range(163, 178), name-range(163, my-other-record))]))]
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(range(180, 207), test-compare-records, inststruct(range(201, 205), name-range(201, void)), [])
			summon: true
			body: let(
				name-range(216, a)
				new-record(
					some(inststruct(range(224, 233), name-range(224, my-record)))
					[literal(numeric, "1"), literal(numeric, "2")])
				let(
					name-range(241, b)
					new-record(
						some(inststruct(range(249, 258), name-range(249, my-record)))
						[literal(numeric, "1"), literal(numeric, "3")])
					let(
						name-range(266, c)
						new-record(
							some(inststruct(range(274, 283), name-range(274, my-record)))
							[literal(numeric, "1"), literal(numeric, "2")])
						let(
							name-range(291, d)
							new-record(
								some(inststruct(range(299, 308), name-range(299, my-record)))
								[literal(numeric, "0"), literal(numeric, "3")])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(316, print-sync)
										[]
										[
											call(
												infix
												name-range(336, to-str)
												[]
												[call(infix, name-range(330, <=>), [], [a, b])])])
									call(
										prefix
										name-range(344, print-sync)
										[]
										[
											call(
												infix
												name-range(364, to-str)
												[]
												[call(infix, name-range(358, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(372, print-sync)
									[]
									[
										call(
											infix
											name-range(392, to-str)
											[]
											[call(infix, name-range(386, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(range(400, 433), test-compare-byref-records, inststruct(range(427, 431), name-range(427, void)), [])
			summon: true
			body: let(
				name-range(442, a)
				new-record(
					some(inststruct(range(450, 465), name-range(450, my-byref-record)))
					[literal(numeric, "1"), literal(numeric, "2")])
				let(
					name-range(473, b)
					new-record(
						some(inststruct(range(481, 496), name-range(481, my-byref-record)))
						[literal(numeric, "1"), literal(numeric, "3")])
					let(
						name-range(504, c)
						new-record(
							some(inststruct(range(512, 527), name-range(512, my-byref-record)))
							[literal(numeric, "1"), literal(numeric, "2")])
						let(
							name-range(535, d)
							new-record(
								some(inststruct(range(543, 558), name-range(543, my-byref-record)))
								[literal(numeric, "0"), literal(numeric, "3")])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(566, print-sync)
										[]
										[
											call(
												infix
												name-range(586, to-str)
												[]
												[call(infix, name-range(580, <=>), [], [a, b])])])
									call(
										prefix
										name-range(594, print-sync)
										[]
										[
											call(
												infix
												name-range(614, to-str)
												[]
												[call(infix, name-range(608, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(622, print-sync)
									[]
									[
										call(
											infix
											name-range(642, to-str)
											[]
											[call(infix, name-range(636, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(range(650, 676), test-compare-unions, inststruct(range(670, 674), name-range(670, void)), [])
			summon: true
			body: let(
				name-range(685, a)
				call(
					prefix
					name-range(689, as)
					[inststruct(range(692, 700), name-range(692, my-union))]
					[
						new-record(
							some(inststruct(range(707, 716), name-range(707, my-record)))
							[literal(numeric, "1"), literal(numeric, "2")])])
				let(
					name-range(724, b)
					call(
						prefix
						name-range(728, as)
						[inststruct(range(731, 739), name-range(731, my-union))]
						[new-record(some(inststruct(range(746, 761), name-range(746, my-other-record))), [])])
					let(
						name-range(764, c)
						call(
							prefix
							name-range(768, as)
							[inststruct(range(771, 779), name-range(771, my-union))]
							[
								new-record(
									some(inststruct(range(786, 795), name-range(786, my-record)))
									[literal(numeric, "1"), literal(numeric, "2")])])
						let(
							name-range(803, d)
							call(
								prefix
								name-range(807, as)
								[inststruct(range(810, 818), name-range(810, my-union))]
								[
									new-record(
										some(inststruct(range(825, 834), name-range(825, my-record)))
										[literal(numeric, "1"), literal(numeric, "1")])])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(843, print-sync)
										[]
										[
											call(
												infix
												name-range(863, to-str)
												[]
												[call(infix, name-range(857, <=>), [], [a, b])])])
									call(
										prefix
										name-range(871, print-sync)
										[]
										[
											call(
												infix
												name-range(891, to-str)
												[]
												[call(infix, name-range(885, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(899, print-sync)
									[]
									[
										call(
											infix
											name-range(919, to-str)
											[]
											[call(infix, name-range(913, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(
				range(927, 959)
				main
				inststruct(range(932, 945), name-range(932, fut), [inststruct(range(936, 945), name-range(936, exit-code))])
				[
					param(
						range(946, 958)
						name-range(946, args)
						inststruct(range(951, 958), name-range(951, arr), [inststruct(range(955, 958), name-range(955, str))]))])
			summon: true
			body: seq-ast(
				seq-ast(seq-ast(test-compare-records, test-compare-byref-records), test-compare-unions)
				call(prefix, name-range(1039, resolved), [], [literal(numeric, "0")])))])

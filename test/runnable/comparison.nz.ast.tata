file-ast(
	imports: ports(range(0, 10), [import-ast(0, "/io", none)])
	specs: []
	aliases: []
	structs: [
		struct(
			range(11, 43)
			true
			[]
			none
			record(
				none
				[
					field(range(29, 34), false, x, inststruct(range(31, 34), name-range(31, nat)))
					field(range(36, 41), false, y, inststruct(range(38, 41), name-range(38, nat)))]))
		struct(
			range(43, 89)
			true
			[]
			none
			record(
				some(by-val-ref(67, by-ref))
				[
					field(range(75, 80), false, x, inststruct(range(77, 80), name-range(77, nat)))
					field(range(82, 87), false, y, inststruct(range(84, 87), name-range(84, nat)))]))
		struct(range(89, 113), true, [], none, record(none, []))
		struct(
			range(113, 157)
			true
			[]
			none
			union(
				[inststruct(range(129, 138), name-range(129, my-record)), inststruct(range(140, 155), name-range(140, my-other-record))]))]
	funs: [
		fun-decl(
			public?: true
			sig: sig-ast(range(157, 184), test-compare-records, inststruct(range(178, 182), name-range(178, void)), [])
			summon: true
			body: let(
				name-range(193, a)
				new-record(
					some(inststruct(range(201, 210), name-range(201, my-record)))
					[literal(numeric, "1"), literal(numeric, "2")])
				let(
					name-range(218, b)
					new-record(
						some(inststruct(range(226, 235), name-range(226, my-record)))
						[literal(numeric, "1"), literal(numeric, "3")])
					let(
						name-range(243, c)
						new-record(
							some(inststruct(range(251, 260), name-range(251, my-record)))
							[literal(numeric, "1"), literal(numeric, "2")])
						let(
							name-range(268, d)
							new-record(
								some(inststruct(range(276, 285), name-range(276, my-record)))
								[literal(numeric, "0"), literal(numeric, "3")])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(293, print-sync)
										[]
										[
											call(
												infix
												name-range(313, to-str)
												[]
												[call(infix, name-range(307, <=>), [], [a, b])])])
									call(
										prefix
										name-range(321, print-sync)
										[]
										[
											call(
												infix
												name-range(341, to-str)
												[]
												[call(infix, name-range(335, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(349, print-sync)
									[]
									[
										call(
											infix
											name-range(369, to-str)
											[]
											[call(infix, name-range(363, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(range(377, 410), test-compare-byref-records, inststruct(range(404, 408), name-range(404, void)), [])
			summon: true
			body: let(
				name-range(419, a)
				new-record(
					some(inststruct(range(427, 442), name-range(427, my-byref-record)))
					[literal(numeric, "1"), literal(numeric, "2")])
				let(
					name-range(450, b)
					new-record(
						some(inststruct(range(458, 473), name-range(458, my-byref-record)))
						[literal(numeric, "1"), literal(numeric, "3")])
					let(
						name-range(481, c)
						new-record(
							some(inststruct(range(489, 504), name-range(489, my-byref-record)))
							[literal(numeric, "1"), literal(numeric, "2")])
						let(
							name-range(512, d)
							new-record(
								some(inststruct(range(520, 535), name-range(520, my-byref-record)))
								[literal(numeric, "0"), literal(numeric, "3")])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(543, print-sync)
										[]
										[
											call(
												infix
												name-range(563, to-str)
												[]
												[call(infix, name-range(557, <=>), [], [a, b])])])
									call(
										prefix
										name-range(571, print-sync)
										[]
										[
											call(
												infix
												name-range(591, to-str)
												[]
												[call(infix, name-range(585, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(599, print-sync)
									[]
									[
										call(
											infix
											name-range(619, to-str)
											[]
											[call(infix, name-range(613, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(range(627, 653), test-compare-unions, inststruct(range(647, 651), name-range(647, void)), [])
			summon: true
			body: let(
				name-range(662, a)
				call(
					prefix
					name-range(666, as)
					[inststruct(range(669, 677), name-range(669, my-union))]
					[
						new-record(
							some(inststruct(range(684, 693), name-range(684, my-record)))
							[literal(numeric, "1"), literal(numeric, "2")])])
				let(
					name-range(701, b)
					call(
						prefix
						name-range(705, as)
						[inststruct(range(708, 716), name-range(708, my-union))]
						[new-record(some(inststruct(range(723, 738), name-range(723, my-other-record))), [])])
					let(
						name-range(741, c)
						call(
							prefix
							name-range(745, as)
							[inststruct(range(748, 756), name-range(748, my-union))]
							[
								new-record(
									some(inststruct(range(763, 772), name-range(763, my-record)))
									[literal(numeric, "1"), literal(numeric, "2")])])
						let(
							name-range(780, d)
							call(
								prefix
								name-range(784, as)
								[inststruct(range(787, 795), name-range(787, my-union))]
								[
									new-record(
										some(inststruct(range(802, 811), name-range(802, my-record)))
										[literal(numeric, "1"), literal(numeric, "1")])])
							seq-ast(
								seq-ast(
									call(
										prefix
										name-range(820, print-sync)
										[]
										[
											call(
												infix
												name-range(840, to-str)
												[]
												[call(infix, name-range(834, <=>), [], [a, b])])])
									call(
										prefix
										name-range(848, print-sync)
										[]
										[
											call(
												infix
												name-range(868, to-str)
												[]
												[call(infix, name-range(862, <=>), [], [a, c])])]))
								call(
									prefix
									name-range(876, print-sync)
									[]
									[
										call(
											infix
											name-range(896, to-str)
											[]
											[call(infix, name-range(890, <=>), [], [a, d])])])))))))
		fun-decl(
			public?: true
			sig: sig-ast(
				range(904, 936)
				main
				inststruct(range(909, 922), name-range(909, fut), [inststruct(range(913, 922), name-range(913, exit-code))])
				[
					param(
						range(923, 935)
						name-range(923, args)
						inststruct(range(928, 935), name-range(928, arr), [inststruct(range(932, 935), name-range(932, str))]))])
			summon: true
			body: seq-ast(
				seq-ast(seq-ast(test-compare-records, test-compare-byref-records), test-compare-unions)
				call(prefix, name-range(1016, resolved), [], [literal(numeric, "0")])))])

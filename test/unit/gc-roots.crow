import
	../../include/crow/private/alloc: for-loop, gc-roots

dummy-gc-roots nat()
	0

-r record(x mut nat) by-ref, mut
-r2 record(x r, y r) by-ref, mut

-use void(_ r)
	()

-count-roots nat() unsafe
	res mut nat = 0
	for _ : gc-roots
		res +:= 1
	res

# Doesn't add roots without 'yield-fiber'
test trusted
	start = count-roots
	r r = 1,
	count-roots is start
	r use
test trusted
	start = count-roots
	r r = 1,
	yield-fiber
	count-roots is start + 1
	r use

# Adds a root for each argument to a call
test trusted
	start = count-roots
	res = start f2 start.f0, start.f1
	count-roots is start + 1
	yield-fiber
	res.x is 3
# Same for create record
test trusted
	start = count-roots
	res r2 = start.f0, start.f1
	count-roots is start + 1
	yield-fiber
	res.x use
# Same for create array
test trusted
	start = count-roots
	res r array = start.f0, start.f1
	count-roots is start + 1
	yield-fiber
	res[0] use
# Same for record field set
test trusted
	start = count-roots
	(1,).x := do
		count-roots is start + 1
		yield-fiber
		2
-f0 r(start nat) unsafe
	count-roots is start
	1,
-f1 r(start nat) unsafe
	# The result of 'f0' is on the stack at this point
	count-roots is start + 1
	yield-fiber
	2,
-f2 r(start nat, a r, b r) unsafe
	count-roots is start + 2
	yield-fiber
	a.x + b.x,

# 'try-let' restores gc-root
test trusted
	start = count-roots
	r r = 1,
	count-roots is start + 1
	yield-fiber
	try r2 r = 1 / 0, catch divide-by-0 : do
		count-roots is start + 1
	r use
	r2 use
	should-throw

# 'finally' block has correct gc-root
test trusted
	ran-finally mut = false
	try
		start = count-roots
		r r = 1,
		yield-fiber
		count-roots is start + 1
		finally do
			count-roots is start + 1
			r use
			ran-finally := true
		r2 r = 2,
		yield-fiber
		count-roots is start + 2
		_ nat = 1 / 0
		r2 use
		should-throw
	catch divide-by-0
		assert ran-finally

# 'catch' restores gc-root
test trusted
	start = count-roots
	try
		count-roots is start
		r r = 1,
		count-roots is start + 1
		yield-fiber
		throw divide-by-0
		r use
	catch divide-by-0
		count-roots is start
	()

# 'catch-all' restores gc-root
test trusted
	start = count-roots
	f void mut() = () =>
		# There are some roots internal to 'catch-all'
		count-roots is start + 5
		r r = 1,
		count-roots is start + 6
		yield-fiber
		throw divide-by-0
		r use
	count-roots is start + 1
	match f catch-all
	as ok _
		unreachable
	as error e
		count-roots is start + 1
		forbid e.exception.divide-by-0.is-empty

# Closure field set handles roots
test trusted
	start = count-roots
	x mut nat[] = (),
	f void mut() = () =>
		count-roots is start + 6
		x := start blah
	# It redundantly adds roots for 'x' and the reference to it used by the closure
	count-roots is start + 3
	f[]
	count-roots is start + 3
	x is (1,)
-blah nat[](start nat) trusted
	count-roots is start + 7
	yield-fiber
	1,

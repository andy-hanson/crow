import
	../../include/crow/private/future-low-level: as-future, as-future-impl, future-impl, is-completed, resolve, unresolved

dummy-parallel nat()
	0

# Test future awaited by multiple fibers at once
test native extern # TODO: get working in JS -----------------------------------------------------------------------------------------------------------------
	f nat future = with : later
		1
	a0 nat future = with : parallel
		f.await + 1
	a1 nat future = with : parallel
		f.await + 2
	a0.await is 2
	a1.await is 3

# This tests 'shared-of-mut-lambda', which the compiler uses to implement 'shared' lambdas.
test
	out nat mut[] = ()
	f void shared(x nat) = shared x =>
		out ~= x
		()
	for x : 0::nat .. 10 parallel
		f[x]
	out.move-to.sort::nat[] is for x : 0::nat .. 10; x
	()

test trusted, native extern # TODO: get working in JS -----------------------------------------------------------------------------------------------------------------
	a nat future-impl = unresolved
	b nat future-impl = unresolved
	both (nat, nat) future = with : parallel
		a.as-future.await, b.as-future.await
	a resolve 1
	forbid both.as-future-impl is-completed
	b resolve 2
	both.await is (1, 2)
	()

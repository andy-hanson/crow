import
	crow/js: as-js, cast, eval, subscript

dummy-exceptions nat()
	0

# Unlike 'finally' and 'try' with a block, 'try =' should work in a loop.
test
	n mut nat = 4
	results nat mut[] = ()
	loop
		try res nat = 12 / n catch divide-by-0 : break
		results ~= res
		n -:= 1
		continue
	n is 0
	results.to::nat[] is (3, 4, 6, 12)

test
	n nat? = do
		try x nat = 1 / 0 catch divide-by-0
		x + 1,
	n is ()

test
	try
		finally throw "thrown second" error
		throw "thrown first" error
	catch error e
		e.describe is "thrown second"

# Test that yielding the fiber does not break exception handling
test
	xs nat mut[] = ()
	try
		xs ~= 1
		yield-fiber
		xs ~= 2
		xs ~= 3 / 0
	catch divide-by-0
		xs ~= 4
	xs.to::nat[] is (1, 2, 4)

test
	(() => 6 / 2).catch-all.ok!::nat is 3
	assert (() => 1::nat / 0).catch-all.error!.exception is-divide-by-0
-is-divide-by-0 bool(a exception)
	if _ ?= a divide-by-0
		true

test trusted, js extern
	error = (() => "throw 0" eval).catch-all.error!
	exception = error exception
	exception.describe is "Threw a non-exception value 0"
	exception.as-js["message"].cast::string is "Threw a non-exception value 0"
	assert "{error}"::string starts-with "Error: Threw a non-exception value 0"

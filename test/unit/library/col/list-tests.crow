import
	../../../../include/crow/col/private/list-low-level:
		array2d, array3d, arrays, down, l1, l2, l3, left, node, nodes, right, root, total-size

dummy-list-tests nat64()
	0

-verify[t] void(a t[], expected string) t equal, (json, t) to, (string, t) to
	a.dbg is expected
	a.size is a.root.check-structure

	(for x : a; x)::t[] is a

	a-array t array = a to

	iter mut = a begin
	for index : 0::nat64 .. a.size
		iter.next-index is index
		a.begin slice iter is a-array[0 .. index].to
		iter slice a.end is a-array[index .. end].to
		next-pair = iter.next!
		next-pair.a is a[index]
		iter := next-pair b
	iter.next-index is a.size
	assert iter.next is-empty

	iter := a end
	for index : 0::nat64 .. a.size reversed
		prev-pair = iter.prev!
		iter := prev-pair a
		prev-pair.b is a[index]
		iter.next-index is index
		a.begin slice iter is a-array[0 .. iter.next-index].to
		iter slice a.end is a-array[iter.next-index .. end].to
	iter.next-index is 0
	assert iter.prev is-empty

	for i : 0::nat64 .. a.size
		for j : i .. a.size
			a[i .. j] is a-array[i .. j].to

-dbg[t] spec
	dbg string(a t)
-dbg[t] string(a t[]) (string, t) to
	a.root.node dbg-node
-dbg[t] string(a t l2) (string, t) to
	a.node dbg-node
-dbg[t] string(a t l3) (string, t) to
	a.nodes dbg
-dbg-node[leaf, lower] string(a (leaf, lower) node) leaf dbg, lower dbg
	match a
	as leaf l
		l dbg
	as branch b
		"({b.left dbg} {b.down dbg} {b.right dbg})"
-dbg[t] string(a t array) (string, t) to
	parts = " " join for x : a; "{x}"
	"[{parts}]"
-dbg[t] string(a t array2d) (string, t) to
	parts = " " join for x : a arrays; x dbg
	"[{parts}]"
-dbg[t] string(a t array3d) (string, t) to
	parts = " " join for x : a arrays; x dbg
	"[{parts}]"

-check-structure[t] nat64(a t l1)
	match a node
	as leaf xs
		xs size
	as branch b
		forbid b.left is-empty
		forbid b.right is-empty
		b.left.size + b.down.check-structure + b.right.size

-check-structure[t] nat64(a t l2)
	match a node
	as leaf xs
		xs check-structure
	as branch b
		b.left.check-structure + b.down.nodes.check-structure + b.right.check-structure

-check-structure[t] nat64(a t array2d)
	acc mut nat64 = 0
	for a1d : a arrays
		forbid a1d is-empty
		acc +:= a1d size
	assert acc == a.total-size
	acc

-check-structure[t] nat64(a t array3d)
	# TODO: check total-size is accurate
	acc mut nat64 = 0
	for a2d : a arrays
		forbid a2d.arrays is-empty
		acc +:= a2d check-structure
	assert acc == a.total-size
	acc

test
	a nat64[] = ()
	b nat64[] = 1 ~ a
	b verify "[1]"

test
	a big-nat[] = 1.big, 2.big, 3.big, 4.big
	a verify "[1 2 3 4]"
	a ~~ () verify "[1 2 3 4]"
	()::big-nat[] ~~ a verify "[1 2 3 4]"

test
	a nat64[] = 1, 2, 3, 4, 5, 6, 7, 8
	a verify "[1 2 3 4 5 6 7 8]"
	b nat64[] = 1 ~ a
	b verify "([1] [] [1 2 3 4 5 6 7 8])"
	c nat64[] = (8, 7, 6, 5, 4, 3, 2) ~~ b
	c verify "([8 7 6 5 4 3 2 1] [] [1 2 3 4 5 6 7 8])"
	d nat64[] = 9 ~ c
	d verify "([9] [[8 7 6 5 4 3 2 1]] [1 2 3 4 5 6 7 8])"
	e = d ~~ (1, 2, 3, 4, 5)
	e verify "([9] [[8 7 6 5 4 3 2 1] [1 2 3 4 5 6 7 8]] [1 2 3 4 5])"

test
	a nat64[] = 1, 2, 3, 4, 5
	a verify "[1 2 3 4 5]"
	b = a ~~ (9, 8, 7, 6)
	b verify "([1 2 3 4 5] [] [9 8 7 6])"
	c = b ~~ b
	s string = "[9 8 7 6 1 2 3 4 5]"
	c verify "([1 2 3 4 5] [{s}] [9 8 7 6])"
	d = c ~~ c
	d verify "([1 2 3 4 5] [{s} {s} {s}] [9 8 7 6])"
	e = d ~~ d
	e verify if trusted extern native
		"([1 2 3 4 5] ([{s} {s} {s} {s}] [] [{s} {s} {s}]) [9 8 7 6])"
	else
		"([1 2 3 4 5] [{s} {s} {s} {s} {s} {s} {s}] [9 8 7 6])"

# use a big type to force smaller leaves for easier testing
-big-nat record(a nat64, b nat64, c nat64) by-val

-== bool(a big-nat, b big-nat)
	a.a == b.a && a.b == b.b && a.c == b.c

-big big-nat(a nat64)
	a, a, a

-to json(a big-nat)
	a.a to

-to string(a big-nat)
	"{a a}"

test
	js bool = trusted extern js
	trusted if extern native
		size-of@big-nat is 24
	a big-nat[] = 5.big, 6.big
	b big-nat[] = 4.big ~ a
	b verify (js ? "[4 5 6]" : "([4] [] [5 6])")

	b-split = (b try-split-once (5.big,))!
	b-split.a verify "[4]"
	b-split.b verify "[6]"

	c big-nat[] = b ~ 7.big
	c verify (js ? "[4 5 6 7]" : "([4] [[5 6]] [7])")

	c-split = (c try-split-once (5.big,))!
	c-split.a verify "[4]"
	c-split.b verify "[6 7]"

	d big-nat[] = c ~ 8.big ~ 9.big ~ 10.big ~ 11.big
	d verify (js ? "[4 5 6 7 8 9 10 11]" : "([4] [[5 6] [7 8] [9 10]] [11])")

	d-split = (d try-split-once (6.big, 7.big))!
	d-split.a verify "[4 5]"
	d-split.b verify (js ? "[8 9 10 11]" : "([8] [[9 10]] [11])")

	e big-nat[] = 0.big ~ (1.big ~ (2.big ~ (3.big ~ d)))
	e verify (js ? "([0 1 2 3] [] [4 5 6 7 8 9 10 11])" : "([0] ([[1 2]] [] [[3 4] [5 6] [7 8] [9 10]]) [11])")
	f big-nat[] = e ~ 12.big ~ 13.big
	f verify (js ? "([0 1 2 3] [[4 5 6 7 8 9 10 11]] [12 13])" : "([0] ([[1 2]] [[[3 4] [5 6] [7 8] [9 10]]] [[11 12]]) [13])")

	f-split = (f try-split-once (4.big, 5.big))!
	f-split.a verify (js ? "[0 1 2 3]" : "([0] [[1 2]] [3])")
	f-split.b verify (js ? "[6 7 8 9 10 11 12 13]" : "([6] [[7 8] [9 10] [11 12]] [13])")

test
	a nat64[] = 1, 2, 3, 4, 5, 6, 7
	a groups-of 3 is ((1, 2, 3), (4, 5, 6), (7,))

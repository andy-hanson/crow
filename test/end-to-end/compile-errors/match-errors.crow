main void()
	info log match x
	as x
		"first"
	as x
		"second"
	else
		"else"

	info log try
		"{1::nat / 0}"
	catch divide-by-0
		"divided by 0"
	catch divide-by-0
		"again"

v variant
x record v variant-member

f[t] nat(a t)
	match a
	as x
		1

f nat()
	bogus = asdf
	match bogus
	as x
		1

u union
	m
	n nat

e enum
	m
	n

invalid-variable nat(a u)
	match a
	as m x
		x
	as n
		2

invalid-variable nat(a e)
	match a
	as m x
		1
	as n
		2

invalid-variable nat(a symbol)
	match a
	as m x
		1
	else
		2

missing-case nat(a u)
	match a
	as n
		1

missing-case nat(a e)
	match a
	as n
		1

invalid-symbol nat(a symbol)
	match a
	as 42
		1

invalid-char nat(a char32)
	match a
	as "foo"
		1

invalid-number nat(a nat)
	match a
	as "42"
		1

duplicate-branch nat(a u)
	match a
	as m
		1
	as n _
		2
	as m
		3

duplicate-branch nat(a e)
	match a
	as m
		1
	as n
		2
	as m
		3

duplicate-branch nat(a symbol)
	match a
	as "foo"
		1
	as "fo\x6f"
		2
	else
		3

duplicate-branch nat(a char32)
	match a
	as "o"
		1
	as "\x6f"
		2
	else
		3

duplicate-branch nat(a nat)
	match a
	as 16
		1
	as 0x10
		2
	else
		3

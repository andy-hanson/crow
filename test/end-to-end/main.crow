#!/usr/bin/env crow
import
	crow/io/file: each-child-recursive, read-file-or-empty, write-file
	crow/io/path: base-name, child-path, get-extension
	crow/io/print: err, out, print
	crow/io/process: exit, has-error, process-result, spawn-and-wait-result, stderr, stdout
	crow/parse-command: parse-named-args
	crow/version: is-windows
	../failure

main nat(args string[]) summon, native extern
	if values ?= args parse-named-args ("print-tests", "overwrite-output", "include-jit", "match")
		print-tests-strs, overwrite-output-strs, include-jit-strs, match-test-strs = \
			values as-tuple4
		should-print-tests = !print-tests-strs.is-empty
		include-jit = !include-jit-strs.is-empty
		overwrite-output = if strs ?= overwrite-output-strs
			assert strs is-empty
			true
		match-test = if strs ?= match-test-strs
			assert strs.size == 1
			strs[0]
		(should-print-tests, overwrite-output, include-jit, match-test) do-test
	else
		print-help
		1

-as-tuple4[t] (t, t, t, t)(a t[])
	assert a.size == 4
	a[0], a[1], a[2], a[3]

-print-help void() summon
	out print """test -- runs tests
options:
	--print-tests: Print every test before it runs.
	--overwrite-output: Overwrite '.out' files instead of failing
	--match [STR]: Print tests that have STR in the name.
"""

-test-options record(print-tests bool, overwrite-output bool, include-jit bool, match-test string)

-do-test nat(options test-options) summon, native extern
	crow-dir string = "."
	paths string[] = for name : ("parse-errors", "compile-errors", "runnable")::string[]
		"./test/end-to-end" child-path name
	path-to-crow = crow-dir crow-path
	tests = for path : paths parallel-concat-non-windows
		path list-tests options.match-test
	failures failure[] = for x : tests parallel-concat-non-windows
		path-to-crow run-single-crow-test x, options
	if failures is-empty
		out print "Ran {tests size} crow tests"
		0
	else
		err print failures.show-failures
		failures size

-parallel-concat-non-windows[t] record(col t[]) nominal
-for-loop[out, in] out[](
	a in parallel-concat-non-windows,
	f out[] shared(x in),
) out shared, in shared
	if trusted is-windows
		for x : a.col and-concat
			f[x]
	else
		a.col.parallel-concat for-loop f

-crow-path string(crow-dir string)
	crow-dir child-path "bin" child-path "crow" ~~ (trusted is-windows ? ".exe" : "")

-list-tests string[](path string, match-test string) summon, native extern
	res string mut[] = ()
	path each-child-recursive child =>
		if child contains-seq match-test && child.ext-is-crow && !child.is-excluded
			res ~= child
	res move-to

# Some tests have different output on Windows
-is-excluded bool(a string)
	if trusted is-windows
		a ends-with "/fail.crow"

-ext-is-crow bool(a string)
	if ext ?= a.base-name get-extension
		ext == "crow"

-run-single-crow-test failure[](path-to-crow string, path string, options test-options) summon, native extern
	overwrite = options overwrite-output
	if options print-tests
		out print "crow run {path}"
	interpret-failures = path-to-crow run-single path, interpret, overwrite
	jit-failures = if options.include-jit && interpret-failures.is-empty && !overwrite
		path-to-crow run-single path, jit, overwrite
	else
		interpret-failures
	if jit-failures.is-empty && !overwrite
		path-to-crow run-single path, aot, overwrite
	else
		jit-failures

run-kind enum(interpret, jit, aot)

-run-single failure[](
	path-to-crow string,
	path string,
	run-kind run-kind,
	overwrite-output bool,
) summon, native extern
	args string[] = match run-kind
	as interpret
		"run", path
	as jit
		"run", path, "--jit"
	as aot
		"run", path, "--aot"
	info log "{path-to-crow} {" " join args}"
	res = path-to-crow spawn-and-wait-result args
	path handle-output "{path}.out", res.format-output, overwrite-output

-format-output string(a process-result)
	if a has-error
		exit-code = match a exit
		as exited x
			x
		as signaled x
			x
		exit-string string = exit-code != 0 && exit-code != 1 ? "big" : "{exit-code}"
		"exit code: {exit-string}\n{a format-stdout-stderr}"
	else
		a.stdout remove-colors

-format-stdout-stderr string(a process-result)
	stdout string = a.stdout == "" ? "" : "stdout:\n{a.stdout remove-colors}"
	"{stdout}stderr:\n{a.stderr.remove-colors normalize-exceptions}"

-remove-colors string(a string)
	if pair ?= a try-split-once "\x1b"
		pair.a ~~ if pair2 ?= pair.b try-split-once "m"
			pair2.b remove-colors
	else
		a

# Interpreter has more exception info than JIT. Remove extra info so they are the same.
-normalize-exceptions string(a string)
	a update-lines line =>
		# TODO: use a function from parse.crow for this
		if rest ?= line try-remove-start "\tat "
			# Printed function names differ, so just take the name
			# (In JIT hyphens print as '__s', so don't take hyphens)
			name = rest take-while x => x is-letter
			normalized-name string = name != "pthread" ? name
			normalized-name == "" ? () : ("\tat {normalized-name}",)
		else
			line,

-update-lines string(a string, cb string[] data(line string))
	"\n" join with out : build
		for line : a split "\n"
			for new-line : cb[line]
				out ~= new-line

-is-letter bool(a char32)
	# TODO: support other alphabets
	a.to::nat32 in "a"::char32.to .. "z".to

-handle-output failure[](
	original-path string,
	output-path string,
	actual string,
	overwrite-output bool,
) summon, native extern
	text string = output-path read-file-or-empty
	if actual.normalize-newlines == text.normalize-newlines
		()
	elif overwrite-output
		output-path write-file actual
		()
	else
		(original-path, "{output-path} was not as expected. Actual:\n{actual}"),

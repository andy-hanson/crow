#!/usr/bin/env crow

import
	io.environ: get-environ
	io.path: child-path, parent-path
	io.print: print
	parse-command: parse-named-args
	.failure: first-failures, print-failures, test-options
	.lint: lint
	.crow-tests: run-crow-tests

main fut nat(args arr str) summon
	option-names = ["print-tests", "overwrite-output", "max-failures", "match"]
	resolved: if values ?= args parse-named-args option-names
		print-tests-strs = values[0]
		overwrite-output-strs = values[1]
		max-failures-strs = values[2]
		match-test-strs = values[3]
		print-tests? = print-tests-strs has?
		overwrite-output? = if strs ?= overwrite-output-strs
			# TODO: handle it..
			assert: strs empty?
			true
		else
			false
		max-failures = if strs ?= max-failures-strs
			assert: strs.size == 1
			strs[0].parse-nat force
		else
			100
		match-test = if strs ?= match-test-strs
			assert: strs.size == 1
			strs[0]
		else
			""
		do-test: test-options: print-tests?, overwrite-output?, max-failures, match-test
	else
		print-help
		1

.print-help void() summon
	print: "test -- runs tests"
	print: "options:"
	print: "\t--print-tests: print every test run"
	print: "\t--max-failures: stop after this many failures. Defaults to 10."

.do-test nat(options test-options) summon
	test-path = "./test"
	crow-path = test-path parent-path
	crow-exe = crow-path child-path "bin" child-path "crow"
	env = get-environ

	crow-failures = test-path child-path "parse-errors" run-crow-tests crow-exe, env, options first-failures () =>
		test-path child-path "compile-errors" run-crow-tests crow-exe, env, options first-failures () =>
			test-path child-path "runnable" run-crow-tests crow-exe, env, options
	all-failures = crow-failures first-failures () => crow-path lint options
	all-failures print-failures options

import
	crow/io/path: child-path, parent-path
	crow/io/print: out, print
	crow/parse-command: parse-named-args
	crow/reader: parse-nat
	crow/version: is-windows
	./failure: first-failures, new, print-failures, test-options
	./lint: lint
	./crow-tests: run-crow-tests

main fut nat(args array str) summon
	option-names str[] = "print-tests", "overwrite-output", "max-failures", "match"
	if values ?= args.to-list parse-named-args option-names
		print-tests-strs = values[0]
		overwrite-output-strs = values[1]
		max-failures-strs = values[2]
		match-test-strs = values[3]
		should-print-tests = !print-tests-strs.is-empty
		overwrite-output = if strs ?= overwrite-output-strs
			# TODO: handle it..
			assert strs is-empty
			true
		max-failures = if strs ?= max-failures-strs
			assert strs.size == 1
			strs[0].parse-nat!
		else
			100
		match-test = if strs ?= match-test-strs
			assert strs.size == 1
			strs[0]
		(should-print-tests, overwrite-output, max-failures, match-test).do-test,
	else
		print-help
		1,

.print-help void() summon
	out print """test -- runs tests
options:
	--print-tests: print every test run"
	--max-failures: stop after this many failures. Defaults to 10."""

.do-test nat(options test-options) summon
	test-path = "./test"
	crow-dir = test-path parent-path
	crow-exe = crow-dir crow-path
	crow-failures = test-path child-path "parse-errors" run-crow-tests crow-exe, options first-failures () =>
		test-path child-path "compile-errors" run-crow-tests crow-exe, options first-failures () =>
			test-path child-path "runnable" run-crow-tests crow-exe, options
	all-failures = crow-failures first-failures () => crow-dir lint options
	all-failures print-failures options

.crow-path str(crow-dir str) trusted
	crow-dir child-path "bin" child-path "crow" ~~ (is-windows ? ".exe" : "")

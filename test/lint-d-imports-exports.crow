import
	crow/col/counter: counter, iterate, subscript, to
	crow/io/file: read-file
	crow/io/print: err, print
	crow/io/process: shell-exec
	../site-src/search-dir-recursive: search-dir-recursive

main nat^(_ string[]) summon
	files <- all-files
	failures = files lint-files
	for x : failures
		err print x
	failures.size,

+all-files file[]^() summon
	paths <- "src" search-dir-recursive x => x ends-with ".d"
	members = paths get-members-per-path
	for path : paths parallel
		imports-and-rest = path.read-file find-imports
		(path, members[path]!, imports-and-rest.imports, imports-and-rest.rest.words.to),

-lint-files string[](files file[])
	failures string mut[] = ()
	all-imports = files get-all-imports
	for file : files
		for public-export : file.members public
			# Ignore union.d because it gets confused by the mixin
			unless public-export in all-imports ||
					public-export in allow-exports ||
					file.path in allow-paths
				failures ~= "{file path} export not used: {public-export}"
	for file : files
		for private-member : file.members private
			if file.uses[private-member] < 2 &&
					file.path != "src/util/union_.d" &&
					!(private-member in allow-private-unused)
				failures ~= "{file path} private member not used: {private-member}"
	for file : files
		failures lint-imports-in-file file
	failures move-to

-get-all-imports symbol set(files file[])
	with out : build
		for file : files
			out ~~= file.imports

-allow-private-unused symbol set()
	"_assert", "__assert"
-allow-exports symbol set()
	# Allow members of TokenData; dscanner doesn't realize these aren't directly exports
	"debugLogExpected", "diffSymbols", "main", "ignore",
	"indentDelta", "literalFloat", "literalInt", "literalNat"
-allow-paths string set()
	# Ignore debugging.d because unused functions may be useful for debugging.
	# Ignore union_.d because dscanner gets confused by the mixin.
	"src/interpret/debugging.d", "src/util/union_.d"

-file record
	path string
	members members
	imports symbol set
	uses symbol counter

-members record(public symbol set, private symbol set)

-get-members-per-path members[string](paths string[]) summon
	"dub run dscanner --yes -- --ctags {" " join paths}".shell-exec get-members-per-path
-get-members-per-path members[string](stdout string)
	members-by-path mut-members mut[string] = ()
	look-for string = "!_TAG_PROGRAM_URL\thttps://github.com/dlang-community/D-Scanner/\n"
	rest = (stdout try-split-once look-for)!.b
	for line : rest lines
		unless line == "" || line contains-seq "enum:" || line contains-seq "struct:"
			parts = line split "\t"
			name symbol = parts[0] to
			path = parts[1]
			members = members-by-path ensure path
			if line contains-seq "access:public"
				members.public ~= name
			elif line contains-seq "access:private"
				members.private ~= name
			else
				unless path == "src/wasm.d" || name in excluded-unknown-access
					throw "Unexpected non-public, non-private member {name} in {path}"
	for k, v : members-by-path
		k, v.move-to

-mut-members record(public symbol mut-set, private symbol mut-set) mut
-new mut-members()
	(), ()
-move-to members(a mut-members)
	a.public.move-to, a.private.move-to

# for some reason, dscanner doesn't give non-nested unions like Converter64 access:private
-excluded-unknown-access symbol set()
	"Converter32", "Converter64", "DCValue", "StackMap2Key", "StackMap2Value"

-imports-and-rest record
	imports symbol set
	rest string

-find-imports imports-and-rest(a string)
	res symbol mut-set = ()
	since-last-import mut = a
	rest mut = a
	loop
		if pair ?= rest try-split-once "import "
			if pair.a ends-with "\n" || pair.a ends-with "\n\t"
				after-colon = (pair.b try-split-once ":")!.b
				split-semi = (after-colon try-split-once ";")!
				for word : split-semi.a words
					res ~= word
				since-last-import := split-semi b
				rest := split-semi b
				continue
			else
				# This is an 'import' in a nested scope; don't count it
				# (since we want only imports at top of file, not later on)
				rest := pair b
				continue
		else
			break res.move-to, since-last-import

-words symbol[](a string)
	with out : build
		word char8 mut[] = ()
		for x : a
			if x is-identifier-char
				word ~= x
			else
				unless word is-empty
					out ~= word.move-to::string to
		unless word is-empty
			out ~= word.move-to::string to

-is-identifier-char bool(a char8)
	"a"::char8 <= a && a <= "z" ||
		"A"::char8 <= a && a <= "Z" ||
		"0"::char8 <= a && a <= "9" ||
		a == "_"

-lint-imports-in-file void(failures string mut[], a file)
	not-used symbol mut-set = a.imports to
	for x, _ : a uses
		_ = not-used remove x
	for x : not-used
		if a.path != "src/util/union_.d"
			failures ~= "{a path}: unused import {x}"

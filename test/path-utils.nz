import io

parent-path str(a str)
	match a r-index-of "/"
		none
			""
		some s
			a slice-up-to s.value

child-path str(a str, child-name str)
	a + "/" + child-name

each-child-recursive void(path str, filter fun-mut1 bool str, f fun-mut1 void str) summon
	when
		path is-dir?
			path.read-dir each \child-name
				when
					filter call child-name
						path child-path child-name each-child-recursive filter, f
					else
						pass
		else
			f call path

last-index-of opt nat(s str, c char)
	when
		s empty?
			none
		s.last == c
			s.size.decr some
		else
			s.rtail last-index-of c

get-extension opt str(name str)
	match name last-index-of "."
		none
			none
		some s
			name slice-after s.value some

remove-extension str(name str)
	match name last-index-of "."
		none
			name
		some s
			name slice-up-to s.value

add-extension str(name str, ext str)
	name + "." + ext

change-extension str(name str, ext str)
	name.remove-extension add-extension ext

base-name str(path str)
	i = path last-index-of "/"
	match i
		none
			path
		some s
			path slice-after s.value



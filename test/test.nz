#!/usr/bin/env noze

import
	collection.arr-util: first
	command-line-parser: parse-cmd-line-args
	io.environ: get-environ
	io.file: current-executable-path
	io.print: print
	io.process: exit-code
	.failure: first-failures, print-failures, test-options
	.lint: lint
	.noze-tests: run-noze-tests
	.path-utils: child-path, parent-path

main fut exit-code(args arr str) summon
	option-names = new-arr<str> "print-tests", "overwrite-output", "max-failures"
	options = args parse-cmd-line-args<test-options> option-names, \values
		print-tests-strs = values[0]
		overwrite-output-strs = values[1]
		max-failures-strs = values[2]
		print-tests? = print-tests-strs.has?
		overwrite-output? = match overwrite-output-strs
		as none
			false
		as some s
			| TODO: handle it..
			assert: s.value empty?
			true
		max-failures = match max-failures-strs
		as none
			100
		as some s
			strs = s.value
			assert: strs.size == 1
			strs.first.parse-nat.force
		test-options: print-tests?, overwrite-output?, max-failures
	resolved: match options
	as none
		print-help
		1
	as some s
		s.value do-test

.print-help void() summon
	print: "test -- runs tests"
	print: "options:"
	print: "\t--print-tests: print every test run"
	print: "\t--max-failures: stop after this many failures. Defaults to 10."

.do-test exit-code(options test-options) summon
	test-path = current-executable-path parent-path
	noze-path = test-path parent-path
	noze-exe = noze-path child-path "bin" child-path "noze"
	env = get-environ

	noze-failures = test-path child-path "parse-errors" run-noze-tests noze-exe, env, options first-failures \
		test-path child-path "compile-errors" run-noze-tests noze-exe, env, options first-failures \
			test-path child-path "runnable" run-noze-tests noze-exe, env, options
	all-failures = noze-failures first-failures {noze-path lint options}
	all-failures print-failures options

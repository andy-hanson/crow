import
	crow/col/arr-util: each-with-index, exists, in
	crow/col/mut-arr: ~=, move-to-arr, mut-arr, new
	crow/io/file: each-child-recursive, read-file
	crow/io/path: base-name, get-extension
	crow/io/print: print
	crow/str-util: contains-substr, ends-with, lines, starts-with, try-remove-start
	./failure: failure, flat-map-with-max-size, max-failures, new, print-tests, test-options

lint result<str, failure[]>(path str, options test-options) summon
	files = path list-lintable-files
	failures = files flat-map-with-max-size options.max-failures, file =>
		if options print-tests
			print: "lint {file}"
		file lint-file
	if failures is-empty
		ok: "linted {files size} files"
	else
		err: failures

.list-lintable-files str[](path str) summon
	res str mut[] = ()
	path each-child-recursive (child => !child.excluded-from-lint), child =>
		unless child.base-name should-ignore-extension-of-name
			res ~= child
	res move-to-arr

.excluded-from-lint bool(name str)
	exclude-exts str[] = ".bmp", ".err", ".mdb", ".png", ".repr", ".svg", ".ttf", ".wasm", ".webp", ".woff2", ".xz"
	exclude-names str[] = "dyncall", "include-all.json", "node_modules", "package-lock.json", "site"
	name starts-with "." || name in exclude-names || exclude-exts exists ext => name ends-with ext

# Returns numner of errors
.lint-file failure[](path str) summon
	text = path read-file
	res failure mut[] = ()
	ext = path.get-extension!
	allow-double-space = ext == "err" || ext == "sublime-syntax"
	text.lines each-with-index (line, line-num) =>
		ln = line-num + 1 to-str
		space-space = " " ~~ " "
		if !allow-double-space && line contains-substr space-space
			message = "line {ln} contains a double space"
			res ~= (path, message)
		width = line line-len
		if width > max-line-length
			message = "line {ln} is {width} columns long, should be <= {max-line-length}"
			res ~= (path, message)
	res move-to-arr

.ignored-extensions str[]()
	"c", "data", "o", "out", "repr", "tmLanguage"

.should-ignore-extension bool(ext str)
	ext in ignored-extensions

.should-ignore-extension-of-name bool(name str)
	if ext ?= name get-extension
		ext should-ignore-extension
	else
		# Ignore extensionless files
		true

.max-line-length nat()
	120

.n-tabs nat(line str)
	if rest ?= line try-remove-start "\t"
		rest.n-tabs + 1

.tab-size nat()
	4

.line-len nat(line str)
	line.n-tabs * (tab-size - 1) + line.size-bytes

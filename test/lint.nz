import io .failure .path-utils

lint result str arr<failure>(path str, options test-options) summon
	files = path list-lintable-files
	failures = files flat-map-with-max-size options.max-failures, \file
		when
			options.print-tests?
				print-sync: "lint " + file
			else
				pass
		file lint-file
	when
		failures has?
			err: failures
		else
			ok: "Linted " + files.size.to-str + " files"

private

list-lintable-files arr str(path str) summon
	res = new-mut-arr<str>
	path each-child-recursive {not: it.first == "." or: it == "libfirm"}, \child
		when
			child.base-name ignore-extension-of-name
				pass
			else
				res push child
	res freeze

| Returns nubmer of errors
lint-file arr failure(path str) summon
	text = path read-file
	res = new-mut-arr<failure>
	err-file? = path.get-extension.force == "err"
	text.lines each-with-index \line line-num
		ln = line-num.incr.to-str
		when
			err-file?.not and: line.lstrip contains-subsequence? "  "
				message = "line " + ln + " contains a double space"
				res push new path, message
			else
				pass
		width = line line-len
		when
			width > max-line-length
				message = "line " + ln + " is " + width.to-str + " columns long, should be <= " + max-line-length.to-str
				res push new path, message
			else
				pass
	res freeze

ignored-extensions arr str()
	new-arr
		. "c"
		. "data"
		. "o"
		. "out"
		. "tmLanguage"

ignore-extension bool(ext str)
	ignored-extensions contains? ext

ignore-extension-of-name bool(name str)
	match name get-extension
		none
			| Ignore extensionless files
			true
		some s
			s.value ignore-extension

lines arr str(s str)
	res = new-mut-arr<str>
	last-nl = zero new-cell<nat>
	s each-with-index \c index
		when
			c == "\n"
				res push: s slice-from-to (last-nl swap index.incr), index
			else
				pass
	res push: s slice-from-to last-nl.get, s.size
	res.freeze


max-line-length nat()
	120

n-tabs nat(line str)
	when
		line.empty?.not and: line.first == "\t"
			line.tail.n-tabs incr
		else
			zero

tab-size nat()
	4

line-len nat(line str)
	line.n-tabs * (tab-size - 1) + line.size


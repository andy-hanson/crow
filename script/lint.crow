import
	crow/col/counter: counter, for-loop, subscript, to-counter
	crow/io/file: read-file
	crow/io/print: err, print
	crow/io/process: shell-exec
	../site-src/search-dir-recursive: search-dir-recursive

main nat^(_ string[]) summon
	files = all-files
	failures = files lint-files
	for x : failures
		err print x
	failures.size,

.lint-files string[](files file[]) summon
	failures string mut[] = ()
	all-imports = files get-all-imports
	for file : files
		for public-export : file.members public
			# Ignore union.d because it gets confused by the mixin
			unless public-export in all-imports || public-export in excluded-public || file.path == "src/util/union.d"
				failures ~= "{file path} export not used: {public-export}"
	for file : files
		for private-member : file.members private
			if file.uses[private-member] < 2 && file.path != "src/util/union.d"
				failures ~= "{file path} private member not used: {private-member}"
	for file : files
		failures lint-imports-in-file file
	failures move-to-list

.get-all-imports set symbol(files file[])
	(for file : files; file.imports to-list).flatten to-set

.excluded-public symbol[]()
	"diffSymbols", "main"

.file record
	path string
	members members
	imports set symbol
	uses counter symbol

.members record
	public symbol[]
	private symbol[]

all-files file[]() summon
	for path : "src" search-dir-recursive
		path get-file

.get-file file(path string) summon
	imports-and-rest = path.read-file find-imports
	path, path.get-members, imports-and-rest.imports, imports-and-rest.rest.words.to-counter

.get-members members(path string) summon
	stdout = "dub run dscanner -- --ctags {path}" shell-exec

	public mut-set symbol = ()
	private mut-set symbol = ()

	look-for = "!_TAG_PROGRAM_URL	https://github.com/dlang-community/D-Scanner/\n"
	rest = (stdout try-split-once look-for)!.b
	for line : rest lines
		unless line == "" || line contains-substr "enum:" || line contains-substr "struct:"
			name = (line find-iter x => x is-whitespace)!.slice-left string-to-symbol
			if line contains-substr "access:public"
				public ~= name
			elif line contains-substr "access:private"
				private ~= name
			else
				unless path == "src/wasm.d" || name in excluded-unknown-access
					throw "Unexpected non-public, non-private member {name} in {path}"

	public.move-to-list, private.move-to-list

# for some reason, dscanner doesn't give non-nested unions like Converter64 access:private
.excluded-unknown-access symbol[]()
	"Converter32", "Converter64", "DCValue", "DoubleToUlong", "StackDict2Key", "StackDict2Value"

.imports-and-rest record
	imports set symbol
	rest string

.find-imports imports-and-rest(a string)
	res mut-set symbol = ()
	since-last-import mut = a
	rest mut = a
	loop
		if pair ?= rest try-split-once "import "
			if pair.a ends-with "\n" || pair.a ends-with "\n\t"
				after-colon = (pair.b try-split-once ":")!.b
				split-semi = (after-colon try-split-once ";")!
				for word : split-semi.a words
					res ~= word
				since-last-import := split-semi b
				rest := split-semi b
				continue
			else
				# This is an 'import' in a nested scope; don't count it
				# (since we want only imports at top of file, not later on)
				rest := pair b
				continue
		else
			break res.move-to-set, since-last-import

.words symbol[](a string)
	with out : build
		word char8 mut[] = ()
		for x : a char8s
			if x is-identifier-char
				word ~= x
			else
				unless word is-empty
					out ~= word.move-to-list.as-string string-to-symbol
		unless word is-empty
			out ~= word.move-to-list.as-string string-to-symbol

.is-identifier-char bool(a char8)
	"a"::char8 <= a && a <= "z" || "A"::char8 <= a && a <= "Z" || "0"::char8 <= a && a <= "9" || a == "_"

.lint-imports-in-file void(failures string mut[], a file)
	not-used = a.imports to-mut-set
	for x, _ : a uses
		_ = not-used try-remove x
		()
	for x : not-used
		failures ~= "{a path}: unused import {x}"

// generated by `crow doc`
include ../pug-include/documentation.pug
+documentationPage("std")
	section
		+builtinType("bool", [])
		+function("true", [], "bool", [])
		+function("false", [], "bool", [])
		+function("?", ["?t"], "?t", [["cond", "bool"], ["if-true", "?t"], ["if-false", "?t"]])
			| Only one of 'if-true' and 'if-false' will be evaluated, depending on 'cond'
		+function("not", [], "bool", [["a", "bool"]])
		+function("to-nat", [], "nat", [["b", "bool"]])
		+function("to-nat", [], "nat", [["c", "char"]])
		+function("to-nat", [], "nat", [["n", "nat8"]])
		+function("to-nat", [], "nat", [["n", "nat16"]])
		+function("to-nat", [], "nat", [["n", "nat32"]])
		+function("to-nat", [], "nat", [["i", "int"]])
		+function("to-nat", [], "nat", [["i", "int32"]])
		+function("or", [], "bool", [["a", "bool"], ["b", "bool"]])
			| 'b' is evaluated only if 'a' is false
		+function("and", [], "bool", [["a", "bool"], ["b", "bool"]])
			| 'b' is evaluated only if 'a' is true
		+record("arr", ["?t"], [["size", "nat"], ["data", "ptr ?t"]])
			| NOTE: this is not a normal record, compiler treats it specially
		+spec("data", ["?t"], "builtin")
			|A type is data if it is:
			|* A primitive
			|* A record or union of pure types
		+function("empty?", ["?t"], "bool", [["a", "arr ?t"]])
		+function("empty?", ["?t"], "bool", [["a", "opt ?t"]])
		+function("has?", ["?t"], "bool", [["a", "arr ?t"]])
		+function("has?", ["?t"], "bool", [["a", "opt ?t"]])
		+function("arr-eq?", ["?t"], "bool", [["a", "arr ?t"], ["b", "arr ?t"]])
			| (But type system must recognize that `arr ?t` is data if `?t` is)
		+function("subscript", ["?t"], "?t", [["a", "arr ?t"], ["index", "nat"]])
		+function("subscript", ["?t"], "arr ?t", [["a", "arr ?t"], ["range", "arrow<nat, nat>"]])
		+function("subscript", ["?r"], "?r", [["a", "fun-ptr0 ?r"]])
			| Calling a fun-ptr is a primitive operation
		+function("subscript", ["?r", "?p0"], "?r", [["a", "fun-ptr1<?r, ?p0>"], ["p0", "?p0"]])
		+function("subscript", ["?r", "?p0", "?p1"], "?r", [["a", "fun-ptr2<?r, ?p0, ?p1>"], ["p0", "?p0"], ["p1", "?p1"]])
		+function("subscript", ["?r", "?p0", "?p1", "?p2"], "?r", [["a", "fun-ptr3<?r, ?p0, ?p1, ?p2>"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"]])
		+function("subscript", ["?r", "?p0", "?p1", "?p2", "?p3"], "?r", [["a", "fun-ptr4<?r, ?p0, ?p1, ?p2, ?p3>"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"], ["p3", "?p3"]])
		+function("subscript", ["?r", "?p0", "?p1", "?p2", "?p3", "?p4"], "?r", [["a", "fun-ptr5<?r, ?p0, ?p1, ?p2, ?p3, ?p4>"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"], ["p3", "?p3"], ["p4", "?p4"]])
		+function("subscript", ["?r", "?p0", "?p1", "?p2", "?p3", "?p4", "?p5"], "?r", [["a", "fun-ptr6<?r, ?p0, ?p1, ?p2, ?p3, ?p4, ?p5>"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"], ["p3", "?p3"], ["p4", "?p4"], ["p5", "?p5"]])
		+function("subscript", ["?r"], "?r", [["a", "fun0 ?r"]])
		+function("subscript", ["?r", "?p0"], "?r", [["a", "fun1<?r, ?p0>"], ["p0", "?p0"]])
		+function("subscript", ["?r", "?p0", "?p1"], "?r", [["a", "fun2<?r, ?p0, ?p1>"], ["p0", "?p0"], ["p1", "?p1"]])
		+function("subscript", ["?r", "?p0", "?p1", "?p2"], "?r", [["a", "fun3<?r, ?p0, ?p1, ?p2>"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"]])
		+function("subscript", ["?r", "?p0", "?p1", "?p2", "?p3"], "?r", [["a", "fun4<?r, ?p0, ?p1, ?p2, ?p3>"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"], ["p3", "?p3"]])
		+function("subscript", ["?r"], "?r", [["a", "fun-act0 ?r"]])
		+function("subscript", ["?r", "?p0"], "?r", [["a", "fun-act1<?r, ?p0>"], ["p0", "?p0"]])
		+function("subscript", ["?r", "?p0", "?p1"], "?r", [["a", "fun-act2<?r, ?p0, ?p1>"], ["p0", "?p0"], ["p1", "?p1"]])
		+function("subscript", ["?r", "?p0", "?p1", "?p2"], "?r", [["a", "fun-act3<?r, ?p0, ?p1, ?p2>"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"]])
		+function("subscript", ["?r", "?p0", "?p1", "?p2", "?p3"], "?r", [["a", "fun-act4<?r, ?p0, ?p1, ?p2, ?p3>"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"], ["p3", "?p3"]])
		+function("subscript", ["?r"], "fut ?r", [["f", "fun-ref0 ?r"]])
		+function("subscript", ["?r", "?p0"], "fut ?r", [["f", "fun-ref1<?r, ?p0>"], ["p0", "?p0"]])
		+function("subscript", ["?r", "?p0", "?p1"], "fut ?r", [["f", "fun-ref2<?r, ?p0, ?p1>"], ["p0", "?p0"], ["p1", "?p1"]])
		+function("noctx-at", ["?t"], "?t", [["a", "arr ?t"], ["index", "nat"]])
		+function("~", ["?t"], "arr ?t", [["a", "arr ?t"], ["b", "arr ?t"]])
		+function("ref-of-val-at", ["?t"], "?t", [["a", "arr by-val ?t"], ["index", "nat"]])
		+function("arr-from-begin-end", ["?t"], "arr ?t", [["begin", "ptr ?t"], ["end", "ptr ?t"]])
		+record("less", [], [])
			| Comparison for `a < b`
		+record("equal", [], [])
			| Comparison for `a == b`
		+record("greater", [], [])
			| Comparison for `a > b`
		+union("comparison", [], ["less", "equal", "greater"])
		+function("<=>", ["?t"], "comparison", [["a", "?t"], ["b", "?t"]])
		+function("==", ["?t"], "bool", [["a", "?t"], ["b", "?t"]])
			|True if both sides are same value.
			|TODO: This should return true for `nan == nan`
		+function("max", ["?t"], "?t", [["a", "?t"], ["b", "?t"]])
			| Returns the greater argument
		+spec("to-str", ["?t"], "TODO:WRITE SIGS")
		+function("to-str", [], "arr char", [["a", "comparison"]])
		+function("to-str", [], "arr char", [["b", "bool"]])
		+function("to-str", [], "arr char", [["c", "char"]])
		+function("to-str", [], "arr char", [["n", "nat"]])
		+function("to-str", [], "arr char", [["a", "arr char"]])
		+function("to-str", ["?k", "?v"], "arr char", [["a", "dict<?k, ?v>"]])
		+function("to-str", ["?t"], "arr char", [["a", "opt ?t"]])
		+function("to-str", [], "arr char", [["n", "nat32"]])
		+function("to-str", [], "arr char", [["n", "nat16"]])
		+function("to-str", [], "arr char", [["i", "int"]])
		+function("to-str", [], "arr char", [["i", "int32"]])
		+function("to-str", [], "arr char", [["i", "int16"]])
		+function("to-str", [], "arr char", [["a", "float"]])
		+function("min", ["?t"], "?t", [["a", "?t"], ["b", "?t"]])
			| Returns the lesser argument
		+function(">=", ["?t"], "bool", [["a", "?t"], ["b", "?t"]])
		+function(">", ["?t"], "bool", [["a", "?t"], ["b", "?t"]])
		+function("<=", ["?t"], "bool", [["a", "?t"], ["b", "?t"]])
		+function("<", ["?t"], "bool", [["a", "?t"], ["b", "?t"]])
		+function("!=", ["?t"], "bool", [["a", "?t"], ["b", "?t"]])
		+record("exception", [], [["message", "arr char"], ["backtrace", "backtrace"]])
		+record("exception-ctx", [], [["jmp-buf-ptr", "ptr jmp-buf-tag", "mut"], ["thrown-exception", "exception", "mut"]])
		+function("exception-ctx", [], "by-val exception-ctx", [])
		+function("finally", ["?t"], "?t", [["after", "fun-act0 void"], ["try", "fun-act0 ?t"]])
		+function("rethrow", ["?t"], "?t", [["e", "exception"]])
		+function("throw", ["?t"], "?t", [["e", "exception"]])
		+function("assert", [], "void", [["condition", "bool"]])
		+function("assert", [], "void", [["condition", "bool"], ["message", "arr char"]])
		+function("assert", [], "void", [["condition", "bool"], ["message", "fun0 arr char"]])
		+function("fail", ["?t"], "?t", [["reason", "arr char"]])
		+function("catch", ["?t"], "result<?t, exception>", [["try", "fun-act0 ?t"]])
		+function("catch", ["?t"], "?t", [["try", "fun-act0 ?t"], ["catcher", "fun-act1<?t, exception>"]])
		+function("unreachable", ["?t"], "?t", [])
		+function("forbid", [], "void", [["condition", "bool"]])
		+function("forbid", [], "void", [["condition", "bool"], ["message", "arr char"]])
		+function("catch-with-exception-ctx", ["?t"], "?t", [["ec", "exception-ctx"], ["try", "fun-act0 ?t"], ["catcher", "fun-act1<?t, exception>"]])
		+function("get-exception-ctx", [], "exception-ctx", [])
		+builtinType("fun-ptr0", ["?r"])
			| Pointer to a function with no arguments (not even ctx)
		+builtinType("fun-ptr1", ["?r", "?p0"])
		+builtinType("fun-ptr2", ["?r", "?p0", "?p1"])
		+builtinType("fun-ptr3", ["?r", "?p0", "?p1", "?p2"])
		+builtinType("fun-ptr4", ["?r", "?p0", "?p1", "?p2", "?p3"])
		+builtinType("fun-ptr5", ["?r", "?p0", "?p1", "?p2", "?p3", "?p4"])
		+builtinType("fun-ptr6", ["?r", "?p0", "?p1", "?p2", "?p3", "?p4", "?p5"])
		+function("call-with-ctx", ["?r"], "?r", [["f", "fun0 ?r"], ["c", "ctx"]])
		+function("call-with-ctx", ["?r"], "?r", [["f", "fun-act0 ?r"], ["c", "ctx"]])
		+function("call-with-ctx", ["?r", "?p0"], "?r", [["f", "fun1<?r, ?p0>"], ["c", "ctx"], ["p0", "?p0"]])
		+function("call-with-ctx", ["?r", "?p0"], "?r", [["f", "fun-act1<?r, ?p0>"], ["c", "ctx"], ["p0", "?p0"]])
		+function("call-with-ctx", ["?r", "?p0", "?p1"], "?r", [["f", "fun2<?r, ?p0, ?p1>"], ["c", "ctx"], ["p0", "?p0"], ["p1", "?p1"]])
		+function("call-with-ctx", ["?r", "?p0", "?p1"], "?r", [["f", "fun-act2<?r, ?p0, ?p1>"], ["c", "ctx"], ["p0", "?p0"], ["p1", "?p1"]])
		+function("call-with-ctx", ["?r", "?p0", "?p1", "?p2"], "?r", [["f", "fun3<?r, ?p0, ?p1, ?p2>"], ["c", "ctx"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"]])
		+function("call-with-ctx", ["?r", "?p0", "?p1", "?p2"], "?r", [["f", "fun-act3<?r, ?p0, ?p1, ?p2>"], ["c", "ctx"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"]])
		+function("call-with-ctx", ["?r", "?p0", "?p1", "?p2", "?p3"], "?r", [["f", "fun4<?r, ?p0, ?p1, ?p2, ?p3>"], ["c", "ctx"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"], ["p3", "?p3"]])
		+function("call-with-ctx", ["?r", "?p0", "?p1", "?p2", "?p3"], "?r", [["f", "fun-act4<?r, ?p0, ?p1, ?p2, ?p3>"], ["c", "ctx"], ["p0", "?p0"], ["p1", "?p1"], ["p2", "?p2"], ["p3", "?p3"]])
		+record("fut", ["?t"], [["lk", "by-val lock"], ["state", "fut-state ?t", "mut"]])
		+function("callback!", ["?t"], "void", [["f", "fut ?t"], ["cb", "fun-act1<void, result<?t, exception>>"]])
			| WARN: Calls the callback immediately if possible
		+function("then2", ["?out"], "fut ?out", [["f", "fut void"], ["cb", "fun-ref0 ?out"]])
			| and choose just one based on the arity of a lambda.
		+function("delay", [], "fut void", [])
			| Used to make code run after the next step. Equivalent to `sleep 0`.
		+function("join", ["?out", "?in0", "?in1"], "fut ?out", [["a", "fut ?in0"], ["b", "fut ?in1"], ["f", "fun-ref2<?out, ?in0, ?in1>"]])
		+function("join", ["?a"], "fut arr ?a", [["a", "arr fut ?a"]])
			| TODO: send<arr ?a> should be unnecessary
		+function("then", ["?out", "?in"], "fut ?out", [["f", "fut ?in"], ["cb", "fun-ref1<?out, ?in>"]])
		+function("fut-catch", ["?t"], "fut result<?t, exception>", [["a", "fut ?t"]])
		+function("launch", ["?t"], "fut ?t", [["f", "fun0 fut ?t"]])
			| Runs `f` in parallel.
		+function("then-void", ["?out"], "fut ?out", [["a", "fut void"], ["cb", "fun-ref0 ?out"]])
		+function("resolved", ["?t"], "fut ?t", [["value", "?t"]])
		+function("rejected", ["?t"], "fut ?t", [["err", "exception"]])
		+function("handle-exceptions", ["?t"], "void", [["a", "fut ?t"]])
		+function("call-ref-void", [], "void", [["f", "fun-ref0 void"]])
		+function("call-ref-void", ["?p0"], "void", [["f", "fun-ref1<void, ?p0>"], ["p0", "?p0"]])
		+function("call-ref-void", ["?p0", "?p1"], "void", [["f", "fun-ref2<void, ?p0, ?p1>"], ["p0", "?p0"], ["p1", "?p1"]])
		+builtinType("void", [])
		+function("void", [], "void", [])
		+function("as", ["?t"], "?t", [["value", "?t"]])
		+record("arrow", ["?a", "?b"], [["from", "?a"], ["to", "?b"]])
		+function("drop", ["?t"], "void", [["_", "?t"]])
		+function("->", ["?a", "?b"], "arrow<?a, ?b>", [["from", "?a"], ["to", "?b"]])
		+builtinType("nat", [])
		+builtinType("nat8", [])
		+builtinType("nat16", [])
		+builtinType("nat32", [])
		+builtinType("int", [])
		+builtinType("int8", [])
		+builtinType("int16", [])
		+builtinType("int32", [])
		+builtinType("float", [])
		+alias("nat64", [], "nat")
		+alias("int64", [], "int")
		+function("to-int", [], "int", [["i", "int8"]])
		+function("to-int", [], "int", [["i", "int16"]])
		+function("to-int", [], "int", [["i", "int32"]])
		+function("to-int", [], "int", [["n", "nat"]])
		+function("nan?", [], "bool", [["a", "float"]])
		+function("multiple-of?", [], "bool", [["a", "nat"], ["b", "nat"]])
		+function("negative?", [], "bool", [["i", "int"]])
		+function("max-nat8", [], "nat8", [])
		+function("max-nat16", [], "nat16", [])
		+function("max-int32", [], "int32", [])
		+function("to-int32", [], "int32", [["a", "int"]])
		+function("to-int32", [], "int32", [["n", "nat"]])
		+function("min-int32", [], "int32", [])
		+function("max-nat32", [], "nat32", [])
		+function("to-nat32", [], "nat32", [["a", "nat16"]])
		+function("to-nat32", [], "nat32", [["a", "nat"]])
		+function("unsafe-div", [], "float", [["a", "float"], ["b", "float"]])
		+function("square-root", [], "float", [["a", "float"]])
		+function("max-int", [], "int", [])
		+function("min-int", [], "int", [])
		+function("to-float", [], "float", [["a", "nat"]])
		+function("to-float", [], "float", [["a", "int"]])
		+function("max-nat", [], "nat", [])
		+function("abs", [], "nat", [["i", "int"]])
		+function("each", [], "void", [["r", "arrow<nat, nat>"], ["f", "fun-act1<void, nat>"]])
		+function("each", ["?in"], "void", [["a", "opt ?in"], ["cb", "fun-act1<void, ?in>"]])
		+function("neg", [], "int", [["i", "int"]])
		+function("neg", [], "int", [["a", "nat"]])
		+function("neg", [], "float", [["a", "float"]])
		+function("unsafe-mod", [], "nat", [["a", "nat"], ["b", "nat"]])
		+function("mod", [], "nat", [["a", "nat"], ["b", "nat"]])
		+function("mod", [], "nat", [["a", "int"], ["b", "nat"]])
		+function("^", [], "float", [["a", "float"], ["b", "nat"]])
		+function("/", [], "nat", [["a", "nat"], ["b", "nat"]])
		+function("/", [], "int", [["a", "int"], ["b", "int"]])
		+function("/", [], "float", [["a", "float"], ["b", "float"]])
		+function("*", [], "nat", [["a", "nat"], ["b", "nat"]])
		+function("*", [], "int", [["a", "int"], ["b", "int"]])
		+function("*", [], "float", [["a", "float"], ["b", "float"]])
		+function("-", [], "nat", [["a", "nat"], ["b", "nat"]])
		+function("-", [], "int", [["a", "int"], ["b", "int"]])
		+function("-", [], "int32", [["a", "int32"], ["b", "int32"]])
		+function("-", [], "float", [["a", "float"], ["b", "float"]])
		+function("+", [], "nat", [["a", "nat"], ["b", "nat"]])
		+function("+", [], "int", [["a", "int"], ["b", "int"]])
		+function("+", [], "int32", [["a", "int32"], ["b", "int32"]])
		+function("+", [], "float", [["a", "float"], ["b", "float"]])
		+function("truncate-to-int", [], "int", [["a", "float"]])
		+union("opt", ["?t"], ["none", "some ?t"])
		+record("some", ["?t"], [["value", "?t"]])
		+record("none", [], [])
		+function("opt-or", ["?t"], "?t", [["a", "opt ?t"], ["default", "fun-act0 ?t"]])
		+function("map", ["?out", "?in"], "opt ?out", [["a", "opt ?in"], ["cb", "fun-act1<?out, ?in>"]])
		+function("opt-join", ["?out", "?in-0", "?in-1"], "opt ?out", [["a", "opt ?in-0"], ["b", "opt ?in-1"], ["cb", "fun-act2<?out, ?in-0, ?in-1>"]])
		+function("force", ["?t"], "?t", [["a", "opt ?t"]])
		+union("result", ["?ok", "?err"], ["ok ?ok", "err ?err"])
		+record("ok", ["?t"], [["value", "?t"]])
		+record("err", ["?t"], [["value", "?t"]])
		+builtinType("char", [])
		+alias("str", [], "arr char")
		+alias("c-str", [], "ptr char")
		+function("parse-int", [], "opt int", [["a", "arr char"]])
		+function("parse-float", [], "opt float", [["a", "arr char"]])
			| TODO: handle the decimal point!
		+function("char-to-nat", [], "opt nat", [["c", "char"]])
		+function("parse-nat", [], "opt nat", [["a", "arr char"]])
		+function("parse-bool", [], "bool", [["a", "arr char"]])
		+function("parse-nat-recur", [], "opt nat", [["a", "arr char"], ["accum", "nat"]])

// generated by `crow doc`
include ../pug-include/documentation.pug
+documentationPage("fut")
	section
		+record("fut", ["?t"], [["lk", "by-val lock"], ["state", "fut-state ?t", "mut"]])
		+function("callback!", ["?t"], "void", [["f", "fut ?t"], ["cb", "fun-act1<void, result<?t, exception>>"]])
			| WARN: Calls the callback immediately if possible
		+function("then2", ["?out"], "fut ?out", [["f", "fut void"], ["cb", "fun-ref0 ?out"]])
			| and choose just one based on the arity of a lambda.
		+function("delay", [], "fut void", [])
			| Used to make code run after the next step. Equivalent to `sleep 0`.
		+function("subscript", ["?r"], "fut ?r", [["f", "fun-ref0 ?r"]])
		+function("subscript", ["?r", "?p0"], "fut ?r", [["f", "fun-ref1<?r, ?p0>"], ["p0", "?p0"]])
		+function("subscript", ["?r", "?p0", "?p1"], "fut ?r", [["f", "fun-ref2<?r, ?p0, ?p1>"], ["p0", "?p0"], ["p1", "?p1"]])
		+function("join", ["?out", "?in0", "?in1"], "fut ?out", [["a", "fut ?in0"], ["b", "fut ?in1"], ["f", "fun-ref2<?out, ?in0, ?in1>"]])
		+function("join", ["?a"], "fut arr ?a", [["a", "arr fut ?a"]])
			| TODO: send<arr ?a> should be unnecessary
		+function("then", ["?out", "?in"], "fut ?out", [["f", "fut ?in"], ["cb", "fun-ref1<?out, ?in>"]])
		+function("fut-catch", ["?t"], "fut result<?t, exception>", [["a", "fut ?t"]])
		+function("launch", ["?t"], "fut ?t", [["f", "fun0 fut ?t"]])
			| Runs `f` in parallel.
		+function("then-void", ["?out"], "fut ?out", [["a", "fut void"], ["cb", "fun-ref0 ?out"]])
		+function("resolved", ["?t"], "fut ?t", [["value", "?t"]])
		+function("rejected", ["?t"], "fut ?t", [["err", "exception"]])
		+function("handle-exceptions", ["?t"], "void", [["a", "fut ?t"]])
		+function("call-ref-void", [], "void", [["f", "fun-ref0 void"]])
		+function("call-ref-void", ["?p0"], "void", [["f", "fun-ref1<void, ?p0>"], ["p0", "?p0"]])
		+function("call-ref-void", ["?p0", "?p1"], "void", [["f", "fun-ref2<void, ?p0, ?p1>"], ["p0", "?p0"], ["p1", "?p1"]])

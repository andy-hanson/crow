import
	crow/io/print: print

main fut nat(_ str[]) summon
	nats = node<nat>: 1, some: node: 2, some: node: 3, none
	floats = node<float>: 1.1, some: node: 2.2, none
	print: "nats size: {nats size}"
	print: "nats sum: {nats sum}"
	print: "floats size: {floats size}"
	print: "floats sum: {floats sum}"
	0 resolved

node<a> record
	head a
	tail opt node a

size<a> nat(a node a)
	1 size a.tail

size<a> nat(acc nat, a opt node a)
	if node ?= a
		acc + 1 size node.tail
	else
		acc

plus<a> spec
	+ a(a a, b a)

sum<a> a(a node a) plus<a>
	a.head sum a.tail

sum<a> a(acc a, a opt node a) plus<a>
	if node ?= a
		acc + node.head sum node.tail
	else
		acc

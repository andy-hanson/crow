import
	io.print: print

main fut nat(_ arr str) summon
	nats = node<nat>: 1, some: node: 2, some: node: 3, none
	floats = node<float>: 1.1, some: node: 2.2, none
	print: "nats size: " ~ nats.size.to-str
	print: "nats sum: " ~ nats.sum.to-str
	print: "floats size: " ~ floats.size.to-str
	print: "floats sum: " ~ floats.sum.to-str
	0 resolved

node<?a> record
	head ?a
	tail opt node<?a>

size nat(a node ?a)
	1 size a.tail

size nat(acc nat, a opt node ?a)
	match a
	as none
		acc
	as some s
		acc + 1 size s.value.tail

plus<?a> spec
	+ ?a(a ?a, b ?a)

sum ?a(a node ?a) plus<?a>
	a.head sum a.tail

sum ?a(acc ?a, a opt node ?a) plus<?a>
	match a
	as none
		acc
	as some s
		acc + s.value.head sum s.value.tail

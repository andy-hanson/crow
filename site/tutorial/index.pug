include ../pug-include/tutorial.pug
+tutorialPage("index")
	section
		h2 Hello World!

		p Here is a basic program that prints <code class="lit-str">"Hello, world!"</code>:

		crow-runnable(src="hello")

		p You can run it by clicking the play button above, or download and run <code>crow hello.crow</code>.

		p.
			Crow syntax is based on indented blocks.
			There is an indented block of code under <code class="keyword">import</code>
			and one under <code class="fun-def">main</code>.
			The indentation is required.
			<br />
			An indent may be one tab, two spaces, or four spaces.
			Every indent in the same file must use the same style.

		| Here's what each part does:
		ul
			li.
				<code class="keyword">import</code> imports the function <code class="fun-ref">print</code>
				from the standard module <code class="import">io.print</code>.
				Other names like <code class="struct-ref">fut</code> are always implicitly imported.
			li.
				<code class="fun-def">main</code> defines a function.
				In crow, the name of a declaration always comes first.
			li.
				<code class="struct-ref">fut nat</code> is the return type of <code class="fun-def">main</code>.
				This instantiates the templated type <code class="struct-ref">fut</code>
				(A "future" type, indicating that the main function might do things that come after a delay;
				this one doesn't though.)
			li.
				<code class="param-def">_</code> is the parameter name (indicating we won't use it)
				and its type is <code class="struct-ref">arr str</code> (an array of strings).
			li.
				<code class="spec-ref">summon</code> is a type of spec.
				A function's specs indicate preconditions that it relies on;
				it allows <code class="fun-ref">main</code> to call other
				<code class="spec-ref">summon</code> functions,
				and only <code class="spec-ref">summon</code> functions can call <code class="fun-ref">main</code>.
				<br />
				(There are also <a href="index.html#fun">other</a> ways to do I/O.)
			li.
				<code>print: "Hello, world!"</code> and <code>0 resolved</code> are <em>both</em> function calls.
				(The functions are <code class="fun-ref">print</code> and <code class="fun-ref">resolved</code>.)
			li.
				The final line of a function is its result.
				<code>0</code> is a <code class="struct-ref">nat</code>
				and <code>resolved</code> wraps it in a <code class="struct-ref">fut</code>.

	section
		h3 Names

		p.
			A name consists of letters (<code>a</code> through <code>z</code>),
			numbers (<code>0</code> through <code>9</code>), and hyphens (<code>-</code>).
			<br />
			It may optionally end in a <code>?</code> (for booleans)
			or <code>!</code> (for functions with side effects).
			<br />
			A name must start with a letter.
			<br />
			Names can't contain capital letters or underscores.
		p.
			Functions may also have operator names:
			<code class="fun-ref">==</code>, <code class="fun-ref">!=</code>,
			<code class="fun-ref">&lt;</code>, <code class="fun-ref">></code>,
			<code class="fun-ref">&lt;=</code>, <code class="fun-ref">>=</code>,
			<code class="fun-ref">&lt;=></code>, <code class="fun-ref">-></code>,
			<code class="fun-ref">~</code>, <code class="fun-ref">~=</code>,
			<code class="fun-ref">+</code>, <code class="fun-ref">-</code>,
			<code class="fun-ref">*</code>, <code class="fun-ref">/</code>, and <code class="fun-ref">^</code>.
			<br />
			(<code class="fun-ref">&lt;=></code> is 3-way comparison,
			<code class="fun-ref">-></code> has various uses,
			<code class="fun-ref">~</code> concatenates, <code class="fun-ref">~=</code> concatenates mutably, and
			<code>^</code> is exponentiation.)
			<br />
			Some of C's operators are missing.
			Instead, <code class="fun-ref">and</code>, <code class="fun-ref">or</code>,
			and <code class="fun-ref">not</code> are named functions,
			and bitwise operators are named functions in the standard module <code class="import">bits</code>.

	section
		h3 Functions, if, and locals

		| Here's a program that defines more functions:
		crow-runnable(src="functions")

		h4 Function call types

		| This simple program uses many kinds of function call syntax.
		ul
			li
				<code class="fun-ref">greeting</code> is a function call.
				A function with no arguments is called just by writing the name.
			li
				<code>print: "fox".greet</code> is a prefix function call;
				<code class="fun-ref">print</code> is the function and <code>"fox".greet</code> is the argument.
			li
				<code>"fox".greet</code> is equivalent to <code>greet: "fox"</code>.
			li
				<code>name ends-with? "x"</code> is an infix function call;
				<code class="fun-ref">ends-with?</code> is the function
				and <code>name</code> and <code>"x"</code> are the arguments.
				<br/>
				An "infix" function can have one or more parameters.
				So <code>0 resolved</code> is also a kind of infix function.
				<code>a f b, c</code> would also call a function <code class="fun-ref">f</code>
				on arguments <code>a</code>, <code>b</code>, and <code>c</code>.

		h4 Operators
		p.
			There are also operator calls <code>greeting + ", " + name.plural</code> and <code>name == "fox"</code>.
			<br />
			Operators work like infix function calls, but precedence applies,
			so <code>a + b * c</code> parses as <code>a + (b * c)</code>.
			<code>a plus b times c</code> would parse as <code>(a plus b) times c</code>.
			<br />
			The precedence levels are the same as in most popular languages:
			<code class="fun-ref">^</code> binds most tightly,
			then <code class="fun-ref">*</code> and <code class="fun-ref">/</code>,
			then <code class="fun-ref">+</code> and <code class="fun-ref">-</code>,
			and the others all share the lowest precedence.
			<br />
			Operators always bind more closely than named functions,
			so <code>name == "fox"</code> is nested inside the <code>or</code>.

		h4 Locals
		p.
			It also uses a local variable <code class="local-def">suffix</code>.
			Variables in crow are immutable, meaning you can't set another value for <code>suffix</code>.
			(This does not mean that the value in a variable can't be mutable.)

		h4 Ifs
		p.
			The value of <code class="local-def">suffix</code> is an <code class="keyword">if</code> expression.
			The cases of an <code class="keyword">if</code> must go in indented blocks.
			The <code class="else">else</code> case is required unless the type is <code class="struct-ref">void</code>.

	section
		h3 Primitive types

		p.
			You've already seen <code class="struct-ref">nat</code>. This is an unsigned integer type.
			In crow, integral arithmetic is safe and will throw an exception instead of overflowing,
			so unsigned numbers are preferred where appropriate.
			<br />
			There is also <code class="struct-ref">int</code> for signed integers
			and <code class="struct-ref">float</code> for floating-point values.

		crow-runnable(src="primitives")

		p.
			By default, a number literal like <code>3</code> will be a <code class="struct-ref">nat</code>.
			For an integer you could write <code>+3</code>, or <code>3.0</code> for a float.

			<br />

			A literal will also have the correct type if it is clear from context
			(like the return type, or parameter type of a function you're calling),
			as in <code>2 as&lt;int></code>.

			<code class="fun-ref">as</code> is not special syntax, just the identity function;
			<code>&lt;int></code> is syntax for giving it a type parameter.
		p.
			Crow has no implicit (or explicit) conversions or casts.
			It does have functions like <code class="fun-ref">to-int</code>.
			(For floats you must choose <code class="fun-ref">truncate-to-int</code>
			or <code class="fun-ref">round-to-int</code>.)

			<br />

			Also, numeric operators only work with values of the same type.
			So <code>my-nat + my-int</code> would be a compile error;
			you must choose <code>my-nat.to-int + my-int</code> or <code>my-nat + my-int.to-nat</code>.

		p.
			<code class="struct-ref">nat</code>, <code class="struct-ref">int</code>,
			and <code class="struct-ref">float</code> are all 64-bit types.
			For performance or to work with external libraries,
			you may add a suffix <code>8</code>, <code>16</code>, or <code>32</code>, as in <code>int16</code>.
			(Don't worry, arithmetic operators check for overflow and throw an exception.)
			Again, there are no implicit conversions, but there are functions like <code>to-int16</code>.

		p.
			Now we have the basics down:
			We can define and call functions, define locals, use <code class="keyword">if</code> expressions,
			and do basic arithmetic.
			Now it's time to define our own types.

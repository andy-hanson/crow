import
	io.print: print
	math.vec: -, length-squared, vec-2, x, y

main fut nat(_ arr str) summon
	c = circle: (vec-2: 1.0, 1.0), 1.0
	print: c contains? (vec-2: 1.7, 1.7) to-str
	print: c contains? (vec-2: 1.7, 1.8) to-str
	r = rect: 1.0, 2.0, 3.0, 4.0
	print: r contains? (vec-2: 1.1, 3.0) to-str
	print: r contains? (vec-2: 1.1, 2.9) to-str
	0 resolved

contains? bool(a hitbox, p vec-2)
	match a
	as circle c
		(p - c.center).length-squared <= c.radius ^ 2
	as rect r
		r.left <= p.x and: p.x <= r.right and: r.bottom <= p.y and: p.y <= r.top

hitbox union
	circle
	rect

circle record
	center vec-2
	radius float

rect record
	left float
	right float
	bottom float
	top float

import
	crow/col/experimental/compact-dict: -, ~, compact-dict, in, new, node-count, size
	crow/col/experimental/compact-sorted-dict: -, ~, compact-sorted-dict, in, new, size
	crow/col/experimental/frozen-dict: frozen-dict, in, size, to-frozen-dict
	crow/col/experimental/frozen-set:
		frozen-set, in, unsafe-frozen-set-from-mut-array-cast-immutable, size
	crow/col/experimental/hamt-set: -, ~, hamt-set, in, new, size
	crow/col/experimental/index-set: -, ~, index-set, in, new, size
	crow/col/experimental/sorted-set: -, ~, in, new, sorted-set, size
	crow/col/experimental/tree-set: -, ~, in, new, size, tree-set
	crow/col/set: ~, in, new, node-count, set, size
	crow/io/print: err, out, print
	crow/io/private/time-low-level: get-monotime-nsec
	crow/log: info, log
	crow/private/alloc: force-needs-gc, gc, get-gc, get-stats, words-used
	crow/private/bootstrap: todo
	crow/reader: parse-nat

main nat^(args str[]) summon unsafe
	if args.size < 4
		err print "Usage: set-perf dict add iters max-value"
		()
	else
		col-kind col-kind = args[0].str-to-sym.to-enum!
		test-kind test-kind = args[1].str-to-sym.to-enum!
		iters = args[2].parse-nat!
		max-value = args[3].parse-nat!

		42 srand
		gc = get-gc
		assert gc.current-kb < 10
		start-us = get-monotime-nsec
		get-result = col-kind run-test test-kind, iters, max-value
		result = get-result[]
		end-us = get-monotime-nsec


		out print """
			result is {result}
			took {(end-us - start-us) / 1000000}ms
			allocated {gc current-kb}KB
		""".strip.unindent

		gc force-needs-gc
		<- delay

		out print "size after GC is {gc current-kb}KB"
		assert result == get-result[]

		()

.current-kb nat(gc gc) unsafe
	gc.get-stats.words-used words-to-kb

.words-to-kb nat(words nat)
	words * 8 / 1024

col-kind enum
	compact-dict
	compact-sorted-dict
	dict
	frozen-dict
	frozen-set
	hamt-set
	index-set
	set
	sorted-set
	tree-set

test-kind enum
	add
	get
	rm

###
Returns a function for getting the size.
This ensures the collection is kept in memory.
###
.run-test fun nat()(col-kind col-kind, test-kind test-kind, iters nat64, max-value nat64) summon
	match col-kind
	as compact-dict
		a compact-dict<nat, void> = match test-kind
		as add
			() add-test iters, max-value
		as get
			a compact-dict<nat, void> = () add-test iters, max-value
			info log "{0 get-test a, iters * get-factor, max-value}"
			info log "node count is {a.node-count}"
			a
		as rm
			() rm-test iters, max-value
		() => a size
	as compact-sorted-dict
		a compact-sorted-dict<nat, void> = match test-kind
		as add
			() add-test iters, max-value
		as get
			a compact-sorted-dict<nat, void> = () add-test iters, max-value
			info log "{0 get-test a, iters * get-factor, max-value}"
			a
		as rm
			() rm-test iters, max-value
		() => a size
	as dict
		a void[nat] = match test-kind
		as add
			() add-test iters, max-value
		as get
			a void[nat] = () add-test iters, max-value
			info log "{0 get-test a, iters * get-factor, max-value}"
			a
		as rm
			() rm-test iters, max-value
		() => a size
	as frozen-dict
		a = match test-kind
		as add
			() frozen-dict-add-test iters, max-value
		as get
			a = () frozen-dict-add-test iters, max-value
			info log "{0 get-test a, iters * get-factor, max-value}"
			a
		as rm
			todo
		() => a size
	as frozen-set
		a = match test-kind
		as add
			() frozen-set-add-test iters, max-value
		as get
			a = () frozen-set-add-test iters, max-value
			info log "{0 get-test a, iters * get-factor, max-value}"
			a
		as rm
			todo
		() => a size
	as hamt-set
		a hamt-set nat = match test-kind
		as add
			() add-test iters, max-value
		as get
			a hamt-set nat = () add-test iters, max-value
			info log "{0 get-test a, iters * get-factor, max-value}"
			a
		as rm
			() rm-test iters, max-value
		() => a size
	as index-set
		a index-set = match test-kind
		as add
			() add-test iters, max-value
		as get
			a index-set = () add-test iters, max-value
			info log "{0 get-test a, iters * get-factor, max-value}"
			a
		as rm
			() rm-test iters, max-value
		() => a size
	as set
		a set nat = match test-kind
		as add
			() add-test iters, max-value
		as get
			a set nat = () add-test iters, max-value
			info log "{0 get-test a, iters * get-factor, max-value}"
			info log "node count is {a.node-count}"
			a
		as rm
			todo
		() => a size
	as sorted-set
		a sorted-set nat = match test-kind
		as add
			() add-test iters, max-value
		as get
			a sorted-set nat = () add-test iters, max-value
			info log "{0 get-test a, iters * get-factor, max-value}"
			a
		as rm
			() rm-test iters, max-value
		() => a size
	as tree-set
		a tree-set nat = match test-kind
		as add
			() add-test iters, max-value
		as get
			a tree-set nat = () add-test iters, max-value
			info log "{0 get-test a, iters * get-factor, max-value}"
			a
		as rm
			() rm-test iters, max-value
		() => a size

.get-factor nat()
	100

.add-test compact-dict<nat, void>(a compact-dict<nat, void>, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		n = max-value.rand-nat
		a ~ (n, ()) add-test iters - 1, max-value

.add-test compact-sorted-dict<nat, void>(a compact-sorted-dict<nat, void>, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		a ~ (max-value.rand-nat, ()) add-test iters - 1, max-value

.add-test void[nat](a void[nat], iters nat, max-value nat) summon
	if iters == 0
		a
	else
		a ~ (max-value.rand-nat, ()) add-test iters - 1, max-value

.add-test hamt-set nat(a hamt-set nat, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		an = a ~ max-value.rand-nat
		an add-test iters - 1, max-value

.add-test index-set(a index-set, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		a ~ max-value.rand-nat add-test iters - 1, max-value

.add-test set nat(a set nat, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		an = a ~ max-value.rand-nat
		an add-test iters - 1, max-value

.add-test sorted-set nat(a sorted-set nat, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		a ~ max-value.rand-nat add-test iters - 1, max-value

.add-test tree-set nat(a tree-set nat, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		a ~ max-value.rand-nat add-test iters - 1, max-value

.frozen-dict-add-test frozen-dict<nat, void>(
	a (nat, void) mut[],
	iters nat,
	max-value nat,
) trusted summon
	if iters == 0
		a.move-to-list to-frozen-dict
	else
		a ~= (max-value.rand-nat, ())
		a frozen-dict-add-test iters - 1, max-value

.frozen-set-add-test frozen-set nat(a nat mut[], iters nat, max-value nat) trusted summon
	if iters == 0
		a.move-to-mut-array unsafe-frozen-set-from-mut-array-cast-immutable
	else
		a ~= max-value rand-nat
		a frozen-set-add-test iters - 1, max-value

.rm-test compact-dict<nat, void>(a compact-dict<nat, void>, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		(a ~ (max-value.rand-nat, ())) - max-value.rand-nat rm-test iters - 1, max-value

.rm-test compact-sorted-dict<nat, void>(a compact-sorted-dict<nat, void>, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		(a ~ (max-value.rand-nat, ())) - max-value.rand-nat rm-test iters - 1, max-value

.rm-test void[nat](a void[nat], iters nat, max-value nat) summon
	if iters == 0
		a
	else
		(a ~ (max-value.rand-nat, ())) - max-value.rand-nat rm-test iters - 1, max-value

.rm-test hamt-set nat(a hamt-set nat, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		(a ~ max-value.rand-nat) - max-value.rand-nat rm-test iters - 1, max-value

.rm-test index-set(a index-set, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		(a ~ max-value.rand-nat) - max-value.rand-nat rm-test iters - 1, max-value

.rm-test sorted-set nat(a sorted-set nat, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		(a ~ max-value.rand-nat) - max-value.rand-nat rm-test iters - 1, max-value

.rm-test tree-set nat(a tree-set nat, iters nat, max-value nat) summon
	if iters == 0
		a
	else
		(a ~ max-value.rand-nat) - max-value.rand-nat rm-test iters - 1, max-value

.get-test nat(acc nat, a compact-dict<nat, void>, iters nat, max-value nat) summon
	if iters == 0
		acc
	else
		acc + (max-value.rand-nat in a).to-nat64 get-test a, iters - 1, max-value

.get-test nat(acc nat, a compact-sorted-dict<nat, void>, iters nat, max-value nat) summon
	if iters == 0
		acc
	else
		acc + (max-value.rand-nat in a).to-nat64 get-test a, iters - 1, max-value

.get-test nat(acc nat, a void[nat], iters nat, max-value nat) summon
	if iters == 0
		acc
	else
		acc + (max-value.rand-nat in a).to-nat64 get-test a, iters - 1, max-value

.get-test nat(acc nat, a frozen-dict<nat, void>, iters nat, max-value nat) summon
	if iters == 0
		acc
	else
		acc + (max-value.rand-nat in a).to-nat64 get-test a, iters - 1, max-value

.get-test nat(acc nat, a frozen-set nat, iters nat, max-value nat) summon
	if iters == 0
		acc
	else
		acc + (max-value.rand-nat in a).to-nat64 get-test a, iters - 1, max-value

.get-test nat(acc nat, a hamt-set nat, iters nat, max-value nat) summon
	if iters == 0
		acc
	else
		acc + (max-value.rand-nat in a).to-nat64 get-test a, iters - 1, max-value

.get-test nat(acc nat, a index-set, iters nat, max-value nat) summon
	if iters == 0
		acc
	else
		acc + (max-value.rand-nat in a).to-nat64 get-test a, iters - 1, max-value

.get-test nat(acc nat, a set nat, iters nat, max-value nat) summon
	if iters == 0
		acc
	else
		acc + (max-value.rand-nat in a).to-nat64 get-test a, iters - 1, max-value

.get-test nat(acc nat, a sorted-set nat, iters nat, max-value nat) summon
	if iters == 0
		acc
	else
		acc + (max-value.rand-nat in a).to-nat64 get-test a, iters - 1, max-value

.get-test nat(acc nat, a tree-set nat, iters nat, max-value nat) summon
	if iters == 0
		acc
	else
		acc + (max-value.rand-nat in a).to-nat64 get-test a, iters - 1, max-value

.rand-nat nat(max nat) summon
	rand.to-nat64 % max

.rand int32() extern<c> trusted summon

.srand void(a nat32) extern<c> summon

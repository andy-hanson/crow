import
	crow/col/experimental/compact-dict: -, ~, compact-dict, in, new, node-count, size
	crow/col/experimental/compact-sorted-dict: -, ~, compact-sorted-dict, in, new, size
	crow/col/experimental/frozen-dict: ~=, build, frozen-dict, in, size, with-block
	crow/col/experimental/frozen-set: ~=, build, frozen-set, in, size, with-block
	crow/col/experimental/hamt-set: -, ~, hamt-set, in, new, size
	crow/col/experimental/index-set: -, ~, index-set, in, new, size
	crow/col/experimental/sorted-set: -, ~, in, new, sorted-set, size
	crow/col/experimental/tree-set: -, ~, in, new, size, tree-set
	crow/io/print: err, out, print
	crow/io/private/time-low-level: get-monotime-nsec
	crow/parse: nat, parse
	crow/private/alloc: force-needs-gc, gc, get-gc, get-stats, words-used
	crow/private/bootstrap: todo

main nat^(args string[]) summon, trusted
	match args parse-options
	as ok options
		42 srand
		gc = get-gc
		start-us = get-monotime-nsec
		get-result = options run-test
		result = get-result[]
		end-us = get-monotime-nsec

		out print """
			result is {result}
			took {(end-us - start-us) / 1000000}ms
			allocated {gc current-kb}KB
		""".strip.unindent

		gc force-needs-gc
		<- delay

		out print "size after GC is {gc current-kb}KB"
		assert result == get-result[]
		()
	as err e
		err print e
		1,

-options record
	col-kind col-kind
	test-kind test-kind
	iters nat
	max-value nat

-parse-options result<options, string>(args string[])
	if args.size < 4
		"Usage: set-perf dict add iters max-value" err
	elif col-kind ?= args[0].string-to-symbol.to-enum::col-kind?
		if test-kind ?= args[1].string-to-symbol.to-enum::test-kind?
			match nat parse args[2]
			as ok iters
				match nat parse args[3]
				as ok max-value
					(col-kind, test-kind, iters, max-value) ok
				as err _
					"bad max-value" err
			as err _
				"bad iters" err
		else
			"bad test-kind" err
	else
		"bad col-kind" err

-current-kb nat(gc gc) unsafe
	gc.get-stats.words-used words-to-kb

-words-to-kb nat(words nat)
	words * 8 / 1024

col-kind enum
	compact-dict
	compact-sorted-dict
	dict
	frozen-dict
	frozen-set
	hamt-set
	index-set
	set
	sorted-set
	tree-set

test-kind enum
	add
	get
	rm

###
Returns a function for getting the size.
This ensures the collection is kept in memory.
###
-run-test fun nat()(options options) summon
	col-kind = options col-kind
	test-kind = options test-kind
	iters = options iters
	max-value = options max-value
	match col-kind
	as compact-dict
		a compact-dict<nat, void> = match test-kind
		as add
			iters add-test max-value
		as get
			a compact-dict<nat, void> = iters add-test max-value
			info log "{a get-test iters * get-factor, max-value}"
			info log "node count is {a.node-count}"
			a
		as rm
			iters rm-test max-value
		() => a size
	as compact-sorted-dict
		a compact-sorted-dict<nat, void> = match test-kind
		as add
			iters add-test max-value
		as get
			a compact-sorted-dict<nat, void> = iters add-test max-value
			info log "{a get-test iters * get-factor, max-value}"
			a
		as rm
			iters rm-test max-value
		() => a size
	as dict
		a void[nat] = match test-kind
		as add
			iters add-test max-value
		as get
			a void[nat] = iters add-test max-value
			info log "{a get-test iters * get-factor, max-value}"
			a
		as rm
			iters rm-test max-value
		() => a size
	as frozen-dict
		a frozen-dict<nat, void> = match test-kind
		as add
			iters add-test max-value
		as get
			a frozen-dict<nat, void> = iters add-test max-value
			info log "{a get-test iters * get-factor, max-value}"
			a
		as rm
			todo
		() => a size
	as frozen-set
		a frozen-set nat = match test-kind
		as add
			iters add-test max-value
		as get
			a frozen-set nat = iters add-test max-value
			info log "{a get-test iters * get-factor, max-value}"
			a
		as rm
			todo
		() => a size
	as hamt-set
		a hamt-set nat = match test-kind
		as add
			iters add-test max-value
		as get
			a hamt-set nat = iters add-test max-value
			info log "{a get-test iters * get-factor, max-value}"
			a
		as rm
			iters rm-test max-value
		() => a size
	as index-set
		a index-set = match test-kind
		as add
			iters add-test max-value
		as get
			a index-set = iters add-test max-value
			info log "{a get-test iters * get-factor, max-value}"
			a
		as rm
			iters rm-test max-value
		() => a size
	as set
		a set nat = match test-kind
		as add
			iters add-test max-value
		as get
			a set nat = iters add-test max-value
			info log "{a get-test iters * get-factor, max-value}"
			info log "node count is {a.node-count}"
			a
		as rm
			todo
		() => a size
	as sorted-set
		a sorted-set nat = match test-kind
		as add
			iters add-test max-value
		as get
			a sorted-set nat = iters add-test max-value
			info log "{a get-test iters * get-factor, max-value}"
			a
		as rm
			iters rm-test max-value
		() => a size
	as tree-set
		a tree-set nat = match test-kind
		as add
			iters add-test max-value
		as get
			a tree-set nat = iters add-test max-value
			info log "{a get-test iters * get-factor, max-value}"
			a
		as rm
			iters rm-test max-value
		() => a size

-get-factor nat()
	100

-repeat[t] t(init t, iters nat, f fun t[t])
	res mut = init
	for _ : 0 .. iters
		res := f[res]
	res

-add-test compact-dict<nat, void>(iters nat, max-value nat) summon
	() repeat iters, x => x ~ (max-value.rand-nat, ())
-add-test compact-sorted-dict<nat, void>(iters nat, max-value nat) summon
	() repeat iters, x => x ~ (max-value.rand-nat, ())
-add-test void[nat](iters nat, max-value nat) summon
	() repeat iters, x => x ~ (max-value.rand-nat, ())
-add-test hamt-set nat(iters nat, max-value nat) summon
	() repeat iters, x => x ~ max-value.rand-nat
-add-test index-set(iters nat, max-value nat) summon
	() repeat iters, x => x ~ max-value.rand-nat
-add-test set nat(iters nat, max-value nat) summon
	() repeat iters, x => x ~ max-value.rand-nat
-add-test sorted-set nat(iters nat, max-value nat) summon
	() repeat iters, x => x ~ max-value.rand-nat
-add-test tree-set nat(iters nat, max-value nat) summon
	() repeat iters, x => x ~ max-value.rand-nat
-add-test frozen-dict<nat, void>(iters nat, max-value nat) summon, trusted
	with out : build
		for _ : 0 .. iters
			out ~= (max-value.rand-nat, ())
-add-test frozen-set nat(iters nat, max-value nat) summon, trusted
	with out : build
		for _ : 0 .. iters
			out ~= max-value rand-nat

-rm-test compact-dict<nat, void>(iters nat, max-value nat) summon
	() repeat iters, x => (x ~ (max-value.rand-nat, ())) - max-value.rand-nat
-rm-test compact-sorted-dict<nat, void>(iters nat, max-value nat) summon
	() repeat iters, x => (x ~ (max-value.rand-nat, ())) - max-value.rand-nat
-rm-test void[nat](iters nat, max-value nat) summon
	() repeat iters, x => (x ~ (max-value.rand-nat, ())) - max-value.rand-nat
-rm-test hamt-set nat(iters nat, max-value nat) summon
	() repeat iters, x => (x ~ max-value.rand-nat) - max-value.rand-nat
-rm-test index-set(iters nat, max-value nat) summon
	() repeat iters, x => (x ~ max-value.rand-nat) - max-value.rand-nat
-rm-test sorted-set nat(iters nat, max-value nat) summon
	() repeat iters, x => (x ~ max-value.rand-nat) - max-value.rand-nat
-rm-test tree-set nat(iters nat, max-value nat) summon
	() repeat iters, x => (x ~ max-value.rand-nat) - max-value.rand-nat

-count nat(iters nat, f act bool())
	acc mut = 0
	for _ : 0 .. iters
		if f[]
			acc := acc + 1
	acc

-get-test nat(a compact-dict<nat, void>, iters nat, max-value nat) summon
	iters count () => max-value.rand-nat in a
-get-test nat(a compact-sorted-dict<nat, void>, iters nat, max-value nat) summon
	iters count () => max-value.rand-nat in a
-get-test nat(a void[nat], iters nat, max-value nat) summon
	iters count () => max-value.rand-nat in a
-get-test nat(a frozen-dict<nat, void>, iters nat, max-value nat) summon
	iters count () => max-value.rand-nat in a
-get-test nat(a frozen-set nat, iters nat, max-value nat) summon
	iters count () => max-value.rand-nat in a
-get-test nat(a hamt-set nat, iters nat, max-value nat) summon
	iters count () => max-value.rand-nat in a
-get-test nat(a index-set, iters nat, max-value nat) summon
	iters count () => max-value.rand-nat in a
-get-test nat(a set nat, iters nat, max-value nat) summon
	iters count () => max-value.rand-nat in a
-get-test nat(a sorted-set nat, iters nat, max-value nat) summon
	iters count () => max-value.rand-nat in a
-get-test nat(a tree-set nat, iters nat, max-value nat) summon
	iters count () => max-value.rand-nat in a

-rand-nat nat(max nat) summon
	rand.to-nat64 % max

-rand int32() summon, trusted, c extern

-srand void(a nat32) summon, c extern

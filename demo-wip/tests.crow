import
	crow/col/deque: deque
	crow/col/dict: dict
	crow/col/experimental/compact-dict: compact-dict
	crow/col/experimental/compact-sorted-dict: compact-sorted-dict
	crow/col/experimental/hamt-set: hamt-set
	crow/col/experimental/tree-set: tree-set
	crow/col/frozen-dict: frozen-dict
	crow/col/frozen-set: frozen-set
	crow/col/index-set: index-set
	crow/col/list: list
	crow/col/mut-arr: mut-arr
	crow/col/mut-deque: mut-deque
	crow/col/mut-dict: mut-dict
	crow/col/mut-grid: mut-grid
	crow/col/mut-priority-queue: mut-priority-queue
	crow/col/mut-set: mut-set
	crow/col/mut-sorted-dict: mut-sorted-dict
	crow/col/mut-sorted-set: mut-sorted-set
	crow/col/mut-stack: mut-stack
	crow/col/priority-queue: priority-queue
	crow/col/set: set
	crow/col/sorted-set: sorted-set
	crow/col/stack: stack
	crow/col/queue: queue
	crow/crypto/password: password-hash, quality-moderate
	crow/io/time-format: gmt
	crow/iter: iterator
	crow/json: json
	crow/log: info, log
	crow/parse-command: parse-named-args
	crow/perf: perf-now
	crow/reader: reader, take-quoted-str!
	crow/serialize: from-bytes
	crow/test/test-runner: run-all-tests

main fut nat(_ str[]) summon
	drop: [].from-bytes as<nat8[]>
	drop: "" password-hash quality-moderate
	drop: compact-dict<nat, nat>
	drop: compact-sorted-dict<nat, nat>
	drop: deque<nat>
	drop: dict<nat, nat>
	drop: frozen-dict<nat, nat>
	drop: frozen-set<nat>
	drop: hamt-set<nat>
	drop: index-set
	drop: list<nat>
	drop: mut-arr<nat>
	drop: mut-deque<nat>
	drop: mut-dict<nat, nat>
	drop: mut-grid<nat>
	drop: mut-priority-queue<nat, nat>
	drop: mut-set<nat>
	drop: mut-sorted-dict<nat, nat>
	drop: mut-sorted-set<nat>
	drop: mut-stack<nat>
	drop: perf-now
	drop: priority-queue<nat, nat>
	drop: set<nat>
	drop: sorted-set<nat>
	drop: stack<nat>
	drop: tree-set<nat>
	drop: queue<nat>
	drop: gmt
	drop: iterator<nat>: () => none
	drop: "" as<json>
	drop: [] parse-named-args []
	run-all-tests
	0 resolved

test
	1 + 1 is 2
	info log "I am a test!"

test
	info log "READER TEST START"

	r = "\"j\"" reader
	if s ?= r take-quoted-str!
		info log "GOT A STRING: {s}"
	else
		info log "GOT NOTHIN"

	info log "READER TEST DONE"

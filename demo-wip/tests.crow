import
	crow/col/deque: deque, new
	crow/col/dict: dict, new
	crow/col/experimental/compact-dict: compact-dict, new
	crow/col/experimental/compact-sorted-dict: compact-sorted-dict, new
	crow/col/experimental/hamt-set: hamt-set, new
	crow/col/experimental/tree-set: new, tree-set
	crow/col/frozen-dict: frozen-dict, new
	crow/col/frozen-set: frozen-set, new
	crow/col/index-set: index-set, new
	crow/col/list: list
	crow/col/mut-arr: mut-arr, new
	crow/col/mut-deque: mut-deque, new
	crow/col/mut-dict: mut-dict, new
	crow/col/mut-grid: mut-grid, new
	crow/col/mut-priority-queue: mut-priority-queue, new
	crow/col/mut-set: mut-set, new
	crow/col/mut-sorted-dict: mut-sorted-dict, new
	crow/col/mut-sorted-set: mut-sorted-set, new
	crow/col/mut-stack: mut-stack, new
	crow/col/priority-queue: new, priority-queue
	crow/col/set: new, set
	crow/col/sorted-set: new, sorted-set
	crow/col/stack: new, stack
	crow/col/queue: new, queue
	crow/crypto/password: password-hash, quality-moderate
	crow/io/time-format: gmt
	crow/iter: iterator, new
	crow/json: json-str
	crow/log: info, log
	crow/parse-command: parse-named-args
	crow/perf: perf-now
	crow/reader: new, reader, take-quoted-str!
	crow/serialize: from-bytes
	crow/test/test-runner: run-all-tests

main fut nat(_ str[]) summon
	drop: [].from-bytes as<nat8[]>
	drop: "" password-hash quality-moderate
	drop: ().as<compact-dict<nat, nat>>
	drop: ().as<compact-sorted-dict<nat, nat>>
	drop: ().as<deque nat>
	drop: ().as<nat[nat]>
	drop: ().as<frozen-dict<nat, nat>>
	drop: ().as<frozen-set nat>
	drop: ().as<hamt-set nat>
	drop: ().as<index-set>
	drop: list<nat>
	drop: ().as<nat mut[]>
	drop: ().as<mut-deque nat>
	drop: ().as<nat mut[nat]>
	drop: ().as<mut-grid nat>
	drop: ().as<mut-priority-queue<nat, nat>>
	drop: ().as<mut-set nat>
	drop: ().as<mut-sorted-dict<nat, nat>>
	drop: ().as<mut-sorted-set nat>
	drop: ().as<mut-stack nat>
	drop: perf-now
	drop: ().as<priority-queue<nat, nat>>
	drop: ().as<set nat>
	drop: ().as<sorted-set nat>
	drop: ().as<stack nat>
	drop: ().as<tree-set nat>
	drop: ().as<queue nat>
	drop: gmt
	drop: ((() => none),) as<iterator<nat>>
	drop: "".json-str
	drop: [] parse-named-args []
	run-all-tests
	0 resolved

test
	1 + 1 is 2
	info log "I am a test!"

test
	info log "READER TEST START"

	r reader = "\"j\"",
	if s ?= r take-quoted-str!
		info log "GOT A STRING: {s}"
	else
		info log "GOT NOTHIN"

	info log "READER TEST DONE"

import
	crow/col/fix-arr: begin-ptr, cast-immutable, size, subscript, uninitialized-fix-arr
	crow/extra-types: fd-t
	crow/io/print: print
	crow/ptr: ==, as-any-ptr, null, ptr-cast, ptr-cast-to-extern, ptr-to, size-of, subscript
	crow/str-util: as-str, bytes, to-c-str
	arpa/inet: inet_addr, inet_ntoa
	netdb: gethostbyname, getprotobyname, h_addr_list, p_proto
	netinet/in: htons, in_addr, sockaddr_in
	sys/socket: AF_INET, connect, sockaddr, socket, SOCK_STREAM
	unistd: read, write

main fut nat(_ str[]) unsafe summon
	hostname = "duckduckgo.com"
	socket = get-tcp-socket
	socket connect-socket! hostname, 80

	request = "GET / HTTP/1.1\r\nHost: duckduckgo.com\r\n\r\n"

	socket send-request! request
	socket receive-response!

	print: "Hello, world!"
	0 resolved

.get-tcp-socket fd-t() unsafe summon
	protoent = "tcp".to-c-str getprotobyname
	assert: protoent.as-any-ptr != null
	socket-file-descriptor = AF_INET socket SOCK_STREAM, protoent.p_proto
	forbid: socket-file-descriptor == -1
	socket-file-descriptor

.connect-socket! void(socket fd-t, hostname str, server-port nat16) unsafe summon
	hostent = hostname.to-c-str gethostbyname
	assert: hostent.as-any-ptr != null
	in_addr0 = hostent.h_addr_list[].ptr-cast@<in_addr, char>
	in_addr = in_addr0[].inet_ntoa inet_addr

	sockaddr_in = AF_INET sockaddr_in server-port.htons, in_addr.in_addr
	sockaddr = sockaddr_in.ptr-to ptr-cast-to-extern<sockaddr, sockaddr_in>
	assert: (socket connect sockaddr, sockaddr_in.size-of.to-nat32) == 0

.send-request! void(socket fd-t, request str) unsafe summon
	forbid: request is-empty
	socket send-request-recur! request.bytes
.send-request-recur! void(socket fd-t, bytes nat8[])
	bytes-sent = socket write bytes.begin-ptr, bytes.size
	# TODO: might be 0 if the socket is overloaded -- delay and try again
	assert: bytes-sent > 0
	if bytes-sent < bytes.size.to-int
		socket send-request-recur! bytes[bytes-sent.to-nat -> bytes.size]
	else
		assert: bytes-sent == bytes.size.to-int

.receive-response! void(socket fd-t) unsafe summon
	buffer = 0x2000 uninitialized-fix-arr@<nat8>
	# TODO: use epoll like we did in the server, for a non-blocking read.
	bytes-read = socket read buffer.begin-ptr, buffer.size
	assert: bytes-read >= 0
	if bytes-read > 0
		print: "Read (possibly partial) response:"
		print: buffer[0 -> bytes-read.to-nat].cast-immutable as-str
		# TODO: Response might be partial. The parser will have to tell us that.


import
	crow/extra-types: fd-t
	crow/io/print: out, print
	arpa/inet: inet_addr, inet_ntoa
	netdb: gethostbyname, getprotobyname, h_addr_list, p_proto
	netinet/in: htons, in_addr, new, sockaddr_in
	sys/socket: AF_INET, connect, sockaddr, socket, SOCK_STREAM
	unistd: read, write

main nat^(_ string[]) unsafe summon
	hostname = "duckduckgo.com"
	socket = get-tcp-socket
	socket connect-socket hostname, 80

	request = "GET / HTTP/1.1\r\nHost: duckduckgo.com\r\n\r\n"

	socket send-request request
	socket receive-response
	()

.get-tcp-socket fd-t() unsafe summon
	protoent = "tcp" getprotobyname
	forbid protoent == null
	socket-file-descriptor = AF_INET socket SOCK_STREAM, protoent->p_proto
	forbid socket-file-descriptor == max-nat64
	socket-file-descriptor to-int32

.connect-socket void(socket fd-t, hostname string, server-port nat16) unsafe summon
	hostent = hostname.to-c-string gethostbyname
	forbid hostent == null
	in_addr0 in_addr* = hostent->h_addr_list->pointer-cast
	in_addr = in_addr0->inet_ntoa inet_addr

	sockaddr_in mut sockaddr_in = AF_INET, server-port.htons, (in_addr,)
	sockaddr sockaddr mut* = (&sockaddr_in)::sockaddr_in mut* pointer-cast
	err = socket.to-nat64 connect sockaddr, (size-of@<sockaddr_in> to-nat32)
	assert err == 0

.send-request void(socket fd-t, request string) unsafe summon
	forbid request is-empty
	bytes mut = request.to-bytes to-array
	loop
		bytes-sent = socket write bytes.begin-pointer, bytes.size
		# TODO: might be 0 if the socket is overloaded -- delay and try again
		assert bytes-sent > 0
		if bytes-sent < bytes.size.to-int64
			bytes := bytes[bytes-sent.to-nat64 .. bytes.size]
			continue
		else
			assert bytes-sent == bytes.size.to-int64
			break

.receive-response void(socket fd-t) unsafe summon
	buffer mut-array nat8 = 0x2000 uninitialized-mut-array
	# TODO: use epoll like we did in the server, for a non-blocking read.
	bytes-read = socket read buffer.begin-pointer, buffer.size
	assert bytes-read >= 0
	if bytes-read > 0
		out print "Read (possibly partial) response:"
		out print buffer[0 .. bytes-read.to-nat64].cast-immutable.to-list.as-string
		# TODO: Response might be partial. The parser will have to tell us that.


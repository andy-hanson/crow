import
	crow/io/print: clear-screen, print
	crow/io/stdin: read-stdin-until-parse
	#log: info, log
	crow/str-util: repeat, strip
	./board:
		board, board-cache, can-place, color, empty-board, has-empty, just-won, new, opposite,
		place, red, set-subscript, subscript, to-str, width

main fut nat(_ str[]) summon
	print: "Select a game:\n(If using hard CPU, compile with --optimize)\n"
	print: "2: 2-player game\nE: Easy\nM: Medium\nH: Hard\nH2: Hard and CPU goes first\nCPU: CPU vs CPU\n"
	#settings = "Invalid option" read-stdin-until-parse it => it parse-settings
	settings ai-settings = (11,), (11,)
	empty-board print-board red, ()
	winner <- empty-board play-recur red, settings
	print: winner show-winner
	0,

# TODO:PRIVATE
parse-settings ai-settings?(a str)
	if a == "2"
		((), ()),
	elif a == "E"
		((), (6,)),
	elif a == "M"
		((), (8,)),
	elif a == "H"
		((), (10,)),
	elif a == "H2"
		((10,), ()),
	elif a == "CPU"
		((10,), (10,)),

.show-winner str(winner color?)
	if w ?= winner
		"{w} wins!"
	else
		"It's a tie."

.ai-settings record
	ai-depth-red nat?
	ai-depth-blue nat?

.ai-depth-for-color nat?(color color, ai-settings ai-settings)
	match color
	as red
		ai-settings ai-depth-red
	as blue
		ai-settings ai-depth-blue

.play-recur fut color?(board board, cur-player color, ai-settings ai-settings) summon
	x <- if depth ?= cur-player ai-depth-for-color ai-settings
		board ai-best-x depth
	else
		(board human-player-move cur-player),
	new-board = board place x
	other-player = cur-player opposite
	new-board print-board other-player, (x,)
	if new-board just-won
		(cur-player,),
	elif new-board has-empty
		new-board play-recur other-player, ai-settings
	else
		(),

.print-board void(a board, cur-player color, last-x nat?) summon
	clear-screen
	print: a to-str cur-player, last-x

.human-player-move nat(board board, color color) summon
	print: "{color} player, where will you go? (Type a letter A-G and hit enter)"
	board human-player-move-recur
.human-player-move-recur nat(board board) summon
	column = "Not a valid column." read-stdin-until-parse it => it column-of-str
	if board can-place column
		column
	else
		print: "Can't, column is full."
		board human-player-move-recur

.column-of-str nat?(a str)
	if n ?= a.strip letter-to-number
		if n < width
			n,

.letter-to-number nat?(a str)
	chars = a char8s
	if chars.size == 1
		n = chars[0] to-nat8
		# TODO: type annotation should be unnecessary
		if "A"::char.to-nat8 <= n && n < "Z"::char.to-nat8
			(n - "A"::char.to-nat8 to-nat64),
		elif "a"::char.to-nat8 <= n && n < "z"::char.to-nat8
			(n - "a"::char.to-nat8 to-nat64),

.strategy record
	by-val
	x nat
	score int32

.score-and-best record
	by-val
	score int32
	best strategy

score-cache alias
	board-cache int32

# Return a fut as this may do a lot of processing
.ai-best-x fut nat(board board, ai-depth nat)
	<- delay
	# Use a new cache each time, since each turn we're exploring to a further depth.
	cache board-cache int32 = ()
	(cache strategy-recur board, ai-depth, (0, min-int32), 0, 0 x),

.strategy-score int32(cache score-cache, board board, ai-depth nat)
	if cached ?= cache[board]
		cached
	else
		res = cache strategy-recur board, ai-depth, (0, min-int32), 0, 0 score
		cache[board] := res
		res

.strategy-recur strategy(cache score-cache, board board, ai-depth nat, best strategy, sum-score int, x nat)
	if x == width
		best.x, sum-score.clamp-to-int32
	else
		score-and-best score-and-best = if board can-place x
			new-board = board place x
			score = if new-board just-won
				(width ** ai-depth).to-int64 clamp-to-int32
			elif ai-depth == 0
				0
			else
				-(cache strategy-score new-board, ai-depth - 1)
			new-strategy = score <= best.score ? best : x, score
			score, new-strategy
		else
			0, best
		cache strategy-recur board, ai-depth, score-and-best.best, (sum-score + score-and-best.score.to-int64), x + 1

indent str(depth nat)
	" " repeat 2 * (9 - depth)

import
	crow/col/arr-util: each
	crow/crypto/experimental/login-cookie:
		cookie, cookie-matches, from-bytes, generate-login-cookie, login-cookie,
		parse-login-cookie, to-bytes, to-str
	crow/crypto/password-hash: password-hash, password-matches-hash, quality-moderate
	crow/db/lmdb:
		add, close-db, close-env, count, from-lmdb-key, get, lmdb-db, lmdb-env,
		lmdb-key-flags, lmdb-txn, map, new, open-db, open-env, set, to-lmdb-key,
		transaction-abort, transaction-commit, try-add, with-abortable-write-transaction, with-env,
		with-read-transaction, with-test-env, with-write-transaction, zip
	crow/io/print: print
	crow/log: info, log
	crow/reader: parse-nat
	crow/serialize: from-bytes, to-bytes
	crow/str-util: try-split-once

main fut nat(_ str[]) unsafe summon
	db-path with-env (true,), env =>
		env with-db db =>
			if false
				match db register-user "alice", "swordfish"
				as register-user-success user-id
					print: "Success: user is {user-id}"
				as user-already-exists
					print: "That user already exists"

			cookie = match db login "alice", "swordfish"
			as ok o
				o
			as err _
				throw: "TODO"
			first-post = db add-post cookie, "hello world"
			pi = db get-post-info first-post
			print: "{pi user-name} ({pi user}): {pi content}"

			print: "users:"
			db.list-users each user =>
				print: user.to-str
			print: "posts:"
			db.list-posts each post =>
				print: post.to-str
	()

user alias
	nat

user-info record
	user user
	user-name str

to-str str(a user-info)
	"user {a user}: {a user-name}"

post alias
	nat

post-info record
	post post
	user user
	user-name str
	content str

to-str str(a post-info)
	"post {a post}: {a user-name} (user {a user}) says: {a content}"

user-cookie record
	user nat
	inner login-cookie

parse-user-cookie user-cookie?(a str)
	if split ?= a try-split-once "|"
		if user ?= split.a parse-nat
			if inner ?= split.b parse-login-cookie
				(user, inner),

to-str str(a user-cookie)
	"{a user}|{a inner}"

db record mut
	.env lmdb-env
	.user-from-name lmdb-db<str, user>
	.user-name lmdb-db<user, str>
	.user-password-hash lmdb-db<user, nat8[]>
	.user-login-cookie lmdb-db<user, login-cookie>
	.post-user lmdb-db<post, user>
	.post-content lmdb-db<post, str>

open-real-db db() unsafe summon
	env = db-path open-env (true,)
	env db-open

close-real-db void(db db) unsafe summon
	db db-close
	db.env close-env

.with-db<a> a(env lmdb-env, f act a(db)) trusted summon
	db = env db-open
	(() => db db-close) finally () => f[db]

.db-open db(env lmdb-env) unsafe summon
	user-from-name lmdb-db<str, user> = env open-db "user-from-name"
	user-name lmdb-db<user, str> = env open-db "user-name"
	user-password-hash lmdb-db<user, nat8[]> = env open-db "user-password-hash"
	user-login-cookie lmdb-db<user, login-cookie> = env open-db "user-login-cookie"
	post-user lmdb-db<post, user> = env open-db "post-user"
	post-content lmdb-db<post, str> = env open-db "post-content"
	env, user-from-name, user-name, user-password-hash, user-login-cookie, post-user, post-content

.db-close void(db db) unsafe summon
	db.env close-db db.user-from-name
	db.env close-db db.user-name
	db.env close-db db.user-password-hash
	db.env close-db db.post-user
	db.env close-db db.post-content

list-users user-info[](db db) summon
	db.env with-read-transaction txn =>
		txn map db.user-name, (user, name) =>
			user, name

user-name str(db db, user user) summon
	db.env with-read-transaction txn =>
		(txn get db.user-name, user)!

list-posts post-info[](db db) summon
	db.env with-read-transaction txn =>
		txn zip db.post-user, db.post-content, (post, user, content) =>
			user-name = (txn get db.user-name, user)!
			post, user, user-name, content

register-user-result union
	register-user-success user
	user-already-exists
== bool(a register-user-result, b register-user-result) noctx
	match a
	as register-user-success sa
		match b
		as register-user-success sb
			sa == sb
		as user-already-exists
			false
	as user-already-exists
		match b
		as register-user-success _
			false
		as user-already-exists
			true

register-user register-user-result(db db, user-name str, password str) summon
	db.env with-abortable-write-transaction txn =>
		new-user-id = txn count db.user-from-name
		user-count-check = txn count db.user-name
		assert: new-user-id == user-count-check
		if txn try-add db.user-from-name, user-name, new-user-id
			txn add db.user-name, new-user-id, user-name
			hash = password password-hash quality-moderate
			txn add db.user-password-hash, new-user-id, hash
			new-user-id.register-user-success, transaction-commit
		else
			user-already-exists, transaction-abort

login-error enum
	empty-name-or-password
	user-does-not-exist
	wrong-password

login result<user-cookie, login-error>(db db, user-name str, password str) summon
	if user-name.is-empty || password.is-empty
		empty-name-or-password err
	else
		db.env with-write-transaction txn =>
			if user ?= db get-user txn, user-name
				hash = (txn get db.user-password-hash, user)!
				if password password-matches-hash hash
					cookie = generate-login-cookie
					txn set db.user-login-cookie, user, cookie
					(user, cookie) ok
				else
					wrong-password err
			else
				user-does-not-exist err

.get-post-info post-info(db db, post post) summon
	db.env with-read-transaction txn =>
		user = (txn get db.post-user, post)!
		user-name = (txn get db.user-name, user)!
		content = (txn get db.post-content, post)!
		post, user, user-name, content

add-post post(db db, cookie user-cookie, content str) summon
	db.env with-write-transaction txn =>
		user = db authenticate txn, cookie
		post = txn count db.post-user
		txn add db.post-user, post, user
		txn add db.post-content, post, content
		post

.get-user user?(db db, txn lmdb-txn, user-name str) summon
	txn get db.user-from-name, user-name

.authenticate user(db db, txn lmdb-txn, cookie user-cookie) summon
	if db try-authenticate txn, cookie
		cookie user
	else
		"Login cookie invalid (may have expired)" throw

.try-authenticate bool(db db, txn lmdb-txn, cookie user-cookie) summon
	if login-cookie ?= txn get db.user-login-cookie, cookie.user
		login-cookie cookie-matches cookie.inner.cookie, cookie-expire-seconds

.db-path str()
	"demo-wip/webapp/db"

cookie-expire-seconds nat()
	5 * 60

test
	info log "GONNA TEST"
	with-test-env: env =>
		env with-db db =>
			# TODO: way more tests

			info log "A"
			db register-user "alice", "swordfish" is register-user-success: 0
			info log "B"
			db register-user "bob", "gunfish" is register-user-success: 1
			# TODO: test failed register

			# TODO: test failed login
			info log "C"
			alice-login = match db login "alice", "swordfish"
			as ok o
				o
			as err _
				"TODO" throw
			info log "D"
			post = db add-post alice-login, "Curiouser and curiouser!"

			info log "E"
			post-info = db get-post-info post
			info log "F"
			post-info.user is 0
			info log "G"
			post-info.user-name is "alice"
			info log "H"
			post-info.content is "Curiouser and curiouser!"

	"a" is "a"
	info log "YAY, DID TEST"

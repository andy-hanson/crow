import
	crow/io/file: read-file
	crow/io/net/http-server: http-handler, http-server, with-block
	crow/io/net/http-types:
		headers, http-bad-query, http-forbidden, http-not-found, http-ok, http-request,
		http-response, method, request-body-string, url
	crow/io/print: err, out, print
	crow/io/stdin: read-stdin
	crow/json: json, new, to-string
	crow/parse: nat, parse, to-string
	./db:
		add-post, content, cookie-expire-seconds, db, list-posts, list-users, login, open-real-db,
		post, post-info, register-user, to-string, user, user-cookie, user-info, user-name,
		with-block

main nat^(args string[]) unsafe summon
	if args.size == 1
		port = args[0]
		with db : open-real-db
			handler http-handler = req =>
				(req handle-request db),
			with _ : port http-server handler
				out print "Press enter to stop"
				_ <- read-stdin
				()
	else
		err print "Usage: server PORT"
		1,

.handle-request http-response(req http-request, db db) summon
	su = req.url split-url
	path = su path
	query = su query
	match req method
	as http-get
		if path == "/"
			"demo-wip/webapp/index.html".read-file http-ok
		elif path == "/index.js"
			"demo-wip/webapp/index.js".read-file http-ok
		elif path == "/posts"
			(("posts", db.list-posts.json),)::json.to-string http-ok
		elif path == "/user-name"
			user = query parse-query-single "user"
			match nat parse user
			as ok user-id
				db user-name user-id http-ok
			as err e
				"{e}" http-bad-query
		elif path == "/users"
			(("users", db.list-users.json),)::json.to-string http-ok
		else
			http-not-found
	as http-post
		if path == "/register"
			args = req.request-body-string parse-query ("user-name", "password")
			match db register-user args[0], args[1]
			as register-user-success user-id
				# We need to get: user-name and password
				(("userId", user-id.json),)::json.to-string http-ok
			as bad-user-name message
				"Bad user name: {message}" http-bad-query
			as user-already-exists
				"User already exists" http-bad-query
		elif path == "/login"
			args = req.request-body-string parse-query ("user-name", "password")
			user-name = args[0]
			password = args[1]
			match db login user-name, password
			as ok cookie
				"Logged in as {user-name}" http-ok (("Set-Cookie", "login={cookie}; Max-Age={cookie-expire-seconds}"),)
			as err e
				match e
				as empty-name-or-password
					"Invalid user or password" http-bad-query
				as user-does-not-exist
					"User does not exist" http-not-found
				as wrong-password
					"Wrong password" http-forbidden
		elif path == "/post"
			if cookie ?= (req.headers["Cookie"] ?? "") parse-cookie "login"
				match user-cookie parse cookie
				as ok user-cookie
					post = db add-post user-cookie, req.request-body-string
					(("postId", post.json),)::json.to-string http-ok
				as err e
					"Error parsing 'login' cookie: {e}" http-forbidden
			else
				"Missing login cookie" http-forbidden
		else
			http-not-found
	#descr = req describe-request
	#200, "OK", dict, "Your request:\n{descr}"

.url record
	path string
	query string

.split-url url(url-string string)
	if split ?= url-string try-split-once "?"
		split.a, split.b
	else
		url-string, ""

# Extra cookies are ignored
.parse-cookies string?[](cookies-string string, cookie-names string[])
	res string? mut[] = cookie-names.size fill-mut-list ()
	for part : cookies-string split-by "; "
		if pair ?= part try-split-once "="
			if index ?= cookie-names index-of pair.a
				res[index] := pair.b,
	res move-to-list

.parse-cookie string?(cookies-string string, cookie-name string)
	(cookies-string parse-cookies (cookie-name,))[0]

# Result parallels 'arg-names'. Defaults to empty strings.
.parse-query string[](s string, arg-names string[])
	res string mut[] = arg-names.size fill-mut-list ""
	for part : s split-by "&"
		if pair ?= part try-split-once "="
			if index ?= arg-names index-of pair.a
				res[index] := pair b
	res move-to-list

.parse-query-single string(s string, arg-name string)
	(s parse-query (arg-name,))[0]

.json json(a user-info)
	("user", a.user.json), ("userName", a.user-name.json)

.json json(a post-info)
	("post", a.post.json), ("user", a.user.json), ("userName", a.user-name.json), ("content", a.content.json)

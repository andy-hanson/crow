import
	crow/col/arr-util: each, index-of
	crow/col/dict: dict, subscript
	crow/col/fix-arr: fill-fix-arr, map-to-arr-with-index, set-subscript
	crow/io/file: read-file
	crow/io/net/http-server: http-handler, start-http-server
	crow/io/net/http-types:
		body, headers, http-bad-query, http-not-found, http-request, http-response, method, url
	crow/io/print: print
	crow/str-util: split-by, try-split-once
	crow/tuple: a, b
	crow/writer: ~=, backup!, move-to-str!, writer
	./db:
		add-post!, close-real-db, content, cookie-expire-seconds, db, list-posts, list-users,
		login!, post, post-info, open-real-db, parse-user-cookie, register-user!, to-str, user,
		user-info, user-name

main fut nat(args str[]) unsafe summon
	if args.size != 1
		print: "Usage: server PORT"
		1 resolved
	else
		port = args[0]
		db = open-real-db
		handler http-handler = req =>
			req handle-request db resolved
		server = port start-http-server handler
		# TODO: do this after we've stopped the server
		if false
			db close-real-db
		drop: server
		0 resolved

.handle-request http-response(req http-request, db db) summon
	su = req.url split-url
	path = su path
	query = su query
	match req method
	as http-get
		if path == "/"
			200 http-response "OK", dict, "demo-wip/webapp/index.html".read-file
		elif path == "/index.js"
			200 http-response "OK", dict, "demo-wip/webapp/index.js".read-file
		elif path == "/posts"
			200 http-response "OK", dict, db.list-posts.format-posts-as-json
		elif path == "/user-name"
			user = (query parse-query ["user"])[0].parse-nat force
			200 http-response "OK", dict, (db user-name user)
		elif path == "/users"
			200 http-response "OK", dict, db.list-users.format-users-as-json
		else
			http-not-found
	as http-post
		if path == "/register"
			args = req.body parse-query ["user-name", "password"]
			user-name = args[0]
			password = args[1]
			match db register-user! user-name, password
			as register-user-success user-id
				# We need to get: user-name and password
				200 http-response "OK", dict, "\{\"userId\":{user-id}}"
			as user-already-exists
				400 http-response "User already exists", dict, "User already exists"
		elif path == "/login"
			args = req.body parse-query ["user-name", "password"]
			user-name = args[0]
			password = args[1]
			match db login! user-name, password
			as ok cookie
				headers = dict: ["Set-Cookie" -> "login={cookie}; Max-Age={cookie-expire-seconds}"]
				200 http-response "OK", headers, "Logged in as {user-name}"
			as err e
				match e
				as empty-name-or-password
					"Invalid user or password" http-bad-query
				as user-does-not-exist
					"User does not exist" http-not-found
		elif path == "/post"
			if cookie ?= req.headers["Cookie"]
				user-cookie = (cookie parse-cookies ["login"])[0].parse-user-cookie force
				post = db add-post! user-cookie, req.body
				200 http-response "OK", dict, "\{\"postId\":{post}}"
			else
				403 http-response "No login cookie", dict, "No login cookie"
		else
			http-not-found
	#descr = req describe-request
	#http-response: 200, "OK", dict, "Your request:\n{descr}"

url record
	path str
	query str

split-url url(url-str str)
	if split ?= url-str try-split-once "?"
		split.a url split.b
	else
		url-str url ""

# Extra cookies are ignored
parse-cookies str[](s str, cookie-names str[])
	res = cookie-names.size fill-fix-arr<str?> none
	s split-by "; " each part =>
		if pair ?= part try-split-once "="
			if index ?= cookie-names index-of pair.a
				res[index] := pair.b some
	res map-to-arr-with-index (x, index) =>
		x or-throw () => "Did not get cookie value for {cookie-names[index]}"

parse-query str[](s str, arg-names str[])
	res = arg-names.size fill-fix-arr<str?> none
	s split-by "&" each part =>
		if pair ?= part try-split-once "="
			if index ?= arg-names index-of pair.a
				res[index] := pair.b some
			else
				throw: "Unexpected key {pair a}"
		else
			throw: "Invalid part: {part}"
	res map-to-arr-with-index (x, index) =>
		x or-throw () => "Did not get argument for {arg-names[index]}"

.format-users-as-json str(users user-info[])
	res = writer
	res ~= "\{\"users\":["
	users each user =>
		res ~= "\{\"user\":"
		res ~= user user
		res ~= ",\"userName\":\""
		res ~= user user-name
		res ~= "\"},"
	if !users.is-empty
		res backup!
	res ~= "]}"
	res move-to-str!

.format-posts-as-json str(posts post-info[])
	res = writer
	res ~= "\{\"posts\":["
	posts each post =>
		# TODO: module for proper json formatting
		res ~= "\{\"post\":"
		res ~= post post
		res ~= ",\"user\":"
		res ~= post user
		res ~= ",\"userName\":\""
		res ~= post user-name
		res ~= "\",\"content\":\""
		res ~= post content
		res ~= "\"},"
	if !posts.is-empty
		res backup!
	res ~= "]}"
	res move-to-str!
